"[\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 1,\n        \"fields\": {\n            \"channel_short_code\": \"CBS\",\n            \"channel_name\": \"CBS\",\n            \"description\": \"CBS is an American English language commercial broadcast television and radio network that is a flagship property of CBS Corporation. The company is headquartered at the CBS Building in New York City with major production facilities and operations in New York City and Los Angeles\",\n            \"website_link\": \"http://cbs.com\",\n            \"youtube_link\": null,\n            \"facebook_link\": \"https://www.facebook.com/CBS/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"country\": 2,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:44:09.335Z\",\n            \"updated\": \"2019-07-01T00:44:09.335Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 2,\n        \"fields\": {\n            \"channel_short_code\": \"Dawn News\",\n            \"channel_name\": \"Dawn News\",\n            \"description\": \"Dawn is Pakistan's oldest, leading and most widely read English-language newspaper and is the country's newspaper of record. It is one of the country's three largest English-language dailies and the flagship of the Dawn Group of Newspapers.\",\n            \"website_link\": \"https://en.wikipedia.org/wiki/Dawn_(newspaper)\",\n            \"youtube_link\": \"https://www.youtube.com/user/dawnnewspakistan\",\n            \"facebook_link\": \"https://www.facebook.com/DawnNews/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:46:09.650Z\",\n            \"updated\": \"2019-07-01T02:51:51.851Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 3,\n        \"fields\": {\n            \"channel_short_code\": \"Dunya News\",\n            \"channel_name\": \"Dunya News\",\n            \"description\": \"Dunya News is a 24 hours Urdu language news and current affairs television channel from Pakistan. It is governed and operated by the National Communication Services Pvt. Ltd. Its head office is situated at Lahore, Pakistan. \\r\\n\\r\\nhttps://en.wikipedia.org/wiki/Dunya_News\",\n            \"website_link\": \"https://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": \"https://www.facebook.com/dunyanews/\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:47:44.156Z\",\n            \"updated\": \"2019-07-01T02:53:25.223Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 4,\n        \"fields\": {\n            \"channel_short_code\": \"Geo News\",\n            \"channel_name\": \"Geo News\",\n            \"description\": \"\",\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:54:22.633Z\",\n            \"updated\": \"2019-07-01T05:54:22.633Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 5,\n        \"fields\": {\n            \"channel_short_code\": \"GNN\",\n            \"channel_name\": \"GNN\",\n            \"description\": \"G News Network, commonly known as GNN, is a Pakistani 24-hour news and current affairs channel based in Lahore, Pakistan. It is owned and operated by Gourmet Foods.\",\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://www.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T08:42:51.088Z\",\n            \"updated\": \"2019-07-01T08:42:51.088Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 6,\n        \"fields\": {\n            \"channel_short_code\": \"HUM TV\",\n            \"channel_name\": \"HUM TV\",\n            \"description\": \"Hum TV is a 24-hour Urdu General Entertainment TV channel based in Karachi, Pakistan. It was founded by Sultana Siddiqui and Duraid Qureshi. It is owned by Hum Network Limited. Hum Network Limited was known as Eye Television Network Limited prior to 21 January 2011. Hum TV began its transmission on 17 January 2005.\",\n            \"website_link\": \"https://www.hum.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCEeEQxm6qc_qaTE7qTV5aLQ\",\n            \"facebook_link\": \"https://www.facebook.com/humtvpakistan\",\n            \"twitter_link\": null,\n            \"instagram_link\": \"https://www.instagram.com/humtvpakistanofficial/\",\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:46:01.465Z\",\n            \"updated\": \"2019-07-01T19:46:01.465Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 7,\n        \"fields\": {\n            \"channel_short_code\": \"92 News\",\n            \"channel_name\": \"92 News\",\n            \"description\": \"92 News is an Urdu language channel. It is Pakistan's first HD television news channel based in Lahore, launched in year 2015. On 1992 Pakistan won the Cricket World Cup so channel name based on this event. 92 is the country code of Pakistan and it counts as another major reason in this subject.\",\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T16:50:37.123Z\",\n            \"updated\": \"2019-07-02T16:50:37.123Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 8,\n        \"fields\": {\n            \"channel_short_code\": \"ARY News\",\n            \"channel_name\": \"ARY News\",\n            \"description\": \"ARY News is a Pakistani news channel launched on 26 September 2004. A bilingual news channel in English and Urdu, it is a part of the ARY Digital Network, which is a subsidiary of ARY Group. ARY is an acronym of Abdul Razzak Yaqoob, who was the owner of ARY Group.\",\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCMmpLL2ucRHAXbNHiCPyIyg\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:22:21.278Z\",\n            \"updated\": \"2019-07-02T17:22:21.278Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 9,\n        \"fields\": {\n            \"channel_short_code\": \"Aap News\",\n            \"channel_name\": \"Aap News\",\n            \"description\": \"AAP Media Network bringing two News Channel in Pakistan. AAP NEWS is a urdu based news channel and INDUS NEWS an English Language news channel for local and international audience.\",\n            \"website_link\": \"https://aapnews.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCPTF7suymU_TvRvRPYuHdvA\",\n            \"facebook_link\": \"https://web.facebook.com/aapnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aapnewspk\",\n            \"instagram_link\": \"https://www.instagram.com/aapnewspk/\",\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T07:51:33.036Z\",\n            \"updated\": \"2019-07-03T07:51:33.036Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 10,\n        \"fields\": {\n            \"channel_short_code\": \"24 News\",\n            \"channel_name\": \"24 News\",\n            \"description\": \"24 News HD is an Urdu language current affairs television channel in Pakistan based in Lahore, launched in 2015.\",\n            \"website_link\": \"https://www.24newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCcmpeVbSSQlZRvHfdC-CRwg\",\n            \"facebook_link\": \"https://web.facebook.com/24NewsHD.tv?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/24NewsHDtv\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:43:35.063Z\",\n            \"updated\": \"2019-07-03T09:43:35.063Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 11,\n        \"fields\": {\n            \"channel_short_code\": \"Neo News\",\n            \"channel_name\": \"Neo News\",\n            \"description\": \"Neo News HD is an Urdu language Pakistani news channel based in Lahore, launched on 15 May 2015.\",\n            \"website_link\": \"https://www.neonetwork.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCAsvFcpUQegneSh0QAUd64A\",\n            \"facebook_link\": \"https://web.facebook.com/neotvnetwork/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/NeoNewsUR\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:18:33.164Z\",\n            \"updated\": \"2019-07-03T18:18:33.164Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 12,\n        \"fields\": {\n            \"channel_short_code\": \"Express News\",\n            \"channel_name\": \"Express News\",\n            \"description\": \"Express News is an Urdu language Pakistani television news channel Based in karachi, launched on January 1, 2008. It is owned and run by the country's third largest Urdu daily, Daily Express.\",\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://web.facebook.com/expressnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:42:42.361Z\",\n            \"updated\": \"2019-07-03T18:42:42.361Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 13,\n        \"fields\": {\n            \"channel_short_code\": \"Aaj News\",\n            \"channel_name\": \"Aaj News\",\n            \"description\": \"Aaj News is a 24-hour Pakistani news television channel. The word Aaj in English means \\\"Today\\\". It is a privately owned Urdu language TV station which covers national and international news.\",\n            \"website_link\": \"https://www.aaj.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCgBAPAcLsh_MAPvJprIz89w\",\n            \"facebook_link\": \"https://web.facebook.com/aajtv0/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aaj_urdu\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:04:12.604Z\",\n            \"updated\": \"2019-07-03T19:15:04.745Z\"\n        }\n    }\n]\n":1hipgE:moatWxcb7AYqIl1b5-yNxL408hY