"[\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 94,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:11.831Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:11.451Z\",\n            \"updated\": \"2019-07-06T12:34:11.831Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 95,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:34.129Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:33.880Z\",\n            \"updated\": \"2019-07-06T12:34:34.129Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_uGSehYL.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 96,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:56.237Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:55.997Z\",\n            \"updated\": \"2019-07-06T12:34:56.237Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_euQl3LR.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 97,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:35:19.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:35:18.808Z\",\n            \"updated\": \"2019-07-06T12:35:19.410Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 98,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:35:39.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:35:39.668Z\",\n            \"updated\": \"2019-07-06T12:35:39.907Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 99,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:01.487Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:01.328Z\",\n            \"updated\": \"2019-07-06T12:36:01.487Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 100,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:23.644Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:23.448Z\",\n            \"updated\": \"2019-07-06T12:36:23.644Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 101,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:33.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:33.206Z\",\n            \"updated\": \"2019-07-06T12:36:33.410Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 102,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:55.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:54.778Z\",\n            \"updated\": \"2019-07-06T12:36:55.159Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 103,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:37:17.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:37:17.283Z\",\n            \"updated\": \"2019-07-06T12:37:17.465Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_8ZyT7rC.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 104,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:37:39.467Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:37:39.332Z\",\n            \"updated\": \"2019-07-06T12:37:39.467Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 105,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:01.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:01.329Z\",\n            \"updated\": \"2019-07-06T12:38:01.617Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 106,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:24.124Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:23.820Z\",\n            \"updated\": \"2019-07-06T12:38:24.124Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 107,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:45.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:45.284Z\",\n            \"updated\": \"2019-07-06T12:38:45.509Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 108,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:02.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:02.469Z\",\n            \"updated\": \"2019-07-06T12:39:02.639Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 109,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:23.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:23.685Z\",\n            \"updated\": \"2019-07-06T12:39:23.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 110,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:46.342Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:46.123Z\",\n            \"updated\": \"2019-07-06T12:39:46.342Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 111,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:08.540Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:08.406Z\",\n            \"updated\": \"2019-07-06T12:40:08.540Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 112,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:30.581Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:30.339Z\",\n            \"updated\": \"2019-07-06T12:40:30.581Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 113,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:52.418Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:52.203Z\",\n            \"updated\": \"2019-07-06T12:40:52.418Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 114,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:14.664Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:14.436Z\",\n            \"updated\": \"2019-07-06T12:41:14.664Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 115,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:37.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:37.215Z\",\n            \"updated\": \"2019-07-06T12:41:37.620Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 116,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:59.436Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:59.298Z\",\n            \"updated\": \"2019-07-06T12:41:59.436Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 117,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:42:21.431Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:42:21.311Z\",\n            \"updated\": \"2019-07-06T12:42:21.431Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 118,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:42:43.357Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:42:43.248Z\",\n            \"updated\": \"2019-07-06T12:42:43.357Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 119,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:05.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:05.648Z\",\n            \"updated\": \"2019-07-06T12:43:05.913Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 120,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:28.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:27.856Z\",\n            \"updated\": \"2019-07-06T12:43:28.007Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_Kqawosa.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 121,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:50.760Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:50.339Z\",\n            \"updated\": \"2019-07-06T12:43:50.760Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 122,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:12.114Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:11.889Z\",\n            \"updated\": \"2019-07-06T12:44:12.114Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 123,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:34.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:33.724Z\",\n            \"updated\": \"2019-07-06T12:44:34.164Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 124,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:56.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:56.209Z\",\n            \"updated\": \"2019-07-06T12:44:56.463Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 125,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:45:19.560Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:45:19.453Z\",\n            \"updated\": \"2019-07-06T12:45:19.560Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 126,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:45:40.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:45:40.817Z\",\n            \"updated\": \"2019-07-06T12:45:40.944Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 127,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:02.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:02.320Z\",\n            \"updated\": \"2019-07-06T12:46:02.571Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 128,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:24.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:24.720Z\",\n            \"updated\": \"2019-07-06T12:46:24.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 129,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:47.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:47.354Z\",\n            \"updated\": \"2019-07-06T12:46:47.584Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 130,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:18:05.691Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:47:09.285Z\",\n            \"updated\": \"2019-07-07T06:18:05.691Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-test-upload-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 131,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T05:36:38.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:47:21.773Z\",\n            \"updated\": \"2019-07-07T05:36:38.300Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 32,\n                \"td\": \"4068.48\",\n                \"te\": \"2019-07-06T05:47:32.781174\",\n                \"ts\": \"2019-07-06T05:47:28.712694\"\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-2019-07-06-1-admin-feed_id_44-dol-subah_l0OcfcZ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 132,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:55.287Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:00.381Z\",\n            \"updated\": \"2019-07-07T06:39:55.287Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2435.302\",\n                \"time_end\": \"2019-07-06T23:39:55.287530\",\n                \"time_start\": \"2019-07-06T23:39:52.852228\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_M3l7t89.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 133,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:58.698Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:23.099Z\",\n            \"updated\": \"2019-07-07T06:39:58.698Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3388.574\",\n                \"time_end\": \"2019-07-06T23:39:58.698288\",\n                \"time_start\": \"2019-07-06T23:39:55.309714\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_of678YI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 134,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:01.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:45.829Z\",\n            \"updated\": \"2019-07-07T06:40:01.493Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2691.391\",\n                \"time_end\": \"2019-07-06T23:40:01.493197\",\n                \"time_start\": \"2019-07-06T23:39:58.801806\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_yMnioON.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 135,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:07.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:07.953Z\",\n            \"updated\": \"2019-07-07T06:40:07.171Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"5659.352\",\n                \"time_end\": \"2019-07-06T23:40:07.170980\",\n                \"time_start\": \"2019-07-06T23:40:01.511628\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 136,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:25.454Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:31.066Z\",\n            \"updated\": \"2019-07-07T06:38:25.454Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3271.884\",\n                \"time_end\": \"2019-07-06T23:38:25.454162\",\n                \"time_start\": \"2019-07-06T23:38:22.182278\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_nw78EXa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 137,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:35.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:51.740Z\",\n            \"updated\": \"2019-07-07T06:38:35.884Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 36,\n                \"duration\": \"2258.127\",\n                \"time_end\": \"2019-07-06T23:38:35.884738\",\n                \"time_start\": \"2019-07-06T23:38:33.626611\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_9-unewstv-muqabil_geOGBKn.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 138,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:47.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:15.306Z\",\n            \"updated\": \"2019-07-07T06:38:47.944Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3394.361\",\n                \"time_end\": \"2019-07-06T23:38:47.943813\",\n                \"time_start\": \"2019-07-06T23:38:44.549452\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_10-unewstv-off-the-record_qDNjkCa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 139,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:57.937Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:37.648Z\",\n            \"updated\": \"2019-07-07T06:38:57.937Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4184.174\",\n                \"time_end\": \"2019-07-06T23:38:57.937239\",\n                \"time_start\": \"2019-07-06T23:38:53.753065\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_tpnA6Ue.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 140,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:05.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:46.671Z\",\n            \"updated\": \"2019-07-07T06:39:05.542Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 16,\n                \"duration\": \"1387.1\",\n                \"time_end\": \"2019-07-06T23:39:05.542333\",\n                \"time_start\": \"2019-07-06T23:39:04.155233\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_pLeTRse.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 141,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:10.425Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:09.427Z\",\n            \"updated\": \"2019-07-07T06:39:10.426Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2241.201\",\n                \"time_end\": \"2019-07-06T23:39:10.425809\",\n                \"time_start\": \"2019-07-06T23:39:08.184608\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_13-unewstv-the-reporters_O3ZoDvy.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 142,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:12.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:31.955Z\",\n            \"updated\": \"2019-07-07T06:39:12.901Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2444.441\",\n                \"time_end\": \"2019-07-06T23:39:12.901199\",\n                \"time_start\": \"2019-07-06T23:39:10.456758\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_WOiAuU5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 143,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:24.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:54.203Z\",\n            \"updated\": \"2019-07-07T06:39:24.865Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3457.403\",\n                \"time_end\": \"2019-07-06T23:39:24.865071\",\n                \"time_start\": \"2019-07-06T23:39:21.407668\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_15-unewstv-night-edition_dGcf9mH.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 144,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:33.841Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:25:19.834Z\",\n            \"updated\": \"2019-07-07T06:39:33.841Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3415.365\",\n                \"time_end\": \"2019-07-06T23:39:33.840950\",\n                \"time_start\": \"2019-07-06T23:39:30.425585\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_16-unewstv-jirga_bUHa5Ig.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 145,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:41.629Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:25:45.891Z\",\n            \"updated\": \"2019-07-07T06:39:41.629Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2345.836\",\n                \"time_end\": \"2019-07-06T23:39:41.629734\",\n                \"time_start\": \"2019-07-06T23:39:39.283898\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_17-unewstv-bebaak_OLJUoWq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 146,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:47.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:11.461Z\",\n            \"updated\": \"2019-07-07T06:39:47.986Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2964.283\",\n                \"time_end\": \"2019-07-06T23:39:47.986491\",\n                \"time_start\": \"2019-07-06T23:39:45.022208\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_18-unewstv-capital-talk_YzRFWuQ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 147,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:49.987Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:32.738Z\",\n            \"updated\": \"2019-07-07T06:39:49.987Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"1964.7259999999999\",\n                \"time_end\": \"2019-07-06T23:39:49.986797\",\n                \"time_start\": \"2019-07-06T23:39:48.022071\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_yf4YYqx.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 148,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:52.830Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:56.483Z\",\n            \"updated\": \"2019-07-07T06:39:52.830Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2758.5510000000004\",\n                \"time_end\": \"2019-07-06T23:39:52.830106\",\n                \"time_start\": \"2019-07-06T23:39:50.071555\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_20-unewstv-power-play_2P0l69M.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 149,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:22.058Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:27:25.822Z\",\n            \"updated\": \"2019-07-07T06:38:22.058Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2554.115\",\n                \"time_end\": \"2019-07-06T23:38:22.056485\",\n                \"time_start\": \"2019-07-06T23:38:19.502370\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_conpb7n.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 150,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:30.076Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:27:59.214Z\",\n            \"updated\": \"2019-07-07T06:38:30.076Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4535.584\",\n                \"time_end\": \"2019-07-06T23:38:30.076427\",\n                \"time_start\": \"2019-07-06T23:38:25.540843\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_22-unewstv-think-tank_JgKYIVq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 151,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:33.557Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:28:25.697Z\",\n            \"updated\": \"2019-07-07T06:38:33.557Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3450.127\",\n                \"time_end\": \"2019-07-06T23:38:33.557529\",\n                \"time_start\": \"2019-07-06T23:38:30.107402\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_afJoHm0.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 152,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:41.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:28:53.298Z\",\n            \"updated\": \"2019-07-07T06:38:41.378Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2341.404\",\n                \"time_end\": \"2019-07-06T23:38:41.378177\",\n                \"time_start\": \"2019-07-06T23:38:39.036773\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_24-unewstv-khara-sach_Z0heWRE.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 153,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:50.608Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:29:15.939Z\",\n            \"updated\": \"2019-07-07T06:38:50.608Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2632.447\",\n                \"time_end\": \"2019-07-06T23:38:50.608138\",\n                \"time_start\": \"2019-07-06T23:38:47.975691\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_25-unewstv-kal-tak_21Tx3En.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 154,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:53.667Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:29:40.159Z\",\n            \"updated\": \"2019-07-07T06:38:53.667Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3011.897\",\n                \"time_end\": \"2019-07-06T23:38:53.667483\",\n                \"time_start\": \"2019-07-06T23:38:50.655586\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_27-unewstv-to-the-point_vrVcv20.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 155,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:04.111Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:03.600Z\",\n            \"updated\": \"2019-07-07T06:39:04.111Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3032.241\",\n                \"time_end\": \"2019-07-06T23:39:04.111742\",\n                \"time_start\": \"2019-07-06T23:39:01.079501\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_28-unewstv-news-eye_d2BOKfa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 156,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:52.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:27.835Z\",\n            \"updated\": \"2019-07-07T06:47:52.410Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:156\",\n                \"job_id\": 156,\n                \"feed_id\": 29,\n                \"previous_extra_data\": {\n                    \"error\": \"Warning: Unknown show: G for Gharida, job:156\",\n                    \"job_id\": 156,\n                    \"feed_id\": 29,\n                    \"previous_extra_data\": null\n                }\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_29-unewstv-g-for-gharida_Eq0lnqK.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 157,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:19.473Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:51.559Z\",\n            \"updated\": \"2019-07-07T06:38:19.473Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"4214.553000000001\",\n                \"time_end\": \"2019-07-06T23:38:19.473417\",\n                \"time_start\": \"2019-07-06T23:38:15.258864\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_J3Pgz42.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 158,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:44.479Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:31:15.684Z\",\n            \"updated\": \"2019-07-07T06:38:44.479Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3077.57\",\n                \"time_end\": \"2019-07-06T23:38:44.479389\",\n                \"time_start\": \"2019-07-06T23:38:41.401819\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_AZslh43.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 159,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:08.130Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:31:39.542Z\",\n            \"updated\": \"2019-07-07T06:39:08.130Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2528.4680000000003\",\n                \"time_end\": \"2019-07-06T23:39:08.130081\",\n                \"time_start\": \"2019-07-06T23:39:05.601613\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_rIakHcd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 160,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:16.056Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:02.185Z\",\n            \"updated\": \"2019-07-07T06:39:16.056Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3068.722\",\n                \"time_end\": \"2019-07-06T23:39:16.056694\",\n                \"time_start\": \"2019-07-06T23:39:12.987972\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_YHVO4LP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 161,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:21.376Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:25.655Z\",\n            \"updated\": \"2019-07-07T06:39:21.376Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2345.785\",\n                \"time_end\": \"2019-07-06T23:39:21.376665\",\n                \"time_start\": \"2019-07-06T23:39:19.030880\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_34-unewstv-news-beat_G2igquq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 162,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:01.049Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:47.854Z\",\n            \"updated\": \"2019-07-07T06:39:01.049Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3042.503\",\n                \"time_end\": \"2019-07-06T23:39:01.048969\",\n                \"time_start\": \"2019-07-06T23:38:58.006466\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_gqWsvTY.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:18.921Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:10.517Z\",\n            \"updated\": \"2019-07-07T06:39:18.921Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2836.388\",\n                \"time_end\": \"2019-07-06T23:39:18.921702\",\n                \"time_start\": \"2019-07-06T23:39:16.085314\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_tMM3IXM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:39.004Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:33.536Z\",\n            \"updated\": \"2019-07-07T06:38:39.004Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3043.466\",\n                \"time_end\": \"2019-07-06T23:38:39.004668\",\n                \"time_start\": \"2019-07-06T23:38:35.961202\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_h6aqg4L.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:30.399Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:55.789Z\",\n            \"updated\": \"2019-07-07T06:39:30.399Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2487.2980000000002\",\n                \"time_end\": \"2019-07-06T23:39:30.399183\",\n                \"time_start\": \"2019-07-06T23:39:27.911885\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_PfJdSSz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:27.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:34:17.927Z\",\n            \"updated\": \"2019-07-07T06:39:27.882Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2957.381\",\n                \"time_end\": \"2019-07-06T23:39:27.882396\",\n                \"time_start\": \"2019-07-06T23:39:24.925015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_39-unewstv-on-the-front_pP6CeQA.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:36.420Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:34:40.180Z\",\n            \"updated\": \"2019-07-07T06:39:36.420Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2460.726\",\n                \"time_end\": \"2019-07-06T23:39:36.420289\",\n                \"time_start\": \"2019-07-06T23:39:33.959563\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_xHWFSPC.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:39.227Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:35:03.563Z\",\n            \"updated\": \"2019-07-07T06:39:39.227Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2767.868\",\n                \"time_end\": \"2019-07-06T23:39:39.227676\",\n                \"time_start\": \"2019-07-06T23:39:36.459808\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_41-unewstv-seedhi-baat_J0uvlWa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:44.942Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:35:25.890Z\",\n            \"updated\": \"2019-07-07T06:39:44.942Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3263.103\",\n                \"time_end\": \"2019-07-06T23:39:44.941964\",\n                \"time_start\": \"2019-07-06T23:39:41.678861\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_tc2rDod.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:10.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:36:20.062Z\",\n            \"updated\": \"2019-07-07T06:40:10.050Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2100.797\",\n                \"time_end\": \"2019-07-06T23:40:10.032733\",\n                \"time_start\": \"2019-07-06T23:40:07.931936\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_geQqRzM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:11.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:37:23.206Z\",\n            \"updated\": \"2019-07-07T06:40:11.392Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1167.9679999999998\",\n                \"time_end\": \"2019-07-06T23:40:11.392741\",\n                \"time_start\": \"2019-07-06T23:40:10.224773\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:13.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:07.786Z\",\n            \"updated\": \"2019-07-07T06:40:13.575Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 25,\n                \"duration\": \"2161.508\",\n                \"time_end\": \"2019-07-06T23:40:13.575786\",\n                \"time_start\": \"2019-07-06T23:40:11.414278\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:55.439Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:44:58.557Z\",\n            \"updated\": \"2019-07-07T06:47:55.439Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 10,\n                \"duration\": \"1434.745\",\n                \"time_end\": \"2019-07-06T23:47:55.439763\",\n                \"time_start\": \"2019-07-06T23:47:54.005018\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:55.850Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:45:53.849Z\",\n            \"updated\": \"2019-07-07T06:47:55.850Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"383.111\",\n                \"time_end\": \"2019-07-06T23:47:55.850836\",\n                \"time_start\": \"2019-07-06T23:47:55.467725\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_51-vpk-sawera_zxcbRMc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:56.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:46:37.199Z\",\n            \"updated\": \"2019-07-07T06:47:56.313Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"426.693\",\n                \"time_end\": \"2019-07-06T23:47:56.313038\",\n                \"time_start\": \"2019-07-06T23:47:55.886345\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_ZeYpvZR.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:58.178Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:28.411Z\",\n            \"updated\": \"2019-07-07T06:47:58.178Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1792.59\",\n                \"time_end\": \"2019-07-06T23:47:58.178455\",\n                \"time_start\": \"2019-07-06T23:47:56.385865\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 177,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:21:43.796Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:21:42.869Z\",\n            \"updated\": \"2019-07-08T06:21:43.796Z\",\n            \"extra_data\": null,\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 178,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:22:43.262Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:22:43.218Z\",\n            \"updated\": \"2019-07-08T06:22:43.263Z\",\n            \"extra_data\": null,\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 179,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:23:20.563Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:23:20.433Z\",\n            \"updated\": \"2019-07-08T06:23:20.563Z\",\n            \"extra_data\": null,\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_54-vpk-dil-e-majboor_TJgrtiT.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 180,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:23:38.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:23:38.309Z\",\n            \"updated\": \"2019-07-08T06:23:38.344Z\",\n            \"extra_data\": null,\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 181,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:24:39.883Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:24:39.715Z\",\n            \"updated\": \"2019-07-08T06:24:39.883Z\",\n            \"extra_data\": null,\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_51-vpk-sawera_AUxJyAE.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 182,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:24:57.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:24:57.652Z\",\n            \"updated\": \"2019-07-08T06:24:57.786Z\",\n            \"extra_data\": null,\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 183,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:25:38.817Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:25:38.193Z\",\n            \"updated\": \"2019-07-08T06:25:38.817Z\",\n            \"extra_data\": null,\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_dneGBNV.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 184,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:39.458Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:26:26.751Z\",\n            \"updated\": \"2019-07-08T06:43:39.458Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"329.60699999999997\",\n                \"time_end\": \"2019-07-07T23:43:39.458435\",\n                \"time_start\": \"2019-07-07T23:43:39.128828\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 185,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:26:47.382Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:26:47.234Z\",\n            \"updated\": \"2019-07-08T06:26:47.382Z\",\n            \"extra_data\": null,\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_53-vpk-bulbulay_WH5Ljnh.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 186,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:39.772Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:26:52.870Z\",\n            \"updated\": \"2019-07-08T06:43:39.772Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"299.373\",\n                \"time_end\": \"2019-07-07T23:43:39.772728\",\n                \"time_start\": \"2019-07-07T23:43:39.473355\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_mTwjH7b.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 187,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:23.759Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:27:19.716Z\",\n            \"updated\": \"2019-07-08T06:43:23.760Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"347.387\",\n                \"time_end\": \"2019-07-07T23:43:23.759816\",\n                \"time_start\": \"2019-07-07T23:43:23.412429\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 188,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:24.343Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:27:46.658Z\",\n            \"updated\": \"2019-07-08T06:43:24.343Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"550.5360000000001\",\n                \"time_end\": \"2019-07-07T23:43:24.342923\",\n                \"time_start\": \"2019-07-07T23:43:23.792387\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 189,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:24.897Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:28:09.183Z\",\n            \"updated\": \"2019-07-08T06:43:24.897Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"514.889\",\n                \"time_end\": \"2019-07-07T23:43:24.897385\",\n                \"time_start\": \"2019-07-07T23:43:24.382496\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 190,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:25.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:28:31.096Z\",\n            \"updated\": \"2019-07-08T06:43:25.716Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"420.935\",\n                \"time_end\": \"2019-07-07T23:43:25.716582\",\n                \"time_start\": \"2019-07-07T23:43:25.295647\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 191,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:26.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:28:50.615Z\",\n            \"updated\": \"2019-07-08T06:43:26.410Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"654.261\",\n                \"time_end\": \"2019-07-07T23:43:26.410301\",\n                \"time_start\": \"2019-07-07T23:43:25.756040\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 192,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:26.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:29:11.983Z\",\n            \"updated\": \"2019-07-08T06:43:26.763Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"327.699\",\n                \"time_end\": \"2019-07-07T23:43:26.763399\",\n                \"time_start\": \"2019-07-07T23:43:26.435700\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 193,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:27.606Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:29:34.757Z\",\n            \"updated\": \"2019-07-08T06:43:27.606Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"476.134\",\n                \"time_end\": \"2019-07-07T23:43:27.606621\",\n                \"time_start\": \"2019-07-07T23:43:27.130487\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 194,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:27.900Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:29:44.711Z\",\n            \"updated\": \"2019-07-08T06:43:27.900Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"252.72499999999997\",\n                \"time_end\": \"2019-07-07T23:43:27.900759\",\n                \"time_start\": \"2019-07-07T23:43:27.648034\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 195,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:28.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:30:07.108Z\",\n            \"updated\": \"2019-07-08T06:43:28.286Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"323.37399999999997\",\n                \"time_end\": \"2019-07-07T23:43:28.286340\",\n                \"time_start\": \"2019-07-07T23:43:27.962966\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 196,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:28.964Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:30:28.794Z\",\n            \"updated\": \"2019-07-08T06:43:28.964Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"234.146\",\n                \"time_end\": \"2019-07-07T23:43:28.964513\",\n                \"time_start\": \"2019-07-07T23:43:28.730367\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_pEBe7CB.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 197,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:29.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:30:50.258Z\",\n            \"updated\": \"2019-07-08T06:43:29.438Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"458.452\",\n                \"time_end\": \"2019-07-07T23:43:29.438609\",\n                \"time_start\": \"2019-07-07T23:43:28.980157\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 198,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:23.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:31:11.963Z\",\n            \"updated\": \"2019-07-08T06:43:23.392Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"3866.034\",\n                \"time_end\": \"2019-07-07T23:43:23.392530\",\n                \"time_start\": \"2019-07-07T23:43:19.526496\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 199,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:25.280Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:31:33.826Z\",\n            \"updated\": \"2019-07-08T06:43:25.280Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"366.496\",\n                \"time_end\": \"2019-07-07T23:43:25.280086\",\n                \"time_start\": \"2019-07-07T23:43:24.913590\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 200,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:27.110Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:31:55.180Z\",\n            \"updated\": \"2019-07-08T06:43:27.110Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"329.434\",\n                \"time_end\": \"2019-07-07T23:43:27.110650\",\n                \"time_start\": \"2019-07-07T23:43:26.781216\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 201,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:28.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:32:13.178Z\",\n            \"updated\": \"2019-07-08T06:43:28.711Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"279.717\",\n                \"time_end\": \"2019-07-07T23:43:28.583902\",\n                \"time_start\": \"2019-07-07T23:43:28.304185\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 202,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:29.942Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:32:34.756Z\",\n            \"updated\": \"2019-07-08T06:43:29.942Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"463.931\",\n                \"time_end\": \"2019-07-07T23:43:29.941914\",\n                \"time_start\": \"2019-07-07T23:43:29.477983\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 203,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:30.201Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:32:56.313Z\",\n            \"updated\": \"2019-07-08T06:43:30.201Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"240.25900000000001\",\n                \"time_end\": \"2019-07-07T23:43:30.201004\",\n                \"time_start\": \"2019-07-07T23:43:29.960745\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 204,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:30.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:33:17.589Z\",\n            \"updated\": \"2019-07-08T06:43:30.498Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"281.789\",\n                \"time_end\": \"2019-07-07T23:43:30.498181\",\n                \"time_start\": \"2019-07-07T23:43:30.216392\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 205,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:31.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:33:39.097Z\",\n            \"updated\": \"2019-07-08T06:43:31.526Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"688.425\",\n                \"time_end\": \"2019-07-07T23:43:31.526536\",\n                \"time_start\": \"2019-07-07T23:43:30.838111\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 206,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:30.821Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:34:01.582Z\",\n            \"updated\": \"2019-07-08T06:43:30.821Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"304.556\",\n                \"time_end\": \"2019-07-07T23:43:30.821667\",\n                \"time_start\": \"2019-07-07T23:43:30.517111\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 207,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.036Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:34:23.417Z\",\n            \"updated\": \"2019-07-08T06:43:32.036Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"451.623\",\n                \"time_end\": \"2019-07-07T23:43:32.036344\",\n                \"time_start\": \"2019-07-07T23:43:31.584721\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 208,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:34:45.096Z\",\n            \"updated\": \"2019-07-08T06:43:32.423Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"347.46\",\n                \"time_end\": \"2019-07-07T23:43:32.423833\",\n                \"time_start\": \"2019-07-07T23:43:32.076373\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 209,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.441Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:35:07.449Z\",\n            \"updated\": \"2019-07-08T06:43:32.441Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:209\",\n                \"job_id\": 209,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 210,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:35:29.119Z\",\n            \"updated\": \"2019-07-08T06:43:32.708Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"247.641\",\n                \"time_end\": \"2019-07-07T23:43:32.708220\",\n                \"time_start\": \"2019-07-07T23:43:32.460579\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 211,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:33.183Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:35:50.604Z\",\n            \"updated\": \"2019-07-08T06:43:33.183Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"458.762\",\n                \"time_end\": \"2019-07-07T23:43:33.183759\",\n                \"time_start\": \"2019-07-07T23:43:32.724997\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 212,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:33.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:36:12.271Z\",\n            \"updated\": \"2019-07-08T06:43:33.800Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"367.56\",\n                \"time_end\": \"2019-07-07T23:43:33.799917\",\n                \"time_start\": \"2019-07-07T23:43:33.432357\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_EnCFgx6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 213,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:34.103Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:36:34.110Z\",\n            \"updated\": \"2019-07-08T06:43:34.103Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"288.19800000000004\",\n                \"time_end\": \"2019-07-07T23:43:34.103528\",\n                \"time_start\": \"2019-07-07T23:43:33.815330\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 214,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:34.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:36:55.307Z\",\n            \"updated\": \"2019-07-08T06:43:34.414Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"290.607\",\n                \"time_end\": \"2019-07-07T23:43:34.414587\",\n                \"time_start\": \"2019-07-07T23:43:34.123980\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 215,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:34.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:37:16.657Z\",\n            \"updated\": \"2019-07-08T06:43:34.816Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"387.115\",\n                \"time_end\": \"2019-07-07T23:43:34.816130\",\n                \"time_start\": \"2019-07-07T23:43:34.429015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 216,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:35.427Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:37:38.021Z\",\n            \"updated\": \"2019-07-08T06:43:35.427Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"572.076\",\n                \"time_end\": \"2019-07-07T23:43:35.427026\",\n                \"time_start\": \"2019-07-07T23:43:34.854950\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 217,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:35.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:37:59.933Z\",\n            \"updated\": \"2019-07-08T06:43:35.697Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"241.124\",\n                \"time_end\": \"2019-07-07T23:43:35.697171\",\n                \"time_start\": \"2019-07-07T23:43:35.456047\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 218,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:36.020Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:38:21.299Z\",\n            \"updated\": \"2019-07-08T06:43:36.020Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"308.026\",\n                \"time_end\": \"2019-07-07T23:43:36.020422\",\n                \"time_start\": \"2019-07-07T23:43:35.712396\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 219,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:36.371Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:38:42.730Z\",\n            \"updated\": \"2019-07-08T06:43:36.372Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"311.49100000000004\",\n                \"time_end\": \"2019-07-07T23:43:36.371861\",\n                \"time_start\": \"2019-07-07T23:43:36.060370\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 220,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:36.894Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:39:03.978Z\",\n            \"updated\": \"2019-07-08T06:43:36.894Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"501.30300000000005\",\n                \"time_end\": \"2019-07-07T23:43:36.894341\",\n                \"time_start\": \"2019-07-07T23:43:36.393038\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 221,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:37.532Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:39:29.413Z\",\n            \"updated\": \"2019-07-08T06:43:37.532Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"597.3009999999999\",\n                \"time_end\": \"2019-07-07T23:43:37.532248\",\n                \"time_start\": \"2019-07-07T23:43:36.934947\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 222,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:37.792Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:39:50.797Z\",\n            \"updated\": \"2019-07-08T06:43:37.792Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"242.029\",\n                \"time_end\": \"2019-07-07T23:43:37.792370\",\n                \"time_start\": \"2019-07-07T23:43:37.550341\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 223,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:38.048Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:40:28.653Z\",\n            \"updated\": \"2019-07-08T06:43:38.048Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"238.701\",\n                \"time_end\": \"2019-07-07T23:43:38.048066\",\n                \"time_start\": \"2019-07-07T23:43:37.809365\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_StIiFIv.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 224,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:33.381Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:40:47.148Z\",\n            \"updated\": \"2019-07-08T06:43:33.381Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"148.414\",\n                \"time_end\": \"2019-07-07T23:43:33.381262\",\n                \"time_start\": \"2019-07-07T23:43:33.232848\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_54-vpk-dil-e-majboor_u3NG2R0.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 225,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:38.348Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:41:40.259Z\",\n            \"updated\": \"2019-07-08T06:43:38.348Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"284.646\",\n                \"time_end\": \"2019-07-07T23:43:38.348535\",\n                \"time_start\": \"2019-07-07T23:43:38.063889\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_51-vpk-sawera_ILl5a3A.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 226,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:39.096Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:42:26.409Z\",\n            \"updated\": \"2019-07-08T06:43:39.096Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"374.127\",\n                \"time_end\": \"2019-07-07T23:43:39.096464\",\n                \"time_start\": \"2019-07-07T23:43:38.722337\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_7jGc4mU.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 227,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:38.673Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:43:18.100Z\",\n            \"updated\": \"2019-07-08T06:43:38.673Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"308.606\",\n                \"time_end\": \"2019-07-07T23:43:38.672914\",\n                \"time_start\": \"2019-07-07T23:43:38.364308\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_53-vpk-bulbulay_Fkhdekb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 228,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:05.209Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:19:28.371Z\",\n            \"updated\": \"2019-07-08T07:36:05.209Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"306.62899999999996\",\n                \"time_end\": \"2019-07-08T00:36:05.209578\",\n                \"time_start\": \"2019-07-08T00:36:04.902949\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 229,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:06.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:19:49.732Z\",\n            \"updated\": \"2019-07-08T07:36:06.208Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"520.1940000000001\",\n                \"time_end\": \"2019-07-08T00:36:06.207901\",\n                \"time_start\": \"2019-07-08T00:36:05.687707\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_1EvOREa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 230,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:05.669Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:20:12.283Z\",\n            \"updated\": \"2019-07-08T07:36:05.669Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"438.44300000000004\",\n                \"time_end\": \"2019-07-08T00:36:05.668983\",\n                \"time_start\": \"2019-07-08T00:36:05.230540\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 231,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:04.887Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:20:33.380Z\",\n            \"updated\": \"2019-07-08T07:36:04.887Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"335.42499999999995\",\n                \"time_end\": \"2019-07-08T00:36:04.887624\",\n                \"time_start\": \"2019-07-08T00:36:04.552199\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 232,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:06.765Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:20:54.988Z\",\n            \"updated\": \"2019-07-08T07:36:06.765Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"446.702\",\n                \"time_end\": \"2019-07-08T00:36:06.765555\",\n                \"time_start\": \"2019-07-08T00:36:06.318853\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 233,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:07.241Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:21:16.439Z\",\n            \"updated\": \"2019-07-08T07:36:07.241Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"426.522\",\n                \"time_end\": \"2019-07-08T00:36:07.241657\",\n                \"time_start\": \"2019-07-08T00:36:06.815135\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 234,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:07.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:21:36.020Z\",\n            \"updated\": \"2019-07-08T07:36:07.763Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"501.68999999999994\",\n                \"time_end\": \"2019-07-08T00:36:07.762942\",\n                \"time_start\": \"2019-07-08T00:36:07.261252\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 235,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:08.426Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:21:57.805Z\",\n            \"updated\": \"2019-07-08T07:36:08.426Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"602.587\",\n                \"time_end\": \"2019-07-08T00:36:08.426678\",\n                \"time_start\": \"2019-07-08T00:36:07.824091\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 236,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:03.572Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:22:19.033Z\",\n            \"updated\": \"2019-07-08T07:36:03.572Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"324.416\",\n                \"time_end\": \"2019-07-08T00:36:03.572588\",\n                \"time_start\": \"2019-07-08T00:36:03.248172\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 237,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:03.748Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:22:27.907Z\",\n            \"updated\": \"2019-07-08T07:36:03.748Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"138.849\",\n                \"time_end\": \"2019-07-08T00:36:03.748311\",\n                \"time_start\": \"2019-07-08T00:36:03.609462\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 238,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:04.205Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:22:48.903Z\",\n            \"updated\": \"2019-07-08T07:36:04.205Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"442.827\",\n                \"time_end\": \"2019-07-08T00:36:04.205690\",\n                \"time_start\": \"2019-07-08T00:36:03.762863\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 239,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:08.704Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:23:10.320Z\",\n            \"updated\": \"2019-07-08T07:36:08.704Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"257.81100000000004\",\n                \"time_end\": \"2019-07-08T00:36:08.704321\",\n                \"time_start\": \"2019-07-08T00:36:08.446510\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_NWPdCye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 240,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:09.094Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:23:33.016Z\",\n            \"updated\": \"2019-07-08T07:36:09.094Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"371.121\",\n                \"time_end\": \"2019-07-08T00:36:09.094609\",\n                \"time_start\": \"2019-07-08T00:36:08.723488\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 241,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:09.547Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:23:54.012Z\",\n            \"updated\": \"2019-07-08T07:36:09.547Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"437.03799999999995\",\n                \"time_end\": \"2019-07-08T00:36:09.546834\",\n                \"time_start\": \"2019-07-08T00:36:09.109796\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 242,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:10.038Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:24:15.663Z\",\n            \"updated\": \"2019-07-08T07:36:10.039Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"452.197\",\n                \"time_end\": \"2019-07-08T00:36:10.038855\",\n                \"time_start\": \"2019-07-08T00:36:09.586658\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 243,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:10.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:24:36.842Z\",\n            \"updated\": \"2019-07-08T07:36:10.414Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"359.681\",\n                \"time_end\": \"2019-07-08T00:36:10.413884\",\n                \"time_start\": \"2019-07-08T00:36:10.054203\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 244,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:10.742Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:24:54.746Z\",\n            \"updated\": \"2019-07-08T07:36:10.742Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"313.11899999999997\",\n                \"time_end\": \"2019-07-08T00:36:10.742310\",\n                \"time_start\": \"2019-07-08T00:36:10.429191\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 245,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:11.152Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:25:16.690Z\",\n            \"updated\": \"2019-07-08T07:36:11.152Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"391.973\",\n                \"time_end\": \"2019-07-08T00:36:11.152292\",\n                \"time_start\": \"2019-07-08T00:36:10.760319\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 246,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:11.753Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:25:38.688Z\",\n            \"updated\": \"2019-07-08T07:36:11.753Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"561.174\",\n                \"time_end\": \"2019-07-08T00:36:11.753056\",\n                \"time_start\": \"2019-07-08T00:36:11.191882\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 247,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:12.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:25:59.807Z\",\n            \"updated\": \"2019-07-08T07:36:12.177Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"367.562\",\n                \"time_end\": \"2019-07-08T00:36:12.177509\",\n                \"time_start\": \"2019-07-08T00:36:11.809947\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 248,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:12.607Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:26:21.521Z\",\n            \"updated\": \"2019-07-08T07:36:12.607Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"410.29900000000004\",\n                \"time_end\": \"2019-07-08T00:36:12.607536\",\n                \"time_start\": \"2019-07-08T00:36:12.197237\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 249,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T12:36:54.852Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:26:42.932Z\",\n            \"updated\": \"2019-07-08T12:36:54.852Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"542.99\",\n                \"time_end\": \"2019-07-08T00:36:13.169532\",\n                \"time_start\": \"2019-07-08T00:36:12.626542\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-2019-07-04-1-bilgrami-feed_id_24-unewst_4tlvedR.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 250,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:54.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:27:04.803Z\",\n            \"updated\": \"2019-07-08T07:35:54.810Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"708.834\",\n                \"time_end\": \"2019-07-08T00:35:54.809859\",\n                \"time_start\": \"2019-07-08T00:35:54.101025\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 251,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:55.314Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:27:27.085Z\",\n            \"updated\": \"2019-07-08T07:35:55.314Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"487.046\",\n                \"time_end\": \"2019-07-08T00:35:55.314521\",\n                \"time_start\": \"2019-07-08T00:35:54.827475\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 252,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:55.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:27:48.811Z\",\n            \"updated\": \"2019-07-08T07:35:55.366Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:252\",\n                \"job_id\": 252,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 253,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:55.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:28:10.413Z\",\n            \"updated\": \"2019-07-08T07:35:55.929Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"522.569\",\n                \"time_end\": \"2019-07-08T00:35:55.929393\",\n                \"time_start\": \"2019-07-08T00:35:55.406824\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 254,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:56.359Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:28:32.164Z\",\n            \"updated\": \"2019-07-08T07:35:56.359Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"387.812\",\n                \"time_end\": \"2019-07-08T00:35:56.359462\",\n                \"time_start\": \"2019-07-08T00:35:55.971650\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 255,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:56.749Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:28:54.016Z\",\n            \"updated\": \"2019-07-08T07:35:56.749Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"375.137\",\n                \"time_end\": \"2019-07-08T00:35:56.749314\",\n                \"time_start\": \"2019-07-08T00:35:56.374177\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_xyl41Nk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 256,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:57.269Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:29:16.115Z\",\n            \"updated\": \"2019-07-08T07:35:57.269Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"471.537\",\n                \"time_end\": \"2019-07-08T00:35:57.269445\",\n                \"time_start\": \"2019-07-08T00:35:56.797908\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 257,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:57.785Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:29:37.828Z\",\n            \"updated\": \"2019-07-08T07:35:57.785Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"486.007\",\n                \"time_end\": \"2019-07-08T00:35:57.785241\",\n                \"time_start\": \"2019-07-08T00:35:57.299234\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 258,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:58.128Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:29:59.516Z\",\n            \"updated\": \"2019-07-08T07:35:58.128Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"312.687\",\n                \"time_end\": \"2019-07-08T00:35:58.128265\",\n                \"time_start\": \"2019-07-08T00:35:57.815578\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 259,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:58.437Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:30:22.698Z\",\n            \"updated\": \"2019-07-08T07:35:58.437Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"281.01599999999996\",\n                \"time_end\": \"2019-07-08T00:35:58.437176\",\n                \"time_start\": \"2019-07-08T00:35:58.156160\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 260,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:58.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:30:44.458Z\",\n            \"updated\": \"2019-07-08T07:35:58.865Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"410.157\",\n                \"time_end\": \"2019-07-08T00:35:58.864871\",\n                \"time_start\": \"2019-07-08T00:35:58.454714\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 261,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:59.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:31:06.244Z\",\n            \"updated\": \"2019-07-08T07:35:59.907Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"390.157\",\n                \"time_end\": \"2019-07-08T00:35:59.907654\",\n                \"time_start\": \"2019-07-08T00:35:59.517497\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 262,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:59.502Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:31:27.957Z\",\n            \"updated\": \"2019-07-08T07:35:59.502Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"598.631\",\n                \"time_end\": \"2019-07-08T00:35:59.501949\",\n                \"time_start\": \"2019-07-08T00:35:58.903318\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 263,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:00.368Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:31:49.643Z\",\n            \"updated\": \"2019-07-08T07:36:00.368Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"445.01800000000003\",\n                \"time_end\": \"2019-07-08T00:36:00.368475\",\n                \"time_start\": \"2019-07-08T00:35:59.923457\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 264,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:00.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:32:11.331Z\",\n            \"updated\": \"2019-07-08T07:36:00.800Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"415.242\",\n                \"time_end\": \"2019-07-08T00:36:00.800295\",\n                \"time_start\": \"2019-07-08T00:36:00.385053\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 265,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:01.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:32:32.959Z\",\n            \"updated\": \"2019-07-08T07:36:01.392Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"542.029\",\n                \"time_end\": \"2019-07-08T00:36:01.391969\",\n                \"time_start\": \"2019-07-08T00:36:00.849940\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 266,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:01.642Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:33:08.549Z\",\n            \"updated\": \"2019-07-08T07:36:01.642Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"235.191\",\n                \"time_end\": \"2019-07-08T00:36:01.642827\",\n                \"time_start\": \"2019-07-08T00:36:01.407636\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_PjFC3B5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 267,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:01.878Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:33:25.424Z\",\n            \"updated\": \"2019-07-08T07:36:01.878Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"174.19\",\n                \"time_end\": \"2019-07-08T00:36:01.878037\",\n                \"time_start\": \"2019-07-08T00:36:01.703847\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 268,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:02.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:34:17.053Z\",\n            \"updated\": \"2019-07-08T07:36:02.218Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"318.179\",\n                \"time_end\": \"2019-07-08T00:36:02.218045\",\n                \"time_start\": \"2019-07-08T00:36:01.899866\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 269,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:02.645Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:35:01.028Z\",\n            \"updated\": \"2019-07-08T07:36:02.645Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"385.987\",\n                \"time_end\": \"2019-07-08T00:36:02.645271\",\n                \"time_start\": \"2019-07-08T00:36:02.259284\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 270,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:03.232Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:35:53.380Z\",\n            \"updated\": \"2019-07-08T07:36:03.232Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"536.74\",\n                \"time_end\": \"2019-07-08T00:36:03.232332\",\n                \"time_start\": \"2019-07-08T00:36:02.695592\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 271,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:29.162Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:52:31.153Z\",\n            \"updated\": \"2019-07-08T13:09:29.162Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"322.396\",\n                \"time_end\": \"2019-07-08T06:09:29.162758\",\n                \"time_start\": \"2019-07-08T06:09:28.840362\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 272,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:29.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:52:52.825Z\",\n            \"updated\": \"2019-07-08T13:09:29.617Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"415.197\",\n                \"time_end\": \"2019-07-08T06:09:29.617094\",\n                \"time_start\": \"2019-07-08T06:09:29.201897\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_AfFSfhW.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 273,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:30.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:53:14.310Z\",\n            \"updated\": \"2019-07-08T13:09:30.231Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"544.213\",\n                \"time_end\": \"2019-07-08T06:09:30.231679\",\n                \"time_start\": \"2019-07-08T06:09:29.687466\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 274,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:30.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:53:35.652Z\",\n            \"updated\": \"2019-07-08T13:09:30.700Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"435.09999999999997\",\n                \"time_end\": \"2019-07-08T06:09:30.700061\",\n                \"time_start\": \"2019-07-08T06:09:30.264961\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 275,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:31.181Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:53:57.312Z\",\n            \"updated\": \"2019-07-08T13:09:31.181Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"433.624\",\n                \"time_end\": \"2019-07-08T06:09:31.181506\",\n                \"time_start\": \"2019-07-08T06:09:30.747882\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 276,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:31.793Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:54:19.010Z\",\n            \"updated\": \"2019-07-08T13:09:31.793Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"522.4499999999999\",\n                \"time_end\": \"2019-07-08T06:09:31.793221\",\n                \"time_start\": \"2019-07-08T06:09:31.270771\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 277,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:32.211Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:54:37.914Z\",\n            \"updated\": \"2019-07-08T13:09:32.211Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"383.308\",\n                \"time_end\": \"2019-07-08T06:09:32.211595\",\n                \"time_start\": \"2019-07-08T06:09:31.828287\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 278,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:32.618Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:54:58.495Z\",\n            \"updated\": \"2019-07-08T13:09:32.618Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"357.637\",\n                \"time_end\": \"2019-07-08T06:09:32.618414\",\n                \"time_start\": \"2019-07-08T06:09:32.260777\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 279,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:33.229Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:55:19.852Z\",\n            \"updated\": \"2019-07-08T13:09:33.229Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"577.85\",\n                \"time_end\": \"2019-07-08T06:09:33.229067\",\n                \"time_start\": \"2019-07-08T06:09:32.651217\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 280,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:33.804Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:55:28.797Z\",\n            \"updated\": \"2019-07-08T13:09:33.804Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"376.967\",\n                \"time_end\": \"2019-07-08T06:09:33.804480\",\n                \"time_start\": \"2019-07-08T06:09:33.427513\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 281,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:34.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:55:49.889Z\",\n            \"updated\": \"2019-07-08T13:09:34.208Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"358.30699999999996\",\n                \"time_end\": \"2019-07-08T06:09:34.208392\",\n                \"time_start\": \"2019-07-08T06:09:33.850085\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 282,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:34.680Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:56:11.053Z\",\n            \"updated\": \"2019-07-08T13:09:34.680Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"436.659\",\n                \"time_end\": \"2019-07-08T06:09:34.680406\",\n                \"time_start\": \"2019-07-08T06:09:34.243747\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_tEm4qa2.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 283,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:35.246Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:56:32.378Z\",\n            \"updated\": \"2019-07-08T13:09:35.246Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"509.826\",\n                \"time_end\": \"2019-07-08T06:09:35.246085\",\n                \"time_start\": \"2019-07-08T06:09:34.736259\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 284,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.067Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:56:54.527Z\",\n            \"updated\": \"2019-07-08T13:09:15.067Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"384.28299999999996\",\n                \"time_end\": \"2019-07-08T06:09:15.067084\",\n                \"time_start\": \"2019-07-08T06:09:14.682801\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 285,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.996Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:57:16.094Z\",\n            \"updated\": \"2019-07-08T13:09:15.996Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"379.29400000000004\",\n                \"time_end\": \"2019-07-08T06:09:15.996531\",\n                \"time_start\": \"2019-07-08T06:09:15.617237\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 286,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:17.216Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:57:37.028Z\",\n            \"updated\": \"2019-07-08T13:09:17.216Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"666.523\",\n                \"time_end\": \"2019-07-08T06:09:17.216364\",\n                \"time_start\": \"2019-07-08T06:09:16.549841\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 287,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:18.045Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:57:55.063Z\",\n            \"updated\": \"2019-07-08T13:09:18.045Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"370.685\",\n                \"time_end\": \"2019-07-08T06:09:18.045757\",\n                \"time_start\": \"2019-07-08T06:09:17.675072\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 288,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:19.888Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:58:16.300Z\",\n            \"updated\": \"2019-07-08T13:09:19.888Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"560.432\",\n                \"time_end\": \"2019-07-08T06:09:19.888770\",\n                \"time_start\": \"2019-07-08T06:09:19.328338\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 289,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.517Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:58:37.506Z\",\n            \"updated\": \"2019-07-08T13:09:15.517Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"429.605\",\n                \"time_end\": \"2019-07-08T06:09:15.517044\",\n                \"time_start\": \"2019-07-08T06:09:15.087439\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 290,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:16.504Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:58:58.922Z\",\n            \"updated\": \"2019-07-08T13:09:16.504Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"397.589\",\n                \"time_end\": \"2019-07-08T06:09:16.503841\",\n                \"time_start\": \"2019-07-08T06:09:16.106252\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 291,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:17.640Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:59:20.018Z\",\n            \"updated\": \"2019-07-08T13:09:17.640Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"364.73299999999995\",\n                \"time_end\": \"2019-07-08T06:09:17.640806\",\n                \"time_start\": \"2019-07-08T06:09:17.276073\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 292,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:18.787Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:59:41.066Z\",\n            \"updated\": \"2019-07-08T13:09:18.787Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"701.072\",\n                \"time_end\": \"2019-07-08T06:09:18.787300\",\n                \"time_start\": \"2019-07-08T06:09:18.086228\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 293,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:20.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:00:03.673Z\",\n            \"updated\": \"2019-07-08T13:09:20.549Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"600.693\",\n                \"time_end\": \"2019-07-08T06:09:20.549035\",\n                \"time_start\": \"2019-07-08T06:09:19.948342\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 294,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:20.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:00:25.244Z\",\n            \"updated\": \"2019-07-08T13:09:20.913Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"322.274\",\n                \"time_end\": \"2019-07-08T06:09:20.913366\",\n                \"time_start\": \"2019-07-08T06:09:20.591092\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 295,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:00:46.542Z\",\n            \"updated\": \"2019-07-08T13:09:15.575Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:295\",\n                \"job_id\": 295,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 296,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:19.279Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:01:08.201Z\",\n            \"updated\": \"2019-07-08T13:09:19.279Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"433.85200000000003\",\n                \"time_end\": \"2019-07-08T06:09:19.279691\",\n                \"time_start\": \"2019-07-08T06:09:18.845839\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 297,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:22.029Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:01:29.679Z\",\n            \"updated\": \"2019-07-08T13:09:22.029Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"583.52\",\n                \"time_end\": \"2019-07-08T06:09:22.028830\",\n                \"time_start\": \"2019-07-08T06:09:21.445310\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 298,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:14.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:01:51.353Z\",\n            \"updated\": \"2019-07-08T13:09:14.575Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"1233.1380000000001\",\n                \"time_end\": \"2019-07-08T06:09:14.574902\",\n                \"time_start\": \"2019-07-08T06:09:13.341764\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_CDgPYgp.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 299,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:22.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:02:12.642Z\",\n            \"updated\": \"2019-07-08T13:09:22.414Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"346.666\",\n                \"time_end\": \"2019-07-08T06:09:22.414453\",\n                \"time_start\": \"2019-07-08T06:09:22.067787\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 300,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:21.363Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:02:33.583Z\",\n            \"updated\": \"2019-07-08T13:09:21.363Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"397.12199999999996\",\n                \"time_end\": \"2019-07-08T06:09:21.363600\",\n                \"time_start\": \"2019-07-08T06:09:20.966478\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 301,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:22.863Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:02:54.489Z\",\n            \"updated\": \"2019-07-08T13:09:22.863Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"412.04400000000004\",\n                \"time_end\": \"2019-07-08T06:09:22.863404\",\n                \"time_start\": \"2019-07-08T06:09:22.451360\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 302,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:23.767Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:03:16.250Z\",\n            \"updated\": \"2019-07-08T13:09:23.767Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"869.248\",\n                \"time_end\": \"2019-07-08T06:09:23.767020\",\n                \"time_start\": \"2019-07-08T06:09:22.897772\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 303,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:24.110Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:03:37.308Z\",\n            \"updated\": \"2019-07-08T13:09:24.110Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"305.573\",\n                \"time_end\": \"2019-07-08T06:09:24.110189\",\n                \"time_start\": \"2019-07-08T06:09:23.804616\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 304,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:24.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:03:58.497Z\",\n            \"updated\": \"2019-07-08T13:09:24.684Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"520.2379999999999\",\n                \"time_end\": \"2019-07-08T06:09:24.684808\",\n                \"time_start\": \"2019-07-08T06:09:24.164570\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 305,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:25.297Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:04:19.796Z\",\n            \"updated\": \"2019-07-08T13:09:25.297Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"572.788\",\n                \"time_end\": \"2019-07-08T06:09:25.297431\",\n                \"time_start\": \"2019-07-08T06:09:24.724643\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 306,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:25.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:04:41.572Z\",\n            \"updated\": \"2019-07-08T13:09:25.780Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"436.89099999999996\",\n                \"time_end\": \"2019-07-08T06:09:25.780636\",\n                \"time_start\": \"2019-07-08T06:09:25.343745\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 307,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:26.148Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:05:03.478Z\",\n            \"updated\": \"2019-07-08T13:09:26.148Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"322.464\",\n                \"time_end\": \"2019-07-08T06:09:26.148037\",\n                \"time_start\": \"2019-07-08T06:09:25.825573\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 308,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:26.833Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:05:24.762Z\",\n            \"updated\": \"2019-07-08T13:09:26.833Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"636.976\",\n                \"time_end\": \"2019-07-08T06:09:26.833849\",\n                \"time_start\": \"2019-07-08T06:09:26.196873\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 309,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:27.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:06:10.974Z\",\n            \"updated\": \"2019-07-08T13:09:27.177Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"291.86\",\n                \"time_end\": \"2019-07-08T06:09:27.177604\",\n                \"time_start\": \"2019-07-08T06:09:26.885744\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_NZiYR0I.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 310,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:27.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:06:39.392Z\",\n            \"updated\": \"2019-07-08T13:09:27.329Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"109.906\",\n                \"time_end\": \"2019-07-08T06:09:27.329491\",\n                \"time_start\": \"2019-07-08T06:09:27.219585\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2010-01-21\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 311,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:27.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:07:30.748Z\",\n            \"updated\": \"2019-07-08T13:09:27.639Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"289.588\",\n                \"time_end\": \"2019-07-08T06:09:27.638997\",\n                \"time_start\": \"2019-07-08T06:09:27.349409\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2011-01-16\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 312,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:28.127Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:08:11.905Z\",\n            \"updated\": \"2019-07-08T13:09:28.127Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"450.232\",\n                \"time_end\": \"2019-07-08T06:09:28.127644\",\n                \"time_start\": \"2019-07-08T06:09:27.677412\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2010-01-15\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 313,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:28.803Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:09:05.173Z\",\n            \"updated\": \"2019-07-08T13:09:28.803Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"595.807\",\n                \"time_end\": \"2019-07-08T06:09:28.803210\",\n                \"time_start\": \"2019-07-08T06:09:28.207403\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2012-01-22\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 314,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:46.367Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:31:54.108Z\",\n            \"updated\": \"2019-07-08T23:49:46.367Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"502.791\",\n                \"time_end\": \"2019-07-08T16:49:46.367635\",\n                \"time_start\": \"2019-07-08T16:49:45.864844\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_LQ5jeN1.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 315,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:45.836Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:32:16.325Z\",\n            \"updated\": \"2019-07-08T23:49:45.836Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"414.803\",\n                \"time_end\": \"2019-07-08T16:49:45.836016\",\n                \"time_start\": \"2019-07-08T16:49:45.421213\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_4Xv1Enm.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 316,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:45.373Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:32:38.307Z\",\n            \"updated\": \"2019-07-08T23:49:45.373Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"737.6030000000001\",\n                \"time_end\": \"2019-07-08T16:49:45.373812\",\n                \"time_start\": \"2019-07-08T16:49:44.636209\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_gPXIl2Q.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 317,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:44.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:32:59.806Z\",\n            \"updated\": \"2019-07-08T23:49:44.575Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"480.012\",\n                \"time_end\": \"2019-07-08T16:49:44.575603\",\n                \"time_start\": \"2019-07-08T16:49:44.095591\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_gvYnwTC.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 318,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:44.052Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:33:21.845Z\",\n            \"updated\": \"2019-07-08T23:49:44.052Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"468.037\",\n                \"time_end\": \"2019-07-08T16:49:44.052082\",\n                \"time_start\": \"2019-07-08T16:49:43.584045\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_24-unewstv-khara-sach_sS9dBvv.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 319,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:43.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:33:43.783Z\",\n            \"updated\": \"2019-07-08T23:49:43.550Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"338.10200000000003\",\n                \"time_end\": \"2019-07-08T16:49:43.549798\",\n                \"time_start\": \"2019-07-08T16:49:43.211696\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_DX1bFiJ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 320,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:43.175Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:03.547Z\",\n            \"updated\": \"2019-07-08T23:49:43.175Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"653.313\",\n                \"time_end\": \"2019-07-08T16:49:43.175106\",\n                \"time_start\": \"2019-07-08T16:49:42.521793\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_9-unewstv-muqabil_j3rfL35.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 321,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:42.424Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:25.792Z\",\n            \"updated\": \"2019-07-08T23:49:42.424Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"541.2900000000001\",\n                \"time_end\": \"2019-07-08T16:49:42.424263\",\n                \"time_start\": \"2019-07-08T16:49:41.882973\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_10-unewstv-off-the-record_bUN9vWS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 322,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:41.846Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:47.837Z\",\n            \"updated\": \"2019-07-08T23:49:41.846Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"335.95399999999995\",\n                \"time_end\": \"2019-07-08T16:49:41.845974\",\n                \"time_start\": \"2019-07-08T16:49:41.510020\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_BWoMROD.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 323,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:41.456Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:57.380Z\",\n            \"updated\": \"2019-07-08T23:49:41.456Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"173.31099999999998\",\n                \"time_end\": \"2019-07-08T16:49:41.455845\",\n                \"time_start\": \"2019-07-08T16:49:41.282534\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_LNAPYOT.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 324,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:41.221Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:35:19.915Z\",\n            \"updated\": \"2019-07-08T23:49:41.221Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"594.576\",\n                \"time_end\": \"2019-07-08T16:49:41.220913\",\n                \"time_start\": \"2019-07-08T16:49:40.626337\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_13-unewstv-the-reporters_wXwuEQK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 325,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:40.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:35:41.892Z\",\n            \"updated\": \"2019-07-08T23:49:40.568Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"546.806\",\n                \"time_end\": \"2019-07-08T16:49:40.568490\",\n                \"time_start\": \"2019-07-08T16:49:40.021684\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_SsDjJ5z.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 326,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:39.971Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:36:04.218Z\",\n            \"updated\": \"2019-07-08T23:49:39.971Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"380.894\",\n                \"time_end\": \"2019-07-08T16:49:39.971736\",\n                \"time_start\": \"2019-07-08T16:49:39.590842\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_15-unewstv-night-edition_DEGm4yc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 327,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:39.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:36:25.458Z\",\n            \"updated\": \"2019-07-08T23:49:39.542Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"406.915\",\n                \"time_end\": \"2019-07-08T16:49:39.542093\",\n                \"time_start\": \"2019-07-08T16:49:39.135178\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_16-unewstv-jirga_88Trkvo.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 328,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:39.073Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:36:47.418Z\",\n            \"updated\": \"2019-07-08T23:49:39.073Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"692.87\",\n                \"time_end\": \"2019-07-08T16:49:39.073300\",\n                \"time_start\": \"2019-07-08T16:49:38.380430\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_17-unewstv-bebaak_UtPMJJw.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 329,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:38.331Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:37:08.635Z\",\n            \"updated\": \"2019-07-08T23:49:38.331Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"443.218\",\n                \"time_end\": \"2019-07-08T16:49:38.331193\",\n                \"time_start\": \"2019-07-08T16:49:37.887975\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_18-unewstv-capital-talk_KbZ76Pb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 330,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:37.853Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:37:27.469Z\",\n            \"updated\": \"2019-07-08T23:49:37.853Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"382.822\",\n                \"time_end\": \"2019-07-08T16:49:37.853615\",\n                \"time_start\": \"2019-07-08T16:49:37.470793\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_R0Lvhoi.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 331,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:37.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:37:49.627Z\",\n            \"updated\": \"2019-07-08T23:49:37.423Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"273.241\",\n                \"time_end\": \"2019-07-08T16:49:37.423814\",\n                \"time_start\": \"2019-07-08T16:49:37.150573\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_20-unewstv-power-play_ypRCkbj.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 332,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:37.113Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:38:12.462Z\",\n            \"updated\": \"2019-07-08T23:49:37.113Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"656.887\",\n                \"time_end\": \"2019-07-08T16:49:37.113453\",\n                \"time_start\": \"2019-07-08T16:49:36.456566\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_Q3b8iDa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 333,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:36.396Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:38:34.892Z\",\n            \"updated\": \"2019-07-08T23:49:36.397Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"425.281\",\n                \"time_end\": \"2019-07-08T16:49:36.396860\",\n                \"time_start\": \"2019-07-08T16:49:35.971579\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_22-unewstv-think-tank_rACXefr.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 334,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:35.940Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:38:56.942Z\",\n            \"updated\": \"2019-07-08T23:49:35.940Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"404.112\",\n                \"time_end\": \"2019-07-08T16:49:35.940290\",\n                \"time_start\": \"2019-07-08T16:49:35.536178\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_cyIOzCE.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 335,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:35.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:39:18.964Z\",\n            \"updated\": \"2019-07-08T23:49:35.493Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"305.969\",\n                \"time_end\": \"2019-07-08T16:49:35.493691\",\n                \"time_start\": \"2019-07-08T16:49:35.187722\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_25-unewstv-kal-tak_EuzwCUl.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 336,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:35.133Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:39:41.073Z\",\n            \"updated\": \"2019-07-08T23:49:35.133Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"843.067\",\n                \"time_end\": \"2019-07-08T16:49:35.133103\",\n                \"time_start\": \"2019-07-08T16:49:34.290036\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_27-unewstv-to-the-point_IVhVpJ5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 337,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:34.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:40:03.588Z\",\n            \"updated\": \"2019-07-08T23:49:34.219Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"462.524\",\n                \"time_end\": \"2019-07-08T16:49:34.219426\",\n                \"time_start\": \"2019-07-08T16:49:33.756902\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_28-unewstv-news-eye_W7OJIuw.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 338,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:33.720Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:40:26.592Z\",\n            \"updated\": \"2019-07-08T23:49:33.720Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:338\",\n                \"job_id\": 338,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_29-unewstv-g-for-gharida_XOesQDx.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 339,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:33.681Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:40:48.659Z\",\n            \"updated\": \"2019-07-08T23:49:33.681Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"400.81600000000003\",\n                \"time_end\": \"2019-07-08T16:49:33.681337\",\n                \"time_start\": \"2019-07-08T16:49:33.280521\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_IDW9YlU.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 340,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:33.194Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:41:10.693Z\",\n            \"updated\": \"2019-07-08T23:49:33.194Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"418.75800000000004\",\n                \"time_end\": \"2019-07-08T16:49:33.194611\",\n                \"time_start\": \"2019-07-08T16:49:32.775853\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_XCX4Vz1.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 341,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:32.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:41:33.213Z\",\n            \"updated\": \"2019-07-08T23:49:32.716Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"622.1320000000001\",\n                \"time_end\": \"2019-07-08T16:49:32.716124\",\n                \"time_start\": \"2019-07-08T16:49:32.093992\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_whovBCb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 342,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:31.964Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:41:55.128Z\",\n            \"updated\": \"2019-07-08T23:49:31.964Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"557.421\",\n                \"time_end\": \"2019-07-08T16:49:31.964595\",\n                \"time_start\": \"2019-07-08T16:49:31.407174\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_qgjpjUk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 343,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:31.362Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:42:16.502Z\",\n            \"updated\": \"2019-07-08T23:49:31.362Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"365.719\",\n                \"time_end\": \"2019-07-08T16:49:31.361995\",\n                \"time_start\": \"2019-07-08T16:49:30.996276\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_34-unewstv-news-beat_LiC0Vej.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 344,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:30.949Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:42:38.031Z\",\n            \"updated\": \"2019-07-08T23:49:30.949Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"632.4530000000001\",\n                \"time_end\": \"2019-07-08T16:49:30.948982\",\n                \"time_start\": \"2019-07-08T16:49:30.316529\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_8cY5GUP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 345,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:30.229Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:43:00.423Z\",\n            \"updated\": \"2019-07-08T23:49:30.229Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"672.082\",\n                \"time_end\": \"2019-07-08T16:49:30.229714\",\n                \"time_start\": \"2019-07-08T16:49:29.557632\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_J6iiGdM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 346,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:29.512Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:43:22.055Z\",\n            \"updated\": \"2019-07-08T23:49:29.512Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"397.521\",\n                \"time_end\": \"2019-07-08T16:49:29.512259\",\n                \"time_start\": \"2019-07-08T16:49:29.114738\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_lE6pmQt.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 347,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:29.083Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:43:44.070Z\",\n            \"updated\": \"2019-07-08T23:49:29.083Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"395.752\",\n                \"time_end\": \"2019-07-08T16:49:29.083707\",\n                \"time_start\": \"2019-07-08T16:49:28.687955\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_N9mpnQV.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 348,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:28.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:44:06.049Z\",\n            \"updated\": \"2019-07-08T23:49:28.639Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"799.828\",\n                \"time_end\": \"2019-07-08T16:49:28.639016\",\n                \"time_start\": \"2019-07-08T16:49:27.839188\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_39-unewstv-on-the-front_Nplvqem.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 349,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:27.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:44:28.191Z\",\n            \"updated\": \"2019-07-08T23:49:27.758Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"434.61100000000005\",\n                \"time_end\": \"2019-07-08T16:49:27.758506\",\n                \"time_start\": \"2019-07-08T16:49:27.323895\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_RpEBsS9.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 350,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:27.262Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:44:50.357Z\",\n            \"updated\": \"2019-07-08T23:49:27.262Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"2752.891\",\n                \"time_end\": \"2019-07-08T16:49:27.261897\",\n                \"time_start\": \"2019-07-08T16:49:24.509006\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_41-unewstv-seedhi-baat_oXF2WiA.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 351,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:24.428Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:45:12.656Z\",\n            \"updated\": \"2019-07-08T23:49:24.428Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"503.393\",\n                \"time_end\": \"2019-07-08T16:49:24.428254\",\n                \"time_start\": \"2019-07-08T16:49:23.924861\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_SslyaV7.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 352,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:23.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:46:07.304Z\",\n            \"updated\": \"2019-07-08T23:49:23.884Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"293.874\",\n                \"time_end\": \"2019-07-08T16:49:23.884358\",\n                \"time_start\": \"2019-07-08T16:49:23.590484\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_R3Jz1sY.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 353,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:23.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:46:40.081Z\",\n            \"updated\": \"2019-07-08T23:49:23.568Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"105.88300000000001\",\n                \"time_end\": \"2019-07-08T16:49:23.568201\",\n                \"time_start\": \"2019-07-08T16:49:23.462318\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2010-01-21\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_54-vpk-dil-e-majboor_hrAk1JV.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 354,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:23.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:47:34.229Z\",\n            \"updated\": \"2019-07-08T23:49:23.416Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"473.785\",\n                \"time_end\": \"2019-07-08T16:49:23.415891\",\n                \"time_start\": \"2019-07-08T16:49:22.942106\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2011-01-16\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_51-vpk-sawera_pMrdLsq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 355,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:22.853Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:48:20.393Z\",\n            \"updated\": \"2019-07-08T23:49:22.853Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"459.462\",\n                \"time_end\": \"2019-07-08T16:49:22.853766\",\n                \"time_start\": \"2019-07-08T16:49:22.394304\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2010-01-15\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_jCv6beS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 356,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:22.336Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:49:12.297Z\",\n            \"updated\": \"2019-07-08T23:49:22.336Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"1665.883\",\n                \"time_end\": \"2019-07-08T16:49:22.336408\",\n                \"time_start\": \"2019-07-08T16:49:20.670525\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2012-01-22\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_53-vpk-bulbulay_ikgoYbW.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 357,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:39.295Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:24:15.902Z\",\n            \"updated\": \"2019-07-09T09:43:39.295Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2753.702\",\n                \"time_end\": \"2019-07-09T02:43:39.294991\",\n                \"time_start\": \"2019-07-09T02:43:36.541289\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 358,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:41.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:24:38.895Z\",\n            \"updated\": \"2019-07-09T09:43:41.786Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2458.5409999999997\",\n                \"time_end\": \"2019-07-09T02:43:41.786583\",\n                \"time_start\": \"2019-07-09T02:43:39.328042\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_mHYzbQI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 359,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:41:56.499Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:25:00.736Z\",\n            \"updated\": \"2019-07-09T09:41:56.499Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2445.266\",\n                \"time_end\": \"2019-07-09T02:41:56.499399\",\n                \"time_start\": \"2019-07-09T02:41:54.054133\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 360,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:00.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:25:23.556Z\",\n            \"updated\": \"2019-07-09T09:42:00.568Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2836.927\",\n                \"time_end\": \"2019-07-09T02:42:00.568412\",\n                \"time_start\": \"2019-07-09T02:41:57.731485\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 361,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:03.325Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:25:45.767Z\",\n            \"updated\": \"2019-07-09T09:42:03.325Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2668.866\",\n                \"time_end\": \"2019-07-09T02:42:03.325400\",\n                \"time_start\": \"2019-07-09T02:42:00.656534\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 362,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:08.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:26:07.948Z\",\n            \"updated\": \"2019-07-09T09:42:08.973Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3192.509\",\n                \"time_end\": \"2019-07-09T02:42:08.973481\",\n                \"time_start\": \"2019-07-09T02:42:05.780972\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 363,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:14.143Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:26:27.966Z\",\n            \"updated\": \"2019-07-09T09:42:14.143Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 36,\n                \"duration\": \"2740.9880000000003\",\n                \"time_end\": \"2019-07-09T02:42:14.143024\",\n                \"time_start\": \"2019-07-09T02:42:11.402036\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 364,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:16.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:26:50.016Z\",\n            \"updated\": \"2019-07-09T09:42:16.620Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2446.843\",\n                \"time_end\": \"2019-07-09T02:42:16.620227\",\n                \"time_start\": \"2019-07-09T02:42:14.173384\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 365,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:20.129Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:27:11.805Z\",\n            \"updated\": \"2019-07-09T09:42:20.129Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3427.259\",\n                \"time_end\": \"2019-07-09T02:42:20.129419\",\n                \"time_start\": \"2019-07-09T02:42:16.702160\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 366,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:41:57.634Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:27:21.857Z\",\n            \"updated\": \"2019-07-09T09:41:57.635Z\",\n            \"extra_data\": {\n                \"dupes\": 17,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 17,\n                \"duration\": \"1099.3790000000001\",\n                \"time_end\": \"2019-07-09T02:41:57.634791\",\n                \"time_start\": \"2019-07-09T02:41:56.535412\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 367,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:11.375Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:27:43.943Z\",\n            \"updated\": \"2019-07-09T09:42:11.375Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2243.861\",\n                \"time_end\": \"2019-07-09T02:42:11.375744\",\n                \"time_start\": \"2019-07-09T02:42:09.131883\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 368,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:22.642Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:28:06.863Z\",\n            \"updated\": \"2019-07-09T09:42:22.642Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2463.9449999999997\",\n                \"time_end\": \"2019-07-09T02:42:22.641993\",\n                \"time_start\": \"2019-07-09T02:42:20.178048\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_eeTEOO4.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 369,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:25.251Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:28:31.605Z\",\n            \"updated\": \"2019-07-09T09:42:25.251Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2571.435\",\n                \"time_end\": \"2019-07-09T02:42:25.251005\",\n                \"time_start\": \"2019-07-09T02:42:22.679570\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 370,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:05.714Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:28:55.047Z\",\n            \"updated\": \"2019-07-09T09:42:05.714Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2352.164\",\n                \"time_end\": \"2019-07-09T02:42:05.714410\",\n                \"time_start\": \"2019-07-09T02:42:03.362246\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 371,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:28.182Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:29:17.826Z\",\n            \"updated\": \"2019-07-09T09:42:28.182Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2885.5879999999997\",\n                \"time_end\": \"2019-07-09T02:42:28.182094\",\n                \"time_start\": \"2019-07-09T02:42:25.296506\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 372,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:41:53.985Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:29:39.339Z\",\n            \"updated\": \"2019-07-09T09:41:53.985Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"6587.82\",\n                \"time_end\": \"2019-07-09T02:41:53.985218\",\n                \"time_start\": \"2019-07-09T02:41:47.397398\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 373,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:30.768Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:29:58.373Z\",\n            \"updated\": \"2019-07-09T09:42:30.768Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 33,\n                \"duration\": \"2547.6519999999996\",\n                \"time_end\": \"2019-07-09T02:42:30.768280\",\n                \"time_start\": \"2019-07-09T02:42:28.220628\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 374,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:33.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:30:23.287Z\",\n            \"updated\": \"2019-07-09T09:42:33.700Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2866.058\",\n                \"time_end\": \"2019-07-09T02:42:33.700421\",\n                \"time_start\": \"2019-07-09T02:42:30.834363\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 375,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:36.513Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:30:45.328Z\",\n            \"updated\": \"2019-07-09T09:42:36.513Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2786.4610000000002\",\n                \"time_end\": \"2019-07-09T02:42:36.513304\",\n                \"time_start\": \"2019-07-09T02:42:33.726843\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 376,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:39.497Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:31:07.217Z\",\n            \"updated\": \"2019-07-09T09:42:39.498Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2948.721\",\n                \"time_end\": \"2019-07-09T02:42:39.497586\",\n                \"time_start\": \"2019-07-09T02:42:36.548865\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 377,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:42.063Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:31:31.646Z\",\n            \"updated\": \"2019-07-09T09:42:42.063Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2479.197\",\n                \"time_end\": \"2019-07-09T02:42:42.063066\",\n                \"time_start\": \"2019-07-09T02:42:39.583869\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 378,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:45.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:31:53.972Z\",\n            \"updated\": \"2019-07-09T09:42:45.231Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3092.05\",\n                \"time_end\": \"2019-07-09T02:42:45.231541\",\n                \"time_start\": \"2019-07-09T02:42:42.139491\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 379,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:48.156Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:32:16.515Z\",\n            \"updated\": \"2019-07-09T09:42:48.156Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2884.714\",\n                \"time_end\": \"2019-07-09T02:42:48.156601\",\n                \"time_start\": \"2019-07-09T02:42:45.271887\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 380,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:51.039Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:32:38.781Z\",\n            \"updated\": \"2019-07-09T09:42:51.039Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2802.3570000000004\",\n                \"time_end\": \"2019-07-09T02:42:51.039129\",\n                \"time_start\": \"2019-07-09T02:42:48.236772\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 381,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:51.087Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:33:01.734Z\",\n            \"updated\": \"2019-07-09T09:42:51.087Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:381\",\n                \"job_id\": 381,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 382,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:53.686Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:33:24.272Z\",\n            \"updated\": \"2019-07-09T09:42:53.687Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2574.529\",\n                \"time_end\": \"2019-07-09T02:42:53.686857\",\n                \"time_start\": \"2019-07-09T02:42:51.112328\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 383,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:56.355Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:33:46.136Z\",\n            \"updated\": \"2019-07-09T09:42:56.355Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2589.086\",\n                \"time_end\": \"2019-07-09T02:42:56.355793\",\n                \"time_start\": \"2019-07-09T02:42:53.766707\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 384,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:42:59.203Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:34:08.171Z\",\n            \"updated\": \"2019-07-09T09:42:59.203Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2810.636\",\n                \"time_end\": \"2019-07-09T02:42:59.203651\",\n                \"time_start\": \"2019-07-09T02:42:56.393015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_idJXmoG.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 385,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:01.532Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:34:30.113Z\",\n            \"updated\": \"2019-07-09T09:43:01.532Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2303.855\",\n                \"time_end\": \"2019-07-09T02:43:01.532798\",\n                \"time_start\": \"2019-07-09T02:42:59.228943\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 386,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:04.952Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:34:51.583Z\",\n            \"updated\": \"2019-07-09T09:43:04.952Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3349.531\",\n                \"time_end\": \"2019-07-09T02:43:04.951920\",\n                \"time_start\": \"2019-07-09T02:43:01.602389\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 387,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:10.236Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:35:14.509Z\",\n            \"updated\": \"2019-07-09T09:43:10.236Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2695.599\",\n                \"time_end\": \"2019-07-09T02:43:10.236340\",\n                \"time_start\": \"2019-07-09T02:43:07.540741\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 388,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:13.809Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:35:36.456Z\",\n            \"updated\": \"2019-07-09T09:43:13.809Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3432.868\",\n                \"time_end\": \"2019-07-09T02:43:13.809677\",\n                \"time_start\": \"2019-07-09T02:43:10.376809\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 389,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:18.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:35:58.691Z\",\n            \"updated\": \"2019-07-09T09:43:18.620Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2635.017\",\n                \"time_end\": \"2019-07-09T02:43:18.620485\",\n                \"time_start\": \"2019-07-09T02:43:15.985468\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 390,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:24.517Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:36:20.546Z\",\n            \"updated\": \"2019-07-09T09:43:24.517Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3399.96\",\n                \"time_end\": \"2019-07-09T02:43:24.517026\",\n                \"time_start\": \"2019-07-09T02:43:21.117066\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 391,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:07.453Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:36:42.093Z\",\n            \"updated\": \"2019-07-09T09:43:07.453Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2475.978\",\n                \"time_end\": \"2019-07-09T02:43:07.453501\",\n                \"time_start\": \"2019-07-09T02:43:04.977523\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 392,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:21.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:37:04.164Z\",\n            \"updated\": \"2019-07-09T09:43:21.091Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2439.288\",\n                \"time_end\": \"2019-07-09T02:43:21.091609\",\n                \"time_start\": \"2019-07-09T02:43:18.652321\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 393,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:26.818Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:37:26.887Z\",\n            \"updated\": \"2019-07-09T09:43:26.818Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2269.071\",\n                \"time_end\": \"2019-07-09T02:43:26.818366\",\n                \"time_start\": \"2019-07-09T02:43:24.549295\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 394,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:15.963Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:37:48.634Z\",\n            \"updated\": \"2019-07-09T09:43:15.963Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2125.712\",\n                \"time_end\": \"2019-07-09T02:43:15.963110\",\n                \"time_start\": \"2019-07-09T02:43:13.837398\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 395,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:29.597Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:38:39.952Z\",\n            \"updated\": \"2019-07-09T09:43:29.597Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2716.5699999999997\",\n                \"time_end\": \"2019-07-09T02:43:29.597200\",\n                \"time_start\": \"2019-07-09T02:43:26.880630\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_uaUsiiS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 396,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:30.319Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:39:07.047Z\",\n            \"updated\": \"2019-07-09T09:43:30.319Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 10,\n                \"duration\": \"660.664\",\n                \"time_end\": \"2019-07-09T02:43:30.318978\",\n                \"time_start\": \"2019-07-09T02:43:29.658314\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2017-09-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 397,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:32.005Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:39:58.071Z\",\n            \"updated\": \"2019-07-09T09:43:32.005Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1634.1699999999998\",\n                \"time_end\": \"2019-07-09T02:43:32.005323\",\n                \"time_start\": \"2019-07-09T02:43:30.371153\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2017-12-27\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 398,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:34.236Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:40:48.324Z\",\n            \"updated\": \"2019-07-09T09:43:34.236Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 25,\n                \"duration\": \"2203.073\",\n                \"time_end\": \"2019-07-09T02:43:34.236256\",\n                \"time_start\": \"2019-07-09T02:43:32.033183\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2017-11-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 399,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-09T09:43:36.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:41:39.532Z\",\n            \"updated\": \"2019-07-09T09:43:36.509Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"2236.936\",\n                \"time_end\": \"2019-07-09T02:43:36.509288\",\n                \"time_start\": \"2019-07-09T02:43:34.272352\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2012-01-22\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    }\n]\n":1hkusC:aRrSX0nyaf4O1arX1AWkmLeYgqU