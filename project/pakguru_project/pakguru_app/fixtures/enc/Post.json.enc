"[\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 144,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:30.335Z\",\n            \"updated\": \"2019-07-03T05:30:30.335Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Akar Bakar Pakar Dhakar) \\u2013 2nd July 2019\",\n            \"slug\": \"zara-hut-kay-akar-bakar-pakar-dhakar-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T05:30:30.334Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdfu8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153394/zara-hut-kay-akar-bakar-pakar-dhakar-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 145,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:31.554Z\",\n            \"updated\": \"2019-07-03T05:30:31.554Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Rana Sanaullah Ki Giraftari) \\u2013 1st July 2019\",\n            \"slug\": \"zara-hut-kay-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T05:30:31.553Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cap9u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153319/zara-hut-kay-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 146,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:31.789Z\",\n            \"updated\": \"2019-07-03T05:30:31.789Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019\",\n            \"slug\": \"zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:31.789Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/bsc23Rabj0w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153186/zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 147,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:32.027Z\",\n            \"updated\": \"2019-07-03T05:30:32.027Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 28th June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-28th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.025Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c38xl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153124/zara-hut-kay-callers-day-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 148,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:32.260Z\",\n            \"updated\": \"2019-07-03T05:30:32.260Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (All Parties Conference Kaisi Rahi) \\u2013 27th June 2019\",\n            \"slug\": \"zara-hut-kay-all-parties-conference-kaisi-rahi-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.259Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0xtr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153061/zara-hut-kay-all-parties-conference-kaisi-rahi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 149,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:32.506Z\",\n            \"updated\": \"2019-07-03T05:30:32.507Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (APC Ka Kia Natija Raha?) \\u2013 26th June 2019\",\n            \"slug\": \"zara-hut-kay-apc-ka-kia-natija-raha-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.505Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by6wz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152991/zara-hut-kay-apc-ka-kia-natija-raha-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 150,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:32.748Z\",\n            \"updated\": \"2019-07-03T05:30:32.748Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Babar Awan Bari Ho Gaye) \\u2013 25th June 2019\",\n            \"slug\": \"zara-hut-kay-babar-awan-bari-ho-gaye-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.747Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvkr8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152911/zara-hut-kay-babar-awan-bari-ho-gaye-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 151,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:32.998Z\",\n            \"updated\": \"2019-07-03T05:30:32.998Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Discussion on Different Issues) \\u2013 24th June 2019\",\n            \"slug\": \"zara-hut-kay-discussion-on-different-issues-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.998Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/fjvE20Uj-8U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152850/zara-hut-kay-discussion-on-different-issues-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 152,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:33.594Z\",\n            \"updated\": \"2019-07-03T05:30:33.594Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Khwandgi Barhanay Ki Koshish) \\u2013 22nd June 2019\",\n            \"slug\": \"zara-hut-kay-khwandgi-barhanay-ki-koshish-22nd-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:33.590Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bp4sv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152720/zara-hut-kay-khwandgi-barhanay-ki-koshish-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 153,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:33.844Z\",\n            \"updated\": \"2019-07-03T05:30:33.844Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 21st June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-21st-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:33.843Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bnafm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152656/zara-hut-kay-callers-day-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 154,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:34.086Z\",\n            \"updated\": \"2019-07-03T05:30:34.086Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Makrooz Hona Tu Achi Baat Hai) \\u2013 19th June 2019\",\n            \"slug\": \"zara-hut-kay-makrooz-hona-tu-achi-baat-hai-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.085Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjpwu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152524/zara-hut-kay-makrooz-hona-tu-achi-baat-hai-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 155,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:34.325Z\",\n            \"updated\": \"2019-07-03T05:30:34.325Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Doctor, Mareez, Hospital, Or Media) \\u2013 18th June 2019\",\n            \"slug\": \"zara-hut-kay-doctor-mareez-hospital-or-media-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.324Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bi1a1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152469/zara-hut-kay-doctor-mareez-hospital-or-media-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 156,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:34.584Z\",\n            \"updated\": \"2019-07-03T05:30:34.584Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Murgi Na Sahi Bakri Sahi) \\u2013 17th June 2019\",\n            \"slug\": \"zara-hut-kay-murgi-na-sahi-bakri-sahi-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.584Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/9cfLldGBgag\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152416/zara-hut-kay-murgi-na-sahi-bakri-sahi-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 157,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:34.830Z\",\n            \"updated\": \"2019-07-03T05:30:34.830Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Science Ka Budget Kahan Kharch Hoga) \\u2013 15th June 2019\",\n            \"slug\": \"zara-hut-kay-science-ka-budget-kahan-kharch-hoga-15th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.829Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bafqp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152309/zara-hut-kay-science-ka-budget-kahan-kharch-hoga-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 158,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:35.063Z\",\n            \"updated\": \"2019-07-03T05:30:35.063Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 14th June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-14th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.062Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6ut6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152249/zara-hut-kay-callers-day-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 159,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:35.302Z\",\n            \"updated\": \"2019-07-03T05:30:35.302Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Ali Raza Abdi Ka Qatal Muqadma) \\u2013 13th June 2019\",\n            \"slug\": \"zara-hut-kay-ali-raza-abdi-ka-qatal-muqadma-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.301Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/pib16LicjiI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152200/zara-hut-kay-ali-raza-abdi-ka-qatal-muqadma-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 160,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:35.555Z\",\n            \"updated\": \"2019-07-03T05:30:35.555Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Why Imran Khan Is So Tensed?) \\u2013 12th June 2019\",\n            \"slug\": \"zara-hut-kay-why-imran-khan-is-so-tensed-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.554Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aymez\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152136/zara-hut-kay-why-imran-khan-is-so-tensed-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 161,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:35.814Z\",\n            \"updated\": \"2019-07-03T05:30:35.814Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Asif Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"zara-hut-kay-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.813Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ar2bv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152014/zara-hut-kay-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 162,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:36.075Z\",\n            \"updated\": \"2019-07-03T05:30:36.075Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Mehtab Channa Se Mehtab Rashdi Tak Ka Safar) \\u2013 7th June 2019\",\n            \"slug\": \"zara-hut-kay-mehtab-channa-se-mehtab-rashdi-tak-ka-safar-7th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.074Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aimbp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151853/zara-hut-kay-mehtab-channa-se-mehtab-rashdi-tak-ka-safar-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:36.310Z\",\n            \"updated\": \"2019-07-03T05:30:36.310Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Eid Special With Qavi Khan) \\u2013 6th June 2019\",\n            \"slug\": \"zara-hut-kay-eid-special-with-qavi-khan-6th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.310Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7afp9p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151809/zara-hut-kay-eid-special-with-qavi-khan-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:36.573Z\",\n            \"updated\": \"2019-07-03T05:30:36.573Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"zara-hut-kay-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.572Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/qFnS7jb-FjQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151783/zara-hut-kay-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:36.812Z\",\n            \"updated\": \"2019-07-03T05:30:36.812Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Pakistan , Talent Or Technology) \\u2013 1st June 2019\",\n            \"slug\": \"zara-hut-kay-pakistan-talent-or-technology-1st-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.811Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a13eu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151617/zara-hut-kay-pakistan-talent-or-technology-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:37.043Z\",\n            \"updated\": \"2019-07-03T05:30:37.043Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 31st May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-31st-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.042Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xvjy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151560/zara-hut-kay-callers-day-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:37.324Z\",\n            \"updated\": \"2019-07-03T05:30:37.324Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Moon Sighting, Science & Fawad Chaudhry) \\u2013 28th May 2019\",\n            \"slug\": \"zara-hut-kay-moon-sighting-science-fawad-chaudhry-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.323Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mqny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151397/zara-hut-kay-moon-sighting-science-fawad-chaudhry-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:37.584Z\",\n            \"updated\": \"2019-07-03T05:30:37.584Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (PTM Ka Masla Siasat Se Hal Hoga) \\u2013 27th May 2019\",\n            \"slug\": \"zara-hut-kay-ptm-ka-masla-siasat-se-hal-hoga-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.583Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79itne\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151354/zara-hut-kay-ptm-ka-masla-siasat-se-hal-hoga-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:37.843Z\",\n            \"updated\": \"2019-07-03T05:30:37.843Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Kal Kayh Sahafi , CEJ IBA) \\u2013 25th May 2019\",\n            \"slug\": \"zara-hut-kay-kal-kayh-sahafi-cej-iba-25th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.843Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79ccp5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151241/zara-hut-kay-kal-kayh-sahafi-cej-iba-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:38.101Z\",\n            \"updated\": \"2019-07-03T05:30:38.101Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 24th May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-24th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.100Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7996w5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151200/zara-hut-kay-callers-day-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:38.351Z\",\n            \"updated\": \"2019-07-03T05:30:38.351Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Modi Aik Baar Phir Jeet Gaye) \\u2013 23rd May 2019\",\n            \"slug\": \"zara-hut-kay-modi-aik-baar-phir-jeet-gaye-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.351Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795nx7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151127/zara-hut-kay-modi-aik-baar-phir-jeet-gaye-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:38.585Z\",\n            \"updated\": \"2019-07-03T05:30:38.585Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Justice For 10 Year Old Girl Farishta) \\u2013 21st May 2019\",\n            \"slug\": \"zara-hut-kay-justice-for-10-year-old-girl-farishta-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.585Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ynno\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151022/zara-hut-kay-justice-for-10-year-old-girl-farishta-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:38.822Z\",\n            \"updated\": \"2019-07-03T05:30:38.822Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Sehat Ka Shoba Ya Black Comedy) \\u2013 18th May 2019\",\n            \"slug\": \"zara-hut-kay-sehat-ka-shoba-ya-black-comedy-18th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.821Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ovbr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150873/zara-hut-kay-sehat-ka-shoba-ya-black-comedy-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:39.061Z\",\n            \"updated\": \"2019-07-03T05:30:39.061Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Discussion on Current Issues) \\u2013 17th May 2019\",\n            \"slug\": \"zara-hut-kay-discussion-on-current-issues-17th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.060Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78llc2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150810/zara-hut-kay-discussion-on-current-issues-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:39.323Z\",\n            \"updated\": \"2019-07-03T05:30:39.323Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Health System in Sindh) \\u2013 16th May 2019\",\n            \"slug\": \"zara-hut-kay-health-system-in-sindh-16th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.322Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78i1kx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150751/zara-hut-kay-health-system-in-sindh-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:39.591Z\",\n            \"updated\": \"2019-07-03T05:30:39.591Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Heart, Brain And Science) \\u2013 15th May 2019\",\n            \"slug\": \"zara-hut-kay-heart-brain-and-science-15th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.590Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ewc1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150688/zara-hut-kay-heart-brain-and-science-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 177,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:39.842Z\",\n            \"updated\": \"2019-07-03T05:30:39.842Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Whatsapp Bhi Heck Hogaya) \\u2013 14th May 2019\",\n            \"slug\": \"zara-hut-kay-whatsapp-bhi-heck-hogaya-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.841Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bqaa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150617/zara-hut-kay-whatsapp-bhi-heck-hogaya-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 178,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:40.074Z\",\n            \"updated\": \"2019-07-03T05:30:40.074Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hat Kay (Callers Day) - 13th May 2019\",\n            \"slug\": \"zara-hat-kay-callers-day-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.073Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/yXV0gwQkf58\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150569/zara-hat-kay-callers-day-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 179,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:40.310Z\",\n            \"updated\": \"2019-07-03T05:30:40.310Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Zara Hut Kay) \\u2013 11th May 2019\",\n            \"slug\": \"zara-hut-kay-zara-hut-kay-11th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.309Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x782ccs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150431/zara-hut-kay-zara-hut-kay-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 180,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:40.548Z\",\n            \"updated\": \"2019-07-03T05:30:40.548Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 10th May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-10th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.548Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77z881\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150383/zara-hut-kay-callers-day-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 181,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:40.788Z\",\n            \"updated\": \"2019-07-03T05:30:40.788Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Human Smuggling Via Marriage Fraud) \\u2013 9th May 2019\",\n            \"slug\": \"zara-hut-kay-human-smuggling-via-marriage-fraud-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.785Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/mo8Gl5sEQOc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150327/zara-hut-kay-human-smuggling-via-marriage-fraud-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 182,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:41.043Z\",\n            \"updated\": \"2019-07-03T05:30:41.043Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Zamant Na Milay Tu Bhag Jao) \\u2013 7th May 2019\",\n            \"slug\": \"zara-hut-kay-zamant-na-milay-tu-bhag-jao-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:41.042Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77op47\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150186/zara-hut-kay-zamant-na-milay-tu-bhag-jao-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 183,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T05:30:41.331Z\",\n            \"updated\": \"2019-07-03T05:30:41.331Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Yahan Say Kaiynat Ko Dehko) \\u2013 6th May 2019\",\n            \"slug\": \"zara-hut-kay-yahan-say-kaiynat-ko-dehko-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:41.330Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77l13j\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150115/zara-hut-kay-yahan-say-kaiynat-ko-dehko-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 585,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:40.397Z\",\n            \"updated\": \"2019-07-03T06:00:40.397Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Mehngai Ka Tofan) - 2nd July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:00:40.397Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/eYVpn3C2Xy0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153395/dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 586,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:41.801Z\",\n            \"updated\": \"2019-07-03T06:00:41.801Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T06:00:41.800Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/QloijplKJto\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153324/dunya-kamran-khan-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 587,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:42.032Z\",\n            \"updated\": \"2019-07-03T06:00:42.032Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Polio Spreading in Pakistan) - 28th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-polio-spreading-in-pakistan-28th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.031Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/P0hh6TdPpJU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153126/dunya-kamran-khan-kay-sath-polio-spreading-in-pakistan-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 588,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:42.291Z\",\n            \"updated\": \"2019-07-03T06:00:42.291Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Development in Money Laundering Case) - 27th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-development-in-money-laundering-case-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.290Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/PrnSBQrUXjc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153057/dunya-kamran-khan-kay-sath-development-in-money-laundering-case-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 589,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:42.535Z\",\n            \"updated\": \"2019-07-03T06:00:42.535Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Dollar 163 Ka Ho Gaya) - 26th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-dollar-163-ka-ho-gaya-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.534Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/PYYdMNfojDc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152984/dunya-kamran-khan-kay-sath-dollar-163-ka-ho-gaya-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 590,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:42.792Z\",\n            \"updated\": \"2019-07-03T06:00:42.792Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (IMF Program Shuru Ho Gaya) - 25th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imf-program-shuru-ho-gaya-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.791Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/VIC-07Pl6Rw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152924/dunya-kamran-khan-kay-sath-imf-program-shuru-ho-gaya-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 591,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:43.050Z\",\n            \"updated\": \"2019-07-03T06:00:43.050Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Peshawar BRT Project) - 24th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-peshawar-brt-project-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.049Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/B9Rfm0hsUL8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152854/dunya-kamran-khan-kay-sath-peshawar-brt-project-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 592,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:43.316Z\",\n            \"updated\": \"2019-07-03T06:00:43.316Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Corrupt Tareen Soba Qarar) - 21st June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-corrupt-tareen-soba-qarar-21st-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.315Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/pGxMgvLGKlQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152654/dunya-kamran-khan-kay-sath-sindh-corrupt-tareen-soba-qarar-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 593,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:43.552Z\",\n            \"updated\": \"2019-07-03T06:00:43.552Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Discussion on Different Issues) - 20th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-discussion-on-different-issues-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.552Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/JdK8atReMCk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152598/dunya-kamran-khan-kay-sath-discussion-on-different-issues-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 594,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:43.777Z\",\n            \"updated\": \"2019-07-03T06:00:43.777Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan Ki Maeeshat Aur Siasat) - 17th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistan-ki-maeeshat-aur-siasat-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.777Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/tyZ7l-KRJJE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152412/dunya-kamran-khan-kay-sath-pakistan-ki-maeeshat-aur-siasat-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 595,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:44.023Z\",\n            \"updated\": \"2019-07-03T06:00:44.023Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan's Economic Condition) - 14th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistans-economic-condition-14th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.022Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/OrR09_WSPJA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152252/dunya-kamran-khan-kay-sath-pakistan-s-economic-condition-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 596,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:44.300Z\",\n            \"updated\": \"2019-07-03T06:00:44.300Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Budget Aur Taxes) - 13th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-budget-aur-taxes-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.299Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/CHI_r7c8Jp8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152188/dunya-kamran-khan-kay-sath-budget-aur-taxes-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 597,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:44.554Z\",\n            \"updated\": \"2019-07-03T06:00:44.554Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Imran Khan Ka Khitab) - 12th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imran-khan-ka-khitab-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.553Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/niL8RLEXm88\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152142/dunya-kamran-khan-kay-sath-imran-khan-ka-khitab-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 598,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:44.786Z\",\n            \"updated\": \"2019-07-03T06:00:44.786Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Budget 2019-20) - 11th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-budget-2019-20-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.786Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/ubnXlT3rTkA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152081/dunya-kamran-khan-kay-sath-budget-2019-20-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 599,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:45.019Z\",\n            \"updated\": \"2019-07-03T06:00:45.019Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Asif Zardari Ki Giraftari) - 10th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.019Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/kvDkPGix4FM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152019/dunya-kamran-khan-kay-sath-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 600,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:45.250Z\",\n            \"updated\": \"2019-07-03T06:00:45.250Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Discussion on Different Issues) - 7th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-discussion-on-different-issues-7th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.249Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/hAoZjjyn8Ik\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151858/dunya-kamran-khan-kay-sath-discussion-on-different-issues-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 601,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:45.496Z\",\n            \"updated\": \"2019-07-03T06:00:45.496Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Siasi Mahaz Arai Mein Izafa) - 31st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-siasi-mahaz-arai-mein-izafa-31st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.495Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/TxxNdXtIf_g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151563/dunya-kamran-khan-kay-sath-siasi-mahaz-arai-mein-izafa-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 602,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:45.743Z\",\n            \"updated\": \"2019-07-03T06:00:45.743Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Accountability in Military) - 30th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-accountability-in-military-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.743Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/AyJA1xSj85c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151513/dunya-kamran-khan-kay-sath-accountability-in-military-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 603,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:46.008Z\",\n            \"updated\": \"2019-07-03T06:00:46.009Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Reference Against Judges) - 29th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-reference-against-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.007Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/fgMe66Qg1QE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151454/dunya-kamran-khan-kay-sath-reference-against-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 604,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:46.286Z\",\n            \"updated\": \"2019-07-03T06:00:46.286Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Opposition Active Against Govt) - 28th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-opposition-active-against-govt-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.285Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/32xwX0ZKTeY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151392/dunya-kamran-khan-kay-sath-opposition-active-against-govt-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 605,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:46.527Z\",\n            \"updated\": \"2019-07-03T06:00:46.527Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Higher Tax Target) - 27th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-higher-tax-target-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.526Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/aLcrB7rfmDo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151359/dunya-kamran-khan-kay-sath-higher-tax-target-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 606,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:46.767Z\",\n            \"updated\": \"2019-07-03T06:00:46.767Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Economy Getting Better) - 23rd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-economy-getting-better-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.766Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/5dQ4t4mVifw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151132/dunya-kamran-khan-kay-sath-economy-getting-better-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 607,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:47.047Z\",\n            \"updated\": \"2019-07-03T06:00:47.047Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan's Economy) - 22nd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistans-economy-22nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.047Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/tGizpdAf4lc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151077/dunya-kamran-khan-kay-sath-pakistan-s-economy-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 608,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:47.305Z\",\n            \"updated\": \"2019-07-03T06:00:47.305Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Chairman NAB, Other Issues) - 21st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-chairman-nab-other-issues-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.304Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/T7LksP9h3cw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151028/dunya-kamran-khan-kay-sath-chairman-nab-other-issues-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 609,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:47.560Z\",\n            \"updated\": \"2019-07-03T06:00:47.560Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (NAB's Message to Business Community) - 20th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-nabs-message-to-business-community-20th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.559Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/wNySXXObcA0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150959/dunya-kamran-khan-kay-sath-nab-s-message-to-business-community-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 610,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:47.803Z\",\n            \"updated\": \"2019-07-03T06:00:47.803Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Economy Issues) - 17th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-economy-issues-17th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.802Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/vpLknAh5QJc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150813/dunya-kamran-khan-kay-sath-economy-issues-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 611,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:48.071Z\",\n            \"updated\": \"2019-07-03T06:00:48.071Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistani Maeeshat) - 16th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistani-maeeshat-16th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:48.070Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/MST06SpL2Ks\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150756/dunya-kamran-khan-kay-sath-pakistani-maeeshat-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 612,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:48.422Z\",\n            \"updated\": \"2019-07-03T06:00:48.422Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Terrorism in Balochistan, Karachi Issues) - 15th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-terrorism-in-balochistan-karachi-issues-15th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:48.420Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/6TmBiZtIXx4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150683/dunya-kamran-khan-kay-sath-terrorism-in-balochistan-karachi-issues-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 613,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:48.760Z\",\n            \"updated\": \"2019-07-03T06:00:48.761Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Cases on Zardari & Bilawal) - 14th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-cases-on-zardari-bilawal-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:48.759Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/xeAkEWUWxp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150615/dunya-kamran-khan-kay-sath-cases-on-zardari-bilawal-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 614,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:49.008Z\",\n            \"updated\": \"2019-07-03T06:00:49.008Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (IMF, 1000 Buses For Karachi) - 13th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imf-1000-buses-for-karachi-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.008Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/1iTV7gL7KUk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150565/dunya-kamran-khan-kay-sath-imf-1000-buses-for-karachi-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 615,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:49.292Z\",\n            \"updated\": \"2019-07-03T06:00:49.292Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Strict Conditions of IMF) - 10th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-strict-conditions-of-imf-10th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.291Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/LSTZeN8kDx0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150386/dunya-kamran-khan-kay-sath-strict-conditions-of-imf-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 616,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:49.538Z\",\n            \"updated\": \"2019-07-03T06:00:49.538Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pak Iran Gas Pipeline Project) - 9th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pak-iran-gas-pipeline-project-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.537Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/Ha69Up_D9ZE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150318/dunya-kamran-khan-kay-sath-pak-iran-gas-pipeline-project-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 617,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:49.768Z\",\n            \"updated\": \"2019-07-03T06:00:49.768Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Mein Gandam Chori) - 8th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-mein-gandam-chori-8th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.767Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/vfNJ4jLfc44\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150259/dunya-kamran-khan-kay-sath-sindh-mein-gandam-chori-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 618,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:50.006Z\",\n            \"updated\": \"2019-07-03T06:00:50.006Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Multiple Issues) - 7th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-multiple-issues-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.005Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/5Ix6o0afr3Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150185/dunya-kamran-khan-kay-sath-multiple-issues-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 619,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:50.268Z\",\n            \"updated\": \"2019-07-03T06:00:50.268Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (PTI Hakumat Mein Tabdeeli) - 6th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pti-hakumat-mein-tabdeeli-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.267Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/XwaqwJDdVtg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150117/dunya-kamran-khan-kay-sath-pti-hakumat-mein-tabdeeli-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 620,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:50.517Z\",\n            \"updated\": \"2019-07-03T06:00:50.517Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (NAB, Maeeshat, Sehafat) - 3rd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-nab-maeeshat-sehafat-3rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.516Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/wQH7qauMBJ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149938/dunya-kamran-khan-kay-sath-nab-maeeshat-sehafat-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 621,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:50.758Z\",\n            \"updated\": \"2019-07-03T06:00:50.758Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Hakumat Gandam Chori) -  2nd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-hakumat-gandam-chori-2nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.757Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/XDm_7G37PEk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149868/dunya-kamran-khan-kay-sath-sindh-hakumat-gandam-chori-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 622,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:51.041Z\",\n            \"updated\": \"2019-07-03T06:00:51.041Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Imran Khan Speech, Masood Azhar) - 1st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imran-khan-speech-masood-azhar-1st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:51.040Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/Ymv2UpNVyts\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149803/dunya-kamran-khan-kay-sath-imran-khan-speech-masood-azhar-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 623,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:51.281Z\",\n            \"updated\": \"2019-07-03T06:00:51.281Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (PM China Visit, Aids in Larkana) - 30th April 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pm-china-visit-aids-in-larkana-30th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:00:51.280Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/EMmBH67FTks\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149730/dunya-kamran-khan-kay-sath-pm-china-visit-aids-in-larkana-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 624,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:00:51.515Z\",\n            \"updated\": \"2019-07-03T06:00:51.515Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (DG ISPR Press Conference) - 29th April 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-dg-ispr-press-conference-29th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:00:51.514Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/Hb6yVtSGAcs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149661/dunya-kamran-khan-kay-sath-dg-ispr-press-conference-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 625,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:05.700Z\",\n            \"updated\": \"2019-07-03T06:22:05.700Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr Shahid Masood (Imran Khan Vs Others) - 2nd July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-vs-others-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:22:05.700Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/CMOcCrpLnK0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153369/live-with-dr-shahid-masood-imran-khan-vs-others-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 626,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:06.918Z\",\n            \"updated\": \"2019-07-03T06:22:06.918Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan Aur Naya Siasi Manzarnama) - 1st July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-aur-naya-siasi-manzarnama-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T06:22:06.918Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/JbjG8ceoee8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153297/live-with-dr-shahid-masood-imran-khan-aur-naya-siasi-manzarnama-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 627,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:07.181Z\",\n            \"updated\": \"2019-07-03T06:22:07.181Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan Aur Loti Hui Daulat) - 30th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.181Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/u8rlFF5rH-E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153227/live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 628,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:07.453Z\",\n            \"updated\": \"2019-07-03T06:22:07.454Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Muashi Dehshatgardi Ka Bharpoor Waar) - 29th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-muashi-dehshatgardi-ka-bharpoor-waar-29th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.453Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/plS_RS9Bsg0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153167/live-with-dr-shahid-masood-muashi-dehshatgardi-ka-bharpoor-waar-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 629,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:07.696Z\",\n            \"updated\": \"2019-07-03T06:22:07.696Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Govt And Army on Same Page) - 28th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-govt-and-army-on-same-page-28th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.696Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/wvCNG36Q4FA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153102/live-with-dr-shahid-masood-govt-and-army-on-same-page-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 630,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:07.953Z\",\n            \"updated\": \"2019-07-03T06:22:07.953Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan & Economic Terrorism) - 27th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-economic-terrorism-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.953Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/ga4jGny3A1A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153032/live-with-dr-shahid-masood-imran-khan-economic-terrorism-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 631,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:08.207Z\",\n            \"updated\": \"2019-07-03T06:22:08.207Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Sahiad Masood (Kia Imran Khan Ke Imtihan Khatam Ho Gaye) - 26th June 2019\",\n            \"slug\": \"live-with-dr-sahiad-masood-kia-imran-khan-ke-imtihan-khatam-ho-gaye-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.206Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/EhANNbeuU4U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152960/live-with-dr-sahiad-masood-kia-imran-khan-ke-imtihan-khatam-ho-gaye-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 632,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:08.436Z\",\n            \"updated\": \"2019-07-03T06:22:08.436Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Nahi Maane) - 25th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-nahi-maane-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.434Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/r12YYNoQlns\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152889/live-with-dr-shahid-masood-imran-khan-nahi-maane-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 633,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:08.665Z\",\n            \"updated\": \"2019-07-03T06:22:08.665Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Misaq e Maeeshat Aur Imran Khan) - 24th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-misaq-e-maeeshat-aur-imran-khan-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.664Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/7aJQZiWQBOI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152819/live-with-dr-shahid-masood-misaq-e-maeeshat-aur-imran-khan-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 634,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:08.931Z\",\n            \"updated\": \"2019-07-03T06:22:08.931Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Misaq e Maeeshat Aur Ahtasab) - 23rd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-misaq-e-maeeshat-aur-ahtasab-23rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.930Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/1XIYh-Cxxek\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152767/live-with-dr-shahid-masood-misaq-e-maeeshat-aur-ahtasab-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 635,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:09.511Z\",\n            \"updated\": \"2019-07-03T06:22:09.511Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Maryam Nawaz Vs Shahbaz Sharif) - 22nd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:09.510Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/PtcQngWr8ho\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152706/live-with-dr-shahid-masood-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 636,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:09.775Z\",\n            \"updated\": \"2019-07-03T06:22:09.775Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Halaat e Hazira, Bari Tabdeeli) - 21st June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-halaat-e-hazira-bari-tabdeeli-21st-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:09.774Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/88bW0825kGA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152629/live-with-dr-shahid-masood-halaat-e-hazira-bari-tabdeeli-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 637,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:10.008Z\",\n            \"updated\": \"2019-07-03T06:22:10.008Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Kia Huwa Taira Wada) - 20th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-kia-huwa-taira-wada-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.008Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/4HtyUbVMq8Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152573/live-with-dr-shahid-masood-kia-huwa-taira-wada-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 638,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:10.241Z\",\n            \"updated\": \"2019-07-03T06:22:10.241Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Kasheedagi) - 19th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-kasheedagi-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.240Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/HuJGbcJBgOA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152505/live-with-dr-shahid-masood-kasheedagi-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 639,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:10.490Z\",\n            \"updated\": \"2019-07-03T06:22:10.490Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Bohran Ya Tasadam) - 18th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-bohran-ya-tasadam-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.489Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/THbiK48o1Tk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152450/live-with-dr-shahid-masood-bohran-ya-tasadam-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 640,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:10.725Z\",\n            \"updated\": \"2019-07-03T06:22:10.725Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Game of Power) - 17th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-game-of-power-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.724Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/bC65EqAc3BQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152378/live-with-dr-shahid-masood-game-of-power-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 641,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:10.954Z\",\n            \"updated\": \"2019-07-03T06:22:10.954Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Ahtajaj Aur Ahtasab) - 16th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ahtajaj-aur-ahtasab-16th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.954Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/cNWt-TJldaE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152336/live-with-dr-shahid-masood-ahtajaj-aur-ahtasab-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 642,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:11.183Z\",\n            \"updated\": \"2019-07-03T06:22:11.184Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (More Arrests) - 15th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-more-arrests-15th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.183Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/fZc2uI7erUo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152285/live-with-dr-shahid-masood-more-arrests-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 643,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:11.432Z\",\n            \"updated\": \"2019-07-03T06:22:11.432Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Who Will Be Arrested Next) - 14th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-who-will-be-arrested-next-14th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.431Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/m8dBai6Tt-I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152230/live-with-dr-shahid-masood-who-will-be-arrested-next-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 644,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:11.677Z\",\n            \"updated\": \"2019-07-03T06:22:11.677Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Minus All..???) - 13th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-minus-all-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.676Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/XsC-VQhOPnc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152175/live-with-dr-shahid-masood-minus-all-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 645,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:11.901Z\",\n            \"updated\": \"2019-07-03T06:22:11.902Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Vs Others) - 12th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-vs-others-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.901Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/wIHMxmdvXAE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152112/live-with-dr-shahid-masood-imran-khan-vs-others-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 646,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:12.136Z\",\n            \"updated\": \"2019-07-03T06:22:12.136Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Budget, Arrests And Movement) - 11th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-budget-arrests-and-movement-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.135Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/N2Ivnx-7nPk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152061/live-with-dr-shahid-masood-budget-arrests-and-movement-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 647,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:12.398Z\",\n            \"updated\": \"2019-07-03T06:22:12.398Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Asif Zardari Arrested) - 10th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.395Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/OOO4EOTi-TE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151988/live-with-dr-shahid-masood-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 648,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:12.654Z\",\n            \"updated\": \"2019-07-03T06:22:12.654Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Bohran Aur Tasadam) - 9th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-bohran-aur-tasadam-9th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.653Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/AkiHALPvqPY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151921/live-with-dr-shahid-masood-bohran-aur-tasadam-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 649,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:12.883Z\",\n            \"updated\": \"2019-07-03T06:22:12.884Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Ajeeb Loog Hain) - 8th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ajeeb-loog-hain-8th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.883Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/UepLG2cqGic\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151878/live-with-dr-shahid-masood-ajeeb-loog-hain-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 650,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:13.123Z\",\n            \"updated\": \"2019-07-03T06:22:13.123Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Third Day Eid Special) - 7th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-third-day-eid-special-7th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.123Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/IW5u_G-hd6g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151831/live-with-dr-shahid-masood-third-day-eid-special-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 651,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:13.385Z\",\n            \"updated\": \"2019-07-03T06:22:13.385Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Second Day Eid Special) - 6th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-second-day-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.385Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/12C8u9B-sUI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151800/live-with-dr-shahid-masood-second-day-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 652,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:13.629Z\",\n            \"updated\": \"2019-07-03T06:22:13.629Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Eid Special Show With Dr. Shahid Masood (Day-1) - 5th June 2019\",\n            \"slug\": \"eid-special-show-with-dr-shahid-masood-day-1-5th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.629Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/ukt_nmw3qd0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151757/eid-special-show-with-dr-shahid-masood-day-1-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 653,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:13.891Z\",\n            \"updated\": \"2019-07-03T06:22:13.892Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Eid Ke Baad Halaat) - 4th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-eid-ke-baad-halaat-4th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.891Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/7idGHZK4uy4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151718/live-with-dr-shahid-masood-eid-ke-baad-halaat-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 654,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:14.168Z\",\n            \"updated\": \"2019-07-03T06:22:14.168Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Mega Corruption Cases) - 3rd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-mega-corruption-cases-3rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.167Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/36hFLy1ZVGc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151684/live-with-dr-shahid-masood-mega-corruption-cases-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 655,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:14.426Z\",\n            \"updated\": \"2019-07-03T06:22:14.426Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Takht Ya Takhta) - 2nd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-takht-ya-takhta-2nd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.425Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/ozO-RtyNXqs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151650/live-with-dr-shahid-masood-takht-ya-takhta-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 656,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:14.660Z\",\n            \"updated\": \"2019-07-03T06:22:14.660Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Last Balls of Match) - 1st June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-last-balls-of-match-1st-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.660Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/EPW8sbDatfs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151599/live-with-dr-shahid-masood-last-balls-of-match-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 657,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:14.899Z\",\n            \"updated\": \"2019-07-03T06:22:14.899Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Trembling, Shaking Democracy) - 31st May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-trembling-shaking-democracy-31st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.898Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/cD_MOrHJvK4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151549/live-with-dr-shahid-masood-trembling-shaking-democracy-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 658,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:15.129Z\",\n            \"updated\": \"2019-07-03T06:22:15.129Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Hukamran Aur Riasat) - 30th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-hukamran-aur-riasat-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.129Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/nkx_AFo9wkQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151487/live-with-dr-shahid-masood-hukamran-aur-riasat-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 659,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:15.406Z\",\n            \"updated\": \"2019-07-03T06:22:15.407Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Why Imran Khan Is Silent?) - 29th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-why-imran-khan-is-silent-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.405Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/oFucibuRxvI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151428/live-with-dr-shahid-masood-why-imran-khan-is-silent-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 660,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:15.664Z\",\n            \"updated\": \"2019-07-03T06:22:15.664Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Ki Pur Asrar Khamoshi) - 28th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-ki-pur-asrar-khamoshi-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.664Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/C6MHdDy7xMg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151382/live-with-dr-shahid-masood-imran-khan-ki-pur-asrar-khamoshi-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 661,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:15.968Z\",\n            \"updated\": \"2019-07-03T06:22:15.968Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (PTM Issue, Chairman NAB Controversy) - 27th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ptm-issue-chairman-nab-controversy-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.967Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/iyTyBTXugpk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151335/live-with-dr-shahid-masood-ptm-issue-chairman-nab-controversy-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 662,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:16.230Z\",\n            \"updated\": \"2019-07-03T06:22:16.230Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (When Will State Take Action Against PTM?) - 26th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-when-will-state-take-action-against-ptm-26th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:16.230Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/UyHq3G7Odgs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151282/live-with-dr-shahid-masood-when-will-state-take-action-against-ptm-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 663,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:16.482Z\",\n            \"updated\": \"2019-07-03T06:22:16.482Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr Shahid Masood (Chairman NAB & Dirty Politics) \\u2013 25th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-chairman-nab-dirty-politics-25th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:16.481Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/o6dadGppguY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151235/live-with-dr-shahid-masood-chairman-nab-dirty-politics-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 664,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:16.720Z\",\n            \"updated\": \"2019-07-03T06:22:16.720Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Chairman NAB Scandal) - 24th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:16.720Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/faG4PJc0hAw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151178/live-with-dr-shahid-masood-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 665,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:02.871Z\",\n            \"updated\": \"2019-07-03T06:29:02.871Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Amnesty Scheme, Other Issues) - 30th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:02.870Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/k5USPAIelXc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/153242/meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 666,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:04.095Z\",\n            \"updated\": \"2019-07-03T06:29:04.095Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Different Issues) \\u2013 23rd June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-different-issues-23rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.094Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/zCygDFsBiLA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/152770/meray-mutabiq-with-hassan-nisar-different-issues-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 667,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:04.315Z\",\n            \"updated\": \"2019-07-03T06:29:04.315Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Different Issues) \\u2013 16th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-16th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.315Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/X6Syg2r6aOo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/152339/meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 668,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:04.536Z\",\n            \"updated\": \"2019-07-03T06:29:04.536Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Current Issues) \\u2013 9th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-9th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.536Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/pKW-OYkAbQs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151924/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 669,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:04.794Z\",\n            \"updated\": \"2019-07-03T06:29:04.794Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 2nd June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.793Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/LondCQqorZ8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151665/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 670,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:05.008Z\",\n            \"updated\": \"2019-07-03T06:29:05.008Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) - 26th May 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-26th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:05.008Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ucZfd8DESNA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151307/meray-mutabiq-with-hassan-nisar-current-issues-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 671,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:05.250Z\",\n            \"updated\": \"2019-07-03T06:29:05.250Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) \\u2013 12th May 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-12th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:05.249Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/6OSk5b305_c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/150509/meray-mutabiq-with-hassan-nisar-current-issues-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 672,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:05.500Z\",\n            \"updated\": \"2019-07-03T06:29:05.500Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 2nd September 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-september-2018\",\n            \"publish_date\": \"2019-07-03T06:29:05.497Z\",\n            \"target_date\": \"2018-09-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t03l6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/135460/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 673,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:05.759Z\",\n            \"updated\": \"2019-07-03T06:29:05.760Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 26th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-26th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:05.758Z\",\n            \"target_date\": \"2018-08-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6smwe3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134966/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-26th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 674,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:06.018Z\",\n            \"updated\": \"2019-07-03T06:29:06.018Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Imran Khan Became PM) - 19th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-imran-khan-became-pm-19th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.017Z\",\n            \"target_date\": \"2018-08-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6s945s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134591/mere-mutabiq-with-hassan-nisar-imran-khan-became-pm-19th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 675,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:06.294Z\",\n            \"updated\": \"2019-07-03T06:29:06.294Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 12th August 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-12th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.292Z\",\n            \"target_date\": \"2018-08-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rvz2q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134122/meray-mutabiq-with-hassan-nisar-current-issues-12th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 676,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:06.537Z\",\n            \"updated\": \"2019-07-03T06:29:06.537Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Current Issues) - 5th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-current-issues-5th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.537Z\",\n            \"target_date\": \"2018-08-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rgsf2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/133665/mere-mutabiq-with-hassan-nisar-current-issues-5th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 677,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:06.781Z\",\n            \"updated\": \"2019-07-03T06:29:06.781Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 29th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-29th-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.780Z\",\n            \"target_date\": \"2018-07-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qmnci\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/133200/meray-mutabiq-with-hassan-nisar-current-issues-29th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 678,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:07.030Z\",\n            \"updated\": \"2019-07-03T06:29:07.030Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 22nd July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-22nd-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.030Z\",\n            \"target_date\": \"2018-07-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6psevy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/132776/meray-mutabiq-with-hassan-nisar-current-issues-22nd-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 679,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:07.275Z\",\n            \"updated\": \"2019-07-03T06:29:07.275Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 15th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-15th-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.274Z\",\n            \"target_date\": \"2018-07-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6osrli\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/132350/meray-mutabiq-with-hassan-nisar-current-issues-15th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 680,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:07.533Z\",\n            \"updated\": \"2019-07-03T06:29:07.533Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Nawaz Sharif & Maryam Convicted) \\u2013 8th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-nawaz-sharif-maryam-convicted-8th-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.532Z\",\n            \"target_date\": \"2018-07-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nz5gq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/131917/meray-mutabiq-with-hassan-nisar-nawaz-sharif-maryam-convicted-8th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 681,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:07.863Z\",\n            \"updated\": \"2019-07-03T06:29:07.863Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 24th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-24th-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.862Z\",\n            \"target_date\": \"2018-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6moa9q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/131102/meray-mutabiq-with-hassan-nisar-current-issues-24th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 682,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:08.084Z\",\n            \"updated\": \"2019-07-03T06:29:08.084Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 17th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-17th-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.083Z\",\n            \"target_date\": \"2018-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6m3gtt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/130694/meray-mutabiq-with-hassan-nisar-current-issues-17th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 683,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:08.318Z\",\n            \"updated\": \"2019-07-03T06:29:08.318Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 10th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-10th-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.317Z\",\n            \"target_date\": \"2018-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6lj2h2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/130315/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-10th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 684,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:08.542Z\",\n            \"updated\": \"2019-07-03T06:29:08.542Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 3rd June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-3rd-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.541Z\",\n            \"target_date\": \"2018-06-03\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kyihe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/129845/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-3rd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 685,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:08.787Z\",\n            \"updated\": \"2019-07-03T06:29:08.787Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 27th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-27th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.786Z\",\n            \"target_date\": \"2018-05-27\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kfxj6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/129344/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-27th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 686,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:09.005Z\",\n            \"updated\": \"2019-07-03T06:29:09.005Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 20th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-20th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.005Z\",\n            \"target_date\": \"2018-05-20\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jx509\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128946/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-20th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 687,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:09.231Z\",\n            \"updated\": \"2019-07-03T06:29:09.231Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Nawaz Sharif's Statement) \\u2013 13th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-nawaz-sharifs-statement-13th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.231Z\",\n            \"target_date\": \"2018-05-13\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jfoaw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128503/meray-mutabiq-with-hassan-nisar-nawaz-sharif-s-statement-13th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 688,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:09.445Z\",\n            \"updated\": \"2019-07-03T06:29:09.445Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) - 7th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-7th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.445Z\",\n            \"target_date\": \"2018-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6j1kad\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128143/meray-mutabiq-with-hassan-nisar-current-issues-7th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 689,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:09.678Z\",\n            \"updated\": \"2019-07-03T06:29:09.678Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 29th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-29th-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.678Z\",\n            \"target_date\": \"2018-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6imf7x\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/127670/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-29th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 690,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:09.889Z\",\n            \"updated\": \"2019-07-03T06:29:09.889Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 22nd April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-22nd-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.888Z\",\n            \"target_date\": \"2018-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6i84cw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/127244/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-22nd-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 691,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:10.119Z\",\n            \"updated\": \"2019-07-03T06:29:10.119Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 15th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-15th-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.118Z\",\n            \"target_date\": \"2018-04-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6husot\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126808/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-15th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 692,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:10.358Z\",\n            \"updated\": \"2019-07-03T06:29:10.358Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Different Issues) \\u2013 8th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-8th-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.357Z\",\n            \"target_date\": \"2018-04-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6hi1px\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126374/meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-8th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 693,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:10.593Z\",\n            \"updated\": \"2019-07-03T06:29:10.593Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 1st April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-1st-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.593Z\",\n            \"target_date\": \"2018-04-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6h6cwf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126026/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-1st-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 694,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:10.804Z\",\n            \"updated\": \"2019-07-03T06:29:10.804Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 11th March 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-march-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.804Z\",\n            \"target_date\": \"2018-03-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6g474n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/124749/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-march-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 695,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:11.022Z\",\n            \"updated\": \"2019-07-03T06:29:11.022Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues)  \\u2013 4th March 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-4th-march-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.022Z\",\n            \"target_date\": \"2018-03-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6fmh0t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/124331/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-4th-march-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 696,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:11.231Z\",\n            \"updated\": \"2019-07-03T06:29:11.231Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Different Issues) \\u2013 25th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-different-issues-25th-february-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.231Z\",\n            \"target_date\": \"2018-02-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6f9wb3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123953/meray-mutabiq-with-hassan-nisar-different-issues-25th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 697,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:11.455Z\",\n            \"updated\": \"2019-07-03T06:29:11.455Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 18th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-18th-february-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.453Z\",\n            \"target_date\": \"2018-02-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ey6xo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123540/meray-mutabiq-with-hassan-nisar-current-issues-18th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 698,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:11.704Z\",\n            \"updated\": \"2019-07-03T06:29:11.704Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Current Issues) \\u2013 11th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-february-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.703Z\",\n            \"target_date\": \"2018-02-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6elfon\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123170/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 699,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:11.975Z\",\n            \"updated\": \"2019-07-03T06:29:11.975Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on current issues) \\u2013 28th January 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-28th-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.974Z\",\n            \"target_date\": \"2018-01-29\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6du35d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/122327/meray-mutabiq-with-hassan-nisar-28th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 700,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:12.211Z\",\n            \"updated\": \"2019-07-03T06:29:12.211Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq (Discussion on Current Issues) \\u2013 21st January 2018\",\n            \"slug\": \"meray-mutabiq-discussion-on-current-issues-21st-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:12.211Z\",\n            \"target_date\": \"2018-01-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6dgl9u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/121893/meray-mutabiq-discussion-on-current-issues-21st-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 701,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:12.446Z\",\n            \"updated\": \"2019-07-03T06:29:12.446Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Kasur Incident & Other Issues) \\u2013 14th January 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-kasur-incident-other-issues-14th-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:12.446Z\",\n            \"target_date\": \"2018-01-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6d3u6p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/121459/meray-mutabiq-with-hassan-nisar-kasur-incident-other-issues-14th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 702,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:12.688Z\",\n            \"updated\": \"2019-07-03T06:29:12.688Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 7th January 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-7th-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:12.688Z\",\n            \"target_date\": \"2018-01-08\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6creiu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120829/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-7th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 703,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:12.925Z\",\n            \"updated\": \"2019-07-03T06:29:12.925Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 31st December 2017\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-31st-december-2017\",\n            \"publish_date\": \"2019-07-03T06:29:12.924Z\",\n            \"target_date\": \"2017-12-31\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6cgtqb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120471/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-31st-december-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 704,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:13.187Z\",\n            \"updated\": \"2019-07-03T06:29:13.187Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 24th December 2017\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-24th-december-2017\",\n            \"publish_date\": \"2019-07-03T06:29:13.185Z\",\n            \"target_date\": \"2017-12-25\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6c69o7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120027/meray-mutabiq-with-hassan-nisar-current-issues-24th-december-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 705,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:23.312Z\",\n            \"updated\": \"2019-07-03T06:29:23.312Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Rana Sanauallah, Imran Khan Ki Opposition Ko Offer) \\u2013 2nd July 2019\",\n            \"slug\": \"off-the-record-rana-sanauallah-imran-khan-ki-opposition-ko-offer-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:29:23.311Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd6re\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153382/off-the-record-rana-sanauallah-imran-khan-ki-opposition-ko-offer-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 706,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:23.997Z\",\n            \"updated\": \"2019-07-03T06:29:23.997Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (All Parties Conference, Inflation) - 27th June 2019\",\n            \"slug\": \"off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:23.996Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0nyh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153037/off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 707,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:24.263Z\",\n            \"updated\": \"2019-07-03T06:29:24.263Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (APC Ne Kia Hasil Kia?) \\u2013 26th June 2019\",\n            \"slug\": \"off-the-record-apc-ne-kia-hasil-kia-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:24.262Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxz7c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152973/off-the-record-apc-ne-kia-hasil-kia-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 708,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:24.508Z\",\n            \"updated\": \"2019-07-03T06:29:24.508Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Misaq e Maeeshat Kia Hai) \\u2013 25th June 2019\",\n            \"slug\": \"off-the-record-misaq-e-maeeshat-kia-hai-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:24.508Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvc9b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152900/off-the-record-misaq-e-maeeshat-kia-hai-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 709,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:24.744Z\",\n            \"updated\": \"2019-07-03T06:29:24.744Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Aur Hakumat Mein Mahaz Arai) - 24th June 2019\",\n            \"slug\": \"off-the-record-opposition-aur-hakumat-mein-mahaz-arai-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:24.743Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt3no\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152839/off-the-record-opposition-aur-hakumat-mein-mahaz-arai-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 710,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:25.041Z\",\n            \"updated\": \"2019-07-03T06:29:25.041Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Hakumat Aur Opposition Mein Mahaz Aarai) - 20th June 2019\",\n            \"slug\": \"off-the-record-hakumat-aur-opposition-mein-mahaz-aarai-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.040Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl9pi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152578/off-the-record-hakumat-aur-opposition-mein-mahaz-aarai-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 711,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:25.354Z\",\n            \"updated\": \"2019-07-03T06:29:25.354Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Rejects Budget) \\u2013 19th June 2019\",\n            \"slug\": \"off-the-record-opposition-rejects-budget-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.354Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjkoc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152511/off-the-record-opposition-rejects-budget-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 712,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:25.683Z\",\n            \"updated\": \"2019-07-03T06:29:25.683Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Qaumi Assembly Mein Hungama) - 18th June 2019\",\n            \"slug\": \"off-the-record-qaumi-assembly-mein-hungama-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.682Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhuqm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152454/off-the-record-qaumi-assembly-mein-hungama-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 713,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:25.956Z\",\n            \"updated\": \"2019-07-03T06:29:25.956Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Qaumi Assembly Ka Ijlas) - 17th June 2019\",\n            \"slug\": \"off-the-record-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.955Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgf3b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152395/off-the-record-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 714,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:26.204Z\",\n            \"updated\": \"2019-07-03T06:29:26.204Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Leaders Ki Giraftari) - 13th June 2019\",\n            \"slug\": \"off-the-record-opposition-leaders-ki-giraftari-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.203Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2c8f\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152177/off-the-record-opposition-leaders-ki-giraftari-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 715,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:26.449Z\",\n            \"updated\": \"2019-07-03T06:29:26.449Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (24000 Billion Debt in 10 Years?) - 12th June 2019\",\n            \"slug\": \"off-the-record-24000-billion-debt-in-10-years-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.449Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay5iu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152124/off-the-record-24000-billion-debt-in-10-years-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 716,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:26.678Z\",\n            \"updated\": \"2019-07-03T06:29:26.678Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Hamza Shahbaz Arrested) \\u2013 11th June 2019\",\n            \"slug\": \"off-the-record-hamza-shahbaz-arrested-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.677Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aty9b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152064/off-the-record-hamza-shahbaz-arrested-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 717,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:26.908Z\",\n            \"updated\": \"2019-07-03T06:29:26.908Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Asif Zardari Arrested) - 10th June 2019\",\n            \"slug\": \"off-the-record-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.908Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqy9e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152026/off-the-record-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 718,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:27.147Z\",\n            \"updated\": \"2019-07-03T06:29:27.147Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Second Day Eid Special) \\u2013 6th June 2019\",\n            \"slug\": \"off-the-record-second-day-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.146Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7afc8d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151813/off-the-record-second-day-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 719,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:27.402Z\",\n            \"updated\": \"2019-07-03T06:29:27.402Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Day One Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"off-the-record-day-one-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.401Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7acc23\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151780/off-the-record-day-one-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 720,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:27.632Z\",\n            \"updated\": \"2019-07-03T06:29:27.632Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Maryam Nawaz in Action, Shahbaz Sharif Silent) - 4th June 2019\",\n            \"slug\": \"off-the-record-maryam-nawaz-in-action-shahbaz-sharif-silent-4th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.631Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7a98un\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151723/off-the-record-maryam-nawaz-in-action-shahbaz-sharif-silent-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 721,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:27.873Z\",\n            \"updated\": \"2019-07-03T06:29:27.873Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (PMLN Politics Vs PTI Politics) \\u2013 3rd June 2019\",\n            \"slug\": \"off-the-record-pmln-politics-vs-pti-politics-3rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.872Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a67zt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151699/off-the-record-pmln-politics-vs-pti-politics-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 722,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:28.113Z\",\n            \"updated\": \"2019-07-03T06:29:28.113Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Adlia Bachao Tehreek Ka Elan) - 30th May 2019\",\n            \"slug\": \"off-the-record-adlia-bachao-tehreek-ka-elan-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.113Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79td7b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151491/off-the-record-adlia-bachao-tehreek-ka-elan-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 723,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:28.378Z\",\n            \"updated\": \"2019-07-03T06:29:28.378Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Giving Tough Time to Govt) - 29th May 2019\",\n            \"slug\": \"off-the-record-opposition-giving-tough-time-to-govt-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.378Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79q01u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151429/off-the-record-opposition-giving-tough-time-to-govt-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 724,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:28.607Z\",\n            \"updated\": \"2019-07-03T06:29:28.607Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Kia Nawaz Sharif Atomi Dhamakon Ki Waja Se Jail Mein) -28th May 2019\",\n            \"slug\": \"off-the-record-kia-nawaz-sharif-atomi-dhamakon-ki-waja-se-jail-mein-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.606Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mbud\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151385/off-the-record-kia-nawaz-sharif-atomi-dhamakon-ki-waja-se-jail-mein-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 725,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:28.862Z\",\n            \"updated\": \"2019-07-03T06:29:28.862Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Issue of Chairman NAB's Leaked Video) - 27th May 2019\",\n            \"slug\": \"off-the-record-issue-of-chairman-nabs-leaked-video-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.861Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79ifyp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151341/off-the-record-issue-of-chairman-nab-s-leaked-video-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 726,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:29.095Z\",\n            \"updated\": \"2019-07-03T06:29:29.095Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Ab Vote Ko Izzat Do Plus Hoga - Nawaz Sharif) - 23rd May 2019\",\n            \"slug\": \"off-the-record-ab-vote-ko-izzat-do-plus-hoga-nawaz-sharif-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.095Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x795f5n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151113/off-the-record-ab-vote-ko-izzat-do-plus-hoga-nawaz-sharif-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 727,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:29.316Z\",\n            \"updated\": \"2019-07-03T06:29:29.316Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Maryam Nawaz Ki Hakumat Per Tanqeed) - 22nd May 2019\",\n            \"slug\": \"off-the-record-maryam-nawaz-ki-hakumat-per-tanqeed-22nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.315Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x791sps\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151058/off-the-record-maryam-nawaz-ki-hakumat-per-tanqeed-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 728,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:29.532Z\",\n            \"updated\": \"2019-07-03T06:29:29.532Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Chairman NAB Interview to Javed Chaudhry) - 21st May 2019\",\n            \"slug\": \"off-the-record-chairman-nab-interview-to-javed-chaudhry-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.531Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y9n7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150998/off-the-record-chairman-nab-interview-to-javed-chaudhry-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 729,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:29.750Z\",\n            \"updated\": \"2019-07-03T06:29:29.750Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Kia Opposition Eid Ke Baad Tehreek Chalaye Gi) - 20th May 2019\",\n            \"slug\": \"off-the-record-kia-opposition-eid-ke-baad-tehreek-chalaye-gi-20th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.749Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ulg4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150947/off-the-record-kia-opposition-eid-ke-baad-tehreek-chalaye-gi-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 730,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:29.972Z\",\n            \"updated\": \"2019-07-03T06:29:29.973Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Dollar Rate Increased, Opposition Ready on Protest) - 16th May 2019\",\n            \"slug\": \"off-the-record-dollar-rate-increased-opposition-ready-on-protest-16th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.972Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hnrm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150736/off-the-record-dollar-rate-increased-opposition-ready-on-protest-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 731,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:30.227Z\",\n            \"updated\": \"2019-07-03T06:29:30.227Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Will Govt Complete Its Tenure?) - 15th May 2019\",\n            \"slug\": \"off-the-record-will-govt-complete-its-tenure-15th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.225Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ekj3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150661/off-the-record-will-govt-complete-its-tenure-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 732,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:30.456Z\",\n            \"updated\": \"2019-07-03T06:29:30.456Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (PTI Govt Tax Amnesty Scheme) - 14th May 2019\",\n            \"slug\": \"off-the-record-pti-govt-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.456Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bayu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150598/off-the-record-pti-govt-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 733,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:30.687Z\",\n            \"updated\": \"2019-07-03T06:29:30.687Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (IMF Package, Opposition Objections) - 13th May 2019\",\n            \"slug\": \"off-the-record-imf-package-opposition-objections-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.687Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787vpe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150551/off-the-record-imf-package-opposition-objections-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 734,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:30.910Z\",\n            \"updated\": \"2019-07-03T06:29:30.910Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Assembly Mein Opposition Ka Hungama) - 9th May 2019\",\n            \"slug\": \"off-the-record-assembly-mein-opposition-ka-hungama-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.910Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77v3x8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150297/off-the-record-assembly-mein-opposition-ka-hungama-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 735,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:31.161Z\",\n            \"updated\": \"2019-07-03T06:29:31.161Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Mushahid Ullah Khan Exclusive Interview) - 8th May 2019\",\n            \"slug\": \"off-the-record-mushahid-ullah-khan-exclusive-interview-8th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.160Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rg60\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150231/off-the-record-mushahid-ullah-khan-exclusive-interview-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 736,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:31.391Z\",\n            \"updated\": \"2019-07-03T06:29:31.391Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Nawaz Sharif Ki Jail Wapis Rawangi) - 7th May 2019\",\n            \"slug\": \"off-the-record-nawaz-sharif-ki-jail-wapis-rawangi-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.390Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77obxw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150165/off-the-record-nawaz-sharif-ki-jail-wapis-rawangi-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 737,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:31.620Z\",\n            \"updated\": \"2019-07-03T06:29:31.620Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (IMF, Mehngai, Opposition) - 6th May 2019\",\n            \"slug\": \"off-the-record-imf-mehngai-opposition-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.620Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77klqa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150097/off-the-record-imf-mehngai-opposition-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 738,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:31.836Z\",\n            \"updated\": \"2019-07-03T06:29:31.836Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Shahbaz Sharif London Se Wapis Kab Ayein Ge?) - 2nd May 2019\",\n            \"slug\": \"off-the-record-shahbaz-sharif-london-se-wapis-kab-ayein-ge-2nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.835Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x777yny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149845/off-the-record-shahbaz-sharif-london-se-wapis-kab-ayein-ge-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 739,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:32.062Z\",\n            \"updated\": \"2019-07-03T06:29:32.062Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (PTI Ke 23 Saal, Imran Khan Ki Hakumat) - 1st May 2019\",\n            \"slug\": \"off-the-record-pti-ke-23-saal-imran-khan-ki-hakumat-1st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.061Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774smq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149781/off-the-record-pti-ke-23-saal-imran-khan-ki-hakumat-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 740,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:32.287Z\",\n            \"updated\": \"2019-07-03T06:29:32.288Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Kia Muashi Badhali Ka Zimmedar NAB?) - 30th April 2019\",\n            \"slug\": \"off-the-record-kia-muashi-badhali-ka-zimmedar-nab-30th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.287Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771rjx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149704/off-the-record-kia-muashi-badhali-ka-zimmedar-nab-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 741,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:32.545Z\",\n            \"updated\": \"2019-07-03T06:29:32.545Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (DG ISPR Press Conference) - 29th April 2019\",\n            \"slug\": \"off-the-record-dg-ispr-press-conference-29th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.544Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xxn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149638/off-the-record-dg-ispr-press-conference-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 742,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:32.813Z\",\n            \"updated\": \"2019-07-03T06:29:32.813Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Nawaz Sharif Want to Go Abroad?) - 25th April 2019\",\n            \"slug\": \"off-the-record-nawaz-sharif-want-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.812Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l9wb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149406/off-the-record-nawaz-sharif-want-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 743,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:33.046Z\",\n            \"updated\": \"2019-07-03T06:29:33.046Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Bilawal Sahiba, Kia PM Ki Zaban Phisal Gai) - 24th April 2019\",\n            \"slug\": \"off-the-record-bilawal-sahiba-kia-pm-ki-zaban-phisal-gai-24th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:33.046Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76i4td\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149342/off-the-record-bilawal-sahiba-kia-pm-ki-zaban-phisal-gai-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 744,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:33.292Z\",\n            \"updated\": \"2019-07-03T06:29:33.293Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Imran Khan's Statement in Iran) - 23rd February 2019\",\n            \"slug\": \"off-the-record-imran-khans-statement-in-iran-23rd-february-2019\",\n            \"publish_date\": \"2019-07-03T06:29:33.292Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fgi1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149288/off-the-record-imran-khan-s-statement-in-iran-23rd-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 745,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:10.312Z\",\n            \"updated\": \"2019-07-03T06:30:10.313Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Who Is Behind Rana Sanaullah's Arrest?) \\u2013 2nd July 2019\",\n            \"slug\": \"muqabil-who-is-behind-rana-sanaullahs-arrest-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:30:10.312Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdbo5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153387/muqabil-who-is-behind-rana-sanaullah-s-arrest-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 746,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:10.949Z\",\n            \"updated\": \"2019-07-03T06:30:10.949Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Is PM Helpless In Front of Corruption Mafia) \\u2013 1st July 2019\",\n            \"slug\": \"muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T06:30:10.948Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7camu6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153314/muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 747,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:11.193Z\",\n            \"updated\": \"2019-07-03T06:30:11.193Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi) \\u2013 27th June 2019\",\n            \"slug\": \"muqabil-kia-opposition-tehreek-chalaye-gi-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.192Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0v66\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153054/muqabil-kia-opposition-tehreek-chalaye-gi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 748,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:11.462Z\",\n            \"updated\": \"2019-07-03T06:30:11.462Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (How To Control Dollar Rate) \\u2013 26th June 2019\",\n            \"slug\": \"muqabil-how-to-control-dollar-rate-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.461Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by4xs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152974/muqabil-how-to-control-dollar-rate-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 749,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:11.707Z\",\n            \"updated\": \"2019-07-03T06:30:11.707Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Politics And Economy, Big Challenges) \\u2013 25th June 2019\",\n            \"slug\": \"muqabil-politics-and-economy-big-challenges-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.706Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvgfl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152906/muqabil-politics-and-economy-big-challenges-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 750,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:11.934Z\",\n            \"updated\": \"2019-07-03T06:30:11.934Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Govt's Good News For Businessmen) \\u2013 24th June 2019\",\n            \"slug\": \"muqabil-govts-good-news-for-businessmen-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.933Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt3dn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152840/muqabil-govt-s-good-news-for-businessmen-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 751,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:12.198Z\",\n            \"updated\": \"2019-07-03T06:30:12.198Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Train Accident, Other Issues) \\u2013 20th June 2019\",\n            \"slug\": \"muqabil-train-accident-other-issues-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.197Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7blfxz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152590/muqabil-train-accident-other-issues-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 752,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:12.503Z\",\n            \"updated\": \"2019-07-03T06:30:12.503Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Ziddi Pan Aur Siasi Tanao Ka Anjam Kia Hoga) \\u2013 19th June 2019\",\n            \"slug\": \"muqabil-ziddi-pan-aur-siasi-tanao-ka-anjam-kia-hoga-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.502Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjooq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152521/muqabil-ziddi-pan-aur-siasi-tanao-ka-anjam-kia-hoga-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 753,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:12.737Z\",\n            \"updated\": \"2019-07-03T06:30:12.737Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Govt Policies And Opposition) \\u2013 18th June 2019\",\n            \"slug\": \"muqabil-govt-policies-and-opposition-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.737Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bi0bz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152465/muqabil-govt-policies-and-opposition-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 754,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:12.974Z\",\n            \"updated\": \"2019-07-03T06:30:12.974Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Pakistan Ki Muashi Aur Siasi Sorat e Haal) \\u2013 17th June 2019\",\n            \"slug\": \"muqabil-pakistan-ki-muashi-aur-siasi-sorat-e-haal-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.974Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgkbx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152406/muqabil-pakistan-ki-muashi-aur-siasi-sorat-e-haal-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 755,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:13.251Z\",\n            \"updated\": \"2019-07-03T06:30:13.252Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Discussion on Different Issues) \\u2013 13th June 2019\",\n            \"slug\": \"muqabil-discussion-on-different-issues-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.250Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/UM2nU7HE8rI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152195/muqabil-discussion-on-different-issues-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 756,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:13.489Z\",\n            \"updated\": \"2019-07-03T06:30:13.489Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Opposition's Strategy After Big Arrests) \\u2013 12th June 2019\",\n            \"slug\": \"muqabil-oppositions-strategy-after-big-arrests-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.488Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayhyn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152131/muqabil-opposition-s-strategy-after-big-arrests-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 757,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:13.724Z\",\n            \"updated\": \"2019-07-03T06:30:13.724Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Altaf Hussain Ki Giraftari) \\u2013 11th June 2019\",\n            \"slug\": \"muqabil-altaf-hussain-ki-giraftari-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.724Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aui2n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152080/muqabil-altaf-hussain-ki-giraftari-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 758,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:13.957Z\",\n            \"updated\": \"2019-07-03T06:30:13.957Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Asif Zardari's Arrest & Other Issues) \\u2013 10th June 2019\",\n            \"slug\": \"muqabil-asif-zardaris-arrest-other-issues-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.956Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqxod\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152004/muqabil-asif-zardari-s-arrest-other-issues-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 759,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:14.192Z\",\n            \"updated\": \"2019-07-03T06:30:14.192Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Eid Akhlas o Eisaar Ka Naam Hai) \\u2013 4th June 2019\",\n            \"slug\": \"muqabil-eid-akhlas-o-eisaar-ka-naam-hai-4th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.191Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a9irs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151726/muqabil-eid-akhlas-o-eisaar-ka-naam-hai-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 760,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:14.438Z\",\n            \"updated\": \"2019-07-03T06:30:14.438Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Zartaj Gul Ki Wazarat Khatre Mein) \\u2013 3rd June 2019\",\n            \"slug\": \"muqabil-zartaj-gul-ki-wazarat-khatre-mein-3rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.437Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/caTT9YdTCwg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151702/muqabil-zartaj-gul-ki-wazarat-khatre-mein-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 761,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:14.657Z\",\n            \"updated\": \"2019-07-03T06:30:14.658Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Big Decision of Army Chief) \\u2013 30th May 2019\",\n            \"slug\": \"muqabil-big-decision-of-army-chief-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.657Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tpzn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151505/muqabil-big-decision-of-army-chief-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 762,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:14.881Z\",\n            \"updated\": \"2019-07-03T06:30:14.881Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (PTI Govt Files Reference Against Judges) \\u2013 29th May 2019\",\n            \"slug\": \"muqabil-pti-govt-files-reference-against-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.881Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79qcwz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151433/muqabil-pti-govt-files-reference-against-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 763,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:15.113Z\",\n            \"updated\": \"2019-07-03T06:30:15.113Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Are PMLN, PPP United Against PTI Govt?) \\u2013 28th May 2019\",\n            \"slug\": \"muqabil-are-pmln-ppp-united-against-pti-govt-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.113Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mkq8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151390/muqabil-are-pmln-ppp-united-against-pti-govt-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 764,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:15.350Z\",\n            \"updated\": \"2019-07-03T06:30:15.350Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Pakistan Army Ki Check Post Per Hamla) \\u2013 27th May 2019\",\n            \"slug\": \"muqabil-pakistan-army-ki-check-post-per-hamla-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.349Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79imca\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151348/muqabil-pakistan-army-ki-check-post-per-hamla-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 765,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:15.594Z\",\n            \"updated\": \"2019-07-03T06:30:15.594Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Modi Won Once Again in India) \\u2013 23rd May 2019\",\n            \"slug\": \"muqabil-modi-won-once-again-in-india-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.593Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795kpp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151124/muqabil-modi-won-once-again-in-india-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 766,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:15.901Z\",\n            \"updated\": \"2019-07-03T06:30:15.901Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi?) \\u2013 22nd May 2019\",\n            \"slug\": \"muqabil-kia-opposition-tehreek-chalaye-gi-22nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.901Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/dvUb6j3sM7Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151066/muqabil-kia-opposition-tehreek-chalaye-gi-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 767,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:16.140Z\",\n            \"updated\": \"2019-07-03T06:30:16.140Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (NAB Chairman Interview Issue) \\u2013 21st May 2019\",\n            \"slug\": \"muqabil-nab-chairman-interview-issue-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.139Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78yizg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151008/muqabil-nab-chairman-interview-issue-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 768,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:16.387Z\",\n            \"updated\": \"2019-07-03T06:30:16.388Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Govt Performance & Opposition's Plan) \\u2013 20th May 2019\",\n            \"slug\": \"muqabil-govt-performance-oppositions-plan-20th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.387Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uw75\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150951/muqabil-govt-performance-opposition-s-plan-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 769,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:16.639Z\",\n            \"updated\": \"2019-07-03T06:30:16.639Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Economy, Amnesty, Iran America Issue) \\u2013 14th May 2019\",\n            \"slug\": \"muqabil-economy-amnesty-iran-america-issue-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.639Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78eqxl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150674/muqabil-economy-amnesty-iran-america-issue-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 770,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:16.881Z\",\n            \"updated\": \"2019-07-03T06:30:16.881Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (PTI's Amnesty Scheme, IMF, Economy) - 14th May 2019\",\n            \"slug\": \"muqabil-ptis-amnesty-scheme-imf-economy-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.880Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bo40\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150607/muqabil-pti-s-amnesty-scheme-imf-economy-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 771,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:17.165Z\",\n            \"updated\": \"2019-07-03T06:30:17.165Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (IMF Deal, Awam Ke Liye Kaisa?) \\u2013 13th May 2019\",\n            \"slug\": \"muqabil-imf-deal-awam-ke-liye-kaisa-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.164Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/i-LBkAfsqJo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150568/muqabil-imf-deal-awam-ke-liye-kaisa-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 772,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:17.468Z\",\n            \"updated\": \"2019-07-03T06:30:17.468Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Opposition Ki Hungama Arai) \\u2013 9th May 2019\",\n            \"slug\": \"muqabil-opposition-ki-hungama-arai-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.467Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77vei0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150302/muqabil-opposition-ki-hungama-arai-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 773,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:17.704Z\",\n            \"updated\": \"2019-07-03T06:30:17.704Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Nawaz Sharif Wapis Jail Mein) \\u2013 8th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-wapis-jail-mein-8th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.704Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rrc6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150239/muqabil-nawaz-sharif-wapis-jail-mein-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 774,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:17.933Z\",\n            \"updated\": \"2019-07-03T06:30:17.933Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Nawaz Sharif Again in Kot Lakhpat Jail) \\u2013 7th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-again-in-kot-lakhpat-jail-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.932Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77ol2m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150173/muqabil-nawaz-sharif-again-in-kot-lakhpat-jail-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 775,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:18.169Z\",\n            \"updated\": \"2019-07-03T06:30:18.169Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Nawaz Sharif Back To Prison, Other Issues) - 6th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-back-to-prison-other-issues-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.168Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kww5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150103/muqabil-nawaz-sharif-back-to-prison-other-issues-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 776,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:18.425Z\",\n            \"updated\": \"2019-07-03T06:30:18.425Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Imran Khan Pakistan Ko Theek Kar Payein Ge) \\u2013 2nd May 2019\",\n            \"slug\": \"muqabil-kia-imran-khan-pakistan-ko-theek-kar-payein-ge-2nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.424Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77892e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149853/muqabil-kia-imran-khan-pakistan-ko-theek-kar-payein-ge-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 777,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:18.672Z\",\n            \"updated\": \"2019-07-03T06:30:18.673Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (PM Imran Khan Speech on PTI Foundation Day) \\u2013 1st May 2019\",\n            \"slug\": \"muqabil-pm-imran-khan-speech-on-pti-foundation-day-1st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.671Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x775111\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149791/muqabil-pm-imran-khan-speech-on-pti-foundation-day-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 778,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:30:18.945Z\",\n            \"updated\": \"2019-07-03T06:30:18.945Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Discussion on Multiple Issues) \\u2013 30th April 2019\",\n            \"slug\": \"muqabil-discussion-on-multiple-issues-30th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.945Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7720nv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149716/muqabil-discussion-on-multiple-issues-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 779,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:17.334Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:17.334Z\",\n            \"updated\": \"2019-07-04T11:48:17.334Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Why America Now Favours Pakistan?) - 3rd July 2019\",\n            \"slug\": \"harf-e-raaz-why-america-now-favours-pakistan-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:17.334Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/Fb9DA3v6CSI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153437/harf-e-raaz-why-america-now-favours-pakistan-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 780,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.598Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.597Z\",\n            \"updated\": \"2019-07-04T11:48:20.598Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz With Orya Maqbool Jan (Anti Opposition Drive) - 2nd July 2019\",\n            \"slug\": \"harf-e-raaz-with-orya-maqbool-jan-anti-opposition-drive-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.598Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/nToy0607bxs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153368/harf-e-raaz-with-orya-maqbool-jan-anti-opposition-drive-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 781,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.640Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.640Z\",\n            \"updated\": \"2019-07-04T11:48:20.640Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Why Modi Is Coming Pakistan?) \\u2013 1st July 2019\",\n            \"slug\": \"harf-e-raaz-why-modi-is-coming-pakistan-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.640Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/DCLQveEQi9g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153307/harf-e-raaz-why-modi-is-coming-pakistan-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 782,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.677Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.677Z\",\n            \"updated\": \"2019-07-04T11:48:20.677Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Pakistani Maeeshat Kaise Behtar Ho) \\u2013 27th June 2019\",\n            \"slug\": \"harf-e-raz-pakistani-maeeshat-kaise-behtar-ho-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.677Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/W9scz4AQ0Qo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153039/harf-e-raz-pakistani-maeeshat-kaise-behtar-ho-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 783,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.723Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.723Z\",\n            \"updated\": \"2019-07-04T11:48:20.723Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz With Orya Maqboo (APC Ka Kia Result Raha) - 26th June 2019\",\n            \"slug\": \"harf-e-raaz-with-orya-maqboo-apc-ka-kia-result-raha-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.723Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/IpHS_SfvPIw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152965/harf-e-raaz-with-orya-maqboo-apc-ka-kia-result-raha-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 784,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.754Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.754Z\",\n            \"updated\": \"2019-07-04T11:48:20.754Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (NRO Via Qatar Diplomacy) \\u2013 25th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-nro-via-qatar-diplomacy-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.754Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/KNFMU-RVuYY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152890/harf-e-raz-with-orya-maqbol-jan-nro-via-qatar-diplomacy-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 785,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.806Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.805Z\",\n            \"updated\": \"2019-07-04T11:48:20.806Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Fall of Istanbul, What It Will Lead To) - 24th June 2019\",\n            \"slug\": \"harf-e-raaz-fall-of-istanbul-what-it-will-lead-to-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.806Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/TBLGPX2r34g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152820/harf-e-raaz-fall-of-istanbul-what-it-will-lead-to-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 786,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.843Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.843Z\",\n            \"updated\": \"2019-07-04T11:48:20.843Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (India Ka Pakistani Offer Per Jawab) \\u2013 20th June 2019\",\n            \"slug\": \"harf-e-raz-india-ka-pakistani-offer-per-jawab-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.843Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/orhh2j2Q028\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152579/harf-e-raz-india-ka-pakistani-offer-per-jawab-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 787,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.900Z\",\n            \"updated\": \"2019-07-04T11:48:20.901Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (India's Conspiracy Against Pakistan) \\u2013 19th June 2019\",\n            \"slug\": \"harf-e-raz-indias-conspiracy-against-pakistan-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.901Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/IVQ2CTKU7EA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152520/harf-e-raz-india-s-conspiracy-against-pakistan-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 788,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.933Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.933Z\",\n            \"updated\": \"2019-07-04T11:48:20.933Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Morsi Shaheed) \\u2013 18th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-morsi-shaheed-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.933Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/wb8xGhoM8BI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152456/harf-e-raz-with-orya-maqbol-jan-morsi-shaheed-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 789,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.969Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.968Z\",\n            \"updated\": \"2019-07-04T11:48:20.969Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Siasi Bohran) \\u2013 17th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-siasi-bohran-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.969Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/v-TSI8IR7dM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152391/harf-e-raz-with-orya-maqbol-jan-siasi-bohran-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 790,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:20.998Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:20.998Z\",\n            \"updated\": \"2019-07-04T11:48:20.998Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Changing Power Centers of World) - 13th June 2019\",\n            \"slug\": \"harf-e-raaz-changing-power-centers-of-world-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:20.998Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/M_rVst_W1ys\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152185/harf-e-raaz-changing-power-centers-of-world-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 791,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.032Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.031Z\",\n            \"updated\": \"2019-07-04T11:48:21.032Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz With Orya Maqbool Jan (Commission To Probe Debt) - 12th June 2019\",\n            \"slug\": \"harf-e-raaz-with-orya-maqbool-jan-commission-to-probe-debt-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.032Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/JMbG7r0KzbA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152115/harf-e-raaz-with-orya-maqbool-jan-commission-to-probe-debt-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 792,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.071Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.071Z\",\n            \"updated\": \"2019-07-04T11:48:21.071Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Budget 2019-20) \\u2013 11th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-budget-2019-20-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.071Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/_PRc7QfNR6M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152070/harf-e-raz-with-orya-maqbol-jan-budget-2019-20-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 793,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.121Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.120Z\",\n            \"updated\": \"2019-07-04T11:48:21.121Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.121Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/TSjWdJ0ogCE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151993/harf-e-raz-with-orya-maqbol-jan-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 794,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.161Z\",\n            \"updated\": \"2019-07-04T11:48:21.161Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Eid Special) \\u2013 5th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.161Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/poqDEy9Ev1M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151772/harf-e-raz-with-orya-maqbol-jan-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 795,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.196Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.195Z\",\n            \"updated\": \"2019-07-04T11:48:21.196Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (The Night Of Repentance) \\u2013 4th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-the-night-of-repentance-4th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.196Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/AOKOFFVEX3I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151722/harf-e-raz-with-orya-maqbol-jan-the-night-of-repentance-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 796,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.282Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.282Z\",\n            \"updated\": \"2019-07-04T11:48:21.282Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Imran Khan Address at OIC) \\u2013 3rd June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-imran-khan-address-at-oic-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.282Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/SUyPAPzs88w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151696/harf-e-raz-with-orya-maqbol-jan-imran-khan-address-at-oic-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 797,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.333Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.333Z\",\n            \"updated\": \"2019-07-04T11:48:21.333Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (China Ka America Ke Khilaf Elan e Jang) \\u2013 30th May 2019\",\n            \"slug\": \"harf-e-raz-china-ka-america-ke-khilaf-elan-e-jang-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.333Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/tlGrltZzhG4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151494/harf-e-raz-china-ka-america-ke-khilaf-elan-e-jang-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 798,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.507Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.507Z\",\n            \"updated\": \"2019-07-04T11:48:21.507Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Moon Sighting, Scientific Or Religious Issue) - 29th May 2019\",\n            \"slug\": \"harf-e-raaz-moon-sighting-scientific-or-religious-issue-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.507Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/OmjoAgnABTw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151431/harf-e-raaz-moon-sighting-scientific-or-religious-issue-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 799,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.596Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.595Z\",\n            \"updated\": \"2019-07-04T11:48:21.596Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (From Atomic Power To Atomic Flash Point) \\u2013 28th May 2019\",\n            \"slug\": \"harf-e-raz-from-atomic-power-to-atomic-flash-point-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.596Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/gB_ZS0nE20c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151384/harf-e-raz-from-atomic-power-to-atomic-flash-point-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 800,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.696Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.695Z\",\n            \"updated\": \"2019-07-04T11:48:21.696Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Pakistan's Enemies Attacking Pakistan) \\u2013 27th May 2019\",\n            \"slug\": \"harf-e-raz-pakistans-enemies-attacking-pakistan-27th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.696Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/x8-J0CmjrlQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151345/harf-e-raz-pakistan-s-enemies-attacking-pakistan-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 801,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.813Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.813Z\",\n            \"updated\": \"2019-07-04T11:48:21.813Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Modi's Victory, A Threat to Region's Peace) - 23rd May 2019\",\n            \"slug\": \"harf-e-raaz-modis-victory-a-threat-to-regions-peace-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.813Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/HRxCz9psnGM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151105/harf-e-raaz-modi-s-victory-a-threat-to-region-s-peace-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 802,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:21.970Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:21.970Z\",\n            \"updated\": \"2019-07-04T11:48:21.970Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (US War Ships in Arabian Sea) - 22nd May 2019\",\n            \"slug\": \"harf-e-raaz-us-war-ships-in-arabian-sea-22nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:21.970Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/Z2mH5HFQqpQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151055/harf-e-raaz-us-war-ships-in-arabian-sea-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 803,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.065Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.064Z\",\n            \"updated\": \"2019-07-04T11:48:22.065Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Dollar Rise, A Currency War) \\u2013 21st May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-dollar-rise-a-currency-war-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.065Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/dWjVjPlieic\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150989/harf-e-raz-with-orya-maqbol-jan-dollar-rise-a-currency-war-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 804,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.102Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.102Z\",\n            \"updated\": \"2019-07-04T11:48:22.102Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Opposition Iftar Dinner) \\u2013 20th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-opposition-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.102Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/yClEZhOJzsE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150955/harf-e-raz-with-orya-maqbol-jan-opposition-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 805,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.145Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.145Z\",\n            \"updated\": \"2019-07-04T11:48:22.145Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Discussion on Current Issues) \\u2013 16th May 2019\",\n            \"slug\": \"harf-e-raz-discussion-on-current-issues-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.145Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/vQkJ-q3Bjfg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150733/harf-e-raz-discussion-on-current-issues-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 806,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.187Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.187Z\",\n            \"updated\": \"2019-07-04T11:48:22.187Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Pak America Relations) \\u2013 15th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-pak-america-relations-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.187Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/Oca9k46xF3o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150665/harf-e-raz-with-orya-maqbol-jan-pak-america-relations-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 807,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.216Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.216Z\",\n            \"updated\": \"2019-07-04T11:48:22.216Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Tax Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.216Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/aApsGRr6ONg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150594/harf-e-raz-with-orya-maqbol-jan-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 808,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.257Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.257Z\",\n            \"updated\": \"2019-07-04T11:48:22.257Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Imran Khan Ki Riasat e Madina) \\u2013 13th May 2019\",\n            \"slug\": \"harf-e-raz-imran-khan-ki-riasat-e-madina-13th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.257Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/pqPw3zphW_w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150554/harf-e-raz-imran-khan-ki-riasat-e-madina-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 809,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.307Z\",\n            \"updated\": \"2019-07-04T11:48:22.316Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (New FBR Chairman, Other Issues) \\u2013 9th May 2019\",\n            \"slug\": \"harf-e-raz-new-fbr-chairman-other-issues-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.316Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/-MqZpSRG2Wo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150298/harf-e-raz-new-fbr-chairman-other-issues-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 810,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.385Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.384Z\",\n            \"updated\": \"2019-07-04T11:48:22.385Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (America & Iran Face To Face) \\u2013 8th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-america-iran-face-to-face-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.385Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/4KrkN1oxU30\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150237/harf-e-raz-with-orya-maqbol-jan-america-iran-face-to-face-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 811,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.462Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.462Z\",\n            \"updated\": \"2019-07-04T11:48:22.462Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Nawaz Sharif Ki Wapsi, Changes in PMLN) \\u2013 7th May 2019\",\n            \"slug\": \"harf-e-raz-nawaz-sharif-ki-wapsi-changes-in-pmln-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.462Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/g4Ymik9NU-s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150163/harf-e-raz-nawaz-sharif-ki-wapsi-changes-in-pmln-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 812,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.558Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.558Z\",\n            \"updated\": \"2019-07-04T11:48:22.558Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (IMF Ka Pakistan Per Qabza) \\u2013 6th May 2019\",\n            \"slug\": \"harf-e-raz-imf-ka-pakistan-per-qabza-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.558Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/DYVHJVFkZ0Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150093/harf-e-raz-imf-ka-pakistan-per-qabza-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 813,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.633Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.633Z\",\n            \"updated\": \"2019-07-04T11:48:22.634Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Will Nawaz Sharif Go Abroad?) \\u2013 2nd May 2019\",\n            \"slug\": \"harf-e-raz-will-nawaz-sharif-go-abroad-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.634Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/CWbyANai1gY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149852/harf-e-raz-will-nawaz-sharif-go-abroad-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 814,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.683Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.683Z\",\n            \"updated\": \"2019-07-04T11:48:22.683Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Afghanistan Se Pakistan Per Hamla) \\u2013 1st April 2019\",\n            \"slug\": \"harf-e-raz-afghanistan-se-pakistan-per-hamla-1st-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.683Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/xBwezyGEtJQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149783/harf-e-raz-afghanistan-se-pakistan-per-hamla-1st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 815,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.733Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.733Z\",\n            \"updated\": \"2019-07-04T11:48:22.733Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Mobile App About Islam) \\u2013 30th April 2019\",\n            \"slug\": \"harf-e-raz-mobile-app-about-islam-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.733Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/ebnu2rb0sVU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149708/harf-e-raz-mobile-app-about-islam-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 816,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.774Z\",\n            \"updated\": \"2019-07-04T11:48:22.774Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (DG ISPR Wants Madrassa Reforms) \\u2013 29th April 2019\",\n            \"slug\": \"harf-e-raz-dg-ispr-wants-madrassa-reforms-29th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.774Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/zruiYH-qPno\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149642/harf-e-raz-dg-ispr-wants-madrassa-reforms-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 817,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.827Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.827Z\",\n            \"updated\": \"2019-07-04T11:48:22.827Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Polio Teams, Nawaz Sharif Going Abroad?) \\u2013 25th April 2019\",\n            \"slug\": \"harf-e-raz-polio-teams-nawaz-sharif-going-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.827Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/iqk_ITO7GTw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149413/harf-e-raz-polio-teams-nawaz-sharif-going-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 818,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:22.862Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:22.861Z\",\n            \"updated\": \"2019-07-04T11:48:22.862Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 18,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Mayosi Ka Daur) \\u2013 24th April 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-mayosi-ka-daur-24th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:22.862Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/FMdz1drnrwg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149346/harf-e-raz-with-orya-maqbol-jan-mayosi-ka-daur-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 819,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.029Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.028Z\",\n            \"updated\": \"2019-07-04T11:48:23.029Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (System Kab Theek Hoga) \\u2013 3rd July 2019\",\n            \"slug\": \"aap-kay-muqabil-system-kab-theek-hoga-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.029Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cg0zl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153460/aap-kay-muqabil-system-kab-theek-hoga-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 820,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.188Z\",\n            \"updated\": \"2019-07-04T11:48:23.214Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Rana Sanaullah's Arrest, Other Issues) \\u2013 2nd July 2019\",\n            \"slug\": \"aap-kay-muqabil-rana-sanaullahs-arrest-other-issues-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.215Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cddip\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153388/aap-kay-muqabil-rana-sanaullah-s-arrest-other-issues-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 821,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.312Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.295Z\",\n            \"updated\": \"2019-07-04T11:48:23.312Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (PM Imran Khan's Interview About Amnesty & Taxes) \\u2013 1st July 2019\",\n            \"slug\": \"aap-kay-muqabil-pm-imran-khans-interview-about-amnesty-taxes-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.312Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7camxb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153315/aap-kay-muqabil-pm-imran-khan-s-interview-about-amnesty-taxes-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 822,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.483Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.475Z\",\n            \"updated\": \"2019-07-04T11:48:23.483Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Opposition Aur Hakumat Mein Mahaz Arai) \\u2013 27th June 2019\",\n            \"slug\": \"aap-kay-muqabil-opposition-aur-hakumat-mein-mahaz-arai-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.483Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0w8v\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153051/aap-kay-muqabil-opposition-aur-hakumat-mein-mahaz-arai-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 823,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.617Z\",\n            \"updated\": \"2019-07-04T11:48:23.617Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Opposition's All Parties Conference) \\u2013 26th June 2019\",\n            \"slug\": \"aap-kay-muqabil-oppositions-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.617Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by66z\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152990/aap-kay-muqabil-opposition-s-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 824,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.688Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.687Z\",\n            \"updated\": \"2019-07-04T11:48:23.688Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Serious Clash Between Murad Saeed & Ahsan Iqbal) \\u2013 25th June 2019\",\n            \"slug\": \"aap-kay-muqabil-serious-clash-between-murad-saeed-ahsan-iqbal-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.688Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvghs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152907/aap-kay-muqabil-serious-clash-between-murad-saeed-ahsan-iqbal-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 825,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.823Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.822Z\",\n            \"updated\": \"2019-07-04T11:48:23.823Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap kay Muqabil (Imran Khan Ka Amnesty Scheme Per Zoor) - 24th June 2019\",\n            \"slug\": \"aap-kay-muqabil-imran-khan-ka-amnesty-scheme-per-zoor-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.823Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/gBdntPG86hc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152853/aap-kay-muqabil-imran-khan-ka-amnesty-scheme-per-zoor-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 826,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:23.912Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:23.911Z\",\n            \"updated\": \"2019-07-04T11:48:23.912Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap kay Muqabi (Asad Umar Ki Hakumat Par Tanqeed) - 20th June 2019\",\n            \"slug\": \"aap-kay-muqabi-asad-umar-ki-hakumat-par-tanqeed-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:23.912Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/JqvjwRDNv0k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152613/aap-kay-muqabi-asad-umar-ki-hakumat-par-tanqeed-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 827,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.020Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.020Z\",\n            \"updated\": \"2019-07-04T11:48:24.020Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Opposition Aur Hakumat Mein Tanao) \\u2013 19th June 2019\",\n            \"slug\": \"aap-kay-muqabil-opposition-aur-hakumat-mein-tanao-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.020Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjp31\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152522/aap-kay-muqabil-opposition-aur-hakumat-mein-tanao-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 828,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.106Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.106Z\",\n            \"updated\": \"2019-07-04T11:48:24.106Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Cricket Match, Political Issues) \\u2013 18th June 2019\",\n            \"slug\": \"aap-kay-muqabil-cricket-match-political-issues-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.106Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhyzg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152466/aap-kay-muqabil-cricket-match-political-issues-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 829,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.282Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.255Z\",\n            \"updated\": \"2019-07-04T11:48:24.282Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Maryam Bilawal Meeting) \\u2013 17th June 2019\",\n            \"slug\": \"aap-kay-muqabil-maryam-bilawal-meeting-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.282Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgkel\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152407/aap-kay-muqabil-maryam-bilawal-meeting-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 830,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.414Z\",\n            \"updated\": \"2019-07-04T11:48:24.414Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Shahid Khaqan Abbasi's Challenge to PM Imran Khan) \\u2013 13th June 2019\",\n            \"slug\": \"aap-kay-muqabil-shahid-khaqan-abbasis-challenge-to-pm-imran-khan-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.415Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/jZ7JDdMDxVI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152196/aap-kay-muqabil-shahid-khaqan-abbasi-s-challenge-to-pm-imran-khan-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 831,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.459Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.458Z\",\n            \"updated\": \"2019-07-04T11:48:24.459Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (PM Imran Khan's Address to Nation) \\u2013 12th June 2019\",\n            \"slug\": \"aap-kay-muqabil-pm-imran-khans-address-to-nation-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.459Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayi3s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152134/aap-kay-muqabil-pm-imran-khan-s-address-to-nation-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 832,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.508Z\",\n            \"updated\": \"2019-07-04T11:48:24.509Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Discussion on Current Issues) \\u2013 11th June 2019\",\n            \"slug\": \"aap-kay-muqabil-discussion-on-current-issues-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.509Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7auj8h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152082/aap-kay-muqabil-discussion-on-current-issues-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 833,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.587Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.587Z\",\n            \"updated\": \"2019-07-04T11:48:24.587Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 7,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Asif Zardari Arrested) \\u2013 10th June 2019\",\n            \"slug\": \"aap-kay-muqabil-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.587Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqy43\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152006/aap-kay-muqabil-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 834,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.697Z\",\n            \"updated\": \"2019-07-04T11:48:24.697Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (FBR In Action, Political Issues) \\u2013 3rd July 2019\",\n            \"slug\": \"the-reporters-fbr-in-action-political-issues-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.697Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfqws\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153439/the-reporters-fbr-in-action-political-issues-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 835,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.731Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.730Z\",\n            \"updated\": \"2019-07-04T11:48:24.731Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PM Imran Khan's Offer to Nawaz & Zardari) \\u2013 2nd July 2019\",\n            \"slug\": \"the-reporters-pm-imran-khans-offer-to-nawaz-zardari-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.731Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd3zc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153376/the-reporters-pm-imran-khan-s-offer-to-nawaz-zardari-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 836,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.789Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.789Z\",\n            \"updated\": \"2019-07-04T11:48:24.789Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition's All Parties Conference Failed) - 27th June 2019\",\n            \"slug\": \"the-reporters-oppositions-all-parties-conference-failed-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.789Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0l55\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153030/the-reporters-opposition-s-all-parties-conference-failed-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 837,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.823Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.823Z\",\n            \"updated\": \"2019-07-04T11:48:24.823Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (What Has APC Decided?) \\u2013 26th June 2019\",\n            \"slug\": \"the-reporters-what-has-apc-decided-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.823Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxxu0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152972/the-reporters-what-has-apc-decided-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 838,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.875Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.875Z\",\n            \"updated\": \"2019-07-04T11:48:24.875Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (What The Narrative of PMLN?) - 25th June 2019\",\n            \"slug\": \"the-reporters-what-the-narrative-of-pmln-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.875Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bv5wl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152881/the-reporters-what-the-narrative-of-pmln-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 839,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:24.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:24.919Z\",\n            \"updated\": \"2019-07-04T11:48:24.919Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Offer of Charter of Economy) \\u2013 24th June 2019\",\n            \"slug\": \"the-reporters-offer-of-charter-of-economy-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:24.919Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt2p1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152838/the-reporters-offer-of-charter-of-economy-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 840,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.003Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.003Z\",\n            \"updated\": \"2019-07-04T11:48:25.003Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Ki Darkhast Zamanat Mustard) - 20th June 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-ki-darkhast-zamanat-mustard-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.003Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl88t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152568/the-reporters-nawaz-sharif-ki-darkhast-zamanat-mustard-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 841,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.033Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.033Z\",\n            \"updated\": \"2019-07-04T11:48:25.034Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Ishaq Dar Trying To Get Political Asylum in UK) - 19th June 2019\",\n            \"slug\": \"the-reporters-ishaq-dar-trying-to-get-political-asylum-in-uk-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.034Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjimy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152493/the-reporters-ishaq-dar-trying-to-get-political-asylum-in-uk-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 842,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.078Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.077Z\",\n            \"updated\": \"2019-07-04T11:48:25.078Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Ki NAB Zada Siasat) - 18th June 2019\",\n            \"slug\": \"the-reporters-opposition-ki-nab-zada-siasat-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.078Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhrrv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152438/the-reporters-opposition-ki-nab-zada-siasat-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 843,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.110Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.110Z\",\n            \"updated\": \"2019-07-04T11:48:25.110Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Fawad Chaudhry Ka Sami Ibrahim Ko Thappar) \\u2013 17th June 2019.\",\n            \"slug\": \"the-reporters-fawad-chaudhry-ka-sami-ibrahim-ko-thappar-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.110Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgaqi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152383/the-reporters-fawad-chaudhry-ka-sami-ibrahim-ko-thappar-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 844,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.157Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.157Z\",\n            \"updated\": \"2019-07-04T11:48:25.157Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Iftikhar Chaudhry Bhi Maidan Mein Aa Gaye) - 13th June 2019\",\n            \"slug\": \"the-reporters-iftikhar-chaudhry-bhi-maidan-mein-aa-gaye-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.157Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b26rp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152162/the-reporters-iftikhar-chaudhry-bhi-maidan-mein-aa-gaye-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 845,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.190Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.190Z\",\n            \"updated\": \"2019-07-04T11:48:25.190Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PTI Govt's Budget, Other Issues) - 12th June 2019\",\n            \"slug\": \"the-reporters-pti-govts-budget-other-issues-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.191Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay2es\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152113/the-reporters-pti-govt-s-budget-other-issues-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 846,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.220Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.220Z\",\n            \"updated\": \"2019-07-04T11:48:25.220Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Hamza Shahbaz Ki Giraftari) - 11th June 2019\",\n            \"slug\": \"the-reporters-hamza-shahbaz-ki-giraftari-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.220Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7atu05\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152057/the-reporters-hamza-shahbaz-ki-giraftari-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 847,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.249Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.249Z\",\n            \"updated\": \"2019-07-04T11:48:25.249Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Asif Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"the-reporters-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.249Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqrmr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151997/the-reporters-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 848,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.299Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.299Z\",\n            \"updated\": \"2019-07-04T11:48:25.299Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Eid Ke Baad Ka Siasi Manzar Nama) - 4th June 2019\",\n            \"slug\": \"the-reporters-eid-ke-baad-ka-siasi-manzar-nama-4th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.299Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7a93e2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151711/the-reporters-eid-ke-baad-ka-siasi-manzar-nama-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 849,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.340Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.328Z\",\n            \"updated\": \"2019-07-04T11:48:25.340Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Kia Chahti Hai) \\u2013 3rd June 2019\",\n            \"slug\": \"the-reporters-opposition-kia-chahti-hai-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.340Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a6464\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151698/the-reporters-opposition-kia-chahti-hai-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 850,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.401Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.401Z\",\n            \"updated\": \"2019-07-04T11:48:25.401Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Sentence To Army Officers on Espionage) - 30th May 2019\",\n            \"slug\": \"the-reporters-sentence-to-army-officers-on-espionage-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.401Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79t8nr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151479/the-reporters-sentence-to-army-officers-on-espionage-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 851,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.477Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.477Z\",\n            \"updated\": \"2019-07-04T11:48:25.477Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Ka Countdown Shuru) - 29th May 2019\",\n            \"slug\": \"the-reporters-opposition-ka-countdown-shuru-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.477Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79pvvn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151419/the-reporters-opposition-ka-countdown-shuru-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 852,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.583Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.583Z\",\n            \"updated\": \"2019-07-04T11:48:25.583Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Kia Nawaz Sharif Ne Atom Bomb Banaya?) - 28th May 2019\",\n            \"slug\": \"the-reporters-kia-nawaz-sharif-ne-atom-bomb-banaya-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.583Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79m4zp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151373/the-reporters-kia-nawaz-sharif-ne-atom-bomb-banaya-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 853,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.699Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.684Z\",\n            \"updated\": \"2019-07-04T11:48:25.699Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PTM Attack on Pakistan Army) - 27th May 2019\",\n            \"slug\": \"the-reporters-ptm-attack-on-pakistan-army-27th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.699Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79i5p3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151328/the-reporters-ptm-attack-on-pakistan-army-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 854,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.786Z\",\n            \"updated\": \"2019-07-04T11:48:25.786Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Modi's Victory in Indian Election) - 23rd May 2019\",\n            \"slug\": \"the-reporters-modis-victory-in-indian-election-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.786Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7956pt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151110/the-reporters-modi-s-victory-in-indian-election-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 855,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:25.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:25.890Z\",\n            \"updated\": \"2019-07-04T11:48:25.891Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PTM Ka Agenda, US Want to Target Iran) - 22nd May 2019\",\n            \"slug\": \"the-reporters-ptm-ka-agenda-us-want-to-target-iran-22nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:25.891Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x791mey\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151079/the-reporters-ptm-ka-agenda-us-want-to-target-iran-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 856,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.036Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.035Z\",\n            \"updated\": \"2019-07-04T11:48:26.036Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Demands New Election) - 21st May 2019\",\n            \"slug\": \"the-reporters-opposition-demands-new-election-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.036Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y5ov\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150987/the-reporters-opposition-demands-new-election-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 857,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.142Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.141Z\",\n            \"updated\": \"2019-07-04T11:48:26.142Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Bilawal Maryam Iftar Dinner) - 20th May 2019\",\n            \"slug\": \"the-reporters-bilawal-maryam-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.142Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uhji\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150940/the-reporters-bilawal-maryam-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 858,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.261Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.261Z\",\n            \"updated\": \"2019-07-04T11:48:26.261Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Zardar Appearance Before NAB, PMLN Meeting) - 16th May 2019\",\n            \"slug\": \"the-reporters-zardar-appearance-before-nab-pmln-meeting-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.261Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hk05\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150719/the-reporters-zardar-appearance-before-nab-pmln-meeting-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 859,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.359Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.358Z\",\n            \"updated\": \"2019-07-04T11:48:26.359Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Will Maryam Nawaz Lead PMLN?) - 15th May 2019\",\n            \"slug\": \"the-reporters-will-maryam-nawaz-lead-pmln-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.359Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78efor\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150648/the-reporters-will-maryam-nawaz-lead-pmln-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 860,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.468Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.468Z\",\n            \"updated\": \"2019-07-04T11:48:26.485Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Tax Amnesty Scheme) - 14th May 2019\",\n            \"slug\": \"the-reporters-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.485Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78b7fs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150588/the-reporters-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 861,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.553Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.553Z\",\n            \"updated\": \"2019-07-04T11:48:26.553Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Balochistan Aur CPEC) - 13th May 2019\",\n            \"slug\": \"the-reporters-balochistan-aur-cpec-13th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.553Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787n99\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150533/the-reporters-balochistan-aur-cpec-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 862,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.587Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.586Z\",\n            \"updated\": \"2019-07-04T11:48:26.587Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Ka Assembly Mein Shoor Sharaba) - 9th May 2019\",\n            \"slug\": \"the-reporters-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.587Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77uym4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150285/the-reporters-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 863,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.635Z\",\n            \"updated\": \"2019-07-04T11:48:26.635Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Jail Mein) \\u2013 8th May 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-jail-mein-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.635Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rb84\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150216/the-reporters-nawaz-sharif-jail-mein-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 864,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.692Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.692Z\",\n            \"updated\": \"2019-07-04T11:48:26.692Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Doesn't Want to Go Jail?) - 7th May 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-doesnt-want-to-go-jail-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.692Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77o8dw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150154/the-reporters-nawaz-sharif-doesn-t-want-to-go-jail-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 865,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.777Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.776Z\",\n            \"updated\": \"2019-07-04T11:48:26.777Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Sharif Brothers Future) - 6th May 2019\",\n            \"slug\": \"the-reporters-sharif-brothers-future-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.777Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kjwy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150086/the-reporters-sharif-brothers-future-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 866,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.809Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.809Z\",\n            \"updated\": \"2019-07-04T11:48:26.809Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Shahbaz Sharif in London) - 2nd May 2019\",\n            \"slug\": \"the-reporters-shahbaz-sharif-in-london-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.809Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x777uba\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149830/the-reporters-shahbaz-sharif-in-london-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 867,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.847Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.847Z\",\n            \"updated\": \"2019-07-04T11:48:26.847Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (International Media's Agenda Against Pakistan) - 1st May 2019\",\n            \"slug\": \"the-reporters-international-medias-agenda-against-pakistan-1st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.847Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774pt6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149770/the-reporters-international-media-s-agenda-against-pakistan-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 868,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.901Z\",\n            \"updated\": \"2019-07-04T11:48:26.901Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Fazal ur Rehman Ka Elan e Jang) - 30th April 2019\",\n            \"slug\": \"the-reporters-fazal-ur-rehman-ka-elan-e-jang-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.901Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771mn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149694/the-reporters-fazal-ur-rehman-ka-elan-e-jang-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 869,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.939Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.939Z\",\n            \"updated\": \"2019-07-04T11:48:26.939Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (DG ISPR, PTM, Grouping in PTI) - 29th April 2019\",\n            \"slug\": \"the-reporters-dg-ispr-ptm-grouping-in-pti-29th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.939Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xtqd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149621/the-reporters-dg-ispr-ptm-grouping-in-pti-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 870,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:26.985Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:26.984Z\",\n            \"updated\": \"2019-07-04T11:48:26.985Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Ka Plan Samne Aa Gaya) \\u2013 25th April 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-ka-plan-samne-aa-gaya-25th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:26.985Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l81w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149402/the-reporters-nawaz-sharif-ka-plan-samne-aa-gaya-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 871,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.033Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.032Z\",\n            \"updated\": \"2019-07-04T11:48:27.033Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PM Imran Khan's Statement in Iran) - 24th April 2019\",\n            \"slug\": \"the-reporters-pm-imran-khans-statement-in-iran-24th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.033Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76hzv1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149331/the-reporters-pm-imran-khan-s-statement-in-iran-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 872,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.077Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.076Z\",\n            \"updated\": \"2019-07-04T11:48:27.077Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Ke Checkup Jaari) - 23rd April 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-ke-checkup-jaari-23rd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.077Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76f8ez\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149276/the-reporters-nawaz-sharif-ke-checkup-jaari-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 873,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.109Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.109Z\",\n            \"updated\": \"2019-07-04T11:48:27.109Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 8,\n                \"feed_id\": 13,\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Conspiracies Against Govt) - 22nd April 2019\",\n            \"slug\": \"the-reporters-conspiracies-against-govt-22nd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.109Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76bwfo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149212/the-reporters-conspiracies-against-govt-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 874,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.246Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.246Z\",\n            \"updated\": \"2019-07-04T11:48:27.246Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Last Day of Amnesty Scheme) \\u2013 3rd July 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-last-day-of-amnesty-scheme-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.246Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/jLOdCGfwgBg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153461/aaj-shahzaib-khanzada-ke-saath-last-day-of-amnesty-scheme-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 875,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.292Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.286Z\",\n            \"updated\": \"2019-07-04T11:48:27.292Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.292Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/hDg1RFmGRz8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153325/aaj-shahzeb-khanzada-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 876,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.352Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.351Z\",\n            \"updated\": \"2019-07-04T11:48:27.352Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Army Chief's Statement About Economy) \\u2013 28th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-army-chiefs-statement-about-economy-28th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.352Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/hXandh8N_Y8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153137/aaj-shahzaib-khanzada-ke-saath-army-chief-s-statement-about-economy-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 877,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.438Z\",\n            \"updated\": \"2019-07-04T11:48:27.465Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Dollar Rate Increased) \\u2013 27th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-dollar-rate-increased-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.465Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/36Px78QbkVI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153066/aaj-shahzaib-khanzada-ke-saath-dollar-rate-increased-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 878,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.633Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.632Z\",\n            \"updated\": \"2019-07-04T11:48:27.633Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (APC Ne Kia Faisla Kia) \\u2013 26th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-apc-ne-kia-faisla-kia-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.633Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/IiH0eEAbDao\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153000/aaj-shahzaib-khanzada-ke-saath-apc-ne-kia-faisla-kia-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 879,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.711Z\",\n            \"updated\": \"2019-07-04T11:48:27.711Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Chairman NAB Proving Right) \\u2013 25th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-chairman-nab-proving-right-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.711Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/W8jFyqkC0BY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152921/aaj-shahzaib-khanzada-ke-saath-chairman-nab-proving-right-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 880,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.808Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.808Z\",\n            \"updated\": \"2019-07-04T11:48:27.808Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (When Peshawar Metro Will Be Completed) \\u2013 21st June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-when-peshawar-metro-will-be-completed-21st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.808Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/PS3GW6CBQEQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152670/aaj-shahzaib-khanzada-ke-saath-when-peshawar-metro-will-be-completed-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 881,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:27.956Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:27.956Z\",\n            \"updated\": \"2019-07-04T11:48:27.956Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Tension Between Govt & Opposition) - 20th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-tension-between-govt-opposition-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:27.957Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/Uw0AyuUXS1M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152602/aaj-shahzeb-khanzada-kay-sath-tension-between-govt-opposition-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 882,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.144Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.143Z\",\n            \"updated\": \"2019-07-04T11:48:28.144Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (MQM Kis Ke Sath?) \\u2013 19th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-mqm-kis-ke-sath-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.144Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/Nl9Z8aVhXwk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152533/aaj-shahzaib-khanzada-ke-saath-mqm-kis-ke-sath-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 883,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.271Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.271Z\",\n            \"updated\": \"2019-07-04T11:48:28.271Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Inquiry Commission For Debt) \\u2013 18th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-inquiry-commission-for-debt-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.271Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/ZhWkBnLnTto\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152463/aaj-shahzaib-khanzada-ke-saath-inquiry-commission-for-debt-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 884,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.449Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.448Z\",\n            \"updated\": \"2019-07-04T11:48:28.449Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Opposition Alliance) \\u2013 17th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-opposition-alliance-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.449Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/IDJ0njnC_Zg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152418/aaj-shahzaib-khanzada-ke-saath-opposition-alliance-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 885,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.548Z\",\n            \"updated\": \"2019-07-04T11:48:28.548Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Fake Accounts Case) \\u2013 14th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-fake-accounts-case-14th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.548Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/fZPppmDT-0U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152261/aaj-shahzaib-khanzada-ke-saath-fake-accounts-case-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 886,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.657Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.657Z\",\n            \"updated\": \"2019-07-04T11:48:28.657Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (PTI Govt's First Budget) - 13th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-pti-govts-first-budget-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.657Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/eFftKqeq5tM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152191/aaj-shahzeb-khanzada-kay-sath-pti-govt-s-first-budget-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 887,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.792Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.791Z\",\n            \"updated\": \"2019-07-04T11:48:28.792Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Cricket Aur Siasat) - 12th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-cricket-aur-siasat-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.792Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/m9utN4wVIQU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152145/aaj-shahzeb-khanzada-kay-sath-cricket-aur-siasat-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 888,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.882Z\",\n            \"updated\": \"2019-07-04T11:48:28.882Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Hakumat Ka Umeedon Bhara Budget) - 11th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-hakumat-ka-umeedon-bhara-budget-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.882Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/pTaqO-EUaT4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152084/aaj-shahzeb-khanzada-kay-sath-hakumat-ka-umeedon-bhara-budget-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 889,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:28.952Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:28.951Z\",\n            \"updated\": \"2019-07-04T11:48:28.952Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Asif Zardari Arrested) \\u2013 10th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:28.952Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/i8Cy6MonVeA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152008/aaj-shahzaib-khanzada-ke-saath-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 890,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.039Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.038Z\",\n            \"updated\": \"2019-07-04T11:48:29.039Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Shahid Afridi's Book) \\u2013 4th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-shahid-afridis-book-4th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.039Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/VNtLptY8qes\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151730/aaj-shahzaib-khanzada-ke-saath-shahid-afridi-s-book-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 891,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.091Z\",\n            \"updated\": \"2019-07-04T11:48:29.091Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Pakistan Lost in First Match) \\u2013 31st May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-pakistan-lost-in-first-match-31st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.091Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/2uUPGJNEGPM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151572/aaj-shahzaib-khanzada-ke-saath-pakistan-lost-in-first-match-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 892,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.122Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.122Z\",\n            \"updated\": \"2019-07-04T11:48:29.122Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Army Officers Ko Saza) \\u2013 30th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-army-officers-ko-saza-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.122Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/WuTjqzzjyus\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151521/aaj-shahzaib-khanzada-ke-saath-army-officers-ko-saza-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 893,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.173Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.172Z\",\n            \"updated\": \"2019-07-04T11:48:29.173Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Reference Against Qazi Faiz Isa) \\u2013 29th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-reference-against-qazi-faiz-isa-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.173Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/v1uDYOofV2k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151443/aaj-shahzaib-khanzada-ke-saath-reference-against-qazi-faiz-isa-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 894,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.205Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.204Z\",\n            \"updated\": \"2019-07-04T11:48:29.205Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Justice Delayed Is Justice Denied) - 28th May 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-justice-delayed-is-justice-denied-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.205Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/iPixZG7KjlQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151405/aaj-shahzeb-khanzada-kay-sath-justice-delayed-is-justice-denied-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 895,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.243Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.242Z\",\n            \"updated\": \"2019-07-04T11:48:29.243Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Chairman NAB Scandal) \\u2013 24th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.243Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/XRWsz6vVoR0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151194/aaj-shahzaib-khanzada-ke-saath-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 896,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.284Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.283Z\",\n            \"updated\": \"2019-07-04T11:48:29.284Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Modi Ki Jeet) \\u2013 23rd May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-modi-ki-jeet-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.284Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/u4J8G4OFI7s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151141/aaj-shahzaib-khanzada-ke-saath-modi-ki-jeet-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 897,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.335Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.334Z\",\n            \"updated\": \"2019-07-04T11:48:29.335Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Chairman NAB Interview) \\u2013 21st May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-chairman-nab-interview-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.335Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/XHrHBGb-SkM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151011/aaj-shahzaib-khanzada-ke-saath-chairman-nab-interview-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 898,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.377Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.377Z\",\n            \"updated\": \"2019-07-04T11:48:29.377Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (PMLN, PPP United) \\u2013 20th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-pmln-ppp-united-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.377Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/e9NcYHKWVFI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150953/aaj-shahzaib-khanzada-ke-saath-pmln-ppp-united-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 899,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.416Z\",\n            \"updated\": \"2019-07-04T11:48:29.416Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Economy Going Down) \\u2013 17th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-economy-going-down-17th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.416Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/Ot8R6lEFDDI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150820/aaj-shahzaib-khanzada-ke-saath-economy-going-down-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 900,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.481Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.481Z\",\n            \"updated\": \"2019-07-04T11:48:29.481Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Dollar Rate High) \\u2013 16th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-dollar-rate-high-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.481Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/6g7cAbkfHxg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150762/aaj-shahzaib-khanzada-ke-saath-dollar-rate-high-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 901,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.511Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.511Z\",\n            \"updated\": \"2019-07-04T11:48:29.511Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Shahid Afridi's Book) \\u2013 15th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-shahid-afridis-book-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.511Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/VNtLptY8qes\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150696/aaj-shahzaib-khanzada-ke-saath-shahid-afridi-s-book-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 902,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.581Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.581Z\",\n            \"updated\": \"2019-07-04T11:48:29.581Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (IMF Ke Sath Deal Done?) - 10th May 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-imf-ke-sath-deal-done-10th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.581Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/1Aed2ALs1K0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150394/aaj-shahzeb-khanzada-kay-sath-imf-ke-sath-deal-done-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 903,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.612Z\",\n            \"updated\": \"2019-07-04T11:48:29.612Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (IMF Conditions) \\u2013 9th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-imf-conditions-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.612Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/Ug3Hu4B5ERc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150329/aaj-shahzaib-khanzada-ke-saath-imf-conditions-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 904,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.663Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.663Z\",\n            \"updated\": \"2019-07-04T11:48:29.664Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (IMF Program) \\u2013 8th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-imf-program-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.664Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/X2gqE4SOifc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150251/aaj-shahzaib-khanzada-ke-saath-imf-program-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 905,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.698Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.697Z\",\n            \"updated\": \"2019-07-04T11:48:29.698Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Nawaz Sharif Back to Jail) \\u2013 6th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-nawaz-sharif-back-to-jail-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:29.698Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/eRbXOahoJss\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150124/aaj-shahzaib-khanzada-ke-saath-nawaz-sharif-back-to-jail-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 906,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.766Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.765Z\",\n            \"updated\": \"2019-07-04T11:48:29.766Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Sadarti Intikhab) - 3rd September 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-sadarti-intikhab-3rd-september-2018\",\n            \"publish_date\": \"2019-07-04T11:48:29.766Z\",\n            \"target_date\": \"2018-09-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t1xx9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135562/aaj-shahzeb-khanzada-ke-sath-sadarti-intikhab-3rd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 907,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.800Z\",\n            \"updated\": \"2019-07-04T11:48:29.800Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (DPO And Other Issues) - 31st August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-dpo-and-other-issues-31st-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:29.800Z\",\n            \"target_date\": \"2018-08-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sxify\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135356/aaj-shahzeb-khanzada-ke-sath-dpo-and-other-issues-31st-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 908,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.842Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.841Z\",\n            \"updated\": \"2019-07-04T11:48:29.842Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Imran Khan's GHQ Visit) - 30th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-imran-khans-ghq-visit-30th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:29.842Z\",\n            \"target_date\": \"2018-08-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6svsy9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135286/aaj-shahzeb-khanzada-ke-sath-imran-khan-s-ghq-visit-30th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 909,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.878Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.877Z\",\n            \"updated\": \"2019-07-04T11:48:29.878Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Fake Accounts Case) - 29th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-fake-accounts-case-29th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:29.878Z\",\n            \"target_date\": \"2018-08-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sttyk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135209/aaj-shahzeb-khanzada-ke-sath-fake-accounts-case-29th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 910,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.921Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.921Z\",\n            \"updated\": \"2019-07-04T11:48:29.921Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (PTI Ke Dikhawe Ke Iqdamat) - 28th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-pti-ke-dikhawe-ke-iqdamat-28th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:29.921Z\",\n            \"target_date\": \"2018-08-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sro52\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135138/aaj-shahzeb-khanzada-ke-sath-pti-ke-dikhawe-ke-iqdamat-28th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 911,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:29.989Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:29.988Z\",\n            \"updated\": \"2019-07-04T11:48:29.989Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Khawar Manika DPO Issue) - 27th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-khawar-manika-dpo-issue-27th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:29.989Z\",\n            \"target_date\": \"2018-08-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sp8hn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135063/aaj-shahzeb-khanzada-ke-sath-khawar-manika-dpo-issue-27th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 912,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.107Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.106Z\",\n            \"updated\": \"2019-07-04T11:48:30.107Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Presidential Election) - 21st August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-presidential-election-21st-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:30.107Z\",\n            \"target_date\": \"2018-08-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sdmeu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/134749/aaj-shahzeb-khanzada-ke-sath-presidential-election-21st-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 913,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.167Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.166Z\",\n            \"updated\": \"2019-07-04T11:48:30.167Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 9,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Imran Khan Ke Waade) - 20th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-imran-khan-ke-waade-20th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:30.167Z\",\n            \"target_date\": \"2018-08-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sbitw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/134687/aaj-shahzeb-khanzada-ke-sath-imran-khan-ke-waade-20th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 914,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.443Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.443Z\",\n            \"updated\": \"2019-07-04T11:48:30.443Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Kaun Kaun Pakra Jaye Ga) - 3rd July 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-kaun-kaun-pakra-jaye-ga-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:30.443Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/_KDVX0qTZaQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153478/khara-sach-with-mubashir-lucman-kaun-kaun-pakra-jaye-ga-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 915,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.537Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.537Z\",\n            \"updated\": \"2019-07-04T11:48:30.537Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Production Orders Issue) \\u2013 2nd July 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-production-orders-issue-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:30.537Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/nKuwoGvou3g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153404/khara-sach-with-mubashir-lucman-production-orders-issue-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 916,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.609Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.608Z\",\n            \"updated\": \"2019-07-04T11:48:30.609Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Sheikh Rasheed Exclusive Interview) \\u2013 1st July 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-sheikh-rasheed-exclusive-interview-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:30.609Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/eKenpQJojzo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153323/khara-sach-with-mubashir-lucman-sheikh-rasheed-exclusive-interview-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 917,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.697Z\",\n            \"updated\": \"2019-07-04T11:48:30.697Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach (Kia Pakistan Mein Kuch Acha Nahi Ho Raha?) \\u2013 28th June 2019\",\n            \"slug\": \"khara-sach-kia-pakistan-mein-kuch-acha-nahi-ho-raha-28th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:30.698Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/6eJe6Ds3Adg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153125/khara-sach-kia-pakistan-mein-kuch-acha-nahi-ho-raha-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 918,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.805Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.805Z\",\n            \"updated\": \"2019-07-04T11:48:30.805Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Dollar Uncontrolled) \\u2013 27th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-dollar-uncontrolled-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:30.805Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/oBwHM_4Ar1I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153065/khara-sach-with-mubashir-lucman-dollar-uncontrolled-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 919,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:30.964Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:30.946Z\",\n            \"updated\": \"2019-07-04T11:48:30.964Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Who Will Be New Chairman Senate) \\u2013 26th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-who-will-be-new-chairman-senate-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:30.964Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/xN1e9G3lh9M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152999/khara-sach-with-mubashir-lucman-who-will-be-new-chairman-senate-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 920,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.041Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.041Z\",\n            \"updated\": \"2019-07-04T11:48:31.041Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Berozgari Mein Izafa) \\u2013 25th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-berozgari-mein-izafa-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.041Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/6q1jaJYQatY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152914/khara-sach-with-mubashir-lucman-berozgari-mein-izafa-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 921,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.091Z\",\n            \"updated\": \"2019-07-04T11:48:31.091Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (FBR's Online System Security) \\u2013 24th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-fbrs-online-system-security-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.091Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/f8C5VfJFfms\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152858/khara-sach-with-mubashir-lucman-fbr-s-online-system-security-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 922,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.157Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.156Z\",\n            \"updated\": \"2019-07-04T11:48:31.157Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Is Deal Being Done? \\u2013 21st June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-is-deal-being-done-21st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.157Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/EdPZs87TAYQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152666/khara-sach-with-mubashir-lucman-is-deal-being-done-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 923,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.191Z\",\n            \"updated\": \"2019-07-04T11:48:31.191Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Hakumat Khatre Mein) \\u2013 19th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-hakumat-khatre-mein-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.191Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/Q4nb1kBB8Rk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152532/khara-sach-with-mubashir-lucman-hakumat-khatre-mein-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 924,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.223Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.222Z\",\n            \"updated\": \"2019-07-04T11:48:31.223Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Budget Kaise Pass Hoga?) \\u2013 18th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-budget-kaise-pass-hoga-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.223Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/SlAY_FhSdfU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152458/khara-sach-with-mubashir-lucman-budget-kaise-pass-hoga-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 925,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.278Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.277Z\",\n            \"updated\": \"2019-07-04T11:48:31.278Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (What Is Democracy?) \\u2013 17th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-what-is-democracy-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.278Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/h2nkSS2P9is\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152423/khara-sach-with-mubashir-lucman-what-is-democracy-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 926,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.321Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.320Z\",\n            \"updated\": \"2019-07-04T11:48:31.321Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Dora Qanoon) \\u2013 14th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-dora-qanoon-14th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.321Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/zVXXEZPRZVo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152260/khara-sach-with-mubashir-lucman-dora-qanoon-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 927,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.365Z\",\n            \"updated\": \"2019-07-04T11:48:31.366Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.366Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/5W0KGKTQLEQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152017/khara-sach-with-mubashir-lucman-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 928,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.400Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.400Z\",\n            \"updated\": \"2019-07-04T11:48:31.400Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Automobile Mafia) \\u2013 7th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-automobile-mafia-7th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.400Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/UId80gg9D6A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151855/khara-sach-with-mubashir-lucman-automobile-mafia-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 929,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.445Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.444Z\",\n            \"updated\": \"2019-07-04T11:48:31.445Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Naya Pakistan Vs Purana Pakistan) \\u2013 3rd June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-naya-pakistan-vs-purana-pakistan-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.445Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/sWu9K3Ai5Gw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151694/khara-sach-with-mubashir-lucman-naya-pakistan-vs-purana-pakistan-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 930,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.498Z\",\n            \"updated\": \"2019-07-04T11:48:31.499Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Education, A Business) \\u2013 31st May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-education-a-business-31st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.499Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/3wpT6Vy4Tp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151568/khara-sach-with-mubashir-lucman-education-a-business-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 931,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.532Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.532Z\",\n            \"updated\": \"2019-07-04T11:48:31.532Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Is NAB Above The Law) \\u2013 30th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-is-nab-above-the-law-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.532Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/rWkBJLyiaGk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151522/khara-sach-with-mubashir-lucman-is-nab-above-the-law-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 932,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.570Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.570Z\",\n            \"updated\": \"2019-07-04T11:48:31.570Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Siasi Mahool Garm) \\u2013 29th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-siasi-mahool-garm-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.570Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/SdMjdg6EmEw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151441/khara-sach-with-mubashir-lucman-siasi-mahool-garm-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 933,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.611Z\",\n            \"updated\": \"2019-07-04T11:48:31.612Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Eid Ka Masla) \\u2013 28th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-eid-ka-masla-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.612Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/1ODr8cZrX9E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151400/khara-sach-with-mubashir-lucman-eid-ka-masla-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 934,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.646Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.646Z\",\n            \"updated\": \"2019-07-04T11:48:31.646Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Interest Against Islam) \\u2013 24th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-interest-against-islam-24th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.646Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/Jn7ZDvd6Qpw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151182/khara-sach-with-mubashir-lucman-interest-against-islam-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 935,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.709Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.708Z\",\n            \"updated\": \"2019-07-04T11:48:31.716Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Ghazwa e Badr Ki Ahmiyat) \\u2013 23rd May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-ghazwa-e-badr-ki-ahmiyat-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.716Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/eDfJz-bdMq8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151137/khara-sach-with-mubashir-lucman-ghazwa-e-badr-ki-ahmiyat-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 936,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.755Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.755Z\",\n            \"updated\": \"2019-07-04T11:48:31.755Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Dollar Speed) \\u2013 21st May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-dollar-speed-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.755Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/ICM0enanIMI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151014/khara-sach-with-mubashir-lucman-dollar-speed-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 937,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.820Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.819Z\",\n            \"updated\": \"2019-07-04T11:48:31.820Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Automobile  Mafia) \\u2013 17th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-automobile-mafia-17th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.820Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/hpbWvCt9BZs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150822/khara-sach-with-mubashir-lucman-automobile-mafia-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 938,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.900Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.900Z\",\n            \"updated\": \"2019-07-04T11:48:31.900Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Bureaucracy Ruling Pakistan) \\u2013 16th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-bureaucracy-ruling-pakistan-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.900Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/oo4E2iIroLM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150764/khara-sach-with-mubashir-lucman-bureaucracy-ruling-pakistan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 939,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.935Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.934Z\",\n            \"updated\": \"2019-07-04T11:48:31.935Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Increasing Aids in Sindh) \\u2013 15th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-increasing-aids-in-sindh-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.935Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/kKb_V_f_MUU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150695/khara-sach-with-mubashir-lucman-increasing-aids-in-sindh-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 940,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:31.985Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:31.985Z\",\n            \"updated\": \"2019-07-04T11:48:31.985Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Tax System) \\u2013 14th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-tax-system-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:31.985Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/YfC_cSjC79E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150613/khara-sach-with-mubashir-lucman-tax-system-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 941,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.028Z\",\n            \"updated\": \"2019-07-04T11:48:32.029Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Interest According to Islam) \\u2013 13th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-interest-according-to-islam-13th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.029Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/Jn7ZDvd6Qpw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150563/khara-sach-with-mubashir-lucman-interest-according-to-islam-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 942,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.078Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.077Z\",\n            \"updated\": \"2019-07-04T11:48:32.078Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Mehngai Mein Izafa) \\u2013 10th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-mehngai-mein-izafa-10th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.078Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/LDCIPyG9LoU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150410/khara-sach-with-mubashir-lucman-mehngai-mein-izafa-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 943,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.148Z\",\n            \"updated\": \"2019-07-04T11:48:32.164Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Mehngai Mein Izafa) \\u2013 9th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-mehngai-mein-izafa-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.164Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/nrahxgu0Z_M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150319/khara-sach-with-mubashir-lucman-mehngai-mein-izafa-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 944,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.263Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.263Z\",\n            \"updated\": \"2019-07-04T11:48:32.264Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (National Action Plan Failed?) \\u2013 8th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-national-action-plan-failed-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.264Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/DH7zyNjRoWs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150256/khara-sach-with-mubashir-lucman-national-action-plan-failed-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 945,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.413Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.412Z\",\n            \"updated\": \"2019-07-04T11:48:32.413Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Nawaz Sharif Ki Jail Wapsi) \\u2013 7th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.413Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/fKuhdhEpEXg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150192/khara-sach-with-mubashir-lucman-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 946,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.628Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.627Z\",\n            \"updated\": \"2019-07-04T11:48:32.628Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (New Local Body System) \\u2013 6th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-new-local-body-system-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.629Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/W2dMTtvmo1w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150126/khara-sach-with-mubashir-lucman-new-local-body-system-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 947,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.784Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.784Z\",\n            \"updated\": \"2019-07-04T11:48:32.784Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Kia Deal Ho Gai) \\u2013 2nd May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-kia-deal-ho-gai-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.784Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/6lkopnkVtKQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149872/khara-sach-with-mubashir-lucman-kia-deal-ho-gai-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 948,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.862Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.862Z\",\n            \"updated\": \"2019-07-04T11:48:32.862Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Where Is PTI Youth) \\u2013 1st April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-where-is-pti-youth-1st-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.862Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/QrGJ-Bekz6k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149811/khara-sach-with-mubashir-lucman-where-is-pti-youth-1st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 949,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:32.979Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:32.979Z\",\n            \"updated\": \"2019-07-04T11:48:32.979Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Mehngi Bijli) \\u2013 30th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-mehngi-bijli-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:32.979Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/AJeyUaGTeBk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149729/khara-sach-with-mubashir-lucman-mehngi-bijli-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 950,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.157Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.156Z\",\n            \"updated\": \"2019-07-04T11:48:33.157Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Ali Zafar In Trouble?) \\u2013 29th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-ali-zafar-in-trouble-29th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.157Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/0K8NG4pYL3s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149658/khara-sach-with-mubashir-lucman-ali-zafar-in-trouble-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 951,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.331Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.331Z\",\n            \"updated\": \"2019-07-04T11:48:33.332Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Khalid Maqbool Siddiqui Exclusive) \\u2013 26th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-khalid-maqbool-siddiqui-exclusive-26th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.332Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/YvIxxEnUz9A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149488/khara-sach-with-mubashir-lucman-khalid-maqbool-siddiqui-exclusive-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 952,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.526Z\",\n            \"updated\": \"2019-07-04T11:48:33.526Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Taqdeer Kia Hai) REPEAT \\u2013 25th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-taqdeer-kia-hai-repeat-25th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.526Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/6Y_hHqJ2F0I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149414/khara-sach-with-mubashir-lucman-taqdeer-kia-hai-repeat-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 953,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.581Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.581Z\",\n            \"updated\": \"2019-07-04T11:48:33.581Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 19,\n                \"feed_id\": 24,\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Why Ch. Sarwar Unhappy) \\u2013 24 April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-why-ch-sarwar-unhappy-24-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.582Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/v0eW3bZT7i8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149356/khara-sach-with-mubashir-lucman-why-ch-sarwar-unhappy-24-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 954,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.703Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.702Z\",\n            \"updated\": \"2019-07-04T11:48:33.703Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Big Shock For PMLN?) \\u2013 30th June 2019\",\n            \"slug\": \"night-edition-big-shock-for-pmln-30th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.703Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c7xp3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153244/night-edition-big-shock-for-pmln-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 955,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.729Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.729Z\",\n            \"updated\": \"2019-07-04T11:48:33.730Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Budget Approved, Opposition Failed?) \\u2013 29th June 2019\",\n            \"slug\": \"night-edition-budget-approved-opposition-failed-29th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.730Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5qbo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153185/night-edition-budget-approved-opposition-failed-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 956,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.793Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.792Z\",\n            \"updated\": \"2019-07-04T11:48:33.793Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hakumat Ne Budget Pass Kar Lia) \\u2013 28th June 2019\",\n            \"slug\": \"night-edition-hakumat-ne-budget-pass-kar-lia-28th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.793Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c36hy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153120/night-edition-hakumat-ne-budget-pass-kar-lia-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 957,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.824Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.824Z\",\n            \"updated\": \"2019-07-04T11:48:33.824Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Opposition Mein Ittehad Nahi?) \\u2013 23rd June 2019\",\n            \"slug\": \"night-edition-opposition-mein-ittehad-nahi-23rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.824Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bqtqz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152776/night-edition-opposition-mein-ittehad-nahi-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 958,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.870Z\",\n            \"updated\": \"2019-07-04T11:48:33.873Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (How Govt Managed Lawyers Movement?) \\u2013 22nd June 2019\",\n            \"slug\": \"night-edition-how-govt-managed-lawyers-movement-22nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.873Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bp2ga\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152715/night-edition-how-govt-managed-lawyers-movement-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 959,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.908Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.908Z\",\n            \"updated\": \"2019-07-04T11:48:33.908Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia PTI Mein Forward Blaock Ban Raha Hai) \\u2013 21st June 2019\",\n            \"slug\": \"night-edition-kia-pti-mein-forward-blaock-ban-raha-hai-21st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.908Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn8lk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152646/night-edition-kia-pti-mein-forward-blaock-ban-raha-hai-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 960,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.953Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.953Z\",\n            \"updated\": \"2019-07-04T11:48:33.953Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Success Chances of Anti Govt Movement) \\u2013 16th June 2019\",\n            \"slug\": \"night-edition-success-chances-of-anti-govt-movement-16th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.953Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bddv9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152345/night-edition-success-chances-of-anti-govt-movement-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 961,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:33.987Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:33.986Z\",\n            \"updated\": \"2019-07-04T11:48:33.995Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (First Budget of Naya Pakistan) \\u2013 15th June 2019\",\n            \"slug\": \"night-edition-first-budget-of-naya-pakistan-15th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:33.995Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/-wb2tQygRL4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152305/night-edition-first-budget-of-naya-pakistan-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 962,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.024Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.024Z\",\n            \"updated\": \"2019-07-04T11:48:34.024Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia Commission Bane Ga?) \\u2013 14th June 2019\",\n            \"slug\": \"night-edition-kia-commission-bane-ga-14th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.024Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6r6c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152245/night-edition-kia-commission-bane-ga-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 963,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.071Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.071Z\",\n            \"updated\": \"2019-07-04T11:48:34.071Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Internal Differences in PTI) \\u2013 9th June 2019\",\n            \"slug\": \"night-edition-internal-differences-in-pti-9th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.071Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anwfv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151933/night-edition-internal-differences-in-pti-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 964,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.119Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.119Z\",\n            \"updated\": \"2019-07-04T11:48:34.119Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hassan Nisar Exclusive Interview) \\u2013 8th June 2019\",\n            \"slug\": \"night-edition-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.119Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7algzs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151890/night-edition-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 965,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.173Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.172Z\",\n            \"updated\": \"2019-07-04T11:48:34.173Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Opposition Ki Tehreek) \\u2013 7th June 2019\",\n            \"slug\": \"night-edition-opposition-ki-tehreek-7th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.173Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aihyq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151850/night-edition-opposition-ki-tehreek-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 966,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.233Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.233Z\",\n            \"updated\": \"2019-07-04T11:48:34.244Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (PTI's Internal Differences) \\u2013 2nd June 2019\",\n            \"slug\": \"night-edition-ptis-internal-differences-2nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.244Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3kxz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151654/night-edition-pti-s-internal-differences-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 967,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.286Z\",\n            \"updated\": \"2019-07-04T11:48:34.286Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia Pakistan Islam Ka Qila Ban Gaya?) \\u2013 1st June 2019\",\n            \"slug\": \"night-edition-kia-pakistan-islam-ka-qila-ban-gaya-1st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.286Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a0z47\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151609/night-edition-kia-pakistan-islam-ka-qila-ban-gaya-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 968,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.322Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.322Z\",\n            \"updated\": \"2019-07-04T11:48:34.322Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (What Is The Agenda of Opposition) \\u2013 31st May 2019\",\n            \"slug\": \"night-edition-what-is-the-agenda-of-opposition-31st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.322Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xv4v\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151557/night-edition-what-is-the-agenda-of-opposition-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 969,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.397Z\",\n            \"updated\": \"2019-07-04T11:48:34.397Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Chairman NAB Issue) \\u2013 26th May 2019\",\n            \"slug\": \"night-edition-chairman-nab-issue-26th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.397Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79f220\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151289/night-edition-chairman-nab-issue-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 970,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.469Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.468Z\",\n            \"updated\": \"2019-07-04T11:48:34.469Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Sheikh Rasheed Ahmad Exclusive Interview) \\u2013 25th May 2019\",\n            \"slug\": \"night-edition-sheikh-rasheed-ahmad-exclusive-interview-25th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.469Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79c7qg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151251/night-edition-sheikh-rasheed-ahmad-exclusive-interview-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 971,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.543Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.542Z\",\n            \"updated\": \"2019-07-04T11:48:34.543Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Discussion on Current Issues) \\u2013 24th May 2019\",\n            \"slug\": \"night-edition-discussion-on-current-issues-24th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.543Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79935b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151187/night-edition-discussion-on-current-issues-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 972,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.664Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.664Z\",\n            \"updated\": \"2019-07-04T11:48:34.664Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Tribal Areas Issues)  \\u2013 18th May 2019\",\n            \"slug\": \"night-edition-tribal-areas-issues-18th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.664Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78opfd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150859/night-edition-tribal-areas-issues-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 973,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.811Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.810Z\",\n            \"updated\": \"2019-07-04T11:48:34.811Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Opposition Planning Movement After Eid) \\u2013 17th May 2019\",\n            \"slug\": \"night-edition-opposition-planning-movement-after-eid-17th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.811Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78lgls\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150806/night-edition-opposition-planning-movement-after-eid-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 974,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:34.921Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:34.921Z\",\n            \"updated\": \"2019-07-04T11:48:34.921Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Scientific Way of Moon Sighting) \\u2013 12th May 2019\",\n            \"slug\": \"night-edition-scientific-way-of-moon-sighting-12th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:34.921Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x784vtt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150490/night-edition-scientific-way-of-moon-sighting-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 975,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.028Z\",\n            \"updated\": \"2019-07-04T11:48:35.028Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (America's Sanctions on Iran) \\u2013 11th May 2019\",\n            \"slug\": \"night-edition-americas-sanctions-on-iran-11th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.028Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7828ah\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150433/night-edition-america-s-sanctions-on-iran-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 976,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.156Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.156Z\",\n            \"updated\": \"2019-07-04T11:48:35.157Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hassan Nisar Exclusive Interview) \\u2013 10th May 2019\",\n            \"slug\": \"night-edition-hassan-nisar-exclusive-interview-10th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.157Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77z3on\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150373/night-edition-hassan-nisar-exclusive-interview-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 977,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.234Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.234Z\",\n            \"updated\": \"2019-07-04T11:48:35.234Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (New Local Body System in Punjab) \\u2013 5th May 2019\",\n            \"slug\": \"night-edition-new-local-body-system-in-punjab-5th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.234Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77hkdm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150040/night-edition-new-local-body-system-in-punjab-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 978,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.344Z\",\n            \"updated\": \"2019-07-04T11:48:35.344Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (South Punjab Province, Other Issues) \\u2013 4th May 2019\",\n            \"slug\": \"night-edition-south-punjab-province-other-issues-4th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.344Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77er0g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149986/night-edition-south-punjab-province-other-issues-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 979,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.414Z\",\n            \"updated\": \"2019-07-04T11:48:35.414Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia PTI Koi Tabdeeli La Pai) \\u2013 3rd May 2019\",\n            \"slug\": \"night-edition-kia-pti-koi-tabdeeli-la-pai-3rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.414Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77bfw2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149926/night-edition-kia-pti-koi-tabdeeli-la-pai-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 980,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.631Z\",\n            \"updated\": \"2019-07-04T11:48:35.632Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Why PM Doesn't Want to Brief Parliament) \\u2013 28th April 2019\",\n            \"slug\": \"night-edition-why-pm-doesnt-want-to-brief-parliament-28th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.632Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76uzi9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149585/night-edition-why-pm-doesn-t-want-to-brief-parliament-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 981,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.698Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.698Z\",\n            \"updated\": \"2019-07-04T11:48:35.698Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (New Corruption Story) \\u2013 27th April 2019\",\n            \"slug\": \"night-edition-new-corruption-story-27th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.698Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76s7fx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149534/night-edition-new-corruption-story-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 982,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.741Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.741Z\",\n            \"updated\": \"2019-07-04T11:48:35.741Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hakumat Aur Opposition Mein Tanao) \\u2013 26th April 2019\",\n            \"slug\": \"night-edition-hakumat-aur-opposition-mein-tanao-26th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.741Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76p5lz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149478/night-edition-hakumat-aur-opposition-mein-tanao-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 983,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.782Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.782Z\",\n            \"updated\": \"2019-07-04T11:48:35.782Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Chaudhary Sarwar Exclusive Interview) \\u2013 21st April 2019\",\n            \"slug\": \"night-edition-chaudhary-sarwar-exclusive-interview-21st-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.782Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x769fak\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149183/night-edition-chaudhary-sarwar-exclusive-interview-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 984,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.822Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.822Z\",\n            \"updated\": \"2019-07-04T11:48:35.822Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Big Changes in PTI Govt) \\u2013 19th April 2019\",\n            \"slug\": \"night-edition-big-changes-in-pti-govt-19th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.822Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x764yx5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149074/night-edition-big-changes-in-pti-govt-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 985,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.893Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.892Z\",\n            \"updated\": \"2019-07-04T11:48:35.893Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Parliament Should Support Chief Justice) \\u2013 14th April 2019\",\n            \"slug\": \"night-edition-parliament-should-support-chief-justice-14th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.893Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/pniOzQNe9Z8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148796/night-edition-parliament-should-support-chief-justice-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 986,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:35.948Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:35.948Z\",\n            \"updated\": \"2019-07-04T11:48:35.948Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (NA Speaker Asad Qaiser Exclusive) \\u2013 13th April 2019\",\n            \"slug\": \"night-edition-na-speaker-asad-qaiser-exclusive-13th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:35.948Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75saev\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148739/night-edition-na-speaker-asad-qaiser-exclusive-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 987,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.002Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.002Z\",\n            \"updated\": \"2019-07-04T11:48:36.002Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Shahbaz Sharif Family in Trouble) \\u2013 12th April 2019\",\n            \"slug\": \"night-edition-shahbaz-sharif-family-in-trouble-12th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.002Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75q8ug\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148690/night-edition-shahbaz-sharif-family-in-trouble-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 988,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.058Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.058Z\",\n            \"updated\": \"2019-07-04T11:48:36.058Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (FBR And Tax Reforms) \\u2013 7th April 2019\",\n            \"slug\": \"night-edition-fbr-and-tax-reforms-7th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.059Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75fccl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148416/night-edition-fbr-and-tax-reforms-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 989,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.097Z\",\n            \"updated\": \"2019-07-04T11:48:36.098Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (NAB's Attempt to Arrest Hamza Shahbaz) \\u2013 6th April 2019\",\n            \"slug\": \"night-edition-nabs-attempt-to-arrest-hamza-shahbaz-6th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.098Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75dpt8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148370/night-edition-nab-s-attempt-to-arrest-hamza-shahbaz-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 990,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.131Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.131Z\",\n            \"updated\": \"2019-07-04T11:48:36.131Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Asif Zardari Jail Jaane Wale Hain - PM) \\u2013 5th April 2019\",\n            \"slug\": \"night-edition-asif-zardari-jail-jaane-wale-hain-pm-5th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.131Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75bz2x\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148321/night-edition-asif-zardari-jail-jaane-wale-hain-pm-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 991,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.188Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.188Z\",\n            \"updated\": \"2019-07-04T11:48:36.188Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Imran Khan Determined on Accountability) \\u2013 31st March 2019\",\n            \"slug\": \"night-edition-imran-khan-determined-on-accountability-31st-march-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.188Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7525dd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148055/night-edition-imran-khan-determined-on-accountability-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 992,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.218Z\",\n            \"updated\": \"2019-07-04T11:48:36.218Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Case of Assets Beyond Means) \\u2013 30th March 2019\",\n            \"slug\": \"night-edition-case-of-assets-beyond-means-30th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.218Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x750cep\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/147990/night-edition-case-of-assets-beyond-means-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 993,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.274Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.273Z\",\n            \"updated\": \"2019-07-04T11:48:36.274Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 10,\n                \"feed_id\": 15,\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (PMLN Getting Relief From Courts) \\u2013 29th March 2019\",\n            \"slug\": \"night-edition-pmln-getting-relief-from-courts-29th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.274Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x74ytma\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/147941/night-edition-pmln-getting-relief-from-courts-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 994,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.407Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.407Z\",\n            \"updated\": \"2019-07-04T11:48:36.407Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Ashraf Ghani Special Interview) - 30th June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-ashraf-ghani-special-interview-30th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.407Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/1zZ56wxkOkk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/153255/jirga-with-saleem-safi-ashraf-ghani-special-interview-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 995,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.466Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.466Z\",\n            \"updated\": \"2019-07-04T11:48:36.466Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Qamar Zaman Kaira Exclusive) - 22nd June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-qamar-zaman-kaira-exclusive-22nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.466Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/A0WRKVFeDpg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/152726/jirga-with-saleem-safi-qamar-zaman-kaira-exclusive-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 996,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.500Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.500Z\",\n            \"updated\": \"2019-07-04T11:48:36.500Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Zaidan Hamid Exclusive Interview) \\u2013 9th June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-zaidan-hamid-exclusive-interview-9th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.500Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/W-k7oaH8ke0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151938/jirga-with-saleem-safi-zaidan-hamid-exclusive-interview-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 997,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.557Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.557Z\",\n            \"updated\": \"2019-07-04T11:48:36.557Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Mishal Malik Exclusive Interview) \\u2013 2nd June 2019\",\n            \"slug\": \"jirga-mishal-malik-exclusive-interview-2nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.557Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/K0Qj6wJ2Gpw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151659/jirga-mishal-malik-exclusive-interview-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 998,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.602Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.602Z\",\n            \"updated\": \"2019-07-04T11:48:36.603Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Sardar Akhtar Mengal Interview) \\u2013 1st June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-sardar-akhtar-mengal-interview-1st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.603Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/BsDeH1L96X8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151623/jirga-with-saleem-safi-sardar-akhtar-mengal-interview-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 999,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.653Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.651Z\",\n            \"updated\": \"2019-07-04T11:48:36.653Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Firdous Ashiq Awan Exclusive Interview) \\u2013 26th May 2019\",\n            \"slug\": \"jirga-firdous-ashiq-awan-exclusive-interview-26th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.653Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ZF1HJrWQu-k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151305/jirga-firdous-ashiq-awan-exclusive-interview-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1000,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.717Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.717Z\",\n            \"updated\": \"2019-07-04T11:48:36.717Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Talk With Three Political Parties Representatives) \\u2013 25th May 2019\",\n            \"slug\": \"jirga-talk-with-three-political-parties-representatives-25th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.717Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/RQWKyINEOQ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151250/jirga-talk-with-three-political-parties-representatives-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1001,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.859Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.859Z\",\n            \"updated\": \"2019-07-04T11:48:36.859Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Maulana Tariq Jameel Exclusive Talk) \\u2013 18th May 2019\",\n            \"slug\": \"jirga-maulana-tariq-jameel-exclusive-talk-18th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.859Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/UVmI_hCYga4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/150874/jirga-maulana-tariq-jameel-exclusive-talk-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1002,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:36.916Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:36.916Z\",\n            \"updated\": \"2019-07-04T11:48:36.917Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Speaker NA Asad Qaiser Exclusive Interview) \\u2013 12th May 2019\",\n            \"slug\": \"jirga-speaker-na-asad-qaiser-exclusive-interview-12th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:36.917Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/cj1yqgFJRVk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/150507/jirga-speaker-na-asad-qaiser-exclusive-interview-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1003,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.007Z\",\n            \"updated\": \"2019-07-04T11:48:37.007Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Ruet-e-Hilal Committee Ka Mamla) \\u2013 11th May 2019\",\n            \"slug\": \"jirga-ruet-e-hilal-committee-ka-mamla-11th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:37.007Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/urUc1Ju7sh0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/150436/jirga-ruet-e-hilal-committee-ka-mamla-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1004,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.094Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.093Z\",\n            \"updated\": \"2019-07-04T11:48:37.094Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Maulana Fazal ur Rehman Interview) - 2nd September 2018\",\n            \"slug\": \"jirga-with-saleem-safi-maulana-fazal-ur-rehman-interview-2nd-september-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.094Z\",\n            \"target_date\": \"2018-09-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t0ecx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/135496/jirga-with-saleem-safi-maulana-fazal-ur-rehman-interview-2nd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1005,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.180Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.179Z\",\n            \"updated\": \"2019-07-04T11:48:37.180Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Aitzaz Ahsan Interview) - 1st September 2018\",\n            \"slug\": \"jirga-with-saleem-safi-aitzaz-ahsan-interview-1st-september-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.180Z\",\n            \"target_date\": \"2018-09-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sz4od\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/135429/jirga-with-saleem-safi-aitzaz-ahsan-interview-1st-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1006,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.290Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.290Z\",\n            \"updated\": \"2019-07-04T11:48:37.290Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Regional Poets) - 26th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-regional-poets-26th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.290Z\",\n            \"target_date\": \"2018-08-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sn757\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134994/jirga-with-saleem-safi-regional-poets-26th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1007,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.390Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.390Z\",\n            \"updated\": \"2019-07-04T11:48:37.390Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Afghan Sadar Ke Shikwe) - 25th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-afghan-sadar-ke-shikwe-25th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.390Z\",\n            \"target_date\": \"2018-08-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6slqla\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134938/jirga-with-saleem-safi-afghan-sadar-ke-shikwe-25th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1008,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.714Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.705Z\",\n            \"updated\": \"2019-07-04T11:48:37.714Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (New Faces in Assembly) - 18th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-new-faces-in-assembly-18th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.714Z\",\n            \"target_date\": \"2018-08-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6s7rm3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134556/jirga-with-saleem-safi-new-faces-in-assembly-18th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1009,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.800Z\",\n            \"updated\": \"2019-07-04T11:48:37.800Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Why America Is Angry on Pakistan) - 12th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-why-america-is-angry-on-pakistan-12th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.800Z\",\n            \"target_date\": \"2018-08-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rw98w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134145/jirga-with-saleem-safi-why-america-is-angry-on-pakistan-12th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1010,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.876Z\",\n            \"updated\": \"2019-07-04T11:48:37.876Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (PTI's Govt Formation) - 11th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-ptis-govt-formation-11th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.876Z\",\n            \"target_date\": \"2018-08-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ruu7a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134096/jirga-with-saleem-safi-pti-s-govt-formation-11th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1011,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:37.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:37.929Z\",\n            \"updated\": \"2019-07-04T11:48:37.929Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Zaidan Hamid, Little Professor) - 5th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-zaidan-hamid-little-professor-5th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:37.929Z\",\n            \"target_date\": \"2018-08-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rhd9a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133690/jirga-with-saleem-safi-zaidan-hamid-little-professor-5th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1012,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.020Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.020Z\",\n            \"updated\": \"2019-07-04T11:48:38.021Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Khushiyan Bantne Walon Ke Sath) - 4th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-khushiyan-bantne-walon-ke-sath-4th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.021Z\",\n            \"target_date\": \"2018-08-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rfbrk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133638/jirga-with-saleem-safi-khushiyan-bantne-walon-ke-sath-4th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1013,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.091Z\",\n            \"updated\": \"2019-07-04T11:48:38.091Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (ECP Response on Rigging Allegations) - 29th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-ecp-response-on-rigging-allegations-29th-july-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.091Z\",\n            \"target_date\": \"2018-07-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qnk2n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133235/jirga-with-saleem-safi-ecp-response-on-rigging-allegations-29th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1014,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.140Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.140Z\",\n            \"updated\": \"2019-07-04T11:48:38.140Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Mustafa Kamal Exclusive Interview) - 28th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-mustafa-kamal-exclusive-interview-28th-july-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.140Z\",\n            \"target_date\": \"2018-07-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qjmkf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133176/jirga-with-saleem-safi-mustafa-kamal-exclusive-interview-28th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1015,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.192Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.192Z\",\n            \"updated\": \"2019-07-04T11:48:38.192Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election Challenge For Caretaker Govt) - 21st July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-challenge-for-caretaker-govt-21st-july-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.192Z\",\n            \"target_date\": \"2018-07-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6pq4sd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/132744/jirga-with-saleem-safi-election-challenge-for-caretaker-govt-21st-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1016,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.251Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.250Z\",\n            \"updated\": \"2019-07-04T11:48:38.251Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Naqibullah Mehsud Case) - 15th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-naqibullah-mehsud-case-15th-july-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.251Z\",\n            \"target_date\": \"2018-07-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6otlrx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/132374/jirga-with-saleem-safi-naqibullah-mehsud-case-15th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1017,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.319Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.319Z\",\n            \"updated\": \"2019-07-04T11:48:38.319Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Use of Religion in Pakistani Politics) - 8th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-use-of-religion-in-pakistani-politics-8th-july-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.319Z\",\n            \"target_date\": \"2018-07-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nzjty\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131943/jirga-with-saleem-safi-use-of-religion-in-pakistani-politics-8th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1018,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.379Z\",\n            \"updated\": \"2019-07-04T11:48:38.380Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Asfandyar Wali Interview) - 7th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-asfandyar-wali-interview-7th-july-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.380Z\",\n            \"target_date\": \"2018-07-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nwujd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131877/jirga-with-saleem-safi-asfandyar-wali-interview-7th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1019,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.447Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.447Z\",\n            \"updated\": \"2019-07-04T11:48:38.447Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi Part-2 (Shahbaz Sharif Interview) - 1st July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-part-2-shahbaz-sharif-interview-1st-july-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.447Z\",\n            \"target_date\": \"2018-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nbx57\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131503/jirga-with-saleem-safi-part-2-shahbaz-sharif-interview-1st-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1020,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.514Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.514Z\",\n            \"updated\": \"2019-07-04T11:48:38.515Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Shahbaz Sharif Exclusive Interview) - 30th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-shahbaz-sharif-exclusive-interview-30th-june-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.515Z\",\n            \"target_date\": \"2018-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6n91xt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131450/jirga-with-saleem-safi-shahbaz-sharif-exclusive-interview-30th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1021,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.599Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.598Z\",\n            \"updated\": \"2019-07-04T11:48:38.599Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Iftikhar Chaudhry Interview) - 24th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-iftikhar-chaudhry-interview-24th-june-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.599Z\",\n            \"target_date\": \"2018-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mo5p3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131093/jirga-with-saleem-safi-iftikhar-chaudhry-interview-24th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1022,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.633Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.633Z\",\n            \"updated\": \"2019-07-04T11:48:38.633Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election 2018) - 23rd June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-2018-23rd-june-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.633Z\",\n            \"target_date\": \"2018-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mlc4z\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131048/jirga-with-saleem-safi-election-2018-23rd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1023,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.690Z\",\n            \"updated\": \"2019-07-04T11:48:38.693Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Zaidan Hamid) - 18th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-zaidan-hamid-18th-june-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.693Z\",\n            \"target_date\": \"2018-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6m6lop\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/130748/jirga-with-saleem-safi-zaidan-hamid-18th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1024,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.727Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.727Z\",\n            \"updated\": \"2019-07-04T11:48:38.727Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Balochistan Awami Party) - 10th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-balochistan-awami-party-10th-june-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.727Z\",\n            \"target_date\": \"2018-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ljqti\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/130350/jirga-with-saleem-safi-balochistan-awami-party-10th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1025,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.795Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.795Z\",\n            \"updated\": \"2019-07-04T11:48:38.795Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Changes in FATA After Merger) - 3rd June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-changes-in-fata-after-merger-3rd-june-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.795Z\",\n            \"target_date\": \"2018-06-03\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kz3zb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129871/jirga-with-saleem-safi-changes-in-fata-after-merger-3rd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1026,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.843Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.843Z\",\n            \"updated\": \"2019-07-04T11:48:38.844Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Issues of Balochistan) \\u2013 2nd June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-issues-of-balochistan-2nd-june-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.844Z\",\n            \"target_date\": \"2018-06-02\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kws1r\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129797/jirga-with-saleem-safi-issues-of-balochistan-2nd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1027,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:38.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:38.900Z\",\n            \"updated\": \"2019-07-04T11:48:38.901Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Gilgat Baltistan Governance Ordinance) \\u2013 27th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-gilgat-baltistan-governance-ordinance-27th-may-2018\",\n            \"publish_date\": \"2019-07-04T11:48:38.901Z\",\n            \"target_date\": \"2018-05-27\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kgamn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129355/jirga-with-saleem-safi-gilgat-baltistan-governance-ordinance-27th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1028,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.041Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.041Z\",\n            \"updated\": \"2019-07-04T11:48:39.041Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (FATA Merger in KPK) \\u2013 26th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-fata-merger-in-kpk-26th-may-2018\",\n            \"publish_date\": \"2019-07-04T11:48:39.041Z\",\n            \"target_date\": \"2018-05-26\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6ke7p8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129322/jirga-with-saleem-safi-fata-merger-in-kpk-26th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1029,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.149Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.149Z\",\n            \"updated\": \"2019-07-04T11:48:39.149Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election 2018) Part-2 \\u2013 20th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-2018-part-2-20th-may-2018\",\n            \"publish_date\": \"2019-07-04T11:48:39.149Z\",\n            \"target_date\": \"2018-05-20\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jxptv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128976/jirga-with-saleem-safi-election-2018-part-2-20th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1030,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.199Z\",\n            \"updated\": \"2019-07-04T11:48:39.200Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election 2018) \\u2013 19th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-2018-19th-may-2018\",\n            \"publish_date\": \"2019-07-04T11:48:39.200Z\",\n            \"target_date\": \"2018-05-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6jvb6f\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128921/jirga-with-saleem-safi-election-2018-19th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1031,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.296Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.296Z\",\n            \"updated\": \"2019-07-04T11:48:39.296Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (KPK Hakumat Ke Dawe) - 13th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-kpk-hakumat-ke-dawe-13th-may-2018\",\n            \"publish_date\": \"2019-07-04T11:48:39.296Z\",\n            \"target_date\": \"2018-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6jg3fg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128543/jirga-with-saleem-safi-kpk-hakumat-ke-dawe-13th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1032,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.437Z\",\n            \"updated\": \"2019-07-04T11:48:39.438Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Gilgit Baltistan) - 12 May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-gilgit-baltistan-12-may-2018\",\n            \"publish_date\": \"2019-07-04T11:48:39.438Z\",\n            \"target_date\": \"2018-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6je4d6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128470/jirga-with-saleem-safi-gilgit-baltistan-12-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1033,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.544Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.543Z\",\n            \"updated\": \"2019-07-04T11:48:39.544Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 11,\n                \"feed_id\": 16,\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Asfandyar Wali Exclusive Interview) \\u2013 6th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-asfandyar-wali-exclusive-interview-6th-may-2018\",\n            \"publish_date\": \"2019-07-04T11:48:39.544Z\",\n            \"target_date\": \"2018-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6izp92\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128093/jirga-with-saleem-safi-asfandyar-wali-exclusive-interview-6th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1034,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.864Z\",\n            \"updated\": \"2019-07-04T11:48:39.865Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Rana Sanaullah Ke Baad Agli Baari Kis Ki) \\u2013 3rd July 2019\",\n            \"slug\": \"bebaak-rana-sanaullah-ke-baad-agli-baari-kis-ki-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:39.865Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/T7qUzfDuoMY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153462/bebaak-rana-sanaullah-ke-baad-agli-baari-kis-ki-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1035,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.920Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.920Z\",\n            \"updated\": \"2019-07-04T11:48:39.921Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Production Orders, Arrests, Economy) - 2nd July 2019\",\n            \"slug\": \"bebaak-production-orders-arrests-economy-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:39.921Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/ZqpPFiOOgCg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153396/bebaak-production-orders-arrests-economy-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1036,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:39.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:39.973Z\",\n            \"updated\": \"2019-07-04T11:48:39.973Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Rana Sanaullah Arrested, Shahbaz Maryam Meeting) - 1st July 2019\",\n            \"slug\": \"bebaak-rana-sanaullah-arrested-shahbaz-maryam-meeting-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:39.973Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/mSa6BuXRnrA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153326/bebaak-rana-sanaullah-arrested-shahbaz-maryam-meeting-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1037,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.009Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.009Z\",\n            \"updated\": \"2019-07-04T11:48:40.010Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Ishaq Dar 50 Crore Dene Per Razamand?) - 27th June 2019\",\n            \"slug\": \"bebaak-ishaq-dar-50-crore-dene-per-razamand-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.010Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/3RU-QsugdhM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153056/bebaak-ishaq-dar-50-crore-dene-per-razamand-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1038,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.075Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.068Z\",\n            \"updated\": \"2019-07-04T11:48:40.075Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Dollar Rate Mein Phir Izafa) \\u2013 26th June 2019\",\n            \"slug\": \"bebaak-dollar-rate-mein-phir-izafa-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.075Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/aKLL0IUHpoE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152993/bebaak-dollar-rate-mein-phir-izafa-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1039,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.126Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.125Z\",\n            \"updated\": \"2019-07-04T11:48:40.126Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Can Opposition Resign From Assemblies) \\u2013 25th June 2019\",\n            \"slug\": \"bebaak-can-opposition-resign-from-assemblies-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.126Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/5yUXElXk8UQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152923/bebaak-can-opposition-resign-from-assemblies-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1040,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.176Z\",\n            \"updated\": \"2019-07-04T11:48:40.177Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Ka Ittehad Kab Tak Rahe Ga) - 24th June 2019\",\n            \"slug\": \"bebaak-opposition-ka-ittehad-kab-tak-rahe-ga-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.177Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/aa0ePVpYm3I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152841/bebaak-opposition-ka-ittehad-kab-tak-rahe-ga-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1041,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.217Z\",\n            \"updated\": \"2019-07-04T11:48:40.218Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Parties United Against Govt) \\u2013 20th June 2019\",\n            \"slug\": \"bebaak-opposition-parties-united-against-govt-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.218Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/qTKUeYHHD0w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152591/bebaak-opposition-parties-united-against-govt-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1042,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.247Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.247Z\",\n            \"updated\": \"2019-07-04T11:48:40.247Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Imran Khan Ka Usman Buzdar Ko Ghar Bhaijne Ka Faisla) \\u2013 19th June 2019\",\n            \"slug\": \"bebaak-imran-khan-ka-usman-buzdar-ko-ghar-bhaijne-ka-faisla-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.247Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/iTcDDGPr2dg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152536/bebaak-imran-khan-ka-usman-buzdar-ko-ghar-bhaijne-ka-faisla-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1043,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.312Z\",\n            \"updated\": \"2019-07-04T11:48:40.313Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Bilawal, Maryam Aur Fazal ur Rehman) \\u2013 18th June 2019\",\n            \"slug\": \"bebaak-bilawal-maryam-aur-fazal-ur-rehman-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.313Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/2SegHeJAP0s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152464/bebaak-bilawal-maryam-aur-fazal-ur-rehman-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1044,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.340Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.340Z\",\n            \"updated\": \"2019-07-04T11:48:40.341Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Want to Topple Govt?) \\u2013 17th June 2019\",\n            \"slug\": \"bebaak-opposition-want-to-topple-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.341Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/ZE2NVdHSoqU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152405/bebaak-opposition-want-to-topple-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1045,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.371Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.370Z\",\n            \"updated\": \"2019-07-04T11:48:40.371Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Agli Giraftari Kis Ki Hogi?) - 13th June 2019\",\n            \"slug\": \"bebaak-agli-giraftari-kis-ki-hogi-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.371Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/4kwgTeqIZbU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152189/bebaak-agli-giraftari-kis-ki-hogi-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1046,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.428Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.428Z\",\n            \"updated\": \"2019-07-04T11:48:40.428Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Qarz Hukamran Kha Gaye, Ada Awam Kare Gi?) \\u2013 12th June 2019\",\n            \"slug\": \"bebaak-qarz-hukamran-kha-gaye-ada-awam-kare-gi-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.428Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/HNE9kT-eDpA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152133/bebaak-qarz-hukamran-kha-gaye-ada-awam-kare-gi-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1047,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.496Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.496Z\",\n            \"updated\": \"2019-07-04T11:48:40.496Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (High Profile Giraftariyon Mein Agla Number Kis Ka) - 11th June 2019\",\n            \"slug\": \"bebaak-high-profile-giraftariyon-mein-agla-number-kis-ka-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.496Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/EGI26I3bPdE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152088/bebaak-high-profile-giraftariyon-mein-agla-number-kis-ka-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1048,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.550Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.548Z\",\n            \"updated\": \"2019-07-04T11:48:40.550Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Budget Se Pehle Asif Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"bebaak-budget-se-pehle-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.550Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/vCDHDZio3DU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152013/bebaak-budget-se-pehle-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1049,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.610Z\",\n            \"updated\": \"2019-07-04T11:48:40.610Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Shahbaz Sharif Kab Wapis Ayein Ge) \\u2013 4th June 2019\",\n            \"slug\": \"bebaak-shahbaz-sharif-kab-wapis-ayein-ge-4th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.610Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/RA6u1V8JH14\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151727/bebaak-shahbaz-sharif-kab-wapis-ayein-ge-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1050,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.672Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.671Z\",\n            \"updated\": \"2019-07-04T11:48:40.672Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Zartaj Gul's Ministry in Danger) \\u2013 3rd June 2019\",\n            \"slug\": \"bebaak-zartaj-guls-ministry-in-danger-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.672Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/wkP3wHO8Jw4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151701/bebaak-zartaj-gul-s-ministry-in-danger-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1051,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.723Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.723Z\",\n            \"updated\": \"2019-07-04T11:48:40.723Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Ka Eid Ke Baad Tehreek Ka Elan) \\u2013 30th May 2019\",\n            \"slug\": \"bebaak-opposition-ka-eid-ke-baad-tehreek-ka-elan-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.723Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/Vv3aXq0qTlU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151516/bebaak-opposition-ka-eid-ke-baad-tehreek-ka-elan-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1052,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.776Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.775Z\",\n            \"updated\": \"2019-07-04T11:48:40.776Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Zardari Ki Giraftari Pakki?) \\u2013 29th May 2019\",\n            \"slug\": \"bebaak-zardari-ki-giraftari-pakki-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.776Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/65_HLxYBW-8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151438/bebaak-zardari-ki-giraftari-pakki-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1053,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.805Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.805Z\",\n            \"updated\": \"2019-07-04T11:48:40.805Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Pressure on Chairman NAB) \\u2013 27th May 2019\",\n            \"slug\": \"bebaak-opposition-pressure-on-chairman-nab-27th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.805Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/Qbdt4uxze7s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151365/bebaak-opposition-pressure-on-chairman-nab-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1054,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.856Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.855Z\",\n            \"updated\": \"2019-07-04T11:48:40.856Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Modi Sarkar, Phir Kamyab, Pakistani Politics) - 23rd May 2019\",\n            \"slug\": \"bebaak-modi-sarkar-phir-kamyab-pakistani-politics-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.856Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/5jk4EiIyGDk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151130/bebaak-modi-sarkar-phir-kamyab-pakistani-politics-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1055,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:40.954Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:40.954Z\",\n            \"updated\": \"2019-07-04T11:48:40.954Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Siasi Tehreek Ya Abbu Bachao Muhim) \\u2013 22nd May 2019\",\n            \"slug\": \"bebaak-siasi-tehreek-ya-abbu-bachao-muhim-22nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:40.954Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/Oux-hGzqGJs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151065/bebaak-siasi-tehreek-ya-abbu-bachao-muhim-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1056,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.034Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.034Z\",\n            \"updated\": \"2019-07-04T11:48:41.034Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Pakistan's Economic Condition) \\u2013 21st May 2019\",\n            \"slug\": \"bebaak-pakistans-economic-condition-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.034Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/TE9fc_Pq7oA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151015/bebaak-pakistan-s-economic-condition-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1057,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.113Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.113Z\",\n            \"updated\": \"2019-07-04T11:48:41.113Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Ahtajaj Ke Liye Tayyar) \\u2013 20th May 2019\",\n            \"slug\": \"bebaak-opposition-ahtajaj-ke-liye-tayyar-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.113Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/oNMC0cS3Y-M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150950/bebaak-opposition-ahtajaj-ke-liye-tayyar-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1058,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.197Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.197Z\",\n            \"updated\": \"2019-07-04T11:48:41.197Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Hakumat Ko Darpaish Challenges) \\u2013 16th May 2019\",\n            \"slug\": \"bebaak-hakumat-ko-darpaish-challenges-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.197Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/Lggi3JZ4iXk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150758/bebaak-hakumat-ko-darpaish-challenges-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1059,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.265Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.249Z\",\n            \"updated\": \"2019-07-04T11:48:41.265Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Amnesty, Economy, Punjab Govt Land Grabbing) \\u2013 15th May 2019\",\n            \"slug\": \"bebaak-amnesty-economy-punjab-govt-land-grabbing-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.265Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/y4L5iLKASfI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150697/bebaak-amnesty-economy-punjab-govt-land-grabbing-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1060,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.345Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.345Z\",\n            \"updated\": \"2019-07-04T11:48:41.345Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Tax Amnesty, IMF, Accountability) \\u2013 14th May 2019\",\n            \"slug\": \"bebaak-tax-amnesty-imf-accountability-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.345Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/KjDhfNaQm9I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150614/bebaak-tax-amnesty-imf-accountability-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1061,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.475Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.474Z\",\n            \"updated\": \"2019-07-04T11:48:41.475Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Shahbaz Sharif Still in London) \\u2013 13th May 2019\",\n            \"slug\": \"bebaak-shahbaz-sharif-still-in-london-13th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.475Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/ooYwWJa4p-A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150564/bebaak-shahbaz-sharif-still-in-london-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1062,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.583Z\",\n            \"updated\": \"2019-07-04T11:48:41.584Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Mehngai Mein Izafa, IMF, Siasi Hulchul) \\u2013 8th May 2019\",\n            \"slug\": \"bebaak-mehngai-mein-izafa-imf-siasi-hulchul-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.584Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/dtvmQ6yhaSA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150257/bebaak-mehngai-mein-izafa-imf-siasi-hulchul-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1063,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.688Z\",\n            \"updated\": \"2019-07-04T11:48:41.689Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Nawaz Sharif Ki Jail Wapsi) \\u2013 6th May 2019\",\n            \"slug\": \"bebaak-nawaz-sharif-ki-jail-wapsi-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.689Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/sxHn56xP0L8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150127/bebaak-nawaz-sharif-ki-jail-wapsi-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1064,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.820Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.819Z\",\n            \"updated\": \"2019-07-04T11:48:41.820Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Deal Ho Nahi Rahi, Deal Ho Chuki Hai) - 2nd May 2019\",\n            \"slug\": \"bebaak-deal-ho-nahi-rahi-deal-ho-chuki-hai-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.820Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7789br\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149866/bebaak-deal-ho-nahi-rahi-deal-ho-chuki-hai-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1065,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.906Z\",\n            \"updated\": \"2019-07-04T11:48:41.906Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Discussion on Multiple Issues) \\u2013 1st May 2019\",\n            \"slug\": \"bebaak-discussion-on-multiple-issues-1st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.906Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7750wf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149795/bebaak-discussion-on-multiple-issues-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1066,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:41.959Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:41.959Z\",\n            \"updated\": \"2019-07-04T11:48:41.959Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (PTI Govt, IMF Deal, Other Issues) \\u2013 30th April 2019\",\n            \"slug\": \"bebaak-pti-govt-imf-deal-other-issues-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:41.959Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7720e5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149714/bebaak-pti-govt-imf-deal-other-issues-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1067,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.001Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.001Z\",\n            \"updated\": \"2019-07-04T11:48:42.001Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Anti NAB Movement of Opposition) \\u2013 29th April 2019\",\n            \"slug\": \"bebaak-anti-nab-movement-of-opposition-29th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.001Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ybwj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149648/bebaak-anti-nab-movement-of-opposition-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1068,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.028Z\",\n            \"updated\": \"2019-07-04T11:48:42.028Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Nawaz Sharif Trying To Go Abroad) \\u2013 25th April 2019\",\n            \"slug\": \"bebaak-nawaz-sharif-trying-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.028Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76lnmx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149415/bebaak-nawaz-sharif-trying-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1069,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.080Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.080Z\",\n            \"updated\": \"2019-07-04T11:48:42.080Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Ch. Sarwar Ka Resign Na Karne Ka Paigham) \\u2013 24th April 2019\",\n            \"slug\": \"bebaak-ch-sarwar-ka-resign-na-karne-ka-paigham-24th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.080Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76idcb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149348/bebaak-ch-sarwar-ka-resign-na-karne-ka-paigham-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1070,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.112Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.111Z\",\n            \"updated\": \"2019-07-04T11:48:42.112Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Imran Khan Ka Iran Mein Bayan) \\u2013 23rd April 2019\",\n            \"slug\": \"bebaak-imran-khan-ka-iran-mein-bayan-23rd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.112Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fmf6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149296/bebaak-imran-khan-ka-iran-mein-bayan-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1071,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.157Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.156Z\",\n            \"updated\": \"2019-07-04T11:48:42.157Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (What Is The Agenda of Ch. Nisar) \\u2013 22nd April 2019\",\n            \"slug\": \"bebaak-what-is-the-agenda-of-ch-nisar-22nd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.157Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76c8nl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149239/bebaak-what-is-the-agenda-of-ch-nisar-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1072,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.208Z\",\n            \"updated\": \"2019-07-04T11:48:42.208Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Asad Umar Ke Elawa Aur Kaun Kaun Tabdeel Hoga) \\u2013 18th April 2019\",\n            \"slug\": \"bebaak-asad-umar-ke-elawa-aur-kaun-kaun-tabdeel-hoga-18th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.208Z\",\n            \"target_date\": \"2019-04-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x762llt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149019/bebaak-asad-umar-ke-elawa-aur-kaun-kaun-tabdeel-hoga-18th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1073,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.257Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.257Z\",\n            \"updated\": \"2019-07-04T11:48:42.257Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 12,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Mulk Mein Barhati Hui Police Gardi) \\u2013 17th April 2019\",\n            \"slug\": \"bebaak-mulk-mein-barhati-hui-police-gardi-17th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.257Z\",\n            \"target_date\": \"2019-04-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75zzwo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/148950/bebaak-mulk-mein-barhati-hui-police-gardi-17th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1074,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.512Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.511Z\",\n            \"updated\": \"2019-07-04T11:48:42.512Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Accountability Process) \\u2013 3rd July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-accountability-process-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.512Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/5-6oVAc9TpA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153477/kal-tak-with-javed-chaudhry-accountability-process-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1075,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.600Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.599Z\",\n            \"updated\": \"2019-07-04T11:48:42.600Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Imran Khan's Big Announcement) \\u2013 2nd July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-imran-khans-big-announcement-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.600Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/bixypPknVec\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153391/kal-tak-with-javed-chaudhry-imran-khan-s-big-announcement-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1076,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.660Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.659Z\",\n            \"updated\": \"2019-07-04T11:48:42.660Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (PMLN Mein Cracks) \\u2013 1st July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-pmln-mein-cracks-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.660Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/Kl1433b1K9M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153321/kal-tak-with-javed-chaudhry-pmln-mein-cracks-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1077,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.712Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.712Z\",\n            \"updated\": \"2019-07-04T11:48:42.712Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Qaumi Assembly Ka Ijlas) \\u2013 27th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-qaumi-assembly-ka-ijlas-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.712Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/1at-IJfMldU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153059/kal-tak-with-javed-chaudhry-qaumi-assembly-ka-ijlas-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1078,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.771Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.770Z\",\n            \"updated\": \"2019-07-04T11:48:42.771Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (All Parties Conference) \\u2013 26th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.771Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/HJn5L05nJVU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152992/kal-tak-with-javed-chaudhry-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1079,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.806Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.806Z\",\n            \"updated\": \"2019-07-04T11:48:42.806Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Tax Amnesty Scheme) \\u2013 25th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-tax-amnesty-scheme-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.806Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/Re2Ap3F9T-k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152912/kal-tak-with-javed-chaudhry-tax-amnesty-scheme-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1080,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.845Z\",\n            \"updated\": \"2019-07-04T11:48:42.845Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Kia Deal Ho Gai?) \\u2013 24th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-kia-deal-ho-gai-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.845Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/WkLoXQ4Fj40\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152845/kal-tak-with-javed-chaudhry-kia-deal-ho-gai-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1081,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.896Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.895Z\",\n            \"updated\": \"2019-07-04T11:48:42.896Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Asad Umar's Criticism on His Govt) \\u2013 20th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-asad-umars-criticism-on-his-govt-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.896Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/UIcWRz-IFG0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152595/kal-tak-with-javed-chaudhry-asad-umar-s-criticism-on-his-govt-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1082,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:42.965Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:42.965Z\",\n            \"updated\": \"2019-07-04T11:48:42.965Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Fazal ur Rehman Kia Chahte Hain) \\u2013 19th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-fazal-ur-rehman-kia-chahte-hain-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:42.965Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/beuuXHWuM24\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152525/kal-tak-with-javed-chaudhry-fazal-ur-rehman-kia-chahte-hain-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1083,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.072Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.072Z\",\n            \"updated\": \"2019-07-04T11:48:43.072Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Govt Vs Opposition) \\u2013 18th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-govt-vs-opposition-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.072Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/zMh70sOmDc4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152459/kal-tak-with-javed-chaudhry-govt-vs-opposition-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1084,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.230Z\",\n            \"updated\": \"2019-07-04T11:48:43.231Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Reference Against Judges) \\u2013 13th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-reference-against-judges-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.231Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/uJyH0YR24DE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152194/kal-tak-with-javed-chaudhry-reference-against-judges-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1085,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.289Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.289Z\",\n            \"updated\": \"2019-07-04T11:48:43.289Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (PM Khan's Aggressive Speech) \\u2013 12th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-pm-khans-aggressive-speech-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.289Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/YisqAkglsqg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152137/kal-tak-with-javed-chaudhry-pm-khan-s-aggressive-speech-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1086,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.409Z\",\n            \"updated\": \"2019-07-04T11:48:43.410Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Asif Zardari Ki Giraftari) \\u201310th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.410Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/QXI2yJCwpZs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152016/kal-tak-with-javed-chaudhry-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1087,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.544Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.544Z\",\n            \"updated\": \"2019-07-04T11:48:43.544Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Al-Khidmat Foundation) \\u2013 6th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-al-khidmat-foundation-6th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.544Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/tO2qTjk5SPk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151806/kal-tak-with-javed-chaudhry-al-khidmat-foundation-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1088,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.654Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.654Z\",\n            \"updated\": \"2019-07-04T11:48:43.654Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Eid Special) \\u20135th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.669Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/OzY3ipSe57c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151779/kal-tak-with-javed-chaudhry-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1089,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.769Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.769Z\",\n            \"updated\": \"2019-07-04T11:48:43.769Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Mulk Mein Aik Eid Na Ho Saki) \\u2013 4th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-mulk-mein-aik-eid-na-ho-saki-4th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.769Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/zi-cYK6kSO4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151733/kal-tak-with-javed-chaudhry-mulk-mein-aik-eid-na-ho-saki-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1090,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.868Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.867Z\",\n            \"updated\": \"2019-07-04T11:48:43.868Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Reference Against Judges) \\u2013 30th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-reference-against-judges-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.868Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/4GlvVdT01gQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151509/kal-tak-with-javed-chaudhry-reference-against-judges-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1091,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.952Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.952Z\",\n            \"updated\": \"2019-07-04T11:48:43.952Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Zardari Aur Bilawal Ki NAB Mein Paishi) \\u2013 29th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-zardari-aur-bilawal-ki-nab-mein-paishi-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.952Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/X6pYB-Ofw8I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151442/kal-tak-with-javed-chaudhry-zardari-aur-bilawal-ki-nab-mein-paishi-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1092,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:43.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:43.986Z\",\n            \"updated\": \"2019-07-04T11:48:43.986Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Politics on Yaum e Takbeer) \\u2013 28th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-politics-on-yaum-e-takbeer-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:43.986Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/mFB7Q3fVyD0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151393/kal-tak-with-javed-chaudhry-politics-on-yaum-e-takbeer-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1093,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.051Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.044Z\",\n            \"updated\": \"2019-07-04T11:48:44.052Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Chairman NAB Issue) \\u2013 27th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-chairman-nab-issue-27th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.052Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/l8FMvuGb5yM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151356/kal-tak-with-javed-chaudhry-chairman-nab-issue-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1094,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.097Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.096Z\",\n            \"updated\": \"2019-07-04T11:48:44.097Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Indian Election) \\u2013 23rd May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-indian-election-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.097Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/9ShyCJ1XtNU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151128/kal-tak-with-javed-chaudhry-indian-election-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1095,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.151Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.151Z\",\n            \"updated\": \"2019-07-04T11:48:44.151Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Dollar Ki Buland Parwaz) \\u2013 21st May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-dollar-ki-buland-parwaz-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.151Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/b172hkzwNDU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151024/kal-tak-with-javed-chaudhry-dollar-ki-buland-parwaz-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1096,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.200Z\",\n            \"updated\": \"2019-07-04T11:48:44.200Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Opposition's Real Target?) \\u2013 20th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-oppositions-real-target-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.200Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/K12UaS2Ot9A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150956/kal-tak-with-javed-chaudhry-opposition-s-real-target-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1097,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.267Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.267Z\",\n            \"updated\": \"2019-07-04T11:48:44.267Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Opposition Ka Plan) \\u2013 16th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-opposition-ka-plan-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.267Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/glB1VvCWCgY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150753/kal-tak-with-javed-chaudhry-opposition-ka-plan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1098,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.318Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.318Z\",\n            \"updated\": \"2019-07-04T11:48:44.318Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Anti Govt Movement) \\u2013 15th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-anti-govt-movement-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.318Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/_zbkUPpxMEQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150681/kal-tak-with-javed-chaudhry-anti-govt-movement-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1099,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.374Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.373Z\",\n            \"updated\": \"2019-07-04T11:48:44.374Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Tax Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.374Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/CuVxiPlVhpY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150610/kal-tak-with-javed-chaudhry-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1100,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.422Z\",\n            \"updated\": \"2019-07-04T11:48:44.438Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak With Javed Chaudhry (Mehngai Mein Izafa) \\u2013 13th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-mehngai-mein-izafa-13th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.438Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/GEElxltS2WY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150562/kal-tak-with-javed-chaudhry-mehngai-mein-izafa-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1101,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.484Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.484Z\",\n            \"updated\": \"2019-07-04T11:48:44.484Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Maryam Nawaz Party Position) \\u2013 9th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-maryam-nawaz-party-position-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.484Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/3Gl1BnlB8ig\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150315/kal-tak-with-javed-chaudhry-maryam-nawaz-party-position-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1102,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.522Z\",\n            \"updated\": \"2019-07-04T11:48:44.522Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Asad Umar Back in Cabinet) \\u2013 8th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-asad-umar-back-in-cabinet-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.522Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/aTsUGICXe38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150244/kal-tak-with-javed-chaudhry-asad-umar-back-in-cabinet-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1103,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.577Z\",\n            \"updated\": \"2019-07-04T11:48:44.578Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Mehngai Mein Izafa) \\u2013 7th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-mehngai-mein-izafa-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.578Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/QEV9geRpydY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150183/kal-tak-with-javed-chaudhry-mehngai-mein-izafa-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1104,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.610Z\",\n            \"updated\": \"2019-07-04T11:48:44.610Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (IMF Deal) \\u2013 6th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-imf-deal-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.610Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/rIxVf7_Wdro\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150111/kal-tak-with-javed-chaudhry-imf-deal-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1105,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.650Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.650Z\",\n            \"updated\": \"2019-07-04T11:48:44.650Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Special Talk With Shahid Khaqan Abbasi) \\u2013 2nd May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-special-talk-with-shahid-khaqan-abbasi-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.650Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/cGUWErI5wO0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149861/kal-tak-with-javed-chaudhry-special-talk-with-shahid-khaqan-abbasi-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1106,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.701Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.701Z\",\n            \"updated\": \"2019-07-04T11:48:44.701Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Qarze Per Qarza) \\u2013 1st May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-qarze-per-qarza-1st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.701Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/UPf-68hokYM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149800/kal-tak-with-javed-chaudhry-qarze-per-qarza-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1107,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.731Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.731Z\",\n            \"updated\": \"2019-07-04T11:48:44.731Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Marriage Bill) \\u2013 30th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-marriage-bill-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.731Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/hzJV0-0qcmE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149725/kal-tak-with-javed-chaudhry-marriage-bill-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1108,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.780Z\",\n            \"updated\": \"2019-07-04T11:48:44.780Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (DG ISPR on PTM) \\u2013 28th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-dg-ispr-on-ptm-28th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.780Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/O6bsXprrYu8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149654/kal-tak-with-javed-chaudhry-dg-ispr-on-ptm-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1109,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.823Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.822Z\",\n            \"updated\": \"2019-07-04T11:48:44.823Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Sahib Vs Sahiba) \\u2013 24th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-sahib-vs-sahiba-24th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.823Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/TSUKAgJJgqY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149423/kal-tak-with-javed-chaudhry-sahib-vs-sahiba-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1110,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:44.937Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:44.928Z\",\n            \"updated\": \"2019-07-04T11:48:44.937Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Tabdeeli Kab Aye Gi) \\u2013 24th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-tabdeeli-kab-aye-gi-24th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:44.937Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/V7ndb73JPYs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149360/kal-tak-with-javed-chaudhry-tabdeeli-kab-aye-gi-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1111,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.013Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.013Z\",\n            \"updated\": \"2019-07-04T11:48:45.013Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Opposition Active Against Govt) \\u2013 23rd April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-opposition-active-against-govt-23rd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.013Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"https://www.youtube.com/watch/7QMZemIY6E0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149305/kal-tak-with-javed-chaudhry-opposition-active-against-govt-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1112,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.101Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.085Z\",\n            \"updated\": \"2019-07-04T11:48:45.102Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (PTI New Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-pti-new-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.102Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"https://www.youtube.com/watch/O_gTehXNjPI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149246/kal-tak-with-javed-chaudhry-pti-new-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1113,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.164Z\",\n            \"updated\": \"2019-07-04T11:48:45.164Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 20,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Asad Umar Resigned) \\u2013 18th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-asad-umar-resigned-18th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.164Z\",\n            \"target_date\": \"2019-04-18\",\n            \"text\": \"https://www.youtube.com/watch/LBr1_iVw5W0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149033/kal-tak-with-javed-chaudhry-asad-umar-resigned-18th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1114,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.457Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.431Z\",\n            \"updated\": \"2019-07-04T11:48:45.457Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Production Orders Issue, Accountability) \\u2013 3rd July 2019\",\n            \"slug\": \"capital-talk-production-orders-issue-accountability-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.457Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/yprYGxoFQ3w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153449/capital-talk-production-orders-issue-accountability-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1115,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.546Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.546Z\",\n            \"updated\": \"2019-07-04T11:48:45.546Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Fazal ur Rehman Exclusive Interview) - 2nd July 2019\",\n            \"slug\": \"capital-talk-fazal-ur-rehman-exclusive-interview-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.546Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/aZHg1-NvQMA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153400/capital-talk-fazal-ur-rehman-exclusive-interview-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1116,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.675Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.657Z\",\n            \"updated\": \"2019-07-04T11:48:45.675Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Cricket Se Siasat Tak) \\u2013 27th June 2019\",\n            \"slug\": \"capital-talk-cricket-se-siasat-tak-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.675Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/VX7gA2ERevI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153053/capital-talk-cricket-se-siasat-tak-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1117,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.815Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.814Z\",\n            \"updated\": \"2019-07-04T11:48:45.815Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (APC Hakumat Ke Liye Kitni Khatarnaak) \\u2013 26th June 2019\",\n            \"slug\": \"capital-talk-apc-hakumat-ke-liye-kitni-khatarnaak-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.815Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/1sEajTPbtlA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152970/capital-talk-apc-hakumat-ke-liye-kitni-khatarnaak-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1118,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.890Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.890Z\",\n            \"updated\": \"2019-07-04T11:48:45.890Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Karachi Ka Masla Pani) \\u2013 25th June 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-karachi-ka-masla-pani-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.890Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/89-R2xzZo50\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152916/capital-talk-with-hamid-mir-karachi-ka-masla-pani-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1119,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.924Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.923Z\",\n            \"updated\": \"2019-07-04T11:48:45.924Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Prime Minister Imran Khan Exclusive) \\u2013 24th June 2019\",\n            \"slug\": \"capital-talk-prime-minister-imran-khan-exclusive-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.924Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/59uW3fkCqJo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152842/capital-talk-prime-minister-imran-khan-exclusive-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1120,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:45.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:45.966Z\",\n            \"updated\": \"2019-07-04T11:48:45.967Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Speaker NA Asad Qaiser Exclusive Interview) \\u2013 20th June 2019\",\n            \"slug\": \"capital-talk-speaker-na-asad-qaiser-exclusive-interview-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:45.967Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/UF69Is7D3m0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152587/capital-talk-speaker-na-asad-qaiser-exclusive-interview-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1121,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.023Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.022Z\",\n            \"updated\": \"2019-07-04T11:48:46.023Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Qaumi Assembly Ka Ijlas) \\u2013 19th June 2019\",\n            \"slug\": \"capital-talk-qaumi-assembly-ka-ijlas-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.023Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/uTAM5xKAdZ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152526/capital-talk-qaumi-assembly-ka-ijlas-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1122,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.069Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.069Z\",\n            \"updated\": \"2019-07-04T11:48:46.070Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Budget Pass Na Huwa Tu?) \\u2013 18th June 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-budget-pass-na-huwa-tu-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.070Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/0VCTeozgJDY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152461/capital-talk-with-hamid-mir-budget-pass-na-huwa-tu-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1123,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.116Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.116Z\",\n            \"updated\": \"2019-07-04T11:48:46.116Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Opposition Parties United Against Govt) \\u2013 17th June 2019\",\n            \"slug\": \"capital-talk-opposition-parties-united-against-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.117Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/2_HLfxCH7iE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152403/capital-talk-opposition-parties-united-against-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1124,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.188Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.187Z\",\n            \"updated\": \"2019-07-04T11:48:46.188Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Kia Parliament Ka Ghairayo Hoga?) - 13th June 2019\",\n            \"slug\": \"capital-talk-kia-parliament-ka-ghairayo-hoga-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.188Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/9CQd1xsk9Xw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152190/capital-talk-kia-parliament-ka-ghairayo-hoga-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1125,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.226Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.225Z\",\n            \"updated\": \"2019-07-04T11:48:46.226Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk \\u2013 (Pakistan Ke Muashi Aur Siasi Halaat) - 12th June 2019\",\n            \"slug\": \"capital-talk-pakistan-ke-muashi-aur-siasi-halaat-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.226Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/5Sa09xxT75A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152140/capital-talk-pakistan-ke-muashi-aur-siasi-halaat-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1126,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.289Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.288Z\",\n            \"updated\": \"2019-07-04T11:48:46.289Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Will This Budget Strengthen Economy) - 11th June 2019\",\n            \"slug\": \"capital-talk-will-this-budget-strengthen-economy-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.289Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/FTU-6IZ20jo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152085/capital-talk-will-this-budget-strengthen-economy-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1127,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.351Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.350Z\",\n            \"updated\": \"2019-07-04T11:48:46.351Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Who Is Next After Asif Zardari) \\u2013 10th June 2019\",\n            \"slug\": \"capital-talk-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.351Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/QEHA2z2Hcl4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152009/capital-talk-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1128,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.410Z\",\n            \"updated\": \"2019-07-04T11:48:46.410Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"capital-talk-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.411Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/vNn2Via6Rb0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151770/capital-talk-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1129,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.476Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.475Z\",\n            \"updated\": \"2019-07-04T11:48:46.476Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Eid Moon Sighting Issue) \\u2013 4th June 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-eid-moon-sighting-issue-4th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.476Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/0sllBsa4KoY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151729/capital-talk-with-hamid-mir-eid-moon-sighting-issue-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1130,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.521Z\",\n            \"updated\": \"2019-07-04T11:48:46.522Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Reference Against Judges) - 3rd June 2019\",\n            \"slug\": \"capital-talk-reference-against-judges-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.522Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/XLdBM8t7abM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151704/capital-talk-reference-against-judges-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1131,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.582Z\",\n            \"updated\": \"2019-07-04T11:48:46.582Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Bill Against Interest in Senate) \\u2013 30th May 2019\",\n            \"slug\": \"capital-talk-bill-against-interest-in-senate-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.582Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/gddcP3nYPGA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151511/capital-talk-bill-against-interest-in-senate-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1132,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.645Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.644Z\",\n            \"updated\": \"2019-07-04T11:48:46.645Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Pakistan Under Pressure) \\u2013 29th May 2019\",\n            \"slug\": \"capital-talk-pakistan-under-pressure-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.645Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/KrQmZfcMJKY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151451/capital-talk-pakistan-under-pressure-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1133,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.694Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.693Z\",\n            \"updated\": \"2019-07-04T11:48:46.694Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Kia Hakumat Aur Opposition Aik Ho Sakti Hai) - 28th May 2019\",\n            \"slug\": \"capital-talk-kia-hakumat-aur-opposition-aik-ho-sakti-hai-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.694Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/5sFi6Qr4jOw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151403/capital-talk-kia-hakumat-aur-opposition-aik-ho-sakti-hai-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1134,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.763Z\",\n            \"updated\": \"2019-07-04T11:48:46.763Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Is Pakistani Nation Morally Corrupt?) \\u2013 27th May 2019\",\n            \"slug\": \"capital-talk-is-pakistani-nation-morally-corrupt-27th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.763Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/WPMFa05XT0U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151358/capital-talk-is-pakistani-nation-morally-corrupt-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1135,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.828Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.827Z\",\n            \"updated\": \"2019-07-04T11:48:46.828Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Pak India Relations After Modi's Victory) \\u2013 23rd May 2019\",\n            \"slug\": \"capital-talk-pak-india-relations-after-modis-victory-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.828Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/-ZjNEJls6Ro\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151140/capital-talk-pak-india-relations-after-modi-s-victory-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1136,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.878Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.878Z\",\n            \"updated\": \"2019-07-04T11:48:46.878Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Kia Chairman NAB Ne Javed Chaudhry Ko Interview Dia?) \\u2013 22nd May 2019\",\n            \"slug\": \"capital-talk-kia-chairman-nab-ne-javed-chaudhry-ko-interview-dia-22nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.878Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/ptBJ8phrPwc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151067/capital-talk-kia-chairman-nab-ne-javed-chaudhry-ko-interview-dia-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1137,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:46.975Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:46.974Z\",\n            \"updated\": \"2019-07-04T11:48:46.975Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Dollar Going Out of Control) \\u2013 21st May 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-dollar-going-out-of-control-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:46.975Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/UvO8quCpSig\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151012/capital-talk-with-hamid-mir-dollar-going-out-of-control-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1138,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:47.134Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:47.134Z\",\n            \"updated\": \"2019-07-04T11:48:47.134Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (What Is Opposition's Real Agenda?) \\u2013 20th May 2019\",\n            \"slug\": \"capital-talk-what-is-oppositions-real-agenda-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:47.134Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/9tjQ9TJPSG0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150954/capital-talk-what-is-opposition-s-real-agenda-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1139,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:47.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:47.214Z\",\n            \"updated\": \"2019-07-04T11:48:47.214Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Is Interest Compulsory in Pakistan) \\u2013 16th May 2019\",\n            \"slug\": \"capital-talk-is-interest-compulsory-in-pakistan-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:47.214Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/nF99bz7tRKQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150755/capital-talk-is-interest-compulsory-in-pakistan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1140,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:47.281Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:47.280Z\",\n            \"updated\": \"2019-07-04T11:48:47.281Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (FBR Reforms Possible? How?) \\u2013 15th May 2019\",\n            \"slug\": \"capital-talk-fbr-reforms-possible-how-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:47.281Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/AuhrRZEKa-g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150694/capital-talk-fbr-reforms-possible-how-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1141,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:47.342Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:47.341Z\",\n            \"updated\": \"2019-07-04T11:48:47.342Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Tax Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:47.342Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/aLjKtwVXo6M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150623/capital-talk-with-hamid-mir-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1142,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:47.660Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:47.660Z\",\n            \"updated\": \"2019-07-04T11:48:47.660Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (What Opposition Is Planning Against Govt) - 9th May 2019\",\n            \"slug\": \"capital-talk-what-opposition-is-planning-against-govt-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:47.660Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/oSpEV9uOOag\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150324/capital-talk-what-opposition-is-planning-against-govt-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1143,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:47.808Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:47.789Z\",\n            \"updated\": \"2019-07-04T11:48:47.808Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Was PMLN's Rally Contempt of Court?) \\u2013 8th May 2019\",\n            \"slug\": \"capital-talk-was-pmlns-rally-contempt-of-court-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:47.808Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/cHdI36W0bTw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150250/capital-talk-was-pmln-s-rally-contempt-of-court-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1144,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:47.905Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:47.905Z\",\n            \"updated\": \"2019-07-04T11:48:47.905Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Movement After Eid, Load Shedding) - 7th May 2019\",\n            \"slug\": \"capital-talk-movement-after-eid-load-shedding-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:47.905Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/FpbXpb3fHzc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150187/capital-talk-movement-after-eid-load-shedding-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1145,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.099Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.098Z\",\n            \"updated\": \"2019-07-04T11:48:48.099Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Ramzan Mein Mehngai Kyun?) \\u2013 6th May 2019\",\n            \"slug\": \"capital-talk-ramzan-mein-mehngai-kyun-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.099Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/Qqq30d_e3-s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150123/capital-talk-ramzan-mein-mehngai-kyun-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1146,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.199Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.199Z\",\n            \"updated\": \"2019-07-04T11:48:48.199Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (PTI Jeet Gai, Opposition Haar Gai) - 4th September 2018\",\n            \"slug\": \"capital-talk-pti-jeet-gai-opposition-haar-gai-4th-september-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.199Z\",\n            \"target_date\": \"2018-09-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t3h6u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135622/capital-talk-pti-jeet-gai-opposition-haar-gai-4th-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1147,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.267Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.266Z\",\n            \"updated\": \"2019-07-04T11:48:48.267Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Few Hours Left in Presidential Election) - 3rd September 2018\",\n            \"slug\": \"capital-talk-few-hours-left-in-presidential-election-3rd-september-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.267Z\",\n            \"target_date\": \"2018-09-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t1t6j\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135547/capital-talk-few-hours-left-in-presidential-election-3rd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1148,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.307Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.306Z\",\n            \"updated\": \"2019-07-04T11:48:48.307Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Fayaz ul Hassan Chohan's Attitude) - 30th August 2018\",\n            \"slug\": \"capital-talk-fayaz-ul-hassan-chohans-attitude-30th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.307Z\",\n            \"target_date\": \"2018-08-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6svn28\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135269/capital-talk-fayaz-ul-hassan-chohan-s-attitude-30th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1149,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.361Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.357Z\",\n            \"updated\": \"2019-07-04T11:48:48.361Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Tehreek e Insaf Ke Iqdamat) - 29th August 2018\",\n            \"slug\": \"capital-talk-tehreek-e-insaf-ke-iqdamat-29th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.361Z\",\n            \"target_date\": \"2018-08-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6stn92\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135198/capital-talk-tehreek-e-insaf-ke-iqdamat-29th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1150,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.441Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.441Z\",\n            \"updated\": \"2019-07-04T11:48:48.442Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Opposition Ka Sadarti Umeedwar?) - 28th August 2018\",\n            \"slug\": \"capital-talk-opposition-ka-sadarti-umeedwar-28th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.442Z\",\n            \"target_date\": \"2018-08-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6srino\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135126/capital-talk-opposition-ka-sadarti-umeedwar-28th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1151,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.503Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.502Z\",\n            \"updated\": \"2019-07-04T11:48:48.503Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Presidential Election, Differences in PPP & PMLN) - 27th August 2018\",\n            \"slug\": \"capital-talk-presidential-election-differences-in-ppp-pmln-27th-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.503Z\",\n            \"target_date\": \"2018-08-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sp0a3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135045/capital-talk-presidential-election-differences-in-ppp-pmln-27th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1152,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.554Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.554Z\",\n            \"updated\": \"2019-07-04T11:48:48.554Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Cricketers Views About Imran Khan) - 22nd August 2018\",\n            \"slug\": \"capital-talk-cricketers-views-about-imran-khan-22nd-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.555Z\",\n            \"target_date\": \"2018-08-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sfhzh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/134783/capital-talk-cricketers-views-about-imran-khan-22nd-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1153,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.597Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.597Z\",\n            \"updated\": \"2019-07-04T11:48:48.597Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 13,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Imran Khan Ka Agenda) - 21st August 2018\",\n            \"slug\": \"capital-talk-imran-khan-ka-agenda-21st-august-2018\",\n            \"publish_date\": \"2019-07-04T11:48:48.597Z\",\n            \"target_date\": \"2018-08-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sdfhd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/134739/capital-talk-imran-khan-ka-agenda-21st-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1154,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.744Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.744Z\",\n            \"updated\": \"2019-07-04T11:48:48.744Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Cracks in PMLN) - 30th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-cracks-in-pmln-30th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.744Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c7rxk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153236/hard-talk-pakistan-with-moeed-pirzada-cracks-in-pmln-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1155,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.776Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.776Z\",\n            \"updated\": \"2019-07-04T11:48:48.776Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Mid Term Elections Ka Mutalba) - 29th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-mid-term-elections-ka-mutalba-29th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.776Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5m24\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153176/hard-talk-pakistan-with-moeed-pirzada-mid-term-elections-ka-mutalba-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1156,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.811Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.810Z\",\n            \"updated\": \"2019-07-04T11:48:48.811Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Opposition's Plan of Action) - 28th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-oppositions-plan-of-action-28th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.811Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c32vn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153109/hard-talk-pakistan-with-moeed-pirzada-opposition-s-plan-of-action-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1157,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.851Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.850Z\",\n            \"updated\": \"2019-07-04T11:48:48.851Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Differences in Sharif Family) - 23rd June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-differences-in-sharif-family-23rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.851Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bqngk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152765/hard-talk-pakistan-with-moeed-pirzada-differences-in-sharif-family-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1158,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.899Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.898Z\",\n            \"updated\": \"2019-07-04T11:48:48.899Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Sheikh Rasheed Exclusive Talk) - 22nd June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-sheikh-rasheed-exclusive-talk-22nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.899Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7boxza\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152701/hard-talk-pakistan-with-moeed-pirzada-sheikh-rasheed-exclusive-talk-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1159,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.929Z\",\n            \"updated\": \"2019-07-04T11:48:48.930Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Govt Vs Opposition) - 21st June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-21st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.930Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn849\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152648/hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1160,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:48.982Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:48.982Z\",\n            \"updated\": \"2019-07-04T11:48:48.982Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Maryam Bilawal Mulaqat) - 16th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-maryam-bilawal-mulaqat-16th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:48.982Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bd5ez\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152335/hard-talk-pakistan-with-moeed-pirzada-maryam-bilawal-mulaqat-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1161,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.042Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.041Z\",\n            \"updated\": \"2019-07-04T11:48:49.042Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan (Budget, Accountability, Arrests, Economy) - 15th June 2019\",\n            \"slug\": \"hard-talk-pakistan-budget-accountability-arrests-economy-15th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.042Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ba52c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152283/hard-talk-pakistan-budget-accountability-arrests-economy-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1162,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.079Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.079Z\",\n            \"updated\": \"2019-07-04T11:48:49.079Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Commission To Probe Debt) - 14th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-commission-to-probe-debt-14th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.079Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/cd-wTNsC4uI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152236/hard-talk-pakistan-with-moeed-pirzada-commission-to-probe-debt-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.107Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.107Z\",\n            \"updated\": \"2019-07-04T11:48:49.107Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Shahbaz Sharif Ki Wapsi) \\u2013 9th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-shahbaz-sharif-ki-wapsi-9th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.107Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anoab\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151920/hard-talk-pakistan-with-moeed-pirzada-shahbaz-sharif-ki-wapsi-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.175Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.175Z\",\n            \"updated\": \"2019-07-04T11:48:49.175Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (PTM, Conspiracy Against Pakistan) - 8th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-ptm-conspiracy-against-pakistan-8th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.175Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7al8ab\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151881/hard-talk-pakistan-with-moeed-pirzada-ptm-conspiracy-against-pakistan-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.264Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.264Z\",\n            \"updated\": \"2019-07-04T11:48:49.264Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Modi's Policy) - 7th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-modis-policy-7th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.264Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ai8y8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151834/hard-talk-pakistan-with-moeed-pirzada-modi-s-policy-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.361Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.360Z\",\n            \"updated\": \"2019-07-04T11:48:49.361Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Shahid Khaqan Abbasi Exclusive) - 2nd June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-shahid-khaqan-abbasi-exclusive-2nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.361Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3db2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151644/hard-talk-pakistan-with-moeed-pirzada-shahid-khaqan-abbasi-exclusive-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.508Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.508Z\",\n            \"updated\": \"2019-07-04T11:48:49.508Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Opposition's Intentions) - 1st June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-oppositions-intentions-1st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.508Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a0qfs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151597/hard-talk-pakistan-with-moeed-pirzada-opposition-s-intentions-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.618Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.618Z\",\n            \"updated\": \"2019-07-04T11:48:49.618Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Anti Govt Movement) - 31st May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-anti-govt-movement-31st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.618Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xlc8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151554/hard-talk-pakistan-with-moeed-pirzada-anti-govt-movement-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.697Z\",\n            \"updated\": \"2019-07-04T11:48:49.697Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (PTI Ka Agenda Kia?) - 26th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-pti-ka-agenda-kia-26th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.697Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/TuPFgKP4Woc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151279/hard-talk-pakistan-with-moeed-pirzada-pti-ka-agenda-kia-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.815Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.815Z\",\n            \"updated\": \"2019-07-04T11:48:49.815Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Will Govt Improve Economy?) - 25th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-will-govt-improve-economy-25th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.816Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/rKTW4zSndkI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151229/hard-talk-pakistan-with-moeed-pirzada-will-govt-improve-economy-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:49.925Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:49.924Z\",\n            \"updated\": \"2019-07-04T11:48:49.925Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (NAB Under Pressure) - 24th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-nab-under-pressure-24th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:49.925Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x798vhb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151176/hard-talk-pakistan-with-moeed-pirzada-nab-under-pressure-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.008Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.008Z\",\n            \"updated\": \"2019-07-04T11:48:50.008Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Opposition Vs Govt) - 19th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-opposition-vs-govt-19th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.008Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78rdsu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150911/hard-talk-pakistan-with-moeed-pirzada-opposition-vs-govt-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.106Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.106Z\",\n            \"updated\": \"2019-07-04T11:48:50.106Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Economic Crisis) - 18th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-economic-crisis-18th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.106Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78og99\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150852/hard-talk-pakistan-with-moeed-pirzada-economic-crisis-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.174Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.174Z\",\n            \"updated\": \"2019-07-04T11:48:50.174Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Reason of Dollar Rise?) - 17th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-reason-of-dollar-rise-17th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.174Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78l6el\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150795/hard-talk-pakistan-with-moeed-pirzada-reason-of-dollar-rise-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.215Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.215Z\",\n            \"updated\": \"2019-07-04T11:48:50.215Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Who Is Behind Gwadar Attack?) - 12th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-who-is-behind-gwadar-attack-12th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.215Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x784oit\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150476/hard-talk-pakistan-with-moeed-pirzada-who-is-behind-gwadar-attack-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.266Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.265Z\",\n            \"updated\": \"2019-07-04T11:48:50.266Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (IMF Package) - 11th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-imf-package-11th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.266Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x781zz0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150424/hard-talk-pakistan-with-moeed-pirzada-imf-package-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1177,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.329Z\",\n            \"updated\": \"2019-07-04T11:48:50.329Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada  (Pak America Relations) - 10th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-pak-america-relations-10th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.329Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77yuo1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150362/hard-talk-pakistan-with-moeed-pirzada-pak-america-relations-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1178,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.394Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.394Z\",\n            \"updated\": \"2019-07-04T11:48:50.394Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Challenges For Govt) - 5th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-challenges-for-govt-5th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.394Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77hc74\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150028/hard-talk-pakistan-with-moeed-pirzada-challenges-for-govt-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1179,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.448Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.447Z\",\n            \"updated\": \"2019-07-04T11:48:50.448Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Siasat Mein Tabdeeliyan) - 4th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-siasat-mein-tabdeeliyan-4th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.448Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77egmz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149974/hard-talk-pakistan-with-moeed-pirzada-siasat-mein-tabdeeliyan-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1180,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.500Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.500Z\",\n            \"updated\": \"2019-07-04T11:48:50.500Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Shaikh Rasheed Exclusive Interview) - 3rd May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-shaikh-rasheed-exclusive-interview-3rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.500Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77b58n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149910/hard-talk-pakistan-with-moeed-pirzada-shaikh-rasheed-exclusive-interview-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1181,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.558Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.558Z\",\n            \"updated\": \"2019-07-04T11:48:50.558Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Changes in NAB Law) - 28th April 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-changes-in-nab-law-28th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.558Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76urnk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149573/hard-talk-pakistan-with-moeed-pirzada-changes-in-nab-law-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1182,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.602Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.602Z\",\n            \"updated\": \"2019-07-04T11:48:50.602Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Imran Khan's New Team) - 27th April 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-imran-khans-new-team-27th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.602Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76rz7u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149521/hard-talk-pakistan-with-moeed-pirzada-imran-khan-s-new-team-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1183,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.650Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.650Z\",\n            \"updated\": \"2019-07-04T11:48:50.651Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 14,\n                \"feed_id\": 19,\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Govt Vs Opposition) - 26th April 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-26th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.651Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76oxti\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149464/hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1184,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.774Z\",\n            \"updated\": \"2019-07-04T11:48:50.774Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (IMF Approved Pakistan's Loan) \\u2013 3rd July 2019\",\n            \"slug\": \"power-play-imf-approved-pakistans-loan-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.774Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cg1be\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153475/power-play-imf-approved-pakistan-s-loan-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1185,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.870Z\",\n            \"updated\": \"2019-07-04T11:48:50.870Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Chairman FBR Shabbar Zaidi Exclusive Interview) \\u2013 2nd July 2019\",\n            \"slug\": \"power-play-chairman-fbr-shabbar-zaidi-exclusive-interview-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.870Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdcut\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153405/power-play-chairman-fbr-shabbar-zaidi-exclusive-interview-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1186,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.918Z\",\n            \"updated\": \"2019-07-04T11:48:50.919Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Beqabu Dollar Aur Maeeshat) \\u2013 27th June 2019\",\n            \"slug\": \"power-play-beqabu-dollar-aur-maeeshat-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.919Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0t56\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153052/power-play-beqabu-dollar-aur-maeeshat-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1187,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:50.979Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:50.979Z\",\n            \"updated\": \"2019-07-04T11:48:50.979Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (APC Ke Mutalbaat Kia?) - 26th June 2019\",\n            \"slug\": \"power-play-apc-ke-mutalbaat-kia-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:50.979Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by43i\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152988/power-play-apc-ke-mutalbaat-kia-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1188,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.032Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.031Z\",\n            \"updated\": \"2019-07-04T11:48:51.032Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Ki Hakumat Se Mahaz Arai) \\u2013 25th June 2019\",\n            \"slug\": \"power-play-opposition-ki-hakumat-se-mahaz-arai-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.032Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvili\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152913/power-play-opposition-ki-hakumat-se-mahaz-arai-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1189,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.114Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.113Z\",\n            \"updated\": \"2019-07-04T11:48:51.114Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Tehreek Chala Paye Gi?) \\u2013 24th June 2019\",\n            \"slug\": \"power-play-opposition-tehreek-chala-paye-gi-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.114Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt6z3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152851/power-play-opposition-tehreek-chala-paye-gi-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1190,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.191Z\",\n            \"updated\": \"2019-07-04T11:48:51.191Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Asad Umar Ki Apni Hakumat Per Tanqeed) \\u2013 20th June 2019\",\n            \"slug\": \"power-play-asad-umar-ki-apni-hakumat-per-tanqeed-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.191Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7blero\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152596/power-play-asad-umar-ki-apni-hakumat-per-tanqeed-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1191,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.267Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.267Z\",\n            \"updated\": \"2019-07-04T11:48:51.268Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Ke Zardari Ke Production Order Ka Mutalba) \\u2013 18th June 2019\",\n            \"slug\": \"power-play-opposition-ke-zardari-ke-production-order-ka-mutalba-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.268Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhzsr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152457/power-play-opposition-ke-zardari-ke-production-order-ka-mutalba-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1192,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.336Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.335Z\",\n            \"updated\": \"2019-07-04T11:48:51.336Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Movement Against Govt) - 17th June 2019\",\n            \"slug\": \"power-play-opposition-movement-against-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.336Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgjkx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152411/power-play-opposition-movement-against-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1193,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.462Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.462Z\",\n            \"updated\": \"2019-07-04T11:48:51.462Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Reference Against Justice Qazi Faez Isa) \\u2013 13th June 2019\",\n            \"slug\": \"power-play-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.462Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2qlv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152202/power-play-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1194,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.541Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.541Z\",\n            \"updated\": \"2019-07-04T11:48:51.541Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Discussion on Current Issues) \\u2013 12th June 2019\",\n            \"slug\": \"power-play-discussion-on-current-issues-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.541Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayhr0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152138/power-play-discussion-on-current-issues-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1195,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.632Z\",\n            \"updated\": \"2019-07-04T11:48:51.632Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Giraftariyan Aur Budget) \\u2013 11th June 2019\",\n            \"slug\": \"power-play-giraftariyan-aur-budget-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.632Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7auchn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152079/power-play-giraftariyan-aur-budget-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1196,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.799Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.799Z\",\n            \"updated\": \"2019-07-04T11:48:51.799Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Aur Kaun Kaun Giraftar Hoga?) \\u2013 10th June 2019\",\n            \"slug\": \"power-play-aur-kaun-kaun-giraftar-hoga-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.799Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ar085\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152018/power-play-aur-kaun-kaun-giraftar-hoga-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1197,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:51.936Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:51.936Z\",\n            \"updated\": \"2019-07-04T11:48:51.937Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Discussion on Current Issues) \\u2013 3rd June 2019\",\n            \"slug\": \"power-play-discussion-on-current-issues-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:51.937Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a6gto\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151693/power-play-discussion-on-current-issues-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1198,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.037Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.036Z\",\n            \"updated\": \"2019-07-04T11:48:52.037Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Shahid Khaqan Abbasi Exclusive Interview) - 30th May 2019\",\n            \"slug\": \"power-play-shahid-khaqan-abbasi-exclusive-interview-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.037Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79treb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151515/power-play-shahid-khaqan-abbasi-exclusive-interview-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1199,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.183Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.183Z\",\n            \"updated\": \"2019-07-04T11:48:52.183Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Hamza Shahbaz Ki NAB Mein Paishi) \\u2013 29th May 2019\",\n            \"slug\": \"power-play-hamza-shahbaz-ki-nab-mein-paishi-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.183Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79qby6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151440/power-play-hamza-shahbaz-ki-nab-mein-paishi-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1200,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.240Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.240Z\",\n            \"updated\": \"2019-07-04T11:48:52.240Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Pakistan's Step Against Terrorism) \\u2013 28th May 2019\",\n            \"slug\": \"power-play-pakistans-step-against-terrorism-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.240Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mm0k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151402/power-play-pakistan-s-step-against-terrorism-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1201,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.291Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.291Z\",\n            \"updated\": \"2019-07-04T11:48:52.291Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (PMLN Want to Send Govt Home) - 23rd May 2019\",\n            \"slug\": \"power-play-pmln-want-to-send-govt-home-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.291Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795mgz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151133/power-play-pmln-want-to-send-govt-home-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1202,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.362Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.362Z\",\n            \"updated\": \"2019-07-04T11:48:52.362Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (NAB Chairman Interview) \\u2013 21st May 2019\",\n            \"slug\": \"power-play-nab-chairman-interview-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.362Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78yjp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151025/power-play-nab-chairman-interview-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1203,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.490Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.490Z\",\n            \"updated\": \"2019-07-04T11:48:52.490Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Will Opposition Give Tough Time To Govt?) \\u2013 20th May 2019\",\n            \"slug\": \"power-play-will-opposition-give-tough-time-to-govt-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.490Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uvv2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150957/power-play-will-opposition-give-tough-time-to-govt-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1204,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.571Z\",\n            \"updated\": \"2019-07-04T11:48:52.571Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (IMF Package & Dollar Rate) - 16th May 2019\",\n            \"slug\": \"power-play-imf-package-dollar-rate-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.571Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hy3c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150748/power-play-imf-package-dollar-rate-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1205,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.647Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.647Z\",\n            \"updated\": \"2019-07-04T11:48:52.647Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Kia Opposition Tehreek Chala Paye Gi?) - 15th May 2019\",\n            \"slug\": \"power-play-kia-opposition-tehreek-chala-paye-gi-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.647Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78erct\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150682/power-play-kia-opposition-tehreek-chala-paye-gi-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1206,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.690Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.689Z\",\n            \"updated\": \"2019-07-04T11:48:52.690Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (NAB Summons Bilawal Zardari) \\u2013 14th May 2019\",\n            \"slug\": \"power-play-nab-summons-bilawal-zardari-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.690Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78blca\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150612/power-play-nab-summons-bilawal-zardari-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1207,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.723Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.723Z\",\n            \"updated\": \"2019-07-04T11:48:52.723Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Ka Assembly Mein Shoor Sharaba) - 9th May 2019\",\n            \"slug\": \"power-play-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.723Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77vgib\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150317/power-play-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1208,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.773Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.773Z\",\n            \"updated\": \"2019-07-04T11:48:52.773Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Money Laundering, Accountability) - 8th May 2019\",\n            \"slug\": \"power-play-money-laundering-accountability-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.773Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rs0d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150246/power-play-money-laundering-accountability-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1209,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.812Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.812Z\",\n            \"updated\": \"2019-07-04T11:48:52.812Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (PMLN's Power Show??) - 7th May 2019\",\n            \"slug\": \"power-play-pmlns-power-show-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.812Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77olr8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150184/power-play-pmln-s-power-show-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1210,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.860Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.860Z\",\n            \"updated\": \"2019-07-04T11:48:52.860Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Mehngai, IMF, Economy) - 6th May 2019\",\n            \"slug\": \"power-play-mehngai-imf-economy-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.860Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kyeu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150121/power-play-mehngai-imf-economy-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1211,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.891Z\",\n            \"updated\": \"2019-07-04T11:48:52.891Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Who Will Lead PMLN After Sharif Brothers) - 2nd May 2019\",\n            \"slug\": \"power-play-who-will-lead-pmln-after-sharif-brothers-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.891Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7788e3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149859/power-play-who-will-lead-pmln-after-sharif-brothers-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1212,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:52.925Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:52.925Z\",\n            \"updated\": \"2019-07-04T11:48:52.925Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Attack on Pakistan From Afghanistan) \\u2013 1st May 2019\",\n            \"slug\": \"power-play-attack-on-pakistan-from-afghanistan-1st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:52.925Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7751wd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149801/power-play-attack-on-pakistan-from-afghanistan-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1213,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.014Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.013Z\",\n            \"updated\": \"2019-07-04T11:48:53.014Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Fake Bank Accounts Case) \\u2013 30th April 2019\",\n            \"slug\": \"power-play-fake-bank-accounts-case-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.014Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77214t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149728/power-play-fake-bank-accounts-case-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1214,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.103Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.102Z\",\n            \"updated\": \"2019-07-04T11:48:53.103Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (DG ISPR Questions From PTM) \\u2013 29th April 2019\",\n            \"slug\": \"power-play-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.103Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ygt2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149655/power-play-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1215,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.218Z\",\n            \"updated\": \"2019-07-04T11:48:53.219Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Nawaz Sharif Seeks Permission From SC To Go Abroad) - 25th April 2019\",\n            \"slug\": \"power-play-nawaz-sharif-seeks-permission-from-sc-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.219Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76logt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149427/power-play-nawaz-sharif-seeks-permission-from-sc-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1216,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.469Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.469Z\",\n            \"updated\": \"2019-07-04T11:48:53.469Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Sindh Govt Closes Dar ul Sehat) \\u2013 24th April 2019\",\n            \"slug\": \"power-play-sindh-govt-closes-dar-ul-sehat-24th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.469Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ie8p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149361/power-play-sindh-govt-closes-dar-ul-sehat-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1217,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.574Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.557Z\",\n            \"updated\": \"2019-07-04T11:48:53.574Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Medicines Prices Increase, Who Is Beneficiary?) \\u2013 23rd April 2019\",\n            \"slug\": \"power-play-medicines-prices-increase-who-is-beneficiary-23rd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.574Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fmyj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149307/power-play-medicines-prices-increase-who-is-beneficiary-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1218,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.664Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.664Z\",\n            \"updated\": \"2019-07-04T11:48:53.664Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Old Faces in New Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"power-play-old-faces-in-new-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.664Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76cabp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149245/power-play-old-faces-in-new-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1219,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.764Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.745Z\",\n            \"updated\": \"2019-07-04T11:48:53.764Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Imran Khan Ki Team Mein Bari Tabdeeliyan) \\u2013 18th April 2019\",\n            \"slug\": \"power-play-imran-khan-ki-team-mein-bari-tabdeeliyan-18th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.764Z\",\n            \"target_date\": \"2019-04-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x762mbo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149028/power-play-imran-khan-ki-team-mein-bari-tabdeeliyan-18th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1220,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.869Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.868Z\",\n            \"updated\": \"2019-07-04T11:48:53.869Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Wealth Transfer Through TT) \\u2013 17th April 2019\",\n            \"slug\": \"power-play-wealth-transfer-through-tt-17th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.869Z\",\n            \"target_date\": \"2019-04-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7600dk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148959/power-play-wealth-transfer-through-tt-17th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1221,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:53.960Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:53.960Z\",\n            \"updated\": \"2019-07-04T11:48:53.960Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Why Salman Shahbaz Flee From Country?) \\u2013 16th April 2019\",\n            \"slug\": \"power-play-why-salman-shahbaz-flee-from-country-16th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:53.960Z\",\n            \"target_date\": \"2019-04-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75xuj9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148906/power-play-why-salman-shahbaz-flee-from-country-16th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1222,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.085Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.085Z\",\n            \"updated\": \"2019-07-04T11:48:54.085Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Changes in Federal Cabinet?) \\u2013 15th April 2019\",\n            \"slug\": \"power-play-changes-in-federal-cabinet-15th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.085Z\",\n            \"target_date\": \"2019-04-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75vy1n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148852/power-play-changes-in-federal-cabinet-15th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1223,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.203Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.185Z\",\n            \"updated\": \"2019-07-04T11:48:54.203Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 15,\n                \"feed_id\": 20,\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Sharif Family Money Laundering) \\u2013 11th April 2019\",\n            \"slug\": \"power-play-sharif-family-money-laundering-11th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.203Z\",\n            \"target_date\": \"2019-04-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75nyci\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148640/power-play-sharif-family-money-laundering-11th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1224,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.507Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.506Z\",\n            \"updated\": \"2019-07-04T11:48:54.507Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Cases on Opposition Leaders) \\u2013 3rd July 2019\",\n            \"slug\": \"faisla-aap-ka-cases-on-opposition-leaders-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.507Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfqho\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153433/faisla-aap-ka-cases-on-opposition-leaders-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1225,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.645Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.627Z\",\n            \"updated\": \"2019-07-04T11:48:54.645Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Production Order Ke Qanoon Mein Tarmeem Ka Faisla) \\u2013 2nd July 2019\",\n            \"slug\": \"faisla-aap-ka-production-order-ke-qanoon-mein-tarmeem-ka-faisla-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.645Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd25m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153366/faisla-aap-ka-production-order-ke-qanoon-mein-tarmeem-ka-faisla-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1226,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.707Z\",\n            \"updated\": \"2019-07-04T11:48:54.708Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition Aur Hakumat Mein Mahaz Arai) \\u2013 1st July 2019\",\n            \"slug\": \"faisla-aap-ka-opposition-aur-hakumat-mein-mahaz-arai-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.708Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cadmd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153293/faisla-aap-ka-opposition-aur-hakumat-mein-mahaz-arai-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1227,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.751Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.751Z\",\n            \"updated\": \"2019-07-04T11:48:54.751Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Finally Federal Budget Approved) \\u2013 27th June 2019\",\n            \"slug\": \"faisla-aap-ka-finally-federal-budget-approved-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.752Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0nl0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153027/faisla-aap-ka-finally-federal-budget-approved-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1228,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.790Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.790Z\",\n            \"updated\": \"2019-07-04T11:48:54.790Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Kia Opposition Ki APC Nakam Ho Gai?) \\u2013 26th June 2019\",\n            \"slug\": \"faisla-aap-ka-kia-opposition-ki-apc-nakam-ho-gai-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.790Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxu5t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152955/faisla-aap-ka-kia-opposition-ki-apc-nakam-ho-gai-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1229,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.833Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.833Z\",\n            \"updated\": \"2019-07-04T11:48:54.833Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Kal All Parties Conference Hogi) \\u2013 25th June 2019\",\n            \"slug\": \"faisla-aap-ka-kal-all-parties-conference-hogi-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.833Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bv85l\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152885/faisla-aap-ka-kal-all-parties-conference-hogi-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1230,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.887Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.886Z\",\n            \"updated\": \"2019-07-04T11:48:54.887Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Loan Inquiry Commission) \\u2013 24th June 2019\",\n            \"slug\": \"faisla-aap-ka-loan-inquiry-commission-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.887Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bswjm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152817/faisla-aap-ka-loan-inquiry-commission-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1231,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:54.933Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:54.932Z\",\n            \"updated\": \"2019-07-04T11:48:54.933Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Fazal ur Rehman Ki Hakumat Ko Dhamki) \\u2013 20th June 2019\",\n            \"slug\": \"faisla-aap-ka-fazal-ur-rehman-ki-hakumat-ko-dhamki-20th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:54.933Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl8mt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152565/faisla-aap-ka-fazal-ur-rehman-ki-hakumat-ko-dhamki-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1232,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.011Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.011Z\",\n            \"updated\": \"2019-07-04T11:48:55.011Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Kis Ne NRO Manga, Saboot Dein - Shahbaz Sharif) \\u2013 19th June 2019\",\n            \"slug\": \"faisla-aap-ka-kis-ne-nro-manga-saboot-dein-shahbaz-sharif-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.011Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjjt9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152498/faisla-aap-ka-kis-ne-nro-manga-saboot-dein-shahbaz-sharif-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1233,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.060Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.060Z\",\n            \"updated\": \"2019-07-04T11:48:55.060Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Imran Khan Meets Chairman Senate) \\u2013 18th June 2019\",\n            \"slug\": \"faisla-aap-ka-imran-khan-meets-chairman-senate-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.060Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhtrc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152442/faisla-aap-ka-imran-khan-meets-chairman-senate-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1234,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.108Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.108Z\",\n            \"updated\": \"2019-07-04T11:48:55.108Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition Getting United Against Govt) \\u2013 17th June 2019\",\n            \"slug\": \"faisla-aap-ka-opposition-getting-united-against-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.108Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgede\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152382/faisla-aap-ka-opposition-getting-united-against-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1235,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.161Z\",\n            \"updated\": \"2019-07-04T11:48:55.161Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Inquiry Commission To Probe Debt) \\u2013 13th June 2019\",\n            \"slug\": \"faisla-aap-ka-inquiry-commission-to-probe-debt-13th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.161Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b29z6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152163/faisla-aap-ka-inquiry-commission-to-probe-debt-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1236,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.205Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.205Z\",\n            \"updated\": \"2019-07-04T11:48:55.205Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Budget Awam Dost Ya Awam Dushman?) \\u2013 12th June 2019\",\n            \"slug\": \"faisla-aap-ka-budget-awam-dost-ya-awam-dushman-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.205Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay415\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152107/faisla-aap-ka-budget-awam-dost-ya-awam-dushman-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1237,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.274Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.274Z\",\n            \"updated\": \"2019-07-04T11:48:55.274Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Why Faryal Talpur Not Arrested?) \\u2013 10th June 2019\",\n            \"slug\": \"faisla-aap-ka-why-faryal-talpur-not-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.274Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqmwo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151983/faisla-aap-ka-why-faryal-talpur-not-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1238,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.333Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.333Z\",\n            \"updated\": \"2019-07-04T11:48:55.333Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (1st Day Eid Special) \\u2013 5th June 2019\",\n            \"slug\": \"faisla-aap-ka-1st-day-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.333Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ac9af\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151756/faisla-aap-ka-1st-day-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1239,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.401Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.401Z\",\n            \"updated\": \"2019-07-04T11:48:55.401Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Fawad Chaudhry Exclusive Interview) \\u2013 4th June 2019\",\n            \"slug\": \"faisla-aap-ka-fawad-chaudhry-exclusive-interview-4th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.401Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a981c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151717/faisla-aap-ka-fawad-chaudhry-exclusive-interview-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1240,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.452Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.451Z\",\n            \"updated\": \"2019-07-04T11:48:55.452Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PTI Mein Sab Kuch Theek Nahi?) \\u2013 3rd June 2019\",\n            \"slug\": \"faisla-aap-ka-pti-mein-sab-kuch-theek-nahi-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.452Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a66fe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151681/faisla-aap-ka-pti-mein-sab-kuch-theek-nahi-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1241,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.493Z\",\n            \"updated\": \"2019-07-04T11:48:55.493Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Eid Ke Baad Hakumat Ke Khilaf Tehreek) \\u2013 30th May 2019\",\n            \"slug\": \"faisla-aap-ka-eid-ke-baad-hakumat-ke-khilaf-tehreek-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.493Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tck4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151486/faisla-aap-ka-eid-ke-baad-hakumat-ke-khilaf-tehreek-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1242,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.555Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.555Z\",\n            \"updated\": \"2019-07-04T11:48:55.555Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Govt File Reference Against 3 SC Judges) \\u2013 29th May 2019\",\n            \"slug\": \"faisla-aap-ka-govt-file-reference-against-3-sc-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.555Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79pyhz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151425/faisla-aap-ka-govt-file-reference-against-3-sc-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1243,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.590Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.589Z\",\n            \"updated\": \"2019-07-04T11:48:55.590Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PMLN Resumed Its Narrative?) \\u2013 28th May 2019\",\n            \"slug\": \"faisla-aap-ka-pmln-resumed-its-narrative-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.590Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79m9kj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151375/faisla-aap-ka-pmln-resumed-its-narrative-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1244,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.643Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.642Z\",\n            \"updated\": \"2019-07-04T11:48:55.643Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Khawaja Asif Exclusive Interview) \\u2013 27th May 2019\",\n            \"slug\": \"faisla-aap-ka-khawaja-asif-exclusive-interview-27th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.643Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79i9fy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151329/faisla-aap-ka-khawaja-asif-exclusive-interview-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1245,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.742Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.741Z\",\n            \"updated\": \"2019-07-04T11:48:55.742Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (NAB Chairman Interview, Other Issues) \\u2013 23rd May 2019\",\n            \"slug\": \"faisla-aap-ka-nab-chairman-interview-other-issues-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.742Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7958pi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151101/faisla-aap-ka-nab-chairman-interview-other-issues-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1246,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.858Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.858Z\",\n            \"updated\": \"2019-07-04T11:48:55.858Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Maryam Speaks, Chairman NAB Interview) - 22nd May 2019\",\n            \"slug\": \"faisla-aap-ka-maryam-speaks-chairman-nab-interview-22nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.858Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/1XSR6OalwtE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151060/faisla-aap-ka-maryam-speaks-chairman-nab-interview-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1247,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:55.975Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:55.967Z\",\n            \"updated\": \"2019-07-04T11:48:55.975Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Special Talk With Shahid Khaqan Abbasi) \\u2013 21st May 2019\",\n            \"slug\": \"faisla-aap-ka-special-talk-with-shahid-khaqan-abbasi-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:55.975Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y65q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150983/faisla-aap-ka-special-talk-with-shahid-khaqan-abbasi-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1248,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.092Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.091Z\",\n            \"updated\": \"2019-07-04T11:48:56.092Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition's Iftar Dinner, Govt Worried) \\u2013 20th May 2019\",\n            \"slug\": \"faisla-aap-ka-oppositions-iftar-dinner-govt-worried-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.092Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uj6e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150938/faisla-aap-ka-opposition-s-iftar-dinner-govt-worried-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1249,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.192Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.191Z\",\n            \"updated\": \"2019-07-04T11:48:56.192Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition Ready To Start Movement) \\u2013 16th May 2019\",\n            \"slug\": \"faisla-aap-ka-opposition-ready-to-start-movement-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.192Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hlgc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150725/faisla-aap-ka-opposition-ready-to-start-movement-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1250,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.289Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.289Z\",\n            \"updated\": \"2019-07-04T11:48:56.307Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PPP To Run Movement After Eid) \\u2013 15th May 2019\",\n            \"slug\": \"faisla-aap-ka-ppp-to-run-movement-after-eid-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.307Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78eike\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150650/faisla-aap-ka-ppp-to-run-movement-after-eid-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1251,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.460Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.442Z\",\n            \"updated\": \"2019-07-04T11:48:56.460Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Will Amnesty Scheme Improve Economy) \\u2013 14th May 2019\",\n            \"slug\": \"faisla-aap-ka-will-amnesty-scheme-improve-economy-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.460Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78b7z7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150583/faisla-aap-ka-will-amnesty-scheme-improve-economy-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1252,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.539Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.538Z\",\n            \"updated\": \"2019-07-04T11:48:56.539Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Stock Market Kyun Giri?) \\u2013 13th May 2019\",\n            \"slug\": \"faisla-aap-ka-stock-market-kyun-giri-13th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.539Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787qvb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150539/faisla-aap-ka-stock-market-kyun-giri-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1253,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.662Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.661Z\",\n            \"updated\": \"2019-07-04T11:48:56.662Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (More Challenges For PTI Govt) \\u2013 9th May 2019\",\n            \"slug\": \"faisla-aap-ka-more-challenges-for-pti-govt-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.662Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77v2hk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150289/faisla-aap-ka-more-challenges-for-pti-govt-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1254,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.742Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.742Z\",\n            \"updated\": \"2019-07-04T11:48:56.742Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Shahid Khaqan Abbasi Exclusive Interview) \\u2013 8th May 2019\",\n            \"slug\": \"faisla-aap-ka-shahid-khaqan-abbasi-exclusive-interview-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.742Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77revl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150219/faisla-aap-ka-shahid-khaqan-abbasi-exclusive-interview-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1255,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.866Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.865Z\",\n            \"updated\": \"2019-07-04T11:48:56.866Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PMLN Ka Power Show Kaisa Raha) \\u2013 7th May 2019\",\n            \"slug\": \"faisla-aap-ka-pmln-ka-power-show-kaisa-raha-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.866Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77ob9c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150155/faisla-aap-ka-pmln-ka-power-show-kaisa-raha-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1256,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.897Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.896Z\",\n            \"updated\": \"2019-07-04T11:48:56.897Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Shahbaz Sharif in London, Nawaz Sharif in Jail) \\u2013 6th May 2019\",\n            \"slug\": \"faisla-aap-ka-shahbaz-sharif-in-london-nawaz-sharif-in-jail-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.897Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kk5p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150082/faisla-aap-ka-shahbaz-sharif-in-london-nawaz-sharif-in-jail-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1257,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:56.940Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.940Z\",\n            \"updated\": \"2019-07-04T11:48:56.940Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Political Future of PMLN) \\u2013 2nd May 2019\",\n            \"slug\": \"faisla-aap-ka-political-future-of-pmln-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:56.940Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x777x4g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149834/faisla-aap-ka-political-future-of-pmln-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1258,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.000Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:56.999Z\",\n            \"updated\": \"2019-07-04T11:48:57.000Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Fazal Ur Rehman Exclusive Interview) \\u2013 1st May 2019\",\n            \"slug\": \"faisla-aap-ka-fazal-ur-rehman-exclusive-interview-1st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.000Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774rn3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149769/faisla-aap-ka-fazal-ur-rehman-exclusive-interview-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1259,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.066Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.066Z\",\n            \"updated\": \"2019-07-04T11:48:57.066Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Difficulties Increasing For PTI Govt) \\u2013 30th April 2019\",\n            \"slug\": \"faisla-aap-ka-difficulties-increasing-for-pti-govt-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.066Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771ptd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149699/faisla-aap-ka-difficulties-increasing-for-pti-govt-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1260,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.107Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.106Z\",\n            \"updated\": \"2019-07-04T11:48:57.107Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (DG ISPR Questions From PTM) \\u2013 29th April 2019\",\n            \"slug\": \"faisla-aap-ka-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.107Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xvtf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149622/faisla-aap-ka-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1261,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.148Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.142Z\",\n            \"updated\": \"2019-07-04T11:48:57.149Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Will PTI Be Succeeded in Approving Budget) \\u2013 25th April 2019\",\n            \"slug\": \"faisla-aap-ka-will-pti-be-succeeded-in-approving-budget-25th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.149Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l8qf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149395/faisla-aap-ka-will-pti-be-succeeded-in-approving-budget-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1262,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.198Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.198Z\",\n            \"updated\": \"2019-07-04T11:48:57.199Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Punjab Mein Tabdeeli Ka Imkan) \\u2013 24th April 2019\",\n            \"slug\": \"faisla-aap-ka-punjab-mein-tabdeeli-ka-imkan-24th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.199Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76i34o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149334/faisla-aap-ka-punjab-mein-tabdeeli-ka-imkan-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1263,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.283Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.283Z\",\n            \"updated\": \"2019-07-04T11:48:57.283Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 21,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PTI Hakumat Tanqeed Ki Zad Mein) \\u2013 23rd April 2019\",\n            \"slug\": \"faisla-aap-ka-pti-hakumat-tanqeed-ki-zad-mein-23rd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.283Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fckz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149279/faisla-aap-ka-pti-hakumat-tanqeed-ki-zad-mein-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1264,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.599Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.599Z\",\n            \"updated\": \"2019-07-04T11:48:57.599Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Amnesty Scheme Ka Waqt Khatam) \\u2013 3rd July 2019\",\n            \"slug\": \"najam-sethi-show-amnesty-scheme-ka-waqt-khatam-3rd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.599Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/hA2q6MLZjfQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153450/najam-sethi-show-amnesty-scheme-ka-waqt-khatam-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1265,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.688Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.687Z\",\n            \"updated\": \"2019-07-04T11:48:57.688Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (More Arrests, Asif Zardari's Interview) \\u2013 2nd July 2019\",\n            \"slug\": \"najam-sethi-show-more-arrests-asif-zardaris-interview-2nd-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.688Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/iwec7L0RPA4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153386/najam-sethi-show-more-arrests-asif-zardari-s-interview-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1266,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.759Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.758Z\",\n            \"updated\": \"2019-07-04T11:48:57.776Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PM Imran Khan's Speech) \\u2013 1st July 2019\",\n            \"slug\": \"najam-sethi-show-pm-imran-khans-speech-1st-july-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.776Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/Uh62G_31Ej4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153308/najam-sethi-show-pm-imran-khan-s-speech-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1267,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.856Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.855Z\",\n            \"updated\": \"2019-07-04T11:48:57.856Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Opposition Ki All Parties Conference) - 27th June 2019\",\n            \"slug\": \"najam-sethi-show-opposition-ki-all-parties-conference-27th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.856Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/Zlgym-mnHtA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153046/najam-sethi-show-opposition-ki-all-parties-conference-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1268,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:57.926Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:57.925Z\",\n            \"updated\": \"2019-07-04T11:48:57.926Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (What Is The Agenda of APC?) \\u2013 26th June 2019\",\n            \"slug\": \"najam-sethi-show-what-is-the-agenda-of-apc-26th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:57.926Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/n58KeFrkE3k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152971/najam-sethi-show-what-is-the-agenda-of-apc-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1269,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:58.056Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:58.055Z\",\n            \"updated\": \"2019-07-04T11:48:58.056Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Ban on Word \\\"Selected PM\\\" in Parliament) - 25th June 2019\",\n            \"slug\": \"najam-sethi-show-ban-on-word-selected-pm-in-parliament-25th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:58.056Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/O6zk4T3qcRw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152896/najam-sethi-show-ban-on-word-selected-pm-in-parliament-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1270,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:58.193Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:58.192Z\",\n            \"updated\": \"2019-07-04T11:48:58.193Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Maryam Nawaz Ka Bayan) \\u2013 24th June 2019\",\n            \"slug\": \"najam-sethi-show-maryam-nawaz-ka-bayan-24th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:58.193Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/IZRL84ZJX1c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152828/najam-sethi-show-maryam-nawaz-ka-bayan-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1271,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:58.466Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:58.440Z\",\n            \"updated\": \"2019-07-04T11:48:58.466Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Commission Aur Taqat Ke Liye Joor Toor) \\u2013 19th June 2019\",\n            \"slug\": \"najam-sethi-show-commission-aur-taqat-ke-liye-joor-toor-19th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:58.466Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/OAuFMrwE9kc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152518/najam-sethi-show-commission-aur-taqat-ke-liye-joor-toor-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1272,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:58.576Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:58.558Z\",\n            \"updated\": \"2019-07-04T11:48:58.576Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Hakumat Ke Liye Khatre Ki Ghanti) \\u2013 18th June 2019\",\n            \"slug\": \"najam-sethi-show-hakumat-ke-liye-khatre-ki-ghanti-18th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:58.576Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/Fo82ntTWWtM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152453/najam-sethi-show-hakumat-ke-liye-khatre-ki-ghanti-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1273,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:58.695Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:58.695Z\",\n            \"updated\": \"2019-07-04T11:48:58.695Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Who Destroyed Cricket) \\u2013 17th June 2019\",\n            \"slug\": \"najam-sethi-show-who-destroyed-cricket-17th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:58.695Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/b8Rna4OrhII\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152404/najam-sethi-show-who-destroyed-cricket-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1274,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:58.782Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:58.782Z\",\n            \"updated\": \"2019-07-04T11:48:58.782Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Awami Ya Hungami Budget) \\u2013 12th June 2019\",\n            \"slug\": \"najam-sethi-show-awami-ya-hungami-budget-12th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:58.782Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/ify1d6DfnPk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152122/najam-sethi-show-awami-ya-hungami-budget-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1275,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:58.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:58.900Z\",\n            \"updated\": \"2019-07-04T11:48:58.901Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Giraftaryion Ka Mausam) \\u2013 11th June 2019\",\n            \"slug\": \"najam-sethi-show-giraftaryion-ka-mausam-11th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:58.901Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/PtG3sZEUxZo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152063/najam-sethi-show-giraftaryion-ka-mausam-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1276,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.046Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.045Z\",\n            \"updated\": \"2019-07-04T11:48:59.046Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Who Is Next After Asif Zardari) \\u2013 10th June 2019\",\n            \"slug\": \"najam-sethi-show-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.046Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/24KfCWlcSVQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151998/najam-sethi-show-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1277,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.105Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.105Z\",\n            \"updated\": \"2019-07-04T11:48:59.107Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Nuskha Brai Bemar Maeeshat) \\u2013 3rd June 2019\",\n            \"slug\": \"najam-sethi-show-nuskha-brai-bemar-maeeshat-3rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.107Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/dGCMfuWCni0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151688/najam-sethi-show-nuskha-brai-bemar-maeeshat-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1278,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.176Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.175Z\",\n            \"updated\": \"2019-07-04T11:48:59.176Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Why Reference Against Justice Qazi Faez Esa) \\u2013 30th May 2019\",\n            \"slug\": \"najam-sethi-show-why-reference-against-justice-qazi-faez-esa-30th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.176Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/eRfVHwqX4o8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151498/najam-sethi-show-why-reference-against-justice-qazi-faez-esa-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1279,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.217Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.216Z\",\n            \"updated\": \"2019-07-04T11:48:59.217Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Will Modi Invite Imran, Other Issues) \\u2013 29th May 2019\",\n            \"slug\": \"najam-sethi-show-will-modi-invite-imran-other-issues-29th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.217Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/J58Mg3iVhS4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151437/najam-sethi-show-will-modi-invite-imran-other-issues-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1280,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.279Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.278Z\",\n            \"updated\": \"2019-07-04T11:48:59.279Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pakistan's Nuclear Conflict With India) \\u2013 28th May 2019\",\n            \"slug\": \"najam-sethi-show-pakistans-nuclear-conflict-with-india-28th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.279Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/LWsv038YS3c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151391/najam-sethi-show-pakistan-s-nuclear-conflict-with-india-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1281,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.330Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.329Z\",\n            \"updated\": \"2019-07-04T11:48:59.330Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PTM Issue) \\u2013 27th May 2019\",\n            \"slug\": \"najam-sethi-show-ptm-issue-27th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.330Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/q2BAS26ojIs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151364/najam-sethi-show-ptm-issue-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1282,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.379Z\",\n            \"updated\": \"2019-07-04T11:48:59.380Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pak-India Future After Narendra Modi Election Victory) - 23rd May 2019\",\n            \"slug\": \"najam-sethi-show-pak-india-future-after-narendra-modi-election-victory-23rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.380Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/a8Vqns8xmhk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151104/najam-sethi-show-pak-india-future-after-narendra-modi-election-victory-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1283,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.415Z\",\n            \"updated\": \"2019-07-04T11:48:59.416Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Insaf Siasat Ki Nazar) - 22nd May 2019\",\n            \"slug\": \"najam-sethi-show-insaf-siasat-ki-nazar-22nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.416Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/Jh9lNqCSeIE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151056/najam-sethi-show-insaf-siasat-ki-nazar-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1284,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.467Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.466Z\",\n            \"updated\": \"2019-07-04T11:48:59.467Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Will PMLN Come on Roads?) \\u2013 21st May 2019\",\n            \"slug\": \"najam-sethi-show-will-pmln-come-on-roads-21st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.467Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/B9bH_1eC0sc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151000/najam-sethi-show-will-pmln-come-on-roads-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1285,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.500Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.499Z\",\n            \"updated\": \"2019-07-04T11:48:59.500Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Maryam Bilawal Iftar Dinner) \\u2013 20th May 2019\",\n            \"slug\": \"najam-sethi-show-maryam-bilawal-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.500Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/eN-Vt6P2tD4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150949/najam-sethi-show-maryam-bilawal-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1286,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.542Z\",\n            \"updated\": \"2019-07-04T11:48:59.542Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Dollar Ki Onchi Uraan) \\u2013 16th May 2019\",\n            \"slug\": \"najam-sethi-show-dollar-ki-onchi-uraan-16th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.542Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/KcnLRzjwFQ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150737/najam-sethi-show-dollar-ki-onchi-uraan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1287,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.609Z\",\n            \"updated\": \"2019-07-04T11:48:59.610Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (What Is New in This Amnesty Scheme) - 15th May 2019\",\n            \"slug\": \"najam-sethi-show-what-is-new-in-this-amnesty-scheme-15th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.610Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/rCxzPtfgqmg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150672/najam-sethi-show-what-is-new-in-this-amnesty-scheme-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1288,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.660Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.660Z\",\n            \"updated\": \"2019-07-04T11:48:59.660Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (IMF Package, Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"najam-sethi-show-imf-package-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.660Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/iCFAb136u7s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150592/najam-sethi-show-imf-package-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1289,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.692Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.692Z\",\n            \"updated\": \"2019-07-04T11:48:59.692Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Impact of IMF Package on General Public) \\u2013 13th May 2019\",\n            \"slug\": \"najam-sethi-show-impact-of-imf-package-on-general-public-13th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.692Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/hIqeWSmXTHQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150550/najam-sethi-show-impact-of-imf-package-on-general-public-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1290,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.736Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.736Z\",\n            \"updated\": \"2019-07-04T11:48:59.736Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pakistan in IMF's Trap?) \\u2013 9th May 2019\",\n            \"slug\": \"najam-sethi-show-pakistan-in-imfs-trap-9th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.736Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/QIYK9jmRbtM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150316/najam-sethi-show-pakistan-in-imf-s-trap-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1291,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.798Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.798Z\",\n            \"updated\": \"2019-07-04T11:48:59.798Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Nawaz Sharif Phir Jail Mein) \\u2013 8th May 2019\",\n            \"slug\": \"najam-sethi-show-nawaz-sharif-phir-jail-mein-8th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.798Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/yDxFY3-Oj-Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150234/najam-sethi-show-nawaz-sharif-phir-jail-mein-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1292,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.847Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.846Z\",\n            \"updated\": \"2019-07-04T11:48:59.847Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Maryam Nawaz Leading PMLN) \\u2013 7th May 2019\",\n            \"slug\": \"najam-sethi-show-maryam-nawaz-leading-pmln-7th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.847Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/KvpGiJKi2Z8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150167/najam-sethi-show-maryam-nawaz-leading-pmln-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1293,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.879Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.879Z\",\n            \"updated\": \"2019-07-04T11:48:59.879Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Can Maryam Nawaz Keep Party Position) \\u2013 6th May 2019\",\n            \"slug\": \"najam-sethi-show-can-maryam-nawaz-keep-party-position-6th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.879Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/QiSg2T8anRs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150119/najam-sethi-show-can-maryam-nawaz-keep-party-position-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1294,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.919Z\",\n            \"updated\": \"2019-07-04T11:48:59.919Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Will Shahbaz Sharif Return Pakistan) \\u2013 2nd May 2019\",\n            \"slug\": \"najam-sethi-show-will-shahbaz-sharif-return-pakistan-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.919Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/o0qEesCKrwU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149867/najam-sethi-show-will-shahbaz-sharif-return-pakistan-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1295,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:48:59.969Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:48:59.968Z\",\n            \"updated\": \"2019-07-04T11:48:59.969Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pakistan Vs India Tension) \\u2013 1st May 2019\",\n            \"slug\": \"najam-sethi-show-pakistan-vs-india-tension-1st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:48:59.969Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/hir1DsmR7N0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149785/najam-sethi-show-pakistan-vs-india-tension-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1296,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.100Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.099Z\",\n            \"updated\": \"2019-07-04T11:49:00.100Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (National Action Plan?) \\u2013 30th April 2019\",\n            \"slug\": \"najam-sethi-show-national-action-plan-30th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.100Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/NhMHo9v-48Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149713/najam-sethi-show-national-action-plan-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1297,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.209Z\",\n            \"updated\": \"2019-07-04T11:49:00.225Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Grouping in PTI) \\u2013 29th April 2019\",\n            \"slug\": \"najam-sethi-show-grouping-in-pti-29th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.225Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/i74sqNxBmBA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149643/najam-sethi-show-grouping-in-pti-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1298,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.329Z\",\n            \"updated\": \"2019-07-04T11:49:00.329Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Does System Need To Be Changed?) \\u2013 25th April 2019\",\n            \"slug\": \"najam-sethi-show-does-system-need-to-be-changed-25th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.329Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/H9O2GwAWryI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149407/najam-sethi-show-does-system-need-to-be-changed-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1299,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.409Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.408Z\",\n            \"updated\": \"2019-07-04T11:49:00.409Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Aik Nahi 3 Punjab?) \\u2013 24 April 2019\",\n            \"slug\": \"najam-sethi-show-aik-nahi-3-punjab-24-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.409Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/ZLMp1JWxe3Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149347/najam-sethi-show-aik-nahi-3-punjab-24-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1300,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.518Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.517Z\",\n            \"updated\": \"2019-07-04T11:49:00.525Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Hakumat Ka Ahtasab Kaun Karega?) \\u2013 23rd April 2019\",\n            \"slug\": \"najam-sethi-show-hakumat-ka-ahtasab-kaun-karega-23rd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.525Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"https://www.youtube.com/watch/CUZiXJw0oaw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149314/najam-sethi-show-hakumat-ka-ahtasab-kaun-karega-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1301,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.596Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.595Z\",\n            \"updated\": \"2019-07-04T11:49:00.596Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PTI Govt's New Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"najam-sethi-show-pti-govts-new-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.596Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"https://www.youtube.com/watch/_oV_pdFh5ow\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149234/najam-sethi-show-pti-govt-s-new-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1302,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.700Z\",\n            \"updated\": \"2019-07-04T11:49:00.700Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Baghawat Ki Kahani, Najam Sethi Ki Zubani) \\u2013 17th April 2019\",\n            \"slug\": \"najam-sethi-show-baghawat-ki-kahani-najam-sethi-ki-zubani-17th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.700Z\",\n            \"target_date\": \"2019-04-17\",\n            \"text\": \"https://www.youtube.com/watch/VaELDkxSM9U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/148963/najam-sethi-show-baghawat-ki-kahani-najam-sethi-ki-zubani-17th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1303,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:00.812Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:00.812Z\",\n            \"updated\": \"2019-07-04T11:49:00.812Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 16,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Accountability or Revenge?) \\u2013 16th April 2019\",\n            \"slug\": \"najam-sethi-show-accountability-or-revenge-16th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:00.812Z\",\n            \"target_date\": \"2019-04-16\",\n            \"text\": \"https://www.youtube.com/watch/kAlduo_rxVQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/148892/najam-sethi-show-accountability-or-revenge-16th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1304,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.094Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.094Z\",\n            \"updated\": \"2019-07-04T11:49:01.094Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (PMLN In Trouble, PMLN Members Meet Imran Khan) - 30th June 2019\",\n            \"slug\": \"think-tank-pmln-in-trouble-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.094Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/3tb4a8-xJKc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153231/think-tank-pmln-in-trouble-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1305,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.193Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.192Z\",\n            \"updated\": \"2019-07-04T11:49:01.193Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Attitude of Govt And Opposition) - 29th June 2019\",\n            \"slug\": \"think-tank-attitude-of-govt-and-opposition-29th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.193Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/NGaXLIlpJ1w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153177/think-tank-attitude-of-govt-and-opposition-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1306,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.242Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.242Z\",\n            \"updated\": \"2019-07-04T11:49:01.242Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Mulk Ki Muashi Sorat e Haal) - 28th June 2019\",\n            \"slug\": \"think-tank-mulk-ki-muashi-sorat-e-haal-28th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.242Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/P26uoEXW87E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153104/think-tank-mulk-ki-muashi-sorat-e-haal-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1307,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.290Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.289Z\",\n            \"updated\": \"2019-07-04T11:49:01.290Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ke Bas Mein Kia Hai Aur Kia Nahi?) - 23rd June 2019\",\n            \"slug\": \"think-tank-opposition-ke-bas-mein-kia-hai-aur-kia-nahi-23rd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.290Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/SbXbIdodMVc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152778/think-tank-opposition-ke-bas-mein-kia-hai-aur-kia-nahi-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1308,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.347Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.347Z\",\n            \"updated\": \"2019-07-04T11:49:01.347Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Maryam Nawaz Press Conference) - 22nd June 2019\",\n            \"slug\": \"think-tank-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.347Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/S37SUa2ygvE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152707/think-tank-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1309,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.391Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.390Z\",\n            \"updated\": \"2019-07-04T11:49:01.391Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Want to Topple Govt?) - 21st June 2019\",\n            \"slug\": \"think-tank-opposition-want-to-topple-govt-21st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.391Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/ZRrC4nw11i0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152642/think-tank-opposition-want-to-topple-govt-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1310,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.421Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.420Z\",\n            \"updated\": \"2019-07-04T11:49:01.421Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Bilawal Maryam Mulaqat, Cricket Match) - 16th June 2019\",\n            \"slug\": \"think-tank-bilawal-maryam-mulaqat-cricket-match-16th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.421Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/jyvLxeTb1jc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152351/think-tank-bilawal-maryam-mulaqat-cricket-match-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1311,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.470Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.470Z\",\n            \"updated\": \"2019-07-04T11:49:01.470Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ki Giraftariyan) - 15th June 2019\",\n            \"slug\": \"think-tank-opposition-ki-giraftariyan-15th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.470Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/JzuNOoP0OfM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152286/think-tank-opposition-ki-giraftariyan-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1312,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.512Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.512Z\",\n            \"updated\": \"2019-07-04T11:49:01.512Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With Syeda Ayesha Naaz (Opposition Leaders Ki Giraftariyan) - 14th June 2019\",\n            \"slug\": \"think-tank-with-syeda-ayesha-naaz-opposition-leaders-ki-giraftariyan-14th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.512Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/VohmBJxVspw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152244/think-tank-with-syeda-ayesha-naaz-opposition-leaders-ki-giraftariyan-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1313,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.563Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.562Z\",\n            \"updated\": \"2019-07-04T11:49:01.563Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ki Tehreek Ka Anjaam Kia Hoga) - 9th June 2019\",\n            \"slug\": \"think-tank-opposition-ki-tehreek-ka-anjaam-kia-hoga-9th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.563Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/3KCz9KXY_O0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151936/think-tank-opposition-ki-tehreek-ka-anjaam-kia-hoga-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1314,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.592Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.592Z\",\n            \"updated\": \"2019-07-04T11:49:01.592Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With Syeda Ayesha Naaz (PTM & Other Issues) - 8th June 2019\",\n            \"slug\": \"think-tank-with-syeda-ayesha-naaz-ptm-other-issues-8th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.592Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/bQBlddr5-kY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151880/think-tank-with-syeda-ayesha-naaz-ptm-other-issues-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1315,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.622Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.622Z\",\n            \"updated\": \"2019-07-04T11:49:01.622Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Eid Ke Baad Siasi Manzarnama) - 7th June 2019\",\n            \"slug\": \"think-tank-eid-ke-baad-siasi-manzarnama-7th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.622Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/DswGAmtJcDg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151841/think-tank-eid-ke-baad-siasi-manzarnama-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1316,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.675Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.675Z\",\n            \"updated\": \"2019-07-04T11:49:01.676Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Plan After Eid) - 2nd June 2019\",\n            \"slug\": \"think-tank-opposition-plan-after-eid-2nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.676Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/nVEJ2d6jwTs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151651/think-tank-opposition-plan-after-eid-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1317,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.728Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.727Z\",\n            \"updated\": \"2019-07-04T11:49:01.728Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ki Hakumat Ke Khilaf Tehreek) - 1st June 2019\",\n            \"slug\": \"think-tank-opposition-ki-hakumat-ke-khilaf-tehreek-1st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.728Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/qjARy5qHP60\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151603/think-tank-opposition-ki-hakumat-ke-khilaf-tehreek-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1318,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.794Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.788Z\",\n            \"updated\": \"2019-07-04T11:49:01.794Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nawaz Sharif Ka Adlia Bachao Tehreek Ka Elan) - 31st May 2019\",\n            \"slug\": \"think-tank-nawaz-sharif-ka-adlia-bachao-tehreek-ka-elan-31st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.794Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/cIe9ykMOXHA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151555/think-tank-nawaz-sharif-ka-adlia-bachao-tehreek-ka-elan-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1319,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.834Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.834Z\",\n            \"updated\": \"2019-07-04T11:49:01.834Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Bharat Mein Modi Ki Jeet) - 26th May 2019\",\n            \"slug\": \"think-tank-bharat-mein-modi-ki-jeet-26th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.834Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ENuvGDyR_zI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151286/think-tank-bharat-mein-modi-ki-jeet-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1320,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.879Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.879Z\",\n            \"updated\": \"2019-07-04T11:49:01.879Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Chairman NAB Se Resignation Ki Demand) - 25th May 2019\",\n            \"slug\": \"think-tank-chairman-nab-se-resignation-ki-demand-25th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.879Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/uIJRIV_eFEU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151233/think-tank-chairman-nab-se-resignation-ki-demand-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1321,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.910Z\",\n            \"updated\": \"2019-07-04T11:49:01.911Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With (Impact of Modi's Victory on Region) - 24th May 2019\",\n            \"slug\": \"think-tank-with-impact-of-modis-victory-on-region-24th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.911Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/iAKwoz3VrVI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151177/think-tank-with-impact-of-modi-s-victory-on-region-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1322,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:01.961Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:01.960Z\",\n            \"updated\": \"2019-07-04T11:49:01.961Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ka Iftaar Dinner) - 19th May 2019\",\n            \"slug\": \"think-tank-opposition-ka-iftaar-dinner-19th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:01.961Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/feI5eyKqVIw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150906/think-tank-opposition-ka-iftaar-dinner-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1323,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.013Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.012Z\",\n            \"updated\": \"2019-07-04T11:49:02.013Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Kia Opposition Tehreek Chalaye Gi) - 18th May 2019\",\n            \"slug\": \"think-tank-kia-opposition-tehreek-chalaye-gi-18th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.013Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/lJ2719wXM9E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150854/think-tank-kia-opposition-tehreek-chalaye-gi-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1324,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.077Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.076Z\",\n            \"updated\": \"2019-07-04T11:49:02.077Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Ghair Yaqeeni Sorat e Haal) - 17th May 2019\",\n            \"slug\": \"think-tank-ghair-yaqeeni-sorat-e-haal-17th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.077Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/cgrtA-mugWo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150797/think-tank-ghair-yaqeeni-sorat-e-haal-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1325,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.112Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.112Z\",\n            \"updated\": \"2019-07-04T11:49:02.112Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Terrorism, National Action Plan?) - 12th May 2019\",\n            \"slug\": \"think-tank-terrorism-national-action-plan-12th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.112Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/6Ff19kFisxg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150482/think-tank-terrorism-national-action-plan-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1326,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.182Z\",\n            \"updated\": \"2019-07-04T11:49:02.201Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Jhoot Ki Siasat, Akhlaqiyat Ka Khatima) - 11th May 2019\",\n            \"slug\": \"think-tank-jhoot-ki-siasat-akhlaqiyat-ka-khatima-11th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.201Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/8qB2k2SZYD8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150426/think-tank-jhoot-ki-siasat-akhlaqiyat-ka-khatima-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1327,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.327Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.291Z\",\n            \"updated\": \"2019-07-04T11:49:02.327Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (IMF Package And Future of Pakistan) - 10th May 2019\",\n            \"slug\": \"think-tank-imf-package-and-future-of-pakistan-10th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.327Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/WHq4DTcqiao\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150364/think-tank-imf-package-and-future-of-pakistan-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1328,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.524Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.524Z\",\n            \"updated\": \"2019-07-04T11:49:02.524Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank  (New Local Body System, Other Issues) - 5th May 2019\",\n            \"slug\": \"think-tank-new-local-body-system-other-issues-5th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.524Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/h1QgVez3NmI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150039/think-tank-new-local-body-system-other-issues-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1329,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.675Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.674Z\",\n            \"updated\": \"2019-07-04T11:49:02.691Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Petrol Ki Qeemat Mein Izafa) - 4th May 2019\",\n            \"slug\": \"think-tank-petrol-ki-qeemat-mein-izafa-4th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.691Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/pju-SRcbk4M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149972/think-tank-petrol-ki-qeemat-mein-izafa-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1330,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.843Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.842Z\",\n            \"updated\": \"2019-07-04T11:49:02.843Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nawaz Sharif's Bail Extension Plea Rejected) - 3rd May 2019\",\n            \"slug\": \"think-tank-nawaz-sharifs-bail-extension-plea-rejected-3rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.843Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/wPd9PI725h0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149913/think-tank-nawaz-sharif-s-bail-extension-plea-rejected-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1331,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:02.950Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:02.950Z\",\n            \"updated\": \"2019-07-04T11:49:02.950Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (MQM Ne Naya Naara Laga Dia) - 28th April 2019\",\n            \"slug\": \"think-tank-mqm-ne-naya-naara-laga-dia-28th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:02.950Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/oJ0OhRCXWys\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149579/think-tank-mqm-ne-naya-naara-laga-dia-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1332,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.097Z\",\n            \"updated\": \"2019-07-04T11:49:03.098Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nizam Zarori Ya Kaam?) - 27th April 2019\",\n            \"slug\": \"think-tank-nizam-zarori-ya-kaam-27th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:03.098Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149525/think-tank-nizam-zarori-ya-kaam-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1333,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.174Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.174Z\",\n            \"updated\": \"2019-07-04T11:49:03.175Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nawaz Sharif London Jaane Ke Liye Baitab) - 26th April 2019\",\n            \"slug\": \"think-tank-nawaz-sharif-london-jaane-ke-liye-baitab-26th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:03.175Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149480/think-tank-nawaz-sharif-london-jaane-ke-liye-baitab-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1334,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.285Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.284Z\",\n            \"updated\": \"2019-07-04T11:49:03.285Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Can Chaudhry Nisar Be CM Punjab?) - 21st April 2019\",\n            \"slug\": \"think-tank-can-chaudhry-nisar-be-cm-punjab-21st-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:03.285Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149171/think-tank-can-chaudhry-nisar-be-cm-punjab-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1335,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.471Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.470Z\",\n            \"updated\": \"2019-07-04T11:49:03.471Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Meeting in Bani Gala, PTI Policies) - 20th April 2019\",\n            \"slug\": \"think-tank-meeting-in-bani-gala-pti-policies-20th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:03.471Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149121/think-tank-meeting-in-bani-gala-pti-policies-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1336,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.556Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.556Z\",\n            \"updated\": \"2019-07-04T11:49:03.556Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With Syeda Ayesha Naaz (Changes in PTI Cabinet) - 19 April 2019\",\n            \"slug\": \"think-tank-with-syeda-ayesha-naaz-changes-in-pti-cabinet-19-april-2019\",\n            \"publish_date\": \"2019-07-04T11:49:03.556Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149065/think-tank-with-syeda-ayesha-naaz-changes-in-pti-cabinet-19-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1337,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.635Z\",\n            \"updated\": \"2019-07-04T11:49:03.635Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Trump Is Worried Because of Me, American Think Tanks Are Translating My Speeches - Khadim Rizvi\",\n            \"slug\": \"trump-is-worried-because-of-me-american-think-tanks-are-translating-my-speeches-khadim-rizvi\",\n            \"publish_date\": \"2019-07-04T11:49:03.635Z\",\n            \"target_date\": \"2018-03-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6gh88f\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/125191/trump-is-worried-because-of-me-american-think-tanks-are-translating-my-speeches-khadim-rizvi\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1338,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.693Z\",\n            \"updated\": \"2019-07-04T11:49:03.693Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Why Electables Joining PTI) - 18th June 2017\",\n            \"slug\": \"think-tank-why-electables-joining-pti-18th-june-2017\",\n            \"publish_date\": \"2019-07-04T11:49:03.693Z\",\n            \"target_date\": \"2017-06-19\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5r3hip\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107853/think-tank-why-electables-joining-pti-18th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1339,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.728Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.727Z\",\n            \"updated\": \"2019-07-04T11:49:03.728Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Panama JIT Mein Shahbaz Sharif Ki Paishi) - 17th June 2017\",\n            \"slug\": \"think-tank-panama-jit-mein-shahbaz-sharif-ki-paishi-17th-june-2017\",\n            \"publish_date\": \"2019-07-04T11:49:03.728Z\",\n            \"target_date\": \"2017-06-17\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5qzbp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107800/think-tank-panama-jit-mein-shahbaz-sharif-ki-paishi-17th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1340,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.780Z\",\n            \"updated\": \"2019-07-04T11:49:03.780Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (JIT Mein Wazir e Azam Ki Paishi) - 16th June 2017\",\n            \"slug\": \"think-tank-jit-mein-wazir-e-azam-ki-paishi-16th-june-2017\",\n            \"publish_date\": \"2019-07-04T11:49:03.780Z\",\n            \"target_date\": \"2017-06-16\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5qsvwf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107737/think-tank-jit-mein-wazir-e-azam-ki-paishi-16th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1341,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.819Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.812Z\",\n            \"updated\": \"2019-07-04T11:49:03.827Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Alami Ittehad Aur Pakistan) - 11th June 2017\",\n            \"slug\": \"think-tank-alami-ittehad-aur-pakistan-11th-june-2017\",\n            \"publish_date\": \"2019-07-04T11:49:03.827Z\",\n            \"target_date\": \"2017-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x5q1q7k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107474/think-tank-alami-ittehad-aur-pakistan-11th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1342,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.870Z\",\n            \"updated\": \"2019-07-04T11:49:03.870Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Panama Case JIT & Other Issues) - 10th June 2017\",\n            \"slug\": \"think-tank-panama-case-jit-other-issues-10th-june-2017\",\n            \"publish_date\": \"2019-07-04T11:49:03.870Z\",\n            \"target_date\": \"2017-06-10\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5pxej8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107434/think-tank-panama-case-jit-other-issues-10th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1343,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:49:03.910Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:49:03.910Z\",\n            \"updated\": \"2019-07-04T11:49:03.910Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 17,\n                \"feed_id\": 22,\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Hassan Aur Hussain Nawaz Ki JIT Ke Samne Paishi) - 9th June 2017\",\n            \"slug\": \"think-tank-hassan-aur-hussain-nawaz-ki-jit-ke-samne-paishi-9th-june-2017\",\n            \"publish_date\": \"2019-07-04T11:49:03.910Z\",\n            \"target_date\": \"2017-06-09\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5pslcs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107382/think-tank-hassan-aur-hussain-nawaz-ki-jit-ke-samne-paishi-9th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1344,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:53.405Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:53.392Z\",\n            \"updated\": \"2019-07-04T11:55:53.405Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Cracks in PMLN) \\u2013 30th June 2019\",\n            \"slug\": \"to-the-point-cracks-in-pmln-30th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:55:53.405Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/Z_UEl20TldE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153251/to-the-point-cracks-in-pmln-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1345,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.104Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.103Z\",\n            \"updated\": \"2019-07-04T11:55:55.104Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Opposition Failed To Reject Budget) \\u2013 29th June 2019\",\n            \"slug\": \"to-the-point-opposition-failed-to-reject-budget-29th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.104Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/NrwnJR-dj2M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153194/to-the-point-opposition-failed-to-reject-budget-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1346,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.166Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.165Z\",\n            \"updated\": \"2019-07-04T11:55:55.166Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Parliament Mein Selected Ki Gonj) \\u2013 28th June 2019\",\n            \"slug\": \"to-the-point-parliament-mein-selected-ki-gonj-28th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.166Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/HGk7hsqNSEg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153122/to-the-point-parliament-mein-selected-ki-gonj-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1347,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.214Z\",\n            \"updated\": \"2019-07-04T11:55:55.214Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Maryam Nawaz Exclusive Interview) \\u2013 22nd June 2019\",\n            \"slug\": \"to-the-point-maryam-nawaz-exclusive-interview-22nd-june-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.214Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/JJiEauEy0-w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/152721/to-the-point-maryam-nawaz-exclusive-interview-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1348,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.284Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.284Z\",\n            \"updated\": \"2019-07-04T11:55:55.284Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Imran Khan Ka Aik Ke Baad Aik Bara Elan) \\u2013 21st June 2019\",\n            \"slug\": \"to-the-point-imran-khan-ka-aik-ke-baad-aik-bara-elan-21st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.284Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/jCfM9mafdlg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/152655/to-the-point-imran-khan-ka-aik-ke-baad-aik-bara-elan-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1349,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.315Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.315Z\",\n            \"updated\": \"2019-07-04T11:55:55.315Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Father's Day Per Abbu Bachao Muhim) - 16th June 2019\",\n            \"slug\": \"to-the-point-fathers-day-per-abbu-bachao-muhim-16th-june-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.315Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/keeT30zLBm4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/152348/to-the-point-father-s-day-per-abbu-bachao-muhim-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1350,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.378Z\",\n            \"updated\": \"2019-07-04T11:55:55.378Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (PTI Ki Androni Larayian) \\u2013 2nd May 2019\",\n            \"slug\": \"to-the-point-pti-ki-androni-larayian-2nd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.378Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/vdY-YuJ2EDc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151656/to-the-point-pti-ki-androni-larayian-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1351,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.465Z\",\n            \"updated\": \"2019-07-04T11:55:55.465Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Fawad Chaudhry's Statement) - 1st June 2019\",\n            \"slug\": \"to-the-point-fawad-chaudhrys-statement-1st-june-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.465Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/Kt8AcSSSIjc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151616/to-the-point-fawad-chaudhry-s-statement-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1352,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.561Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.561Z\",\n            \"updated\": \"2019-07-04T11:55:55.561Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Discussion on Current Issues) \\u2013 31st May 2019\",\n            \"slug\": \"to-the-point-discussion-on-current-issues-31st-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.562Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/Zr8uCYaeHe0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151561/to-the-point-discussion-on-current-issues-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1353,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.678Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.678Z\",\n            \"updated\": \"2019-07-04T11:55:55.678Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Chairman NAB Scandal) \\u2013 26th May 2019\",\n            \"slug\": \"to-the-point-chairman-nab-scandal-26th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.678Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/lfDJLojxtb8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151299/to-the-point-chairman-nab-scandal-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1354,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:55.790Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.790Z\",\n            \"updated\": \"2019-07-04T11:55:55.790Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Chairman NAB Under Pressure)  \\u2013 25th May 2019\",\n            \"slug\": \"to-the-point-chairman-nab-under-pressure-25th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:55.790Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/otNGJgcIOiM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151243/to-the-point-chairman-nab-under-pressure-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1355,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:55.994Z\",\n            \"updated\": \"2019-07-04T11:55:56.010Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Meray Kaptan Ki Kamyabian) \\u2013 18th May 2019\",\n            \"slug\": \"to-the-point-meray-kaptan-ki-kamyabian-18th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.010Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/bvUJlo8XaxU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150865/to-the-point-meray-kaptan-ki-kamyabian-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1356,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.148Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.148Z\",\n            \"updated\": \"2019-07-04T11:55:56.148Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Dollar Rate Mein Phir Izafa) \\u2013 17th May 2019\",\n            \"slug\": \"to-the-point-dollar-rate-mein-phir-izafa-17th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.148Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/YFQVmiuQX14\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150808/to-the-point-dollar-rate-mein-phir-izafa-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1357,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.267Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.249Z\",\n            \"updated\": \"2019-07-04T11:55:56.267Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (No More Subsidy on Metro Bus) \\u2013 12th May 2019\",\n            \"slug\": \"to-the-point-no-more-subsidy-on-metro-bus-12th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.267Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/MrC4KJRh0c0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150498/to-the-point-no-more-subsidy-on-metro-bus-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1358,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.363Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.354Z\",\n            \"updated\": \"2019-07-04T11:55:56.363Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Can Opposition Run Movement Against Govt) \\u2013 11th May 2019\",\n            \"slug\": \"to-the-point-can-opposition-run-movement-against-govt-11th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.363Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/2boeAD_rh88\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150432/to-the-point-can-opposition-run-movement-against-govt-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1359,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.499Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.498Z\",\n            \"updated\": \"2019-07-04T11:55:56.499Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (PTI Govt Policies & Opposition Criticism) \\u2013 10th May 2019\",\n            \"slug\": \"to-the-point-pti-govt-policies-opposition-criticism-10th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.499Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/mzCr1m75uFs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150377/to-the-point-pti-govt-policies-opposition-criticism-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1360,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.566Z\",\n            \"updated\": \"2019-07-04T11:55:56.577Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Meray Kaptaan Theek Kahtay Thay) \\u2013 5th May 2019\",\n            \"slug\": \"to-the-point-meray-kaptaan-theek-kahtay-thay-5th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.577Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/Hj_nH56hXBs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150049/to-the-point-meray-kaptaan-theek-kahtay-thay-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1361,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.609Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.608Z\",\n            \"updated\": \"2019-07-04T11:55:56.609Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Why Changes in PMLN) \\u2013 4th May 2019\",\n            \"slug\": \"to-the-point-why-changes-in-pmln-4th-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.609Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/OILuwCgaseM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149984/to-the-point-why-changes-in-pmln-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1362,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.686Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.686Z\",\n            \"updated\": \"2019-07-04T11:55:56.686Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Future of Shahbaz Sharif & Nawaz Sharif) \\u2013 3rd May 2019\",\n            \"slug\": \"to-the-point-future-of-shahbaz-sharif-nawaz-sharif-3rd-may-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.686Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/dFS_iq6Wf-U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149932/to-the-point-future-of-shahbaz-sharif-nawaz-sharif-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1363,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.734Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.722Z\",\n            \"updated\": \"2019-07-04T11:55:56.735Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Hamid Khan Exclusive Interview) \\u2013 28th April 2019\",\n            \"slug\": \"to-the-point-hamid-khan-exclusive-interview-28th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.735Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/WAAgnKqK3IU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149595/to-the-point-hamid-khan-exclusive-interview-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1364,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.780Z\",\n            \"updated\": \"2019-07-04T11:55:56.780Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Agar Mere Kaptaan Nakam Ho Gaye Tu?) - 27th April 2019\",\n            \"slug\": \"to-the-point-agar-mere-kaptaan-nakam-ho-gaye-tu-27th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.780Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"https://www.youtube.com/watch/aCJB-86nol8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149545/to-the-point-agar-mere-kaptaan-nakam-ho-gaye-tu-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1365,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.825Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.825Z\",\n            \"updated\": \"2019-07-04T11:55:56.825Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Mere Kaptan Ki Team) \\u2013 26th April 2019\",\n            \"slug\": \"to-the-point-mere-kaptan-ki-team-26th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.825Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/aAum7dhkTKE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149485/to-the-point-mere-kaptan-ki-team-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1366,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.924Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.924Z\",\n            \"updated\": \"2019-07-04T11:55:56.924Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Chaudhry Sarwar Exclusive Interview) \\u2013 21st April 2019\",\n            \"slug\": \"to-the-point-chaudhry-sarwar-exclusive-interview-21st-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.924Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"https://www.youtube.com/watch/yMBLnGssq2c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149194/to-the-point-chaudhry-sarwar-exclusive-interview-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1367,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:56.985Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:56.985Z\",\n            \"updated\": \"2019-07-04T11:55:56.985Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Aap Nay Ghabrana Nahi Hai) \\u2013 20th April 2019\",\n            \"slug\": \"to-the-point-aap-nay-ghabrana-nahi-hai-20th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:56.985Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"https://www.youtube.com/watch/j1fzKUt3kcA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149138/to-the-point-aap-nay-ghabrana-nahi-hai-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1368,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.022Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.022Z\",\n            \"updated\": \"2019-07-04T11:55:57.022Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Who Want to Demolish PTI Govt) \\u2013 19th April 2019\",\n            \"slug\": \"to-the-point-who-want-to-demolish-pti-govt-19th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.022Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"https://www.youtube.com/watch/9IL7NLPh0K4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149083/to-the-point-who-want-to-demolish-pti-govt-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1369,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.086Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.085Z\",\n            \"updated\": \"2019-07-04T11:55:57.086Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Punjab Ke 2 Chaudhry, Aamne Saamne) \\u2013 14th April 2019\",\n            \"slug\": \"to-the-point-punjab-ke-2-chaudhry-aamne-saamne-14th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.086Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/w-HWT2mveiM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148791/to-the-point-punjab-ke-2-chaudhry-aamne-saamne-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1370,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.134Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.134Z\",\n            \"updated\": \"2019-07-04T11:55:57.134Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Shahbaz Sharif's Family Summoned By NAB) \\u2013 13th April 2019\",\n            \"slug\": \"to-the-point-shahbaz-sharifs-family-summoned-by-nab-13th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.134Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"https://www.youtube.com/watch/yEO9DcuEe6s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148742/to-the-point-shahbaz-sharif-s-family-summoned-by-nab-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1371,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.179Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.178Z\",\n            \"updated\": \"2019-07-04T11:55:57.179Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Why Peshawar Metro Not Being Completed?) \\u2013 12th April 2019\",\n            \"slug\": \"to-the-point-why-peshawar-metro-not-being-completed-12th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.179Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"https://www.youtube.com/watch/iqFsIIGp-oE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148695/to-the-point-why-peshawar-metro-not-being-completed-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1372,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.210Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.209Z\",\n            \"updated\": \"2019-07-04T11:55:57.210Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Tabdeeli Ke Alambardar Tauba Per Majboor) \\u2013 7th April 2019\",\n            \"slug\": \"to-the-point-tabdeeli-ke-alambardar-tauba-per-majboor-7th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.210Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"https://www.youtube.com/watch/OudNMKvof2Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148418/to-the-point-tabdeeli-ke-alambardar-tauba-per-majboor-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1373,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.290Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.290Z\",\n            \"updated\": \"2019-07-04T11:55:57.290Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Accountability of Two Types) \\u2013 5th April 2019\",\n            \"slug\": \"to-the-point-accountability-of-two-types-5th-april-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.290Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"https://www.youtube.com/watch/CTLBp76UO3o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148327/to-the-point-accountability-of-two-types-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1374,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.330Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.330Z\",\n            \"updated\": \"2019-07-04T11:55:57.330Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Benazir Income Support Program) \\u2013 31st March 2019\",\n            \"slug\": \"to-the-point-benazir-income-support-program-31st-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.330Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"https://www.youtube.com/watch/2HhLHI5Hhyg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148059/to-the-point-benazir-income-support-program-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1375,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.383Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.382Z\",\n            \"updated\": \"2019-07-04T11:55:57.383Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Federal Govt Bankrupt?) \\u2013 30th March 2019\",\n            \"slug\": \"to-the-point-federal-govt-bankrupt-30th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.383Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"https://www.youtube.com/watch/QQrN7k4ul0M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148005/to-the-point-federal-govt-bankrupt-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1376,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.433Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.432Z\",\n            \"updated\": \"2019-07-04T11:55:57.433Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Imran Khan's Poverty Elimination Program) \\u2013 29th March 2019\",\n            \"slug\": \"to-the-point-imran-khans-poverty-elimination-program-29th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.433Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"https://www.youtube.com/watch/35q6K8Acor0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147948/to-the-point-imran-khan-s-poverty-elimination-program-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1377,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.699Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.698Z\",\n            \"updated\": \"2019-07-04T11:55:57.699Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (What's Bilawal's Ideology) \\u2013 24th March 2019\",\n            \"slug\": \"to-the-point-whats-bilawals-ideology-24th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.699Z\",\n            \"target_date\": \"2019-03-24\",\n            \"text\": \"https://www.youtube.com/watch/W079bgIKcYE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147629/to-the-point-what-s-bilawal-s-ideology-24th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1378,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.875Z\",\n            \"updated\": \"2019-07-04T11:55:57.876Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Challenges For Medical Students) \\u2013 23rd March 2019\",\n            \"slug\": \"to-the-point-challenges-for-medical-students-23rd-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.876Z\",\n            \"target_date\": \"2019-03-23\",\n            \"text\": \"https://www.youtube.com/watch/iYoYs_r2cNE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147584/to-the-point-challenges-for-medical-students-23rd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1379,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:57.954Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:57.954Z\",\n            \"updated\": \"2019-07-04T11:55:57.954Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Peshawar Metro Ka Kia Bana) \\u2013 22nd March 2019\",\n            \"slug\": \"to-the-point-peshawar-metro-ka-kia-bana-22nd-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:57.954Z\",\n            \"target_date\": \"2019-03-22\",\n            \"text\": \"https://www.youtube.com/watch/LwJ0nuU2jGY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147522/to-the-point-peshawar-metro-ka-kia-bana-22nd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1380,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:58.025Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:58.024Z\",\n            \"updated\": \"2019-07-04T11:55:58.025Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Nawaz Sharif's Treatment Issue) \\u2013 17th March 2019\",\n            \"slug\": \"to-the-point-nawaz-sharifs-treatment-issue-17th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:58.041Z\",\n            \"target_date\": \"2019-03-17\",\n            \"text\": \"https://www.youtube.com/watch/lpAsHIredbw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147241/to-the-point-nawaz-sharif-s-treatment-issue-17th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1381,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:58.140Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:58.140Z\",\n            \"updated\": \"2019-07-04T11:55:58.140Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (New Pakistan Vs Old Pakistan) \\u2013 16th March 2019\",\n            \"slug\": \"to-the-point-new-pakistan-vs-old-pakistan-16th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:58.140Z\",\n            \"target_date\": \"2019-03-16\",\n            \"text\": \"https://www.youtube.com/watch/j1gfG8YbmnQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147198/to-the-point-new-pakistan-vs-old-pakistan-16th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1382,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:58.355Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:58.308Z\",\n            \"updated\": \"2019-07-04T11:55:58.355Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Opposition Se Hath Nahi Milayon Ga - Imran Khan) \\u2013 15th March 2019\",\n            \"slug\": \"to-the-point-opposition-se-hath-nahi-milayon-ga-imran-khan-15th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:58.355Z\",\n            \"target_date\": \"2019-03-15\",\n            \"text\": \"https://www.youtube.com/watch/xhf2VBIQSEg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147153/to-the-point-opposition-se-hath-nahi-milayon-ga-imran-khan-15th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1383,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T11:55:58.588Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:55:58.588Z\",\n            \"updated\": \"2019-07-04T11:55:58.589Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 22,\n                \"feed_id\": 27,\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Aurat March Mein Kia Ho Raha Hai) \\u2013 10th March 2019\",\n            \"slug\": \"to-the-point-aurat-march-mein-kia-ho-raha-hai-10th-march-2019\",\n            \"publish_date\": \"2019-07-04T11:55:58.589Z\",\n            \"target_date\": \"2019-03-10\",\n            \"text\": \"https://www.youtube.com/watch/I0w_5ELeFd0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/146859/to-the-point-aurat-march-mein-kia-ho-raha-hai-10th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1464,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:39.640Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:39.640Z\",\n            \"updated\": \"2019-07-05T10:15:39.640Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 23,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Charges on Rana Sanaullah) \\u2013 4th July 2019\",\n            \"slug\": \"zara-hut-kay-charges-on-rana-sanaullah-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:39.640Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cix07\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153553/zara-hut-kay-charges-on-rana-sanaullah-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1465,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:43.437Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:43.437Z\",\n            \"updated\": \"2019-07-05T10:15:43.437Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 23,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Thatha Needs Water) \\u2013 3rd July 2019\",\n            \"slug\": \"zara-hut-kay-thatha-needs-water-3rd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:43.437Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cg34h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153474/zara-hut-kay-thatha-needs-water-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1504,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:44.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:44.042Z\",\n            \"updated\": \"2019-07-05T10:15:44.050Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 25,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Rook Saku Tu Rook Lo) - 4th July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-rook-saku-tu-rook-lo-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:44.050Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/5ni2vJwrEdw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153517/live-with-dr-shahid-masood-rook-saku-tu-rook-lo-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1505,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:44.139Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:44.138Z\",\n            \"updated\": \"2019-07-05T10:15:44.139Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 25,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Benami Aur Badnami) - 3rd July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-benami-aur-badnami-3rd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:44.139Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/FOaXXdi-8TE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153435/live-with-dr-shahid-masood-benami-aur-badnami-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1544,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:45.550Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:45.550Z\",\n            \"updated\": \"2019-07-05T10:15:45.550Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 26,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Awam Tax Dene Ke Liye Tayyar Hain?) \\u2013 4th July 2019\",\n            \"slug\": \"muqabil-kia-awam-tax-dene-ke-liye-tayyar-hain-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:45.550Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ciunv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153538/muqabil-kia-awam-tax-dene-ke-liye-tayyar-hain-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1545,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:45.576Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:45.576Z\",\n            \"updated\": \"2019-07-05T10:15:45.576Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 26,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Action Against Benami Assets, Political Issues) \\u2013 3rd July 2019\",\n            \"slug\": \"muqabil-action-against-benami-assets-political-issues-3rd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:45.576Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfzg0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153457/muqabil-action-against-benami-assets-political-issues-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1580,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:46.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:46.344Z\",\n            \"updated\": \"2019-07-05T10:15:46.344Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 27,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Benami Assets Being Confiscated) \\u2013 3rd July 2019\",\n            \"slug\": \"off-the-record-benami-assets-being-confiscated-3rd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:46.344Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfsjj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153451/off-the-record-benami-assets-being-confiscated-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1620,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:46.896Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:46.892Z\",\n            \"updated\": \"2019-07-05T10:15:46.896Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 28,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Amnesty Scheme, Other Issues) - 4th July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-amnesty-scheme-other-issues-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:46.896Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/fjb1JZe9w-w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153545/dunya-kamran-khan-kay-sath-amnesty-scheme-other-issues-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1621,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:46.922Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:46.922Z\",\n            \"updated\": \"2019-07-05T10:15:46.922Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 28,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Hospitals Band Gali Mein) - 3rd July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-hospitals-band-gali-mein-3rd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:46.922Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/PkXZrpe3JUY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153479/dunya-kamran-khan-kay-sath-sindh-hospitals-band-gali-mein-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1660,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:47.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:47.480Z\",\n            \"updated\": \"2019-07-05T10:15:47.480Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 29,\n                \"feed_id\": 12,\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Ministers Fight in Federal Cabinet Meeting) \\u2013 4th July 2019\",\n            \"slug\": \"aap-kay-muqabil-ministers-fight-in-federal-cabinet-meeting-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:47.480Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/yhwI9xEcuw8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153539/aap-kay-muqabil-ministers-fight-in-federal-cabinet-meeting-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1716,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:48.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:48.635Z\",\n            \"updated\": \"2019-07-05T10:15:48.635Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 31,\n                \"feed_id\": 14,\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (FBR Actions, Power Projects) - 4th July 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-fbr-actions-power-projects-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:48.635Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/Rpx0a7x3sOc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153548/aaj-shahzeb-khanzada-kay-sath-fbr-actions-power-projects-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1836,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.672Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.672Z\",\n            \"updated\": \"2019-07-05T10:15:50.672Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Dollar Ki Parwaz) \\u2013 30th June 2019\",\n            \"slug\": \"nasim-zehra-800-dollar-ki-parwaz-30th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.672Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/FhSJw0GuElc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/153246/nasim-zehra-8-00-dollar-ki-parwaz-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1837,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.710Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.710Z\",\n            \"updated\": \"2019-07-05T10:15:50.710Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Cricket World Cup 2019) \\u2013 23rd June 2019\",\n            \"slug\": \"nasim-zehra-800-cricket-world-cup-2019-23rd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.710Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/km0ZijNJKjQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152785/nasim-zehra-8-00-cricket-world-cup-2019-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1838,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.772Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.772Z\",\n            \"updated\": \"2019-07-05T10:15:50.772Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Opposition's Policy Against Govt) \\u2013 22nd June 2019\",\n            \"slug\": \"nasim-zehra-800-oppositions-policy-against-govt-22nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.772Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/DoGfCcmpkh0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152732/nasim-zehra-8-00-opposition-s-policy-against-govt-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1839,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.804Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.804Z\",\n            \"updated\": \"2019-07-05T10:15:50.804Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Abdul Razak Dawood Exclusive Interview) \\u2013 21st June 2019\",\n            \"slug\": \"nasim-zehra-800-abdul-razak-dawood-exclusive-interview-21st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.805Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/-3yg7d2PmAU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152658/nasim-zehra-8-00-abdul-razak-dawood-exclusive-interview-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1840,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.853Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.853Z\",\n            \"updated\": \"2019-07-05T10:15:50.853Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Dollar Rate Increasing) \\u2013 15th June 2019\",\n            \"slug\": \"nasim-zehra-800-dollar-rate-increasing-15th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.853Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/WodKzhzyjDc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152306/nasim-zehra-8-00-dollar-rate-increasing-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1841,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.883Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.883Z\",\n            \"updated\": \"2019-07-05T10:15:50.883Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Lawyers Movement?) \\u2013 14th June 2019\",\n            \"slug\": \"nasim-zehra-800-lawyers-movement-14th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.883Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/gLvIfSSk4T4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152254/nasim-zehra-8-00-lawyers-movement-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1842,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.913Z\",\n            \"updated\": \"2019-07-05T10:15:50.914Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Budget Kaisa Hoga?) \\u2013 9th June 2019\",\n            \"slug\": \"nasim-zehra-800-budget-kaisa-hoga-9th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.914Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/rS0JobfbLKY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151944/nasim-zehra-8-00-budget-kaisa-hoga-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1843,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.980Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:50.979Z\",\n            \"updated\": \"2019-07-05T10:15:50.980Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Eid Special With Shireen Mazari) \\u2013 7th June 2019\",\n            \"slug\": \"nasim-zehra-800-eid-special-with-shireen-mazari-7th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:50.980Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/wf44DB2lrJc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151843/nasim-zehra-8-00-eid-special-with-shireen-mazari-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1844,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.067Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.066Z\",\n            \"updated\": \"2019-07-05T10:15:51.067Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Ramzan Ki Barkatein) \\u2013 2nd June 2019\",\n            \"slug\": \"nasim-zehra-800-ramzan-ki-barkatein-2nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.067Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/wpXhhKln56Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151653/nasim-zehra-8-00-ramzan-ki-barkatein-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1845,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.124Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.124Z\",\n            \"updated\": \"2019-07-05T10:15:51.124Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (PTM Attack on Army Check Post) \\u2013 26th May 2019\",\n            \"slug\": \"nasim-zehra-800-ptm-attack-on-army-check-post-26th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.124Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/QJkg-XOqa64\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151301/nasim-zehra-8-00-ptm-attack-on-army-check-post-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1846,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.193Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.192Z\",\n            \"updated\": \"2019-07-05T10:15:51.193Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Will Opposition Bring Public on Roads) \\u2013 25th May 2019\",\n            \"slug\": \"nasim-zehra-800-will-opposition-bring-public-on-roads-25th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.193Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/I5N6VdtWaIQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151237/nasim-zehra-8-00-will-opposition-bring-public-on-roads-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1847,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.220Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.220Z\",\n            \"updated\": \"2019-07-05T10:15:51.220Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Kia Qarzon Ka Bojh Kam Hoga) \\u2013 24th May 2019\",\n            \"slug\": \"nasim-zehra-800-kia-qarzon-ka-bojh-kam-hoga-24th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.220Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/fd8GTiw_cNQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151196/nasim-zehra-8-00-kia-qarzon-ka-bojh-kam-hoga-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1848,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.265Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.265Z\",\n            \"updated\": \"2019-07-05T10:15:51.265Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Bilawal Aur Maryam Aik Sath?) \\u2013 18th May 2019\",\n            \"slug\": \"nasim-zehra-800-bilawal-aur-maryam-aik-sath-18th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.265Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/yEDPI29_QRI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150871/nasim-zehra-8-00-bilawal-aur-maryam-aik-sath-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1849,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.290Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.290Z\",\n            \"updated\": \"2019-07-05T10:15:51.290Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Muashi Bohran) \\u2013 17th May 2019\",\n            \"slug\": \"nasim-zehra-800-muashi-bohran-17th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.290Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/Kd62vaHju4Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150799/nasim-zehra-8-00-muashi-bohran-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1850,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.321Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.320Z\",\n            \"updated\": \"2019-07-05T10:15:51.321Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (IMF Deal Done?) \\u2013 12th May 2019\",\n            \"slug\": \"nasim-zehra-800-imf-deal-done-12th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.321Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/9nn0ENQteZY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150502/nasim-zehra-8-00-imf-deal-done-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1851,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.457Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.439Z\",\n            \"updated\": \"2019-07-05T10:15:51.457Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (IMF Package) \\u2013 11th May 2019\",\n            \"slug\": \"nasim-zehra-800-imf-package-11th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.457Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/CWPmiFpzopc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150441/nasim-zehra-8-00-imf-package-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1852,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.554Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.547Z\",\n            \"updated\": \"2019-07-05T10:15:51.554Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Hakumat Ki Muashi Policy) \\u2013 5th May 2019\",\n            \"slug\": \"nasim-zehra-800-hakumat-ki-muashi-policy-5th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.554Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/EOhbGiUv8mk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150046/nasim-zehra-8-00-hakumat-ki-muashi-policy-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1853,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.615Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.614Z\",\n            \"updated\": \"2019-07-05T10:15:51.615Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Bureaucracy Mein Tabdeeliyan) \\u2013 4th May 2019\",\n            \"slug\": \"nasim-zehra-800-bureaucracy-mein-tabdeeliyan-4th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.615Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/pbLwYtZmOaU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149988/nasim-zehra-8-00-bureaucracy-mein-tabdeeliyan-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1854,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.754Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.754Z\",\n            \"updated\": \"2019-07-05T10:15:51.755Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Nawaz Sharif's Bail Plea Rejected) \\u2013 3rd May 2019\",\n            \"slug\": \"nasim-zehra-800-nawaz-sharifs-bail-plea-rejected-3rd-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.755Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/0-rHieguxXA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149922/nasim-zehra-8-00-nawaz-sharif-s-bail-plea-rejected-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1855,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.831Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.830Z\",\n            \"updated\": \"2019-07-05T10:15:51.831Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Shahid Khaqan Abbasi Exclusive) \\u2013 27th April 2019\",\n            \"slug\": \"nasim-zehra-800-shahid-khaqan-abbasi-exclusive-27th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.831Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/30Mcoc2osls\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149578/nasim-zehra-8-00-shahid-khaqan-abbasi-exclusive-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1856,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:51.933Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:51.932Z\",\n            \"updated\": \"2019-07-05T10:15:51.933Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Firdous Ashiq Awan Exclusive) \\u2013 26th April 2019\",\n            \"slug\": \"nasim-zehra-800-firdous-ashiq-awan-exclusive-26th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:51.933Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/1JOupLT0PfQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149484/nasim-zehra-8-00-firdous-ashiq-awan-exclusive-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1857,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.058Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.058Z\",\n            \"updated\": \"2019-07-05T10:15:52.058Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Is Iran Involved in Terrorism) \\u2013 20th April 2019\",\n            \"slug\": \"nasim-zehra-800-is-iran-involved-in-terrorism-20th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.058Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"https://www.youtube.com/watch/NueSNu325DU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149137/nasim-zehra-8-00-is-iran-involved-in-terrorism-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1858,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.157Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.156Z\",\n            \"updated\": \"2019-07-05T10:15:52.157Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Changes in PTI Cabinet) \\u2013 19th April 2019\",\n            \"slug\": \"nasim-zehra-800-changes-in-pti-cabinet-19th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.157Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"https://www.youtube.com/watch/UJ0JPVzk84I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149077/nasim-zehra-8-00-changes-in-pti-cabinet-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1859,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.315Z\",\n            \"updated\": \"2019-07-05T10:15:52.316Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Shahbaz Sharif's Family in Trouble) \\u2013 14th April 2019\",\n            \"slug\": \"nasim-zehra-800-shahbaz-sharifs-family-in-trouble-14th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.316Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/_-bo5gHRANM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148780/nasim-zehra-8-00-shahbaz-sharif-s-family-in-trouble-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1860,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.562Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.561Z\",\n            \"updated\": \"2019-07-05T10:15:52.562Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Opposition NAB Se Tang) \\u2013 13th April 2019\",\n            \"slug\": \"nasim-zehra-800-opposition-nab-se-tang-13th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.562Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"https://www.youtube.com/watch/h64yfRpsp9g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148736/nasim-zehra-8-00-opposition-nab-se-tang-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1861,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.674Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.673Z\",\n            \"updated\": \"2019-07-05T10:15:52.674Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Pakistan's Economy in Danger) \\u2013 7th April 2019\",\n            \"slug\": \"nasim-zehra-800-pakistans-economy-in-danger-7th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.674Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"https://www.youtube.com/watch/50oruY1vkwk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148415/nasim-zehra-8-00-pakistan-s-economy-in-danger-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1862,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.762Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.762Z\",\n            \"updated\": \"2019-07-05T10:15:52.762Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Hamza Shahbaz Vs NAB) \\u2013 6th April 2019\",\n            \"slug\": \"nasim-zehra-800-hamza-shahbaz-vs-nab-6th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.762Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"https://www.youtube.com/watch/t-OgDxhHNYw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148383/nasim-zehra-8-00-hamza-shahbaz-vs-nab-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1863,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.810Z\",\n            \"updated\": \"2019-07-05T10:15:52.810Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Dollar Ki Parwaz Kaise Ruke Gi?) \\u2013 5th April 2019\",\n            \"slug\": \"nasim-zehra-800-dollar-ki-parwaz-kaise-ruke-gi-5th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.810Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"https://www.youtube.com/watch/dbgCFZMjEM8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148311/nasim-zehra-8-00-dollar-ki-parwaz-kaise-ruke-gi-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1864,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.887Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.887Z\",\n            \"updated\": \"2019-07-05T10:15:52.887Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Shahid Khaqan Abbasi Exclusive) \\u2013 31st March 2019\",\n            \"slug\": \"nasim-zehra-800-shahid-khaqan-abbasi-exclusive-31st-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.887Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"https://www.youtube.com/watch/QZmS3A46n2s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148050/nasim-zehra-8-00-shahid-khaqan-abbasi-exclusive-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1865,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.920Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.919Z\",\n            \"updated\": \"2019-07-05T10:15:52.920Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Another Amnesty Scheme) \\u2013 30th March 2019\",\n            \"slug\": \"nasim-zehra-800-another-amnesty-scheme-30th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.920Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"https://www.youtube.com/watch/s1zm7XMwNZU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147998/nasim-zehra-8-00-another-amnesty-scheme-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1866,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:52.966Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:52.966Z\",\n            \"updated\": \"2019-07-05T10:15:52.967Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (NAB Ka Bara Case) \\u2013 29th March 2019\",\n            \"slug\": \"nasim-zehra-800-nab-ka-bara-case-29th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:52.967Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"https://www.youtube.com/watch/OpA6ARpXAik\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147944/nasim-zehra-8-00-nab-ka-bara-case-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1867,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.001Z\",\n            \"updated\": \"2019-07-05T10:15:53.007Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Pakistan Day Special) \\u2013 23rd March 2019\",\n            \"slug\": \"nasim-zehra-800-pakistan-day-special-23rd-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.007Z\",\n            \"target_date\": \"2019-03-23\",\n            \"text\": \"https://www.youtube.com/watch/902eJYhHq9s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147566/nasim-zehra-8-00-pakistan-day-special-23rd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1868,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.040Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.040Z\",\n            \"updated\": \"2019-07-05T10:15:53.040Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Changes in NAB Law?) \\u2013 22nd March 2019\",\n            \"slug\": \"nasim-zehra-800-changes-in-nab-law-22nd-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.040Z\",\n            \"target_date\": \"2019-03-22\",\n            \"text\": \"https://www.youtube.com/watch/17ZgP6amWgQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147518/nasim-zehra-8-00-changes-in-nab-law-22nd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1869,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.094Z\",\n            \"updated\": \"2019-07-05T10:15:53.098Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Fake Bank Accounts Case) \\u2013 15th March 2019\",\n            \"slug\": \"nasim-zehra-800-fake-bank-accounts-case-15th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.098Z\",\n            \"target_date\": \"2019-03-15\",\n            \"text\": \"https://www.youtube.com/watch/ZN2CvXjzu-4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147147/nasim-zehra-8-00-fake-bank-accounts-case-15th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1870,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.130Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.130Z\",\n            \"updated\": \"2019-07-05T10:15:53.130Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (PSL Mein Pakistan Ki Kamyabian) \\u2013 9th March 2019\",\n            \"slug\": \"nasim-zehra-800-psl-mein-pakistan-ki-kamyabian-9th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.130Z\",\n            \"target_date\": \"2019-03-10\",\n            \"text\": \"https://www.youtube.com/watch/uRZOXhbjicM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146811/nasim-zehra-8-00-psl-mein-pakistan-ki-kamyabian-9th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1871,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.183Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.183Z\",\n            \"updated\": \"2019-07-05T10:15:53.183Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Action Against Banned Outfits) \\u2013 8th March 2019\",\n            \"slug\": \"nasim-zehra-800-action-against-banned-outfits-8th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.183Z\",\n            \"target_date\": \"2019-03-08\",\n            \"text\": \"https://www.youtube.com/watch/-bAKT_0PY2c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146765/nasim-zehra-8-00-action-against-banned-outfits-8th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1872,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.212Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.212Z\",\n            \"updated\": \"2019-07-05T10:15:53.212Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (OIC Boycott, Was It Correct Decision?) \\u2013 2nd March 2019\",\n            \"slug\": \"nasim-zehra-800-oic-boycott-was-it-correct-decision-2nd-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.212Z\",\n            \"target_date\": \"2019-03-02\",\n            \"text\": \"https://www.youtube.com/watch/6HRPi_ZmeCY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146431/nasim-zehra-8-00-oic-boycott-was-it-correct-decision-2nd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1873,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.268Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.268Z\",\n            \"updated\": \"2019-07-05T10:15:53.268Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8 (Shah Mehmood Qureshi Exclusive Interview) - 1st March 2019\",\n            \"slug\": \"nasim-zehra-8-shah-mehmood-qureshi-exclusive-interview-1st-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.268Z\",\n            \"target_date\": \"2019-03-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x73aa2b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146387/nasim-zehra-8-shah-mehmood-qureshi-exclusive-interview-1st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1874,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.302Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:53.302Z\",\n            \"updated\": \"2019-07-05T10:15:53.303Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 47,\n                \"feed_id\": 30,\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Pak India Tension) \\u2013 24th February 2019\",\n            \"slug\": \"nasim-zehra-800-pak-india-tension-24th-february-2019\",\n            \"publish_date\": \"2019-07-05T10:15:53.303Z\",\n            \"target_date\": \"2019-02-24\",\n            \"text\": \"https://www.youtube.com/watch/QCSU5lVIw0M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146069/nasim-zehra-8-00-pak-india-tension-24th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1875,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:54.122Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:54.122Z\",\n            \"updated\": \"2019-07-05T10:15:54.122Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 34,\n                \"feed_id\": 17,\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Ahtasab, IMF, Economy, Other Issues) - 4th July 2019\",\n            \"slug\": \"bebaak-ahtasab-imf-economy-other-issues-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:54.122Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/wmkj9znlJCU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153546/bebaak-ahtasab-imf-economy-other-issues-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1915,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:54.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:54.882Z\",\n            \"updated\": \"2019-07-05T10:15:54.882Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 35,\n                \"feed_id\": 18,\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Shahbaz Sharif Exclusive Interview) \\u2013 4th July 2019\",\n            \"slug\": \"capital-talk-shahbaz-sharif-exclusive-interview-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:54.882Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/Xbw2yYUSb90\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153526/capital-talk-shahbaz-sharif-exclusive-interview-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1985,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:55.725Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:55.724Z\",\n            \"updated\": \"2019-07-05T10:15:55.725Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Consultancy Contract Mein Arbon Ka Izafa) - 30th June 2019\",\n            \"slug\": \"breaking-point-with-malick-consultancy-contract-mein-arbon-ka-izafa-30th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:55.725Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/YirOdXVo4qQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153224/breaking-point-with-malick-consultancy-contract-mein-arbon-ka-izafa-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1986,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:55.803Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:55.802Z\",\n            \"updated\": \"2019-07-05T10:15:55.803Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (APC Se Kia Nikla?) - 29th June 2019\",\n            \"slug\": \"breaking-point-with-malick-apc-se-kia-nikla-29th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:55.803Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/kJeRZ0Hq1mk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153163/breaking-point-with-malick-apc-se-kia-nikla-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1987,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:55.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:55.919Z\",\n            \"updated\": \"2019-07-05T10:15:55.919Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Army's Seminar on Economy) - 28th June 2019\",\n            \"slug\": \"breaking-point-with-malick-armys-seminar-on-economy-28th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:55.919Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/rDG8alK4fOQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153098/breaking-point-with-malick-army-s-seminar-on-economy-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1988,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.069Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.069Z\",\n            \"updated\": \"2019-07-05T10:15:56.069Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Maryam Nawaz Ki Nayi Tone) - 22nd June 2019\",\n            \"slug\": \"breaking-point-with-malick-maryam-nawaz-ki-nayi-tone-22nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.069Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/mHUKPYl2ns8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152702/breaking-point-with-malick-maryam-nawaz-ki-nayi-tone-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1989,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.234Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.217Z\",\n            \"updated\": \"2019-07-05T10:15:56.234Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Asad Umar Exclusive Interview) - 21st June 2019\",\n            \"slug\": \"breaking-point-with-malick-asad-umar-exclusive-interview-21st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.234Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/Qp3CBST_wwI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152631/breaking-point-with-malick-asad-umar-exclusive-interview-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1990,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.322Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.322Z\",\n            \"updated\": \"2019-07-05T10:15:56.322Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (Pakistan's Economic Condition) - 16th June 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economic-condition-16th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.323Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/jjkSpLCnSNQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152330/breaking-point-with-malick-pakistan-s-economic-condition-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1991,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.381Z\",\n            \"updated\": \"2019-07-05T10:15:56.397Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (PTI Hakumat Ki Policies) - 15th June 2019\",\n            \"slug\": \"breaking-point-with-malick-pti-hakumat-ki-policies-15th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.397Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/Uc9TGiwttNY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152282/breaking-point-with-malick-pti-hakumat-ki-policies-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1992,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.497Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.497Z\",\n            \"updated\": \"2019-07-05T10:15:56.505Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (What Is Going On With Govt) - 14th June 2019\",\n            \"slug\": \"breaking-point-with-malick-what-is-going-on-with-govt-14th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.505Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/3juSYyDH3hQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152224/breaking-point-with-malick-what-is-going-on-with-govt-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1993,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.590Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.584Z\",\n            \"updated\": \"2019-07-05T10:15:56.591Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Challenges For Govt) - 9th June 2019\",\n            \"slug\": \"breaking-point-with-malick-challenges-for-govt-9th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.591Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/mj8MRZCEIjQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151927/breaking-point-with-malick-challenges-for-govt-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1994,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.651Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.650Z\",\n            \"updated\": \"2019-07-05T10:15:56.651Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Kia Judges Muqadas Gaye Hain) - 8th June 2019\",\n            \"slug\": \"breaking-point-with-malick-kia-judges-muqadas-gaye-hain-8th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.651Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/ru9VWigC7TU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151874/breaking-point-with-malick-kia-judges-muqadas-gaye-hain-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1995,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.768Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.750Z\",\n            \"updated\": \"2019-07-05T10:15:56.768Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (How Economy Can Be Improved) - 7th June 2019\",\n            \"slug\": \"breaking-point-with-malick-how-economy-can-be-improved-7th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.768Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/O3y-XEuEJBc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151829/breaking-point-with-malick-how-economy-can-be-improved-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1996,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.894Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.876Z\",\n            \"updated\": \"2019-07-05T10:15:56.894Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Reference Against Judges) - 2nd June 2019\",\n            \"slug\": \"breaking-point-with-malick-reference-against-judges-2nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.894Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/GrmMTGOsD-E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151645/breaking-point-with-malick-reference-against-judges-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1997,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:56.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:56.973Z\",\n            \"updated\": \"2019-07-05T10:15:56.973Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Reference Against Judges) \\u2013 1st June 2019\",\n            \"slug\": \"breaking-point-with-malick-reference-against-judges-1st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:15:56.973Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/rFdF805Q0JA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151601/breaking-point-with-malick-reference-against-judges-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1998,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.020Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.020Z\",\n            \"updated\": \"2019-07-05T10:15:57.020Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Kia Hakumat Chal Paye Gi) - 31st May 2019\",\n            \"slug\": \"breaking-point-with-malick-kia-hakumat-chal-paye-gi-31st-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.020Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/KCLmHbOVG28\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151546/breaking-point-with-malick-kia-hakumat-chal-paye-gi-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 1999,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.049Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.049Z\",\n            \"updated\": \"2019-07-05T10:15:57.049Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan's Economic Situation) - 26th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economic-situation-26th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.049Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/P8oDt_s8rL8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151280/breaking-point-with-malick-pakistan-s-economic-situation-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2000,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.089Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.088Z\",\n            \"updated\": \"2019-07-05T10:15:57.089Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan's Economic Situation) - 25th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economic-situation-25th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.089Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/PO0SMUeOjwc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151227/breaking-point-with-malick-pakistan-s-economic-situation-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2001,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.146Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.145Z\",\n            \"updated\": \"2019-07-05T10:15:57.146Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Chairman NAB Scandal) - 24th May 2019\",\n            \"slug\": \"breaking-point-with-malick-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.146Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/2qoO0jNpDsk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151168/breaking-point-with-malick-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2002,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.216Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.216Z\",\n            \"updated\": \"2019-07-05T10:15:57.216Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Bilawal Maryam Iftar Dinner) - 19th May 2019\",\n            \"slug\": \"breaking-point-with-malick-bilawal-maryam-iftar-dinner-19th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.216Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/O0_51hUVLPM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150902/breaking-point-with-malick-bilawal-maryam-iftar-dinner-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2003,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.282Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.281Z\",\n            \"updated\": \"2019-07-05T10:15:57.282Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Economy, Inflation, FBR) - 18th May 2019\",\n            \"slug\": \"breaking-point-with-malick-economy-inflation-fbr-18th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.282Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/bu2xHQJ7NZA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150848/breaking-point-with-malick-economy-inflation-fbr-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2004,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.333Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.332Z\",\n            \"updated\": \"2019-07-05T10:15:57.333Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Will Govt Complete Its Tenure?) - 17th May 2019\",\n            \"slug\": \"breaking-point-with-malick-will-govt-complete-its-tenure-17th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.333Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/GtlvDclZA4Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150792/breaking-point-with-malick-will-govt-complete-its-tenure-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2005,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.380Z\",\n            \"updated\": \"2019-07-05T10:15:57.380Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (Additional Payments to IPPs) - 12th May 2019\",\n            \"slug\": \"breaking-point-with-malick-additional-payments-to-ipps-12th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.380Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/-XmQZlpG-1c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150474/breaking-point-with-malick-additional-payments-to-ipps-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2006,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.510Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.510Z\",\n            \"updated\": \"2019-07-05T10:15:57.510Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan's Economy, Other Issues) - 11th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economy-other-issues-11th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.510Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/P_MqNsOo-1g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150419/breaking-point-with-malick-pakistan-s-economy-other-issues-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2007,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.566Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.566Z\",\n            \"updated\": \"2019-07-05T10:15:57.566Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (IMF, Economy, Taxes, Other Issues) - 10th May 2019\",\n            \"slug\": \"breaking-point-with-malick-imf-economy-taxes-other-issues-10th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.566Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/Vl8LGKqSYbM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150374/breaking-point-with-malick-imf-economy-taxes-other-issues-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2008,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.615Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.615Z\",\n            \"updated\": \"2019-07-05T10:15:57.615Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan Mein Ho Kia Raha Hai) - 5th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistan-mein-ho-kia-raha-hai-5th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.615Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/C83K2ncKvwE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150032/breaking-point-with-malick-pakistan-mein-ho-kia-raha-hai-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2009,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.663Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.662Z\",\n            \"updated\": \"2019-07-05T10:15:57.663Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan Ka Muashi Bohran) - 4th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistan-ka-muashi-bohran-4th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.663Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/Ph3eMLmu0IY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149966/breaking-point-with-malick-pakistan-ka-muashi-bohran-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2010,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.691Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.691Z\",\n            \"updated\": \"2019-07-05T10:15:57.691Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Sharif Family's Future) - 3rd May 2019\",\n            \"slug\": \"breaking-point-with-malick-sharif-familys-future-3rd-may-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.691Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/Ptc6acGHTLY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149912/breaking-point-with-malick-sharif-family-s-future-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2011,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.717Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.716Z\",\n            \"updated\": \"2019-07-05T10:15:57.717Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (MQM Demands Two Provinces) - 28th April 2019\",\n            \"slug\": \"breaking-point-with-malick-mqm-demands-two-provinces-28th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.717Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/BZMxEVrTkK8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149575/breaking-point-with-malick-mqm-demands-two-provinces-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2012,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.758Z\",\n            \"updated\": \"2019-07-05T10:15:57.758Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Corruption Ki Jang Kaun Jeete Ga) - 27th April 2019\",\n            \"slug\": \"breaking-point-with-malick-corruption-ki-jang-kaun-jeete-ga-27th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.758Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"https://www.youtube.com/watch/SN26wZMKobo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149517/breaking-point-with-malick-corruption-ki-jang-kaun-jeete-ga-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2013,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.785Z\",\n            \"updated\": \"2019-07-05T10:15:57.786Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Nawaz Sharif, Zardari, Other Issues) - 26th April 2019\",\n            \"slug\": \"breaking-point-with-malick-nawaz-sharif-zardari-other-issues-26th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.786Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/8Rzhw2mmXz4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149482/breaking-point-with-malick-nawaz-sharif-zardari-other-issues-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2014,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.814Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.814Z\",\n            \"updated\": \"2019-07-05T10:15:57.814Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (Wukla Gardi Phir Urooj Per) - 21st April 2019\",\n            \"slug\": \"breaking-point-with-malick-wukla-gardi-phir-urooj-per-21st-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.814Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"https://www.youtube.com/watch/2bbcVunswOA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149167/breaking-point-with-malick-wukla-gardi-phir-urooj-per-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2015,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.844Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.844Z\",\n            \"updated\": \"2019-07-05T10:15:57.844Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Will New Finance Minister Improve Economy) - 20th April 2019\",\n            \"slug\": \"breaking-point-with-malick-will-new-finance-minister-improve-economy-20th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.845Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"https://www.youtube.com/watch/VNzugmb2HYs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149118/breaking-point-with-malick-will-new-finance-minister-improve-economy-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2016,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.878Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.877Z\",\n            \"updated\": \"2019-07-05T10:15:57.878Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Big Changes in PTI Govt) \\u2013 19th April 2019\",\n            \"slug\": \"breaking-point-with-malick-big-changes-in-pti-govt-19th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.878Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"https://www.youtube.com/watch/u8mNrEQRc8E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149059/breaking-point-with-malick-big-changes-in-pti-govt-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2017,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.915Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.914Z\",\n            \"updated\": \"2019-07-05T10:15:57.915Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Is Supreme Court Making Law?) - 14th April 2019\",\n            \"slug\": \"breaking-point-with-malick-is-supreme-court-making-law-14th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.915Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/UfCoEJ8iGRA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148775/breaking-point-with-malick-is-supreme-court-making-law-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2018,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.948Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.948Z\",\n            \"updated\": \"2019-07-05T10:15:57.948Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Shahbaz Sharif's Family Summoned By NAB) - 13th April 2019\",\n            \"slug\": \"breaking-point-with-malick-shahbaz-sharifs-family-summoned-by-nab-13th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.948Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"https://www.youtube.com/watch/OyugWH63k9o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148728/breaking-point-with-malick-shahbaz-sharif-s-family-summoned-by-nab-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2019,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:57.982Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:57.982Z\",\n            \"updated\": \"2019-07-05T10:15:57.982Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Questions Arising on Punjab Courts) - 12th April 2019\",\n            \"slug\": \"breaking-point-with-malick-questions-arising-on-punjab-courts-12th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:57.982Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"https://www.youtube.com/watch/Rw6w-3lAKA8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148674/breaking-point-with-malick-questions-arising-on-punjab-courts-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2020,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:58.062Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:58.061Z\",\n            \"updated\": \"2019-07-05T10:15:58.062Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Conflict of Interest) - 7th April 2019\",\n            \"slug\": \"breaking-point-with-malick-conflict-of-interest-7th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:58.062Z\",\n            \"target_date\": \"2019-04-08\",\n            \"text\": \"https://www.youtube.com/watch/haIeiISYHok\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148413/breaking-point-with-malick-conflict-of-interest-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2021,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:58.141Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:58.141Z\",\n            \"updated\": \"2019-07-05T10:15:58.141Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (NAB's Raid At Hamza Shahbaz Residence) - 6th April 2019\",\n            \"slug\": \"breaking-point-with-malick-nabs-raid-at-hamza-shahbaz-residence-6th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:58.141Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"https://www.youtube.com/watch/xTEv6cwpIO8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148364/breaking-point-with-malick-nab-s-raid-at-hamza-shahbaz-residence-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2022,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:58.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:58.190Z\",\n            \"updated\": \"2019-07-05T10:15:58.191Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (Economy, NAB, Other Issues) - 5th April 2019\",\n            \"slug\": \"breaking-point-with-malick-economy-nab-other-issues-5th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:15:58.191Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"https://www.youtube.com/watch/nHu-i5lmZT8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148306/breaking-point-with-malick-economy-nab-other-issues-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2023,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:58.291Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:58.290Z\",\n            \"updated\": \"2019-07-05T10:15:58.297Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (IMF Deal, Economy) - 30th March 2019\",\n            \"slug\": \"breaking-point-with-malick-imf-deal-economy-30th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:58.297Z\",\n            \"target_date\": \"2019-04-01\",\n            \"text\": \"https://www.youtube.com/watch/mFT37MD5y-g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148045/breaking-point-with-malick-imf-deal-economy-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2024,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:58.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:58.364Z\",\n            \"updated\": \"2019-07-05T10:15:58.378Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 48,\n                \"feed_id\": 31,\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Relief For Sharif Family) - 30th March 2019\",\n            \"slug\": \"breaking-point-with-malick-relief-for-sharif-family-30th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:15:58.378Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"https://www.youtube.com/watch/KwFsKGuQuFc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/147986/breaking-point-with-malick-relief-for-sharif-family-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2065,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:59.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:15:59.378Z\",\n            \"updated\": \"2019-07-05T10:15:59.378Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 38,\n                \"feed_id\": 21,\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PTI Govt's Economic Policies) \\u2013 4th July 2019\",\n            \"slug\": \"najam-sethi-show-pti-govts-economic-policies-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:15:59.378Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/0vm-xonwpg4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153525/najam-sethi-show-pti-govt-s-economic-policies-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2145,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.123Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.118Z\",\n            \"updated\": \"2019-07-05T10:16:01.123Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (PMLN Members Meet Imran Khan) \\u2013 30th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.123Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/Zbg7Vb8QKRs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153229/face-to-face-with-ayesha-bakhsh-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2146,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.165Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.165Z\",\n            \"updated\": \"2019-07-05T10:16:01.165Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (PM Imran Khan's Speech) - 29th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-pm-imran-khans-speech-29th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.166Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/TRzgxjBp1lY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153169/face-to-face-with-ayesha-bakhsh-pm-imran-khan-s-speech-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2147,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.198Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.197Z\",\n            \"updated\": \"2019-07-05T10:16:01.198Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face (Pakistan Ki Maeeshat Kaise Bahal Hogi?) - 28th June 2019\",\n            \"slug\": \"face-to-face-pakistan-ki-maeeshat-kaise-bahal-hogi-28th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.198Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/IbK1oCZh5fs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153108/face-to-face-pakistan-ki-maeeshat-kaise-bahal-hogi-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2148,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.256Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.256Z\",\n            \"updated\": \"2019-07-05T10:16:01.256Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (What Is The Agenda of APC?) \\u2013 23rd June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-what-is-the-agenda-of-apc-23rd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.256Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/pq2Y2UOfR6g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152769/face-to-face-with-ayesha-bakhsh-what-is-the-agenda-of-apc-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2149,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.312Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.312Z\",\n            \"updated\": \"2019-07-05T10:16:01.312Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Maryam Nawaz Press Conference) \\u2013 22nd June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.312Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/n6PqogrpMq8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152709/face-to-face-with-ayesha-bakhsh-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2150,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.361Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.361Z\",\n            \"updated\": \"2019-07-05T10:16:01.361Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Current Issues) \\u2013 21st June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-current-issues-21st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.361Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/uqWAboigyrw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152638/face-to-face-with-ayesha-bakhsh-current-issues-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2151,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.389Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.389Z\",\n            \"updated\": \"2019-07-05T10:16:01.389Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Bilawal Maryam Meeting) \\u2013 16th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-bilawal-maryam-meeting-16th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.389Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/NYA54aQOfuQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152340/face-to-face-with-ayesha-bakhsh-bilawal-maryam-meeting-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2152,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.426Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.426Z\",\n            \"updated\": \"2019-07-05T10:16:01.426Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (Siasi Giraftariyon Ka Mausam) - 15th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-siasi-giraftariyon-ka-mausam-15th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.426Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/kE6jVgNP6vA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152290/face-to-face-with-ayesha-bakhsh-siasi-giraftariyon-ka-mausam-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2153,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.480Z\",\n            \"updated\": \"2019-07-05T10:16:01.480Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (Siasi Giraftariyan) - 14th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-siasi-giraftariyan-14th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.480Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/Y3Jx_-Wt-tg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152231/face-to-face-with-ayesha-bakhsh-siasi-giraftariyan-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2154,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.512Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.512Z\",\n            \"updated\": \"2019-07-05T10:16:01.512Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Why Judges Are Not Accountable?) \\u2013 9th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-why-judges-are-not-accountable-9th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.512Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/miyghoQyzrw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151929/face-to-face-with-ayesha-bakhsh-why-judges-are-not-accountable-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2155,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.573Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.573Z\",\n            \"updated\": \"2019-07-05T10:16:01.573Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Shahbaz Sharif Ki Wapsi) \\u2013 8th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-shahbaz-sharif-ki-wapsi-8th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.573Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/1t3l9YoBYD4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151887/face-to-face-with-ayesha-bakhsh-shahbaz-sharif-ki-wapsi-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2156,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.603Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.603Z\",\n            \"updated\": \"2019-07-05T10:16:01.604Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (PTM, Other Issues) \\u2013 2nd June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-ptm-other-issues-2nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.604Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/7gT9Bw8Dhv4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151652/face-to-face-with-ayesha-bakhsh-ptm-other-issues-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2157,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.641Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.640Z\",\n            \"updated\": \"2019-07-05T10:16:01.641Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Petrol Prices Increased) \\u2013 1st June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-petrol-prices-increased-1st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.641Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/z1MZKDoLEQU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151595/face-to-face-with-ayesha-bakhsh-petrol-prices-increased-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2158,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.673Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.673Z\",\n            \"updated\": \"2019-07-05T10:16:01.674Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Reference Against Judges) \\u2013 31st May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-reference-against-judges-31st-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.674Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/U5PnB7P2NNY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151545/face-to-face-with-ayesha-bakhsh-reference-against-judges-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2159,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.703Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.703Z\",\n            \"updated\": \"2019-07-05T10:16:01.703Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (What Is Agenda of Opposition?) \\u2013 26th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-what-is-agenda-of-opposition-26th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.703Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/l8hQDimMuno\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151297/face-to-face-with-ayesha-bakhsh-what-is-agenda-of-opposition-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2160,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.736Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.735Z\",\n            \"updated\": \"2019-07-05T10:16:01.736Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Chairman NAB Scandal) \\u2013 24th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.736Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/cYMKi0-nxaM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151170/face-to-face-with-ayesha-bakhsh-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2161,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.790Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.790Z\",\n            \"updated\": \"2019-07-05T10:16:01.790Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Dr. Muhammad Amjid Saqib Exclusive) \\u2013 19th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-dr-muhammad-amjid-saqib-exclusive-19th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.790Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/Fgv_PKYEyoM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150903/face-to-face-with-ayesha-bakhsh-dr-muhammad-amjid-saqib-exclusive-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2162,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.872Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.872Z\",\n            \"updated\": \"2019-07-05T10:16:01.872Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Firdous Ashiq Awan Exclusive) \\u2013 18th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-firdous-ashiq-awan-exclusive-18th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.872Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/xpfMbLnGmU0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150847/face-to-face-with-ayesha-bakhsh-firdous-ashiq-awan-exclusive-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.902Z\",\n            \"updated\": \"2019-07-05T10:16:01.904Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Eid Ke Baad Tehreek Ya?) \\u2013 17th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-eid-ke-baad-tehreek-ya-17th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.904Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/XESgm1SkQOQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150794/face-to-face-with-ayesha-bakhsh-eid-ke-baad-tehreek-ya-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:01.945Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:01.937Z\",\n            \"updated\": \"2019-07-05T10:16:01.945Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (IMF Package) - 11th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-imf-package-11th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:01.945Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/xtdEK-VoIPs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150422/face-to-face-with-ayesha-bakhsh-imf-package-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.027Z\",\n            \"updated\": \"2019-07-05T10:16:02.028Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (IMF, Other Issues) \\u2013 10th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-imf-other-issues-10th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.028Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/hXbTuvx_rg4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150372/face-to-face-with-ayesha-bakhsh-imf-other-issues-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.192Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.192Z\",\n            \"updated\": \"2019-07-05T10:16:02.192Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Indian Aggression) \\u2013 5th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-indian-aggression-5th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.192Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/CWQHZVu8MtE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150041/face-to-face-with-ayesha-bakhsh-indian-aggression-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.437Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.436Z\",\n            \"updated\": \"2019-07-05T10:16:02.437Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Hakumati Karkardagi) \\u2013 4th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-hakumati-karkardagi-4th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.437Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77eh38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149969/face-to-face-with-ayesha-bakhsh-hakumati-karkardagi-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.565Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.564Z\",\n            \"updated\": \"2019-07-05T10:16:02.565Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Nawaz Sharif Back To Jail) \\u2013 3rd May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-nawaz-sharif-back-to-jail-3rd-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.565Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77b4qm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149909/face-to-face-with-ayesha-bakhsh-nawaz-sharif-back-to-jail-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.646Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.646Z\",\n            \"updated\": \"2019-07-05T10:16:02.646Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will PTI Support MQM?) \\u2013 28th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-pti-support-mqm-28th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.646Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ur8r\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149568/face-to-face-with-ayesha-bakhsh-will-pti-support-mqm-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.705Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.704Z\",\n            \"updated\": \"2019-07-05T10:16:02.705Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Hassan Nisar Exclusive Interview) \\u2013 27th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-hassan-nisar-exclusive-interview-27th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.705Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76s07d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149524/face-to-face-with-ayesha-bakhsh-hassan-nisar-exclusive-interview-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.810Z\",\n            \"updated\": \"2019-07-05T10:16:02.811Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will Nawaz Sharif Get NRO?) \\u2013 26th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-nawaz-sharif-get-nro-26th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.811Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76owba\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149463/face-to-face-with-ayesha-bakhsh-will-nawaz-sharif-get-nro-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:02.914Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:02.914Z\",\n            \"updated\": \"2019-07-05T10:16:02.914Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Opposition Vs Govt) \\u2013 21st April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-opposition-vs-govt-21st-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:02.914Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7697xw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149165/face-to-face-with-ayesha-bakhsh-opposition-vs-govt-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.025Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.024Z\",\n            \"updated\": \"2019-07-05T10:16:03.025Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (New CM Punjab) \\u2013 20th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-new-cm-punjab-20th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.025Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7674qw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149124/face-to-face-with-ayesha-bakhsh-new-cm-punjab-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.144Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.144Z\",\n            \"updated\": \"2019-07-05T10:16:03.144Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will CM Punjab Be Replaced?) \\u2013 19th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-cm-punjab-be-replaced-19th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.144Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x764ryk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149062/face-to-face-with-ayesha-bakhsh-will-cm-punjab-be-replaced-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.243Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.242Z\",\n            \"updated\": \"2019-07-05T10:16:03.243Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will Looted Wealth Be Brought Back?) \\u2013 14th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-looted-wealth-be-brought-back-14th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.243Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75tuo8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148772/face-to-face-with-ayesha-bakhsh-will-looted-wealth-be-brought-back-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.332Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.331Z\",\n            \"updated\": \"2019-07-05T10:16:03.371Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Hamza Shahbaz's Criticism on NAB) \\u2013 13th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-hamza-shahbazs-criticism-on-nab-13th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.371Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75s5ai\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148741/face-to-face-with-ayesha-bakhsh-hamza-shahbaz-s-criticism-on-nab-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2177,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.456Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.456Z\",\n            \"updated\": \"2019-07-05T10:16:03.456Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Opposition Ki Tehreekein) \\u2013 12th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-opposition-ki-tehreekein-12th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.456Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75q2ke\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148673/face-to-face-with-ayesha-bakhsh-opposition-ki-tehreekein-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2178,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.496Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.496Z\",\n            \"updated\": \"2019-07-05T10:16:03.496Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Bharat Ke Hamle Ka Khatra) \\u2013 7th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-bharat-ke-hamle-ka-khatra-7th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.496Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75f7br\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148410/face-to-face-with-ayesha-bakhsh-bharat-ke-hamle-ka-khatra-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2179,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.537Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.537Z\",\n            \"updated\": \"2019-07-05T10:16:03.538Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (NAB Ki Nakam Karwai) \\u2013 6th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-nab-ki-nakam-karwai-6th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.538Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"https://www.youtube.com/watch/SnYD5xvUmEI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148366/face-to-face-with-ayesha-bakhsh-nab-ki-nakam-karwai-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2180,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.666Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.666Z\",\n            \"updated\": \"2019-07-05T10:16:03.667Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (NAB Ki Team Per Hamla?) \\u2013 5th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-nab-ki-team-per-hamla-5th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.667Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75bsqx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148302/face-to-face-with-ayesha-bakhsh-nab-ki-team-per-hamla-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2181,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.701Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.699Z\",\n            \"updated\": \"2019-07-05T10:16:03.706Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Fawad Chaudhry Exclusive Interview) \\u2013 31st March 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-fawad-chaudhry-exclusive-interview-31st-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.706Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x751yxm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148043/face-to-face-with-ayesha-bakhsh-fawad-chaudhry-exclusive-interview-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2182,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.746Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.746Z\",\n            \"updated\": \"2019-07-05T10:16:03.746Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Plea Bargain Offer For Nawaz Sharif) \\u2013 30th March 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-plea-bargain-offer-for-nawaz-sharif-30th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.746Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7508bp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/147985/face-to-face-with-ayesha-bakhsh-plea-bargain-offer-for-nawaz-sharif-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2183,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.776Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.776Z\",\n            \"updated\": \"2019-07-05T10:16:03.776Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Bilawal's Train March) \\u2013 29th March 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-bilawals-train-march-29th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.776Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x74yo8d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/147929/face-to-face-with-ayesha-bakhsh-bilawal-s-train-march-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2184,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.804Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:03.804Z\",\n            \"updated\": \"2019-07-05T10:16:03.804Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 49,\n                \"feed_id\": 32,\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (What Nawaz Sharif Wants?) \\u2013 24th March 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-what-nawaz-sharif-wants-24th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:03.804Z\",\n            \"target_date\": \"2019-03-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x74qro1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/147611/face-to-face-with-ayesha-bakhsh-what-nawaz-sharif-wants-24th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2185,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:04.061Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:04.060Z\",\n            \"updated\": \"2019-07-05T10:16:04.062Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 40,\n                \"feed_id\": 23,\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Party Loyalties, Positive or Negative) - 4th July 2019\",\n            \"slug\": \"harf-e-raaz-party-loyalties-positive-or-negative-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:04.062Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/ruR89Vgx6-E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153519/harf-e-raaz-party-loyalties-positive-or-negative-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2265,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:05.415Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:05.415Z\",\n            \"updated\": \"2019-07-05T10:16:05.416Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 42,\n                \"feed_id\": 25,\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Rana Sanaullah Ka Khel Khatam?) \\u2013 4th July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-rana-sanaullah-ka-khel-khatam-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:05.416Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/m3-_0wAdXNI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153542/kal-tak-with-javed-chaudhry-rana-sanaullah-ka-khel-khatam-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2305,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:05.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:05.875Z\",\n            \"updated\": \"2019-07-05T10:16:05.876Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Opposition Abhi Se Bikharne Lagi?) - 30th June 2019\",\n            \"slug\": \"news-beat-opposition-abhi-se-bikharne-lagi-30th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:05.876Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/kJFyL7DCS2o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153257/news-beat-opposition-abhi-se-bikharne-lagi-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2306,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:05.905Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:05.905Z\",\n            \"updated\": \"2019-07-05T10:16:05.905Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PTI Hakumat Ka Pehla Budget Manzoor) - 28th June 2019\",\n            \"slug\": \"news-beat-pti-hakumat-ka-pehla-budget-manzoor-28th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:05.905Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/1R3XmEpoQU4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153139/news-beat-pti-hakumat-ka-pehla-budget-manzoor-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2307,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:05.939Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:05.939Z\",\n            \"updated\": \"2019-07-05T10:16:05.939Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (26 June Ko Opposition APC Talab) - 23rd June 2019\",\n            \"slug\": \"news-beat-26-june-ko-opposition-apc-talab-23rd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:05.939Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/PU60t9NNEpU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152790/news-beat-26-june-ko-opposition-apc-talab-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2308,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:05.970Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:05.969Z\",\n            \"updated\": \"2019-07-05T10:16:05.970Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Maryam Nawaz Press Conference) - 22nd June 2019\",\n            \"slug\": \"news-beat-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:05.970Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/kqp95Yg0J2E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152724/news-beat-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2309,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.008Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.008Z\",\n            \"updated\": \"2019-07-05T10:16:06.008Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Bilawal Maryam Mulaqat Mein Kia Tay Paya) - 16th June 2019\",\n            \"slug\": \"news-beat-bilawal-maryam-mulaqat-mein-kia-tay-paya-16th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.008Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/sTY_FYlCBz4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152352/news-beat-bilawal-maryam-mulaqat-mein-kia-tay-paya-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2310,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.068Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.067Z\",\n            \"updated\": \"2019-07-05T10:16:06.068Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Who Will Be Next After Faryal Talpur) - 14th June 2019\",\n            \"slug\": \"news-beat-who-will-be-next-after-faryal-talpur-14th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.068Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/nYtNHN7v0ic\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152263/news-beat-who-will-be-next-after-faryal-talpur-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2311,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.185Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.179Z\",\n            \"updated\": \"2019-07-05T10:16:06.185Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahbaz Sharif Ki Wapsi, Opposition Tehreek) - 9th June 2019\",\n            \"slug\": \"news-beat-shahbaz-sharif-ki-wapsi-opposition-tehreek-9th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.185Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/KU4TaHKHq6g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151951/news-beat-shahbaz-sharif-ki-wapsi-opposition-tehreek-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2312,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.225Z\",\n            \"updated\": \"2019-07-05T10:16:06.225Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Hassan Nisar Exclusive Interview) - 8th June 2019\",\n            \"slug\": \"news-beat-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.225Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/iv-mSjH2DPg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151897/news-beat-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2313,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.269Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.268Z\",\n            \"updated\": \"2019-07-05T10:16:06.269Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Discussion on Different Issues) - 7th June 2019\",\n            \"slug\": \"news-beat-discussion-on-different-issues-7th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.269Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/lQwbfhPvCmc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151851/news-beat-discussion-on-different-issues-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2314,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.296Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.296Z\",\n            \"updated\": \"2019-07-05T10:16:06.296Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (NAB Hakumat Gath Joor Ka Taasur) - 1st June 2019\",\n            \"slug\": \"news-beat-nab-hakumat-gath-joor-ka-taasur-1st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.296Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/6ys2o3kbuoA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151619/news-beat-nab-hakumat-gath-joor-ka-taasur-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2315,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.358Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.358Z\",\n            \"updated\": \"2019-07-05T10:16:06.358Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PTM Ki Siasat, Other Issues) - 31st May 2019\",\n            \"slug\": \"news-beat-ptm-ki-siasat-other-issues-31st-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.358Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/UjnMRqQ8gBo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151576/news-beat-ptm-ki-siasat-other-issues-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2316,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.392Z\",\n            \"updated\": \"2019-07-05T10:16:06.393Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PMLN Changing Stance on Chairman NAB Issue) - 25th May 2019\",\n            \"slug\": \"news-beat-pmln-changing-stance-on-chairman-nab-issue-25th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.393Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/swS2kKQQ1uM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151254/news-beat-pmln-changing-stance-on-chairman-nab-issue-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2317,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.432Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.431Z\",\n            \"updated\": \"2019-07-05T10:16:06.432Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Bachon Ko Jinsi Darindo Se Kaise Bachaya Jaye) - 24th May 2019\",\n            \"slug\": \"news-beat-bachon-ko-jinsi-darindo-se-kaise-bachaya-jaye-24th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.432Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/G0DuTf4Cy_k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151203/news-beat-bachon-ko-jinsi-darindo-se-kaise-bachaya-jaye-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2318,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.470Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.469Z\",\n            \"updated\": \"2019-07-05T10:16:06.470Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Opposition Meeting, Why Govt Worried?) - 19th May 2019\",\n            \"slug\": \"news-beat-opposition-meeting-why-govt-worried-19th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.470Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/6dGUkZ5NnaE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150914/news-beat-opposition-meeting-why-govt-worried-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2319,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.548Z\",\n            \"updated\": \"2019-07-05T10:16:06.549Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Will Opposition Be United Against Govt) - 18th May 2019\",\n            \"slug\": \"news-beat-will-opposition-be-united-against-govt-18th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.549Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/HsgYwhktiEU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150881/news-beat-will-opposition-be-united-against-govt-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2320,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.636Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.636Z\",\n            \"updated\": \"2019-07-05T10:16:06.636Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Mulki Maeeshat Kaise Behtar Hogi?) - 17th May 2019\",\n            \"slug\": \"news-beat-mulki-maeeshat-kaise-behtar-hogi-17th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.636Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/OpunlQl9-uk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150814/news-beat-mulki-maeeshat-kaise-behtar-hogi-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2321,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.737Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.737Z\",\n            \"updated\": \"2019-07-05T10:16:06.737Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahid Khaqan Abbasi Exclusive Interview) - 12th May 2019\",\n            \"slug\": \"news-beat-shahid-khaqan-abbasi-exclusive-interview-12th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.753Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/Fc4rfeNplKk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150501/news-beat-shahid-khaqan-abbasi-exclusive-interview-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2322,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.871Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.871Z\",\n            \"updated\": \"2019-07-05T10:16:06.872Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (IMF Ki Shraiyt Ka Masla) - 11th May 2019\",\n            \"slug\": \"news-beat-imf-ki-shraiyt-ka-masla-11th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.872Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/8gTXxUQPom8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150437/news-beat-imf-ki-shraiyt-ka-masla-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2323,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:06.951Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:06.950Z\",\n            \"updated\": \"2019-07-05T10:16:06.951Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Ramzan Aur Mehngai Ka Tufan) - 10th May 2019\",\n            \"slug\": \"news-beat-ramzan-aur-mehngai-ka-tufan-10th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:06.951Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/MG6c1vpjTVw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150388/news-beat-ramzan-aur-mehngai-ka-tufan-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2324,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.039Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.038Z\",\n            \"updated\": \"2019-07-05T10:16:07.039Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Sheikh Rasheed Ahmad Exclusive Interview) - 5th May 2019\",\n            \"slug\": \"news-beat-sheikh-rasheed-ahmad-exclusive-interview-5th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.039Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/VIUQGriy3wk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150051/news-beat-sheikh-rasheed-ahmad-exclusive-interview-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2325,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.128Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.127Z\",\n            \"updated\": \"2019-07-05T10:16:07.128Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahbaz Sharif Minus From PMLN?) - 4th May 2019\",\n            \"slug\": \"news-beat-shahbaz-sharif-minus-from-pmln-4th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.128Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/Shn3s2Ynxl8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149994/news-beat-shahbaz-sharif-minus-from-pmln-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2326,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.343Z\",\n            \"updated\": \"2019-07-05T10:16:07.344Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Nawaz Sharif Will Go Back to Jail) - 3rd May 2019\",\n            \"slug\": \"news-beat-nawaz-sharif-will-go-back-to-jail-3rd-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.344Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/Q95Zc9wwDKU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149937/news-beat-nawaz-sharif-will-go-back-to-jail-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2327,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.531Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.531Z\",\n            \"updated\": \"2019-07-05T10:16:07.531Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Economic Challenges For Govt) - 27th April 2019\",\n            \"slug\": \"news-beat-economic-challenges-for-govt-27th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.532Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"https://www.youtube.com/watch/SZqv3y23W04\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149546/news-beat-economic-challenges-for-govt-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2328,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.591Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.590Z\",\n            \"updated\": \"2019-07-05T10:16:07.591Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Awam Ki Takleef Kaun Door Kare Ga) - 21st April 2019\",\n            \"slug\": \"news-beat-awam-ki-takleef-kaun-door-kare-ga-21st-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.591Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"https://www.youtube.com/watch/LjAfJlQ13y4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149191/news-beat-awam-ki-takleef-kaun-door-kare-ga-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2329,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.674Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.673Z\",\n            \"updated\": \"2019-07-05T10:16:07.674Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (LHC Stops NAB From Arresting Hamza Shahabz) - 6th April 2019\",\n            \"slug\": \"news-beat-lhc-stops-nab-from-arresting-hamza-shahabz-6th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.674Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"https://www.youtube.com/watch/rqM7gvUYHXo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/148380/news-beat-lhc-stops-nab-from-arresting-hamza-shahabz-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2330,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.706Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.706Z\",\n            \"updated\": \"2019-07-05T10:16:07.706Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Mehngai Se Ahtasab Tak) - 5th April 2019\",\n            \"slug\": \"news-beat-mehngai-se-ahtasab-tak-5th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.706Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"https://www.youtube.com/watch/7bpKmVEQyMg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/148330/news-beat-mehngai-se-ahtasab-tak-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2331,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.754Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.751Z\",\n            \"updated\": \"2019-07-05T10:16:07.754Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PPP Confuse on Nawaz Sharif's Bail) - 30th March 2019\",\n            \"slug\": \"news-beat-ppp-confuse-on-nawaz-sharifs-bail-30th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.754Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"https://www.youtube.com/watch/c_lDPoYGYk8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/148008/news-beat-ppp-confuse-on-nawaz-sharif-s-bail-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2332,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.783Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.783Z\",\n            \"updated\": \"2019-07-05T10:16:07.783Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Hakumat Opposition Mein Mahaz Arai) - 29th March 2019\",\n            \"slug\": \"news-beat-hakumat-opposition-mein-mahaz-arai-29th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.783Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"https://www.youtube.com/watch/INRtaTe2Bb8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/147952/news-beat-hakumat-opposition-mein-mahaz-arai-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2333,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.811Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.810Z\",\n            \"updated\": \"2019-07-05T10:16:07.811Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PMLN Workers Purjosh, Leadership Khamosh) - 24th March 2019\",\n            \"slug\": \"news-beat-pmln-workers-purjosh-leadership-khamosh-24th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.811Z\",\n            \"target_date\": \"2019-03-24\",\n            \"text\": \"https://www.youtube.com/watch/spjbGQjGYfw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/147633/news-beat-pmln-workers-purjosh-leadership-khamosh-24th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2334,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.838Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.838Z\",\n            \"updated\": \"2019-07-05T10:16:07.838Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Nawaz Sharif Want to Go Abroad?) - 8th March 2019\",\n            \"slug\": \"news-beat-nawaz-sharif-want-to-go-abroad-8th-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.838Z\",\n            \"target_date\": \"2019-03-09\",\n            \"text\": \"https://www.youtube.com/watch/JhNC14qGhAo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146774/news-beat-nawaz-sharif-want-to-go-abroad-8th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2335,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.867Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.867Z\",\n            \"updated\": \"2019-07-05T10:16:07.867Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Sheikh Rasheed Ahmad Exclusive Interview) - 3rd March 2019\",\n            \"slug\": \"news-beat-sheikh-rasheed-ahmad-exclusive-interview-3rd-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.867Z\",\n            \"target_date\": \"2019-03-04\",\n            \"text\": \"https://www.youtube.com/watch/_1gahL5Dutw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146487/news-beat-sheikh-rasheed-ahmad-exclusive-interview-3rd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2336,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.912Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.912Z\",\n            \"updated\": \"2019-07-05T10:16:07.912Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Aman Ka Chakka, Modi Ki Ruswai) - 1st March 2019\",\n            \"slug\": \"news-beat-aman-ka-chakka-modi-ki-ruswai-1st-march-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.912Z\",\n            \"target_date\": \"2019-03-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x73anr3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146395/news-beat-aman-ka-chakka-modi-ki-ruswai-1st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2337,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.941Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.941Z\",\n            \"updated\": \"2019-07-05T10:16:07.941Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahbaz Sharif Got Clean Chit) - 24th February 2019\",\n            \"slug\": \"news-beat-shahbaz-sharif-got-clean-chit-24th-february-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.941Z\",\n            \"target_date\": \"2019-02-25\",\n            \"text\": \"https://www.youtube.com/watch/EF7eTsTF7YI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146085/news-beat-shahbaz-sharif-got-clean-chit-24th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2338,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:07.969Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.969Z\",\n            \"updated\": \"2019-07-05T10:16:07.969Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahid Khaqan Abbasi Exclusive Interview) - 24th February 2019\",\n            \"slug\": \"news-beat-shahid-khaqan-abbasi-exclusive-interview-24th-february-2019\",\n            \"publish_date\": \"2019-07-05T10:16:07.969Z\",\n            \"target_date\": \"2019-02-24\",\n            \"text\": \"https://www.youtube.com/watch/-XH9g5Bud7w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146048/news-beat-shahid-khaqan-abbasi-exclusive-interview-24th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2339,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.002Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:07.995Z\",\n            \"updated\": \"2019-07-05T10:16:08.002Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Indian Accusations on Pakistan) - 16th February 2019\",\n            \"slug\": \"news-beat-indian-accusations-on-pakistan-16th-february-2019\",\n            \"publish_date\": \"2019-07-05T10:16:08.002Z\",\n            \"target_date\": \"2019-02-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x72iobn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145664/news-beat-indian-accusations-on-pakistan-16th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2340,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.051Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:08.051Z\",\n            \"updated\": \"2019-07-05T10:16:08.051Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Kia Nawaz Sharif Ki Zamanat Hogi) - 15th January 2019\",\n            \"slug\": \"news-beat-kia-nawaz-sharif-ki-zamanat-hogi-15th-january-2019\",\n            \"publish_date\": \"2019-07-05T10:16:08.051Z\",\n            \"target_date\": \"2019-02-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x72gw1s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145617/news-beat-kia-nawaz-sharif-ki-zamanat-hogi-15th-january-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2341,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.104Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:08.104Z\",\n            \"updated\": \"2019-07-05T10:16:08.104Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PM Imran Khan Ka NRO Dene Se Inkar) - 10th February 2019\",\n            \"slug\": \"news-beat-pm-imran-khan-ka-nro-dene-se-inkar-10th-february-2019\",\n            \"publish_date\": \"2019-07-05T10:16:08.104Z\",\n            \"target_date\": \"2019-02-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x725z4p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145342/news-beat-pm-imran-khan-ka-nro-dene-se-inkar-10th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2342,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.138Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:08.138Z\",\n            \"updated\": \"2019-07-05T10:16:08.138Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Aleem Khan Ke Baad Agla Number Kis Ka) - 9th February 2019\",\n            \"slug\": \"news-beat-aleem-khan-ke-baad-agla-number-kis-ka-9th-february-2019\",\n            \"publish_date\": \"2019-07-05T10:16:08.138Z\",\n            \"target_date\": \"2019-02-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x724liu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145280/news-beat-aleem-khan-ke-baad-agla-number-kis-ka-9th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2343,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.169Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:08.168Z\",\n            \"updated\": \"2019-07-05T10:16:08.169Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Public Accounts Committee Ka Mahaz) - 2nd February 2019\",\n            \"slug\": \"news-beat-public-accounts-committee-ka-mahaz-2nd-february-2019\",\n            \"publish_date\": \"2019-07-05T10:16:08.169Z\",\n            \"target_date\": \"2019-02-03\",\n            \"text\": \"https://www.youtube.com/watch/u3RnxT-aI38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/144892/news-beat-public-accounts-committee-ka-mahaz-2nd-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2344,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.207Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:08.207Z\",\n            \"updated\": \"2019-07-05T10:16:08.207Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 50,\n                \"feed_id\": 34,\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Usman Buzdar, 18th Amendment, Other Issues) - 1st February 2019\",\n            \"slug\": \"news-beat-usman-buzdar-18th-amendment-other-issues-1st-february-2019\",\n            \"publish_date\": \"2019-07-05T10:16:08.207Z\",\n            \"target_date\": \"2019-02-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x71onay\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/144836/news-beat-usman-buzdar-18th-amendment-other-issues-1st-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2345,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.403Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:08.403Z\",\n            \"updated\": \"2019-07-05T10:16:08.403Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 43,\n                \"feed_id\": 26,\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Rana Sanaullah's Wife Exclusive Interview) \\u2013 4th July 2019\",\n            \"slug\": \"faisla-aap-ka-rana-sanaullahs-wife-exclusive-interview-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:08.403Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cihms\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153513/faisla-aap-ka-rana-sanaullah-s-wife-exclusive-interview-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2425,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.567Z\",\n            \"updated\": \"2019-07-05T10:16:09.568Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Evidence Against Rana Sanaullah?) \\u2013 4th July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-evidence-against-rana-sanaullah-4th-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.568Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7civ3s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153543/news-eye-with-meher-abbasi-evidence-against-rana-sanaullah-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2426,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.652Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.652Z\",\n            \"updated\": \"2019-07-05T10:16:09.652Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Rana Sanaullah's Arrest) \\u2013 3rd July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-rana-sanaullahs-arrest-3rd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.652Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfzn5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153458/news-eye-with-meher-abbasi-rana-sanaullah-s-arrest-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2427,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.716Z\",\n            \"updated\": \"2019-07-05T10:16:09.716Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Imran Khan's Clear Message) \\u2013 2nd July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-imran-khans-clear-message-2nd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.716Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdckb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153389/news-eye-with-meher-abbasi-imran-khan-s-clear-message-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2428,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.764Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.764Z\",\n            \"updated\": \"2019-07-05T10:16:09.764Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Rana Sanaullah Arrested) \\u2013 1st July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.764Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7camj8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153317/news-eye-with-meher-abbasi-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2429,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.795Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.795Z\",\n            \"updated\": \"2019-07-05T10:16:09.795Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (All Parties Conference) \\u2013 27th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-all-parties-conference-27th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.795Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0vj1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153050/news-eye-with-meher-abbasi-all-parties-conference-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2430,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.849Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.849Z\",\n            \"updated\": \"2019-07-05T10:16:09.849Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (All Parties Conference) \\u2013 26th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.849Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by5m9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152983/news-eye-with-meher-abbasi-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2431,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.882Z\",\n            \"updated\": \"2019-07-05T10:16:09.882Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition APC) \\u2013 25th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-apc-25th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.882Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvg68\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152905/news-eye-with-meher-abbasi-opposition-apc-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2432,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.909Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.909Z\",\n            \"updated\": \"2019-07-05T10:16:09.909Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition APC) \\u2013 24th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-apc-24th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.910Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt5eu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152846/news-eye-with-meher-abbasi-opposition-apc-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2433,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.960Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.958Z\",\n            \"updated\": \"2019-07-05T10:16:09.960Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Budget Kaise Manzoor Hoga) \\u2013 20th June 2019\",\n            \"slug\": \"news-eye-budget-kaise-manzoor-hoga-20th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.960Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7blgds\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152593/news-eye-budget-kaise-manzoor-hoga-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2434,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.988Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:09.988Z\",\n            \"updated\": \"2019-07-05T10:16:09.988Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Budget Per Hungama) \\u2013 19th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-budget-per-hungama-19th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:09.988Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjp14\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152519/news-eye-with-meher-abbasi-budget-per-hungama-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2435,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.018Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.017Z\",\n            \"updated\": \"2019-07-05T10:16:10.018Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Budget Kaise Manzoor Hoga?) \\u2013 18th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-budget-kaise-manzoor-hoga-18th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.018Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhyw9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152471/news-eye-with-meher-abbasi-budget-kaise-manzoor-hoga-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2436,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.068Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.067Z\",\n            \"updated\": \"2019-07-05T10:16:10.068Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition Vs Govt) \\u2013 17th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-vs-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.068Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/Oq2yJ3pZPms\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152409/news-eye-with-meher-abbasi-opposition-vs-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2437,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.097Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.097Z\",\n            \"updated\": \"2019-07-05T10:16:10.097Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Commission of Inquiry) \\u2013 13th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-commission-of-inquiry-13th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.098Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/FmLWtg1o1PE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152199/news-eye-with-meher-abbasi-commission-of-inquiry-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2438,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.132Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.132Z\",\n            \"updated\": \"2019-07-05T10:16:10.132Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (PM Imran Khan's Speech) \\u2013 12th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-pm-imran-khans-speech-12th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.132Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayg6o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152126/news-eye-with-meher-abbasi-pm-imran-khan-s-speech-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2439,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.202Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.201Z\",\n            \"updated\": \"2019-07-05T10:16:10.202Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Asif Zardari Giraftar) \\u2013 10th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-asif-zardari-giraftar-10th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.202Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqxqf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152005/news-eye-with-meher-abbasi-asif-zardari-giraftar-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2440,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.242Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.242Z\",\n            \"updated\": \"2019-07-05T10:16:10.242Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Eid Special) \\u2013 6th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.242Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aflsz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151804/news-eye-with-meher-abbasi-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2441,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.276Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.276Z\",\n            \"updated\": \"2019-07-05T10:16:10.276Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Eid Special) \\u2013 5th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.276Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/XCU1TFUsko4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151777/news-eye-with-meher-abbasi-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2442,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.305Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.305Z\",\n            \"updated\": \"2019-07-05T10:16:10.305Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition Ka Ahtajaj Ka Elan) \\u2013 4th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-ka-ahtajaj-ka-elan-4th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.305Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a9jkb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151734/news-eye-with-meher-abbasi-opposition-ka-ahtajaj-ka-elan-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2443,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.339Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.339Z\",\n            \"updated\": \"2019-07-05T10:16:10.339Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Moon Sighting Issue) \\u2013 3rd June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-moon-sighting-issue-3rd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.339Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a6gs5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151692/news-eye-with-meher-abbasi-moon-sighting-issue-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2444,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.391Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.391Z\",\n            \"updated\": \"2019-07-05T10:16:10.391Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Shahid Khaqan Abbasi Exclusive) \\u2013 30th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-shahid-khaqan-abbasi-exclusive-30th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.391Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tqt0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151507/news-eye-with-meher-abbasi-shahid-khaqan-abbasi-exclusive-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2445,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.438Z\",\n            \"updated\": \"2019-07-05T10:16:10.438Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Discussion on Current Issues) \\u2013 29th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-discussion-on-current-issues-29th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.438Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79qga6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151450/news-eye-with-meher-abbasi-discussion-on-current-issues-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2446,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.480Z\",\n            \"updated\": \"2019-07-05T10:16:10.480Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Yaum e Takbeer) \\u2013 28th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-yaum-e-takbeer-28th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.480Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mkoi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151389/news-eye-with-meher-abbasi-yaum-e-takbeer-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2447,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.518Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.518Z\",\n            \"updated\": \"2019-07-05T10:16:10.518Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Who Want to Replace PM?) \\u2013 27th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-who-want-to-replace-pm-27th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.518Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79imn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151349/news-eye-with-meher-abbasi-who-want-to-replace-pm-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2448,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.578Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.577Z\",\n            \"updated\": \"2019-07-05T10:16:10.578Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Opposition Want to Topple PTI Govt) \\u2013 23rd May 2019\",\n            \"slug\": \"news-eye-opposition-want-to-topple-pti-govt-23rd-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.578Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795kfa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151121/news-eye-opposition-want-to-topple-pti-govt-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2449,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.692Z\",\n            \"updated\": \"2019-07-05T10:16:10.693Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (NAB Under Pressure) \\u2013 21st May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-nab-under-pressure-21st-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.693Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ylf5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151023/news-eye-with-meher-abbasi-nab-under-pressure-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2450,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.773Z\",\n            \"updated\": \"2019-07-05T10:16:10.774Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Anti Govt Movement) \\u2013 16th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-anti-govt-movement-16th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.774Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hvp1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150740/news-eye-with-meher-abbasi-anti-govt-movement-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2451,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.882Z\",\n            \"updated\": \"2019-07-05T10:16:10.882Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Fake Accounts Case) \\u2013 15th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-fake-accounts-case-15th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.882Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78esx0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150680/news-eye-with-meher-abbasi-fake-accounts-case-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2452,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:10.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:10.981Z\",\n            \"updated\": \"2019-07-05T10:16:10.981Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:10.981Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bo6h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150609/news-eye-with-meher-abbasi-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2453,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.254Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.253Z\",\n            \"updated\": \"2019-07-05T10:16:11.254Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Current Issues) \\u2013 9th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-current-issues-9th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.254Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/li15Hdp3w0g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150310/news-eye-with-meher-abbasi-current-issues-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2454,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.345Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.344Z\",\n            \"updated\": \"2019-07-05T10:16:11.345Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Shahid Kakhan Abbasi Exclusive Interview) \\u2013 8th May 2019\",\n            \"slug\": \"news-eye-shahid-kakhan-abbasi-exclusive-interview-8th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.345Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/rbbXPpylYIE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150243/news-eye-shahid-kakhan-abbasi-exclusive-interview-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2455,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.472Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.463Z\",\n            \"updated\": \"2019-07-05T10:16:11.472Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Nawaz Sharif Back to Jail) \\u2013 7th May 2018\",\n            \"slug\": \"news-eye-with-meher-abbasi-nawaz-sharif-back-to-jail-7th-may-2018\",\n            \"publish_date\": \"2019-07-05T10:16:11.472Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77ol66\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150177/news-eye-with-meher-abbasi-nawaz-sharif-back-to-jail-7th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2456,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.541Z\",\n            \"updated\": \"2019-07-05T10:16:11.542Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (New Economic Team) \\u2013 6th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-new-economic-team-6th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.542Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kzrz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150108/news-eye-with-meher-abbasi-new-economic-team-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2457,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.611Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.610Z\",\n            \"updated\": \"2019-07-05T10:16:11.611Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (NAB Qanoon Per Tanqeed) \\u2013 2nd May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-nab-qanoon-per-tanqeed-2nd-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.611Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7789f7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149856/news-eye-with-meher-abbasi-nab-qanoon-per-tanqeed-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2458,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.669Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.669Z\",\n            \"updated\": \"2019-07-05T10:16:11.669Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Old Faces in New Pakistan?) \\u2013 1st May 2019\",\n            \"slug\": \"news-eye-old-faces-in-new-pakistan-1st-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.669Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x775129\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149794/news-eye-old-faces-in-new-pakistan-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2459,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.709Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.709Z\",\n            \"updated\": \"2019-07-05T10:16:11.709Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Nay Pakistan Mein Purane Masayl) - 30th April 2019\",\n            \"slug\": \"news-eye-nay-pakistan-mein-purane-masayl-30th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.709Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7720v0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149721/news-eye-nay-pakistan-mein-purane-masayl-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2460,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.742Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.742Z\",\n            \"updated\": \"2019-07-05T10:16:11.742Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Who Is Funding PTM?) \\u2013 29th April 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-who-is-funding-ptm-29th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.742Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ybj3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149647/news-eye-with-meher-abbasi-who-is-funding-ptm-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2461,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.778Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.778Z\",\n            \"updated\": \"2019-07-05T10:16:11.778Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Sharif Family Cases) \\u2013 25th April 2019\",\n            \"slug\": \"news-eye-sharif-family-cases-25th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.778Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76lnsu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149410/news-eye-sharif-family-cases-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2462,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.804Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.804Z\",\n            \"updated\": \"2019-07-05T10:16:11.804Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Kia Punjab Mein Tabdeeli Aaye Gi?) \\u2013 24th April 2019\",\n            \"slug\": \"news-eye-kia-punjab-mein-tabdeeli-aaye-gi-24th-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.804Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76icr7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149344/news-eye-kia-punjab-mein-tabdeeli-aaye-gi-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2463,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.857Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.857Z\",\n            \"updated\": \"2019-07-05T10:16:11.857Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Allegation of Money Laundering on Sharif Family) \\u2013 23rd April 2019\",\n            \"slug\": \"news-eye-allegation-of-money-laundering-on-sharif-family-23rd-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.857Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fnlt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149306/news-eye-allegation-of-money-laundering-on-sharif-family-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2464,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.889Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:11.889Z\",\n            \"updated\": \"2019-07-05T10:16:11.889Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 45,\n                \"feed_id\": 28,\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Technocrats in PTI Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"news-eye-technocrats-in-pti-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-05T10:16:11.890Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76c8a0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149238/news-eye-technocrats-in-pti-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2465,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.075Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.075Z\",\n            \"updated\": \"2019-07-05T10:16:12.075Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (FBR In Action) \\u2013 3rd July 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fbr-in-action-3rd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.075Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfq48\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153434/tajzia-sami-ibrahim-kay-sath-fbr-in-action-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2466,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.117Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.117Z\",\n            \"updated\": \"2019-07-05T10:16:12.117Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Rana Sanaullah Arrest) \\u2013 2nd July 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-rana-sanaullah-arrest-2nd-july-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.117Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd9gj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153381/tajzia-sami-ibrahim-kay-sath-rana-sanaullah-arrest-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2467,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.213Z\",\n            \"updated\": \"2019-07-05T10:16:12.214Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Usman Buzdar's Performance) \\u2013 30th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-usman-buzdars-performance-30th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.214Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c7pjq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153222/tajzia-sami-ibrahim-kay-sath-usman-buzdar-s-performance-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2468,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.312Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.312Z\",\n            \"updated\": \"2019-07-05T10:16:12.312Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fake Bank Accounts Case) \\u2013 29th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-29th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.312Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5eox\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153162/tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2469,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.422Z\",\n            \"updated\": \"2019-07-05T10:16:12.423Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Army Chief Hopeful About Economy) \\u2013 28th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-army-chief-hopeful-about-economy-28th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.423Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c2xdv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153097/tajzia-sami-ibrahim-kay-sath-army-chief-hopeful-about-economy-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2470,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.479Z\",\n            \"updated\": \"2019-07-05T10:16:12.480Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Asif Zardari Ki Paishi) \\u2013 27th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-asif-zardari-ki-paishi-27th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.480Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0nm9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153028/tajzia-sami-ibrahim-kay-sath-asif-zardari-ki-paishi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2471,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.548Z\",\n            \"updated\": \"2019-07-05T10:16:12.549Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (All Parties Conference ) \\u2013 26th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.549Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxu8a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152958/tajzia-sami-ibrahim-kay-sath-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2472,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.637Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.637Z\",\n            \"updated\": \"2019-07-05T10:16:12.637Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Kia Jamhoriyat Khatre Mein) \\u2013 25th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-kia-jamhoriyat-khatre-mein-25th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.637Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvfhn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152901/tajzia-sami-ibrahim-kay-sath-kia-jamhoriyat-khatre-mein-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2473,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.814Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.814Z\",\n            \"updated\": \"2019-07-05T10:16:12.814Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Babar Awan Exclusive Interview) \\u2013 Tajzia Sami Ibrahim Kay Sath (Babar Awan Exclusive Interview) \\u2013 24th June 201924th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-24th-june-201924th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.814Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bswo6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152818/tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-24th-june-201924th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2474,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.902Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.902Z\",\n            \"updated\": \"2019-07-05T10:16:12.902Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Misaq e Maeeshat Ya NRO?) \\u2013 23rd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-misaq-e-maeeshat-ya-nro-23rd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.902Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bqne2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152764/tajzia-sami-ibrahim-kay-sath-misaq-e-maeeshat-ya-nro-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2475,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:12.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:12.980Z\",\n            \"updated\": \"2019-07-05T10:16:12.981Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Maryam Nawaz Vs Shahbaz Sharif) \\u2013 22nd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:12.981Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7boxny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152699/tajzia-sami-ibrahim-kay-sath-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2476,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.069Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.068Z\",\n            \"updated\": \"2019-07-05T10:16:13.069Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Maeeshat Aur Siasat) \\u2013 21st June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-maeeshat-aur-siasat-21st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.069Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn0bu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152639/tajzia-sami-ibrahim-kay-sath-maeeshat-aur-siasat-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2477,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.147Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.147Z\",\n            \"updated\": \"2019-07-05T10:16:13.147Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Nawaz Sharif's Bail Plea Rejected) \\u2013 20th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-nawaz-sharifs-bail-plea-rejected-20th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.147Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl8qz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152566/tajzia-sami-ibrahim-kay-sath-nawaz-sharif-s-bail-plea-rejected-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2478,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.285Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.285Z\",\n            \"updated\": \"2019-07-05T10:16:13.285Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Will Ishaq Dar Be Brought Back) \\u2013 19th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-will-ishaq-dar-be-brought-back-19th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.285Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjjxx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152499/tajzia-sami-ibrahim-kay-sath-will-ishaq-dar-be-brought-back-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2479,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.402Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.401Z\",\n            \"updated\": \"2019-07-05T10:16:13.402Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fake Bank Accounts Case) \\u2013 18th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-18th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.402Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhwk6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152455/tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2480,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.454Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.453Z\",\n            \"updated\": \"2019-07-05T10:16:13.460Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (PM Imran Khan Contacts Sami Ibrahim) \\u2013 17th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-pm-imran-khan-contacts-sami-ibrahim-17th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.460Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bge9m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152381/tajzia-sami-ibrahim-kay-sath-pm-imran-khan-contacts-sami-ibrahim-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2481,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.543Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.542Z\",\n            \"updated\": \"2019-07-05T10:16:13.561Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fawad Chaudhry Ka Hamla) \\u2013 16th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ka-hamla-16th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.561Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bd4i9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152328/tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ka-hamla-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2482,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.676Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.676Z\",\n            \"updated\": \"2019-07-05T10:16:13.676Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fawad Chaudhry Ki Ghunda Gardi) \\u2013 15th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ki-ghunda-gardi-15th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.676Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b9wlt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152281/tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ki-ghunda-gardi-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2483,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.765Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.765Z\",\n            \"updated\": \"2019-07-05T10:16:13.765Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Pak India Relations) \\u2013 14th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-pak-india-relations-14th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.765Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6em9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152223/tajzia-sami-ibrahim-kay-sath-pak-india-relations-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2484,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.808Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.808Z\",\n            \"updated\": \"2019-07-05T10:16:13.808Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath  (Reference Against Justice Qazi Faez Isa) \\u2013 13th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.808Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2aia\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152167/tajzia-sami-ibrahim-kay-sath-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2485,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.855Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.855Z\",\n            \"updated\": \"2019-07-05T10:16:13.855Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Opposition Vs Govt) \\u2013 12th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-opposition-vs-govt-12th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.855Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay5a0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152110/tajzia-sami-ibrahim-kay-sath-opposition-vs-govt-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2486,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.890Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.890Z\",\n            \"updated\": \"2019-07-05T10:16:13.890Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Three Important Arrests) \\u2013 11th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-three-important-arrests-11th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.890Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7auhcu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152078/tajzia-sami-ibrahim-kay-sath-three-important-arrests-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2487,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.918Z\",\n            \"updated\": \"2019-07-05T10:16:13.919Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (NAB Arrests Asif Zardari) \\u2013 10th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-nab-arrests-asif-zardari-10th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.919Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqmt9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151982/tajzia-sami-ibrahim-kay-sath-nab-arrests-asif-zardari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2488,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:13.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:13.973Z\",\n            \"updated\": \"2019-07-05T10:16:13.974Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Reference Against Judges) \\u2013 9th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-reference-against-judges-9th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:13.974Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anofe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151919/tajzia-sami-ibrahim-kay-sath-reference-against-judges-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2489,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.024Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.023Z\",\n            \"updated\": \"2019-07-05T10:16:14.024Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (PMLN's Narrative) \\u2013 8th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-pmlns-narrative-8th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.024Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7al38n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151873/tajzia-sami-ibrahim-kay-sath-pmln-s-narrative-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2490,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.072Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.071Z\",\n            \"updated\": \"2019-07-05T10:16:14.072Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Opposition Ready For Movement) \\u2013 7th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-opposition-ready-for-movement-7th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.072Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ai8wh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151833/tajzia-sami-ibrahim-kay-sath-opposition-ready-for-movement-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2491,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.100Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.100Z\",\n            \"updated\": \"2019-07-05T10:16:14.101Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Eid Special \\u2013 6th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.101Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/l12aeRrboA4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151807/tajzia-sami-ibrahim-kay-sath-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2492,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.136Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.133Z\",\n            \"updated\": \"2019-07-05T10:16:14.136Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Mehngai Ka Tufan) \\u2013 5th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-mehngai-ka-tufan-5th-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.136Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ac973\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151755/tajzia-sami-ibrahim-kay-sath-mehngai-ka-tufan-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2493,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.191Z\",\n            \"updated\": \"2019-07-05T10:16:14.191Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (What Fawad Chaudhry Wants?) \\u2013 3rd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-what-fawad-chaudhry-wants-3rd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.191Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a668v\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151682/tajzia-sami-ibrahim-kay-sath-what-fawad-chaudhry-wants-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2494,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.226Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.225Z\",\n            \"updated\": \"2019-07-05T10:16:14.226Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (5 Children Died in DHQ Hosptial Sahiwal) \\u2013 2nd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-5-children-died-in-dhq-hosptial-sahiwal-2nd-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.226Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3dcz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151643/tajzia-sami-ibrahim-kay-sath-5-children-died-in-dhq-hosptial-sahiwal-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2495,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.270Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.270Z\",\n            \"updated\": \"2019-07-05T10:16:14.270Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Petrol Bomb Dropped on Public) \\u2013 1st June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-petrol-bomb-dropped-on-public-1st-june-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.270Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a0pxm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151596/tajzia-sami-ibrahim-kay-sath-petrol-bomb-dropped-on-public-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2496,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.300Z\",\n            \"updated\": \"2019-07-05T10:16:14.300Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Reference Against Judges) \\u2013 31st May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-reference-against-judges-31st-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.300Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xhet\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151543/tajzia-sami-ibrahim-kay-sath-reference-against-judges-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2497,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.351Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.350Z\",\n            \"updated\": \"2019-07-05T10:16:14.351Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Corrupt Politicians Ka Ahtasab Kab Hoga?) \\u2013 30th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-corrupt-politicians-ka-ahtasab-kab-hoga-30th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.351Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tc8u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151484/tajzia-sami-ibrahim-kay-sath-corrupt-politicians-ka-ahtasab-kab-hoga-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2498,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.398Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.398Z\",\n            \"updated\": \"2019-07-05T10:16:14.398Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fake Bank Account Case) \\u2013 29th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fake-bank-account-case-29th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.398Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79pylz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151426/tajzia-sami-ibrahim-kay-sath-fake-bank-account-case-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2499,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.499Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.499Z\",\n            \"updated\": \"2019-07-05T10:16:14.499Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Who Is Funding PTM?) \\u2013 28th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-who-is-funding-ptm-28th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.499Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mh2h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151388/tajzia-sami-ibrahim-kay-sath-who-is-funding-ptm-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2500,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.547Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.547Z\",\n            \"updated\": \"2019-07-05T10:16:14.547Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Tabdeeli Kab Aaye Gi?) \\u2013 27th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-tabdeeli-kab-aaye-gi-27th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.547Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79i9vq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151331/tajzia-sami-ibrahim-kay-sath-tabdeeli-kab-aaye-gi-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2501,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.582Z\",\n            \"updated\": \"2019-07-05T10:16:14.582Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (PTM Attack on Army) \\u2013 26th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-ptm-attack-on-army-26th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.582Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/2vs2xU4kRKk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151277/tajzia-sami-ibrahim-kay-sath-ptm-attack-on-army-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2502,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.609Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.608Z\",\n            \"updated\": \"2019-07-05T10:16:14.609Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Conspiracy Against Chairman NAB) \\u2013 25th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-conspiracy-against-chairman-nab-25th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.609Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79bypw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151232/tajzia-sami-ibrahim-kay-sath-conspiracy-against-chairman-nab-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2503,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.678Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.677Z\",\n            \"updated\": \"2019-07-05T10:16:14.678Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Conspiracy Against Chairman NAB) \\u2013 24th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-conspiracy-against-chairman-nab-24th-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.678Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x798rw7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151169/tajzia-sami-ibrahim-kay-sath-conspiracy-against-chairman-nab-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2504,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:16:14.710Z\",\n            \"updated\": \"2019-07-05T10:16:14.711Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 51,\n                \"feed_id\": 33,\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Opposition United) \\u2013 21st May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-opposition-united-21st-may-2019\",\n            \"publish_date\": \"2019-07-05T10:16:14.711Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78yadw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151005/tajzia-sami-ibrahim-kay-sath-opposition-united-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    }\n]\n":1hjfP4:3Ysf2i1Zj9q2KfF6rvBq3gr6BcY