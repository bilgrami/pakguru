"[\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 1,\n        \"fields\": {\n            \"show_name\": \"60 Minutes\",\n            \"host_name\": \"Lesley Stahl (host, 1991\\u2013present, co-editor), Scott Pelley (host, 2003\\u2013present), Bill Whitaker (host, 2014\\u2013present), John Dickerson (2019\\u2013present)\",\n            \"airtime\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": \"https://www.facebook.com/60minutes/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"description\": \"60 Minutes is an American news magazine and television program broadcast on the CBS television network. Debuting in 1968, the program was created by Don Hewitt, who chose to set it apart from other news programs by using a unique style of reporter-centered investigation.\\r\\n\\r\\nhttps://en.wikipedia.org/wiki/60_Minutes\\r\\n\\r\\nhttps://www.youtube.com/user/60minutes\",\n            \"category\": 1,\n            \"channel\": 1,\n            \"primary_feed\": 1,\n            \"locale\": 1,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:05:15.181Z\",\n            \"updated\": \"2019-07-01T01:15:52.903Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                2\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 2,\n        \"fields\": {\n            \"show_name\": \"Zara Hat Kay\",\n            \"host_name\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n            \"airtime\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": \"https://www.facebook.com/ZHKDawn/\",\n            \"twitter_link\": \"https://twitter.com/zarahatkay_dawn\",\n            \"instagram_link\": null,\n            \"description\": \"Zara Hat Kay \\u2013 Your dose of daily news, away from the mainstream talk shows, a show that speaks your mind and is interactive with the public on social media.\",\n            \"category\": 1,\n            \"channel\": 2,\n            \"primary_feed\": 3,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T02:14:43.015Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:34:13.765Z\",\n            \"updated\": \"2019-07-03T02:14:43.015Z\",\n            \"additional_feeds\": [\n                2,\n                4\n            ],\n            \"country\": [\n                1,\n                2,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 3,\n        \"fields\": {\n            \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n            \"host_name\": \"Hassan Nisar\",\n            \"airtime\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 5,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:28:10.192Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:58:03.243Z\",\n            \"updated\": \"2019-07-03T06:28:10.192Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 4,\n        \"fields\": {\n            \"show_name\": \"Live with Dr. Shahid Masood\",\n            \"host_name\": \"Dr. Shahid Masood\",\n            \"airtime\": null,\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://www.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"description\": \"G News Network, commonly known as GNN, is a Pakistani 24-hour news and current affairs channel based in Lahore, Pakistan. It is owned and operated by Gourmet Foods.\",\n            \"category\": 1,\n            \"channel\": 5,\n            \"primary_feed\": 6,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T09:03:22.498Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T09:03:22.498Z\",\n            \"updated\": \"2019-07-01T09:03:22.498Z\",\n            \"additional_feeds\": [\n                6\n            ],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 5,\n        \"fields\": {\n            \"show_name\": \"Score with Yahya Hussaini\",\n            \"host_name\": \"Yahya Hussaini\",\n            \"airtime\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"description\": \"Score is a Pakistani sports talk show hosted by Yahya Hussaini that is broadcast on Geo TV. It is written by Khursheed Alam and directed by Farrukh Suleman. The show debuted in February 2011.\",\n            \"category\": 6,\n            \"channel\": 4,\n            \"primary_feed\": 7,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:11:18.786Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:11:18.786Z\",\n            \"updated\": \"2019-07-01T19:11:18.786Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 6,\n        \"fields\": {\n            \"show_name\": \"Deewar e Shab\",\n            \"host_name\": \"HUM TV\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.hum.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCEeEQxm6qc_qaTE7qTV5aLQ\",\n            \"facebook_link\": \"https://www.facebook.com/humtvpakistan\",\n            \"twitter_link\": null,\n            \"instagram_link\": \"https://www.instagram.com/humtvpakistanofficial/\",\n            \"description\": \"Deewar-e-Shab is a 2019 Pakistani epic historical television series created and produced by Momina Duraid of MD Productions, and directed by Iqbal Hussain. It is the dramatization of the novel of the same name by Aliya Bukhari.\",\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": 8,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:55:12.407Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:55:12.407Z\",\n            \"updated\": \"2019-07-01T19:55:12.407Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 7,\n        \"fields\": {\n            \"show_name\": \"Muqabil\",\n            \"host_name\": \"Haroon ur Rasheed, Zafar Hilaly\",\n            \"airtime\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"description\": \"Haroon ur Rasheed and Zafar Hilaly expose the political failures in our society, in a highly rated and popular TV show, Muqabil, hosted by Alina Shigri. Watch as how both of these seasoned journalists unfold the various sides of stories, everyday at 10:03 PM from Monday to Thursday.\",\n            \"category\": 1,\n            \"channel\": 7,\n            \"primary_feed\": 9,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-02T17:07:46.271Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:07:46.271Z\",\n            \"updated\": \"2019-07-02T17:07:46.271Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 8,\n        \"fields\": {\n            \"show_name\": \"Off The Record\",\n            \"host_name\": \"Kashif Abbasi\",\n            \"airtime\": null,\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCMmpLL2ucRHAXbNHiCPyIyg\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"description\": \"Kashif Abasi is a Pakistani journalist, television talk show host and anchorperson based in Islamabad. He hosts the current affairs talk show Off the Record on ARY News.\",\n            \"category\": 1,\n            \"channel\": 8,\n            \"primary_feed\": 10,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-02T17:33:36.918Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:33:36.918Z\",\n            \"updated\": \"2019-07-02T17:33:36.918Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 9,\n        \"fields\": {\n            \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n            \"host_name\": \"Kamran Khan\",\n            \"airtime\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 11,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T04:16:16.944Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T04:16:16.944Z\",\n            \"updated\": \"2019-07-03T04:16:16.944Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 10,\n        \"fields\": {\n            \"show_name\": \"Aap Kay Muqabil\",\n            \"host_name\": \"Rauf Klasra, Amir Mateen\",\n            \"airtime\": null,\n            \"website_link\": \"https://aapnews.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCPTF7suymU_TvRvRPYuHdvA\",\n            \"facebook_link\": \"https://web.facebook.com/aapnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aapnewspk\",\n            \"instagram_link\": \"https://www.instagram.com/aapnewspk/\",\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 9,\n            \"primary_feed\": 12,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T07:58:42.860Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T07:58:42.860Z\",\n            \"updated\": \"2019-07-03T07:58:42.860Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 11,\n        \"fields\": {\n            \"show_name\": \"The Reporters\",\n            \"host_name\": \"Sabir Shakir\",\n            \"airtime\": null,\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/user/ARYNEWSofficial\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 8,\n            \"primary_feed\": 13,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:18:08.135Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:18:08.135Z\",\n            \"updated\": \"2019-07-03T08:18:08.135Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 12,\n        \"fields\": {\n            \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n            \"host_name\": \"Shahzaib Khanzada\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"description\": \"A program that combines fast paced news, undivided analysis and stories that make headlines. Anchored by an energetic and strong host, Shahzeb Khanzada.\",\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 14,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:30:54.772Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:30:54.772Z\",\n            \"updated\": \"2019-07-03T08:30:54.772Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 13,\n        \"fields\": {\n            \"show_name\": \"Night Edition\",\n            \"host_name\": \"Shazia Akram\",\n            \"airtime\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"description\": \"Night Edition is a Current Affair Program hosted by Shazia Akram.\",\n            \"category\": 1,\n            \"channel\": 7,\n            \"primary_feed\": 15,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:45:55.320Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:45:55.320Z\",\n            \"updated\": \"2019-07-03T08:45:55.320Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 14,\n        \"fields\": {\n            \"show_name\": \"Jirga\",\n            \"host_name\": \"Saleem Safi\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"description\": \"Jirga covers every important issue related to politics, economy, sociology, religion and international relations. It is a journey to achieve prosperous future by providing access to bitter truth through serious and thought provoking dialogue.\",\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 16,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:51:28.128Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:51:28.128Z\",\n            \"updated\": \"2019-07-03T08:51:28.128Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 15,\n        \"fields\": {\n            \"show_name\": \"Bebaak\",\n            \"host_name\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n            \"airtime\": null,\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://web.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"description\": \"Ch. Ghulam Hussain and Saeed Qazi will provide you with insights and indepth analysis only on Bebaak, only on GNN!\",\n            \"category\": 1,\n            \"channel\": 5,\n            \"primary_feed\": 17,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:02:59.193Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:02:59.193Z\",\n            \"updated\": \"2019-07-03T09:02:59.193Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 16,\n        \"fields\": {\n            \"show_name\": \"Capital Talk\",\n            \"host_name\": \"Hamid Mir\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"description\": \"Capital Talk looks at the challenges, issues and concerns facing Pakistan on a daily basis. The format includes a panel of renowned personalities who participate in a dialogue which contributes\",\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 18,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:12:30.637Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:12:30.638Z\",\n            \"updated\": \"2019-07-03T09:12:30.638Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 17,\n        \"fields\": {\n            \"show_name\": \"Hard Talk Pakistan\",\n            \"host_name\": \"Dr. Moeed Pirzada\",\n            \"airtime\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 7,\n            \"primary_feed\": 19,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:19:58.058Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:19:58.058Z\",\n            \"updated\": \"2019-07-03T09:19:58.058Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 18,\n        \"fields\": {\n            \"show_name\": \"Power Play\",\n            \"host_name\": \"Arshad Sharif\",\n            \"airtime\": null,\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/user/ARYNEWSofficial\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 8,\n            \"primary_feed\": 20,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:29:47.363Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:29:47.363Z\",\n            \"updated\": \"2019-07-03T09:29:47.363Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 19,\n        \"fields\": {\n            \"show_name\": \"Najam Sethi Show\",\n            \"host_name\": \"Najam Sethi\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.24newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCcmpeVbSSQlZRvHfdC-CRwg\",\n            \"facebook_link\": \"https://web.facebook.com/24NewsHD.tv?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/24NewsHDtv\",\n            \"instagram_link\": null,\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 10,\n            \"primary_feed\": 21,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:48:03.417Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:48:03.417Z\",\n            \"updated\": \"2019-07-03T09:48:03.417Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 20,\n        \"fields\": {\n            \"show_name\": \"Think Tank\",\n            \"host_name\": \"Syeda Ayesha Naz\",\n            \"airtime\": null,\n            \"website_link\": \"http://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/dunyanews1\",\n            \"facebook_link\": \"https://web.facebook.com/dunyanews?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews\",\n            \"instagram_link\": null,\n            \"description\": \"It's not a TV show, it's a Think Tank. The participants are Sohail Warraich, Ayaz Amir, Haroon ur Rasheed and Salman Ghani. Presented by brainy girl Syeda Ayesha Naz.\",\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 22,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:13:11.398Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:11:14.738Z\",\n            \"updated\": \"2019-07-03T18:13:11.398Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 21,\n        \"fields\": {\n            \"show_name\": \"Harf e Raaz\",\n            \"host_name\": \"Orya Maqbool Jan\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.neonetwork.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCAsvFcpUQegneSh0QAUd64A\",\n            \"facebook_link\": \"https://web.facebook.com/neotvnetwork/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/NeoNewsUR\",\n            \"instagram_link\": null,\n            \"description\": \"Harf E Raz is a flagship Neo News program which is a one-hour debate on current events hosted by Jameel Farooqui.And Creative Presenter by Orya Maqbool Jan . Harf E Raz looks at the challenges, issues, and concerns facing Pakistan on a daily basis.\",\n            \"category\": 1,\n            \"channel\": 11,\n            \"primary_feed\": 23,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:26:26.869Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:26:26.869Z\",\n            \"updated\": \"2019-07-03T18:26:26.869Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 22,\n        \"fields\": {\n            \"show_name\": \"Khara Sach\",\n            \"host_name\": \"Mubashir Lucman\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.24newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCcmpeVbSSQlZRvHfdC-CRwg\",\n            \"facebook_link\": \"https://web.facebook.com/24NewsHD.tv?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/24NewsHDtv\",\n            \"instagram_link\": null,\n            \"description\": \"Mubashir Luqman brings you the latest news with his hard-hitting analysis on Pakistan politics in Khara Sach.\",\n            \"category\": 1,\n            \"channel\": 10,\n            \"primary_feed\": 24,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:36:11.261Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:36:11.261Z\",\n            \"updated\": \"2019-07-03T18:36:11.261Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 23,\n        \"fields\": {\n            \"show_name\": \"Kal Tak\",\n            \"host_name\": \"Javed Chaudhry\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://web.facebook.com/expressnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"description\": \"Kal Tak is a Pakistani television show that covers a variety of subject include social issues and current affairs.\",\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 25,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:51:19.433Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:51:19.433Z\",\n            \"updated\": \"2019-07-03T18:51:19.433Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 24,\n        \"fields\": {\n            \"show_name\": \"Faisla Aap Ka\",\n            \"host_name\": \"Asma Sherazi\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.aaj.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCgBAPAcLsh_MAPvJprIz89w\",\n            \"facebook_link\": \"https://web.facebook.com/aajtv0/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aaj_urdu\",\n            \"instagram_link\": null,\n            \"description\": \"\",\n            \"category\": 1,\n            \"channel\": 13,\n            \"primary_feed\": 26,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T19:13:45.942Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:13:45.942Z\",\n            \"updated\": \"2019-07-03T19:13:45.942Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 25,\n        \"fields\": {\n            \"show_name\": \"Faisla Aap Ka\",\n            \"host_name\": \"Mansoor Ali Khan\",\n            \"airtime\": null,\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://web.facebook.com/expressnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"description\": \"To the Point is a Pakistani television show that covers a variety of subject include social issues and current affairs.\",\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 27,\n            \"locale\": 2,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T19:24:03.444Z\",\n            \"expiration_date\": null,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:24:03.444Z\",\n            \"updated\": \"2019-07-03T19:24:03.444Z\",\n            \"additional_feeds\": [],\n            \"country\": [\n                4\n            ]\n        }\n    }\n]\n":1hipgE:kGUrWPmy3L2OMfmAFRMoU8eTYPE