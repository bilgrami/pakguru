"[\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 1,\n        \"fields\": {\n            \"channel_short_code\": \"CBS\",\n            \"channel_name\": \"CBS\",\n            \"description\": \"CBS is an American English language commercial broadcast television and radio network that is a flagship property of CBS Corporation. The company is headquartered at the CBS Building in New York City with major production facilities and operations in New York City and Los Angeles\",\n            \"website_link\": \"http://cbs.com\",\n            \"youtube_link\": null,\n            \"facebook_link\": \"https://www.facebook.com/CBS/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"country\": 2,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:44:09.335Z\",\n            \"updated\": \"2019-07-01T00:44:09.335Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 2,\n        \"fields\": {\n            \"channel_short_code\": \"Dawn News\",\n            \"channel_name\": \"Dawn News\",\n            \"description\": \"Dawn is Pakistan's oldest, leading and most widely read English-language newspaper and is the country's newspaper of record. It is one of the country's three largest English-language dailies and the flagship of the Dawn Group of Newspapers.\",\n            \"website_link\": \"https://en.wikipedia.org/wiki/Dawn_(newspaper)\",\n            \"youtube_link\": \"https://www.youtube.com/user/dawnnewspakistan\",\n            \"facebook_link\": \"https://www.facebook.com/DawnNews/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:46:09.650Z\",\n            \"updated\": \"2019-07-01T02:51:51.851Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 3,\n        \"fields\": {\n            \"channel_short_code\": \"Dunya News\",\n            \"channel_name\": \"Dunya News\",\n            \"description\": \"Dunya News is a 24 hours Urdu language news and current affairs television channel from Pakistan. It is governed and operated by the National Communication Services Pvt. Ltd. Its head office is situated at Lahore, Pakistan. \\r\\n\\r\\nhttps://en.wikipedia.org/wiki/Dunya_News\",\n            \"website_link\": \"https://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": \"https://www.facebook.com/dunyanews/\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews\",\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:47:44.156Z\",\n            \"updated\": \"2019-07-01T02:53:25.223Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 4,\n        \"fields\": {\n            \"channel_short_code\": \"Geo News\",\n            \"channel_name\": \"Geo News\",\n            \"description\": \"\",\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:54:22.633Z\",\n            \"updated\": \"2019-07-01T05:54:22.633Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 5,\n        \"fields\": {\n            \"channel_short_code\": \"GNN\",\n            \"channel_name\": \"GNN\",\n            \"description\": \"G News Network, commonly known as GNN, is a Pakistani 24-hour news and current affairs channel based in Lahore, Pakistan. It is owned and operated by Gourmet Foods.\",\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://www.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T08:42:51.088Z\",\n            \"updated\": \"2019-07-01T08:42:51.088Z\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 6,\n        \"fields\": {\n            \"channel_short_code\": \"HUM TV\",\n            \"channel_name\": \"HUM TV\",\n            \"description\": \"Hum TV is a 24-hour Urdu General Entertainment TV channel based in Karachi, Pakistan. It was founded by Sultana Siddiqui and Duraid Qureshi. It is owned by Hum Network Limited. Hum Network Limited was known as Eye Television Network Limited prior to 21 January 2011. Hum TV began its transmission on 17 January 2005.\",\n            \"website_link\": \"https://www.hum.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCEeEQxm6qc_qaTE7qTV5aLQ\",\n            \"facebook_link\": \"https://www.facebook.com/humtvpakistan\",\n            \"twitter_link\": null,\n            \"instagram_link\": \"https://www.instagram.com/humtvpakistanofficial/\",\n            \"country\": 1,\n            \"is_active\": true,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:46:01.465Z\",\n            \"updated\": \"2019-07-01T19:46:01.465Z\"\n        }\n    }\n]\n":1hi5Qb:XkbCnM3A9ybcSq2hU7fw8aJQW38