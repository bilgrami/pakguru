IltcbiAgICB7XG4gICAgICAgIFwibW9kZWxcIjogXCJwYWtndXJ1X2FwcC5zaG93XCIsXG4gICAgICAgIFwicGtcIjogMSxcbiAgICAgICAgXCJmaWVsZHNcIjoge1xuICAgICAgICAgICAgXCJzaG93X25hbWVcIjogXCI2MCBNaW51dGVzXCIsXG4gICAgICAgICAgICBcImhvc3RfbmFtZVwiOiBcIkxlc2xleSBTdGFobCAoaG9zdCwgMTk5MVxcdTIwMTNwcmVzZW50LCBjby1lZGl0b3IpLCBTY290dCBQZWxsZXkgKGhvc3QsIDIwMDNcXHUyMDEzcHJlc2VudCksIEJpbGwgV2hpdGFrZXIgKGhvc3QsIDIwMTRcXHUyMDEzcHJlc2VudCksIEpvaG4gRGlja2Vyc29uICgyMDE5XFx1MjAxM3ByZXNlbnQpXCIsXG4gICAgICAgICAgICBcImFpcnRpbWVcIjogbnVsbCxcbiAgICAgICAgICAgIFwid2Vic2l0ZV9saW5rXCI6IG51bGwsXG4gICAgICAgICAgICBcInlvdXR1YmVfbGlua1wiOiBudWxsLFxuICAgICAgICAgICAgXCJmYWNlYm9va19saW5rXCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLzYwbWludXRlcy9cIixcbiAgICAgICAgICAgIFwidHdpdHRlcl9saW5rXCI6IG51bGwsXG4gICAgICAgICAgICBcImluc3RhZ3JhbV9saW5rXCI6IG51bGwsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiNjAgTWludXRlcyBpcyBhbiBBbWVyaWNhbiBuZXdzIG1hZ2F6aW5lIGFuZCB0ZWxldmlzaW9uIHByb2dyYW0gYnJvYWRjYXN0IG9uIHRoZSBDQlMgdGVsZXZpc2lvbiBuZXR3b3JrLiBEZWJ1dGluZyBpbiAxOTY4LCB0aGUgcHJvZ3JhbSB3YXMgY3JlYXRlZCBieSBEb24gSGV3aXR0LCB3aG8gY2hvc2UgdG8gc2V0IGl0IGFwYXJ0IGZyb20gb3RoZXIgbmV3cyBwcm9ncmFtcyBieSB1c2luZyBhIHVuaXF1ZSBzdHlsZSBvZiByZXBvcnRlci1jZW50ZXJlZCBpbnZlc3RpZ2F0aW9uLlxcclxcblxcclxcbmh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpLzYwX01pbnV0ZXNcXHJcXG5cXHJcXG5odHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyLzYwbWludXRlc1wiLFxuICAgICAgICAgICAgXCJjYXRlZ29yeVwiOiAxLFxuICAgICAgICAgICAgXCJjaGFubmVsXCI6IDEsXG4gICAgICAgICAgICBcInByaW1hcnlfZmVlZFwiOiAxLFxuICAgICAgICAgICAgXCJsb2NhbGVcIjogMSxcbiAgICAgICAgICAgIFwiaXNfYWN0aXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcImVmZmVjdGl2ZV9kYXRlXCI6IFwiMjAxOS0wNy0wMVQwMToxNTo1Mi45MDNaXCIsXG4gICAgICAgICAgICBcImV4cGlyYXRpb25fZGF0ZVwiOiBudWxsLFxuICAgICAgICAgICAgXCJleHRyYV9kYXRhXCI6IG51bGwsXG4gICAgICAgICAgICBcImFkZGVkX2J5XCI6IFtcbiAgICAgICAgICAgICAgICBcImFkbWluXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNyZWF0ZWRcIjogXCIyMDE5LTA3LTAxVDAxOjA1OjE1LjE4MVpcIixcbiAgICAgICAgICAgIFwidXBkYXRlZFwiOiBcIjIwMTktMDctMDFUMDE6MTU6NTIuOTAzWlwiLFxuICAgICAgICAgICAgXCJhZGRpdGlvbmFsX2ZlZWRzXCI6IFtdLFxuICAgICAgICAgICAgXCJjb3VudHJ5XCI6IFtcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJtb2RlbFwiOiBcInBha2d1cnVfYXBwLnNob3dcIixcbiAgICAgICAgXCJwa1wiOiAyLFxuICAgICAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgICAgICBcInNob3dfbmFtZVwiOiBcIlphcmEgSGF0IEtheVwiLFxuICAgICAgICAgICAgXCJob3N0X25hbWVcIjogXCJXdXNhdHVsbGFoIEtoYW4sIFphcmFyIEtob3JvICYgTXViYXNoaXIgWmFpZGlcIixcbiAgICAgICAgICAgIFwiYWlydGltZVwiOiBudWxsLFxuICAgICAgICAgICAgXCJ3ZWJzaXRlX2xpbmtcIjogbnVsbCxcbiAgICAgICAgICAgIFwieW91dHViZV9saW5rXCI6IG51bGwsXG4gICAgICAgICAgICBcImZhY2Vib29rX2xpbmtcIjogXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vWkhLRGF3bi9cIixcbiAgICAgICAgICAgIFwidHdpdHRlcl9saW5rXCI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS96YXJhaGF0a2F5X2Rhd25cIixcbiAgICAgICAgICAgIFwiaW5zdGFncmFtX2xpbmtcIjogbnVsbCxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJaYXJhIEhhdCBLYXkgXFx1MjAxMyBZb3VyIGRvc2Ugb2YgZGFpbHkgbmV3cywgYXdheSBmcm9tIHRoZSBtYWluc3RyZWFtIHRhbGsgc2hvd3MsIGEgc2hvdyB0aGF0IHNwZWFrcyB5b3VyIG1pbmQgYW5kIGlzIGludGVyYWN0aXZlIHdpdGggdGhlIHB1YmxpYyBvbiBzb2NpYWwgbWVkaWEuXCIsXG4gICAgICAgICAgICBcImNhdGVnb3J5XCI6IDEsXG4gICAgICAgICAgICBcImNoYW5uZWxcIjogMixcbiAgICAgICAgICAgIFwicHJpbWFyeV9mZWVkXCI6IDQsXG4gICAgICAgICAgICBcImxvY2FsZVwiOiAyLFxuICAgICAgICAgICAgXCJpc19hY3RpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZWZmZWN0aXZlX2RhdGVcIjogXCIyMDE5LTA3LTAxVDAzOjE0OjQ1LjUyNFpcIixcbiAgICAgICAgICAgIFwiZXhwaXJhdGlvbl9kYXRlXCI6IG51bGwsXG4gICAgICAgICAgICBcImV4dHJhX2RhdGFcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYWRkZWRfYnlcIjogW1xuICAgICAgICAgICAgICAgIFwiYWRtaW5cIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY3JlYXRlZFwiOiBcIjIwMTktMDctMDFUMDE6MzQ6MTMuNzY1WlwiLFxuICAgICAgICAgICAgXCJ1cGRhdGVkXCI6IFwiMjAxOS0wNy0wMVQwMzoxNDo0NS41MjRaXCIsXG4gICAgICAgICAgICBcImFkZGl0aW9uYWxfZmVlZHNcIjogW1xuICAgICAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAgICAgM1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY291bnRyeVwiOiBbXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm1vZGVsXCI6IFwicGFrZ3VydV9hcHAuc2hvd1wiLFxuICAgICAgICBcInBrXCI6IDMsXG4gICAgICAgIFwiZmllbGRzXCI6IHtcbiAgICAgICAgICAgIFwic2hvd19uYW1lXCI6IFwiTWVyYXkgTXV0YWJpcSBXaXRoIEhhc3NhbiBOaXNhclwiLFxuICAgICAgICAgICAgXCJob3N0X25hbWVcIjogXCJIYXNzYW4gTmlzYXJcIixcbiAgICAgICAgICAgIFwiYWlydGltZVwiOiBudWxsLFxuICAgICAgICAgICAgXCJ3ZWJzaXRlX2xpbmtcIjogbnVsbCxcbiAgICAgICAgICAgIFwieW91dHViZV9saW5rXCI6IG51bGwsXG4gICAgICAgICAgICBcImZhY2Vib29rX2xpbmtcIjogbnVsbCxcbiAgICAgICAgICAgIFwidHdpdHRlcl9saW5rXCI6IG51bGwsXG4gICAgICAgICAgICBcImluc3RhZ3JhbV9saW5rXCI6IG51bGwsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgICAgICAgICBcImNhdGVnb3J5XCI6IDEsXG4gICAgICAgICAgICBcImNoYW5uZWxcIjogNCxcbiAgICAgICAgICAgIFwicHJpbWFyeV9mZWVkXCI6IDUsXG4gICAgICAgICAgICBcImxvY2FsZVwiOiAyLFxuICAgICAgICAgICAgXCJpc19hY3RpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZWZmZWN0aXZlX2RhdGVcIjogXCIyMDE5LTA3LTAxVDA1OjU4OjAzLjI0M1pcIixcbiAgICAgICAgICAgIFwiZXhwaXJhdGlvbl9kYXRlXCI6IG51bGwsXG4gICAgICAgICAgICBcImV4dHJhX2RhdGFcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYWRkZWRfYnlcIjogW1xuICAgICAgICAgICAgICAgIFwiYWRtaW5cIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY3JlYXRlZFwiOiBcIjIwMTktMDctMDFUMDU6NTg6MDMuMjQzWlwiLFxuICAgICAgICAgICAgXCJ1cGRhdGVkXCI6IFwiMjAxOS0wNy0wMVQwNTo1ODowMy4yNDNaXCIsXG4gICAgICAgICAgICBcImFkZGl0aW9uYWxfZmVlZHNcIjogW10sXG4gICAgICAgICAgICBcImNvdW50cnlcIjogW1xuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm1vZGVsXCI6IFwicGFrZ3VydV9hcHAuc2hvd1wiLFxuICAgICAgICBcInBrXCI6IDQsXG4gICAgICAgIFwiZmllbGRzXCI6IHtcbiAgICAgICAgICAgIFwic2hvd19uYW1lXCI6IFwiTGl2ZSB3aXRoIERyLiBTaGFoaWQgTWFzb29kXCIsXG4gICAgICAgICAgICBcImhvc3RfbmFtZVwiOiBcIkRyLiBTaGFoaWQgTWFzb29kXCIsXG4gICAgICAgICAgICBcImFpcnRpbWVcIjogbnVsbCxcbiAgICAgICAgICAgIFwid2Vic2l0ZV9saW5rXCI6IFwiaHR0cHM6Ly9nbm5oZC50di9cIixcbiAgICAgICAgICAgIFwieW91dHViZV9saW5rXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQzM1S3VaQk5JajRTNUxzMHlqWS1VSFFcIixcbiAgICAgICAgICAgIFwiZmFjZWJvb2tfbGlua1wiOiBcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9nbm5oZC50di9cIixcbiAgICAgICAgICAgIFwidHdpdHRlcl9saW5rXCI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9nbm5oZG9mZmljaWFsXCIsXG4gICAgICAgICAgICBcImluc3RhZ3JhbV9saW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9nbm5oZC5vZmZpY2lhbC9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHIE5ld3MgTmV0d29yaywgY29tbW9ubHkga25vd24gYXMgR05OLCBpcyBhIFBha2lzdGFuaSAyNC1ob3VyIG5ld3MgYW5kIGN1cnJlbnQgYWZmYWlycyBjaGFubmVsIGJhc2VkIGluIExhaG9yZSwgUGFraXN0YW4uIEl0IGlzIG93bmVkIGFuZCBvcGVyYXRlZCBieSBHb3VybWV0IEZvb2RzLlwiLFxuICAgICAgICAgICAgXCJjYXRlZ29yeVwiOiAxLFxuICAgICAgICAgICAgXCJjaGFubmVsXCI6IDUsXG4gICAgICAgICAgICBcInByaW1hcnlfZmVlZFwiOiA2LFxuICAgICAgICAgICAgXCJsb2NhbGVcIjogMixcbiAgICAgICAgICAgIFwiaXNfYWN0aXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcImVmZmVjdGl2ZV9kYXRlXCI6IFwiMjAxOS0wNy0wMVQwOTowMzoyMi40OThaXCIsXG4gICAgICAgICAgICBcImV4cGlyYXRpb25fZGF0ZVwiOiBudWxsLFxuICAgICAgICAgICAgXCJleHRyYV9kYXRhXCI6IG51bGwsXG4gICAgICAgICAgICBcImFkZGVkX2J5XCI6IFtcbiAgICAgICAgICAgICAgICBcInNoYWhuZWVsYVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjcmVhdGVkXCI6IFwiMjAxOS0wNy0wMVQwOTowMzoyMi40OThaXCIsXG4gICAgICAgICAgICBcInVwZGF0ZWRcIjogXCIyMDE5LTA3LTAxVDA5OjAzOjIyLjQ5OFpcIixcbiAgICAgICAgICAgIFwiYWRkaXRpb25hbF9mZWVkc1wiOiBbXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY291bnRyeVwiOiBbXG4gICAgICAgICAgICAgICAgNFxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfVxuXVxuIg:1hi45R:t5verUb_aQsiq1YkyeuNGs1Vy1M