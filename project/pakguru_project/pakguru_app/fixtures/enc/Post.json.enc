"[\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 144,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Akar Bakar Pakar Dhakar) \\u2013 2nd July 2019\",\n            \"slug\": \"zara-hut-kay-akar-bakar-pakar-dhakar-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T05:30:30.334Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdfu8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153394/zara-hut-kay-akar-bakar-pakar-dhakar-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:30.335Z\",\n            \"updated\": \"2019-07-03T05:30:30.335Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 145,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Rana Sanaullah Ki Giraftari) \\u2013 1st July 2019\",\n            \"slug\": \"zara-hut-kay-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T05:30:31.553Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cap9u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153319/zara-hut-kay-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:31.554Z\",\n            \"updated\": \"2019-07-03T05:30:31.554Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 146,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019\",\n            \"slug\": \"zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:31.789Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/bsc23Rabj0w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153186/zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:31.789Z\",\n            \"updated\": \"2019-07-03T05:30:31.789Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 147,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 28th June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-28th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.025Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c38xl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153124/zara-hut-kay-callers-day-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:32.027Z\",\n            \"updated\": \"2019-07-03T05:30:32.027Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 148,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (All Parties Conference Kaisi Rahi) \\u2013 27th June 2019\",\n            \"slug\": \"zara-hut-kay-all-parties-conference-kaisi-rahi-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.259Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0xtr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153061/zara-hut-kay-all-parties-conference-kaisi-rahi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:32.260Z\",\n            \"updated\": \"2019-07-03T05:30:32.260Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 149,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (APC Ka Kia Natija Raha?) \\u2013 26th June 2019\",\n            \"slug\": \"zara-hut-kay-apc-ka-kia-natija-raha-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.505Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by6wz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152991/zara-hut-kay-apc-ka-kia-natija-raha-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:32.506Z\",\n            \"updated\": \"2019-07-03T05:30:32.507Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 150,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Babar Awan Bari Ho Gaye) \\u2013 25th June 2019\",\n            \"slug\": \"zara-hut-kay-babar-awan-bari-ho-gaye-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.747Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvkr8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152911/zara-hut-kay-babar-awan-bari-ho-gaye-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:32.748Z\",\n            \"updated\": \"2019-07-03T05:30:32.748Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 151,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Discussion on Different Issues) \\u2013 24th June 2019\",\n            \"slug\": \"zara-hut-kay-discussion-on-different-issues-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:32.998Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/fjvE20Uj-8U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152850/zara-hut-kay-discussion-on-different-issues-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:32.998Z\",\n            \"updated\": \"2019-07-03T05:30:32.998Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 152,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Khwandgi Barhanay Ki Koshish) \\u2013 22nd June 2019\",\n            \"slug\": \"zara-hut-kay-khwandgi-barhanay-ki-koshish-22nd-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:33.590Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bp4sv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152720/zara-hut-kay-khwandgi-barhanay-ki-koshish-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:33.594Z\",\n            \"updated\": \"2019-07-03T05:30:33.594Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 153,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 21st June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-21st-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:33.843Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bnafm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152656/zara-hut-kay-callers-day-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:33.844Z\",\n            \"updated\": \"2019-07-03T05:30:33.844Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 154,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Makrooz Hona Tu Achi Baat Hai) \\u2013 19th June 2019\",\n            \"slug\": \"zara-hut-kay-makrooz-hona-tu-achi-baat-hai-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.085Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjpwu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152524/zara-hut-kay-makrooz-hona-tu-achi-baat-hai-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:34.086Z\",\n            \"updated\": \"2019-07-03T05:30:34.086Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 155,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Doctor, Mareez, Hospital, Or Media) \\u2013 18th June 2019\",\n            \"slug\": \"zara-hut-kay-doctor-mareez-hospital-or-media-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.324Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bi1a1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152469/zara-hut-kay-doctor-mareez-hospital-or-media-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:34.325Z\",\n            \"updated\": \"2019-07-03T05:30:34.325Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 156,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Murgi Na Sahi Bakri Sahi) \\u2013 17th June 2019\",\n            \"slug\": \"zara-hut-kay-murgi-na-sahi-bakri-sahi-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.584Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/9cfLldGBgag\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152416/zara-hut-kay-murgi-na-sahi-bakri-sahi-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:34.584Z\",\n            \"updated\": \"2019-07-03T05:30:34.584Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 157,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Science Ka Budget Kahan Kharch Hoga) \\u2013 15th June 2019\",\n            \"slug\": \"zara-hut-kay-science-ka-budget-kahan-kharch-hoga-15th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:34.829Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bafqp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152309/zara-hut-kay-science-ka-budget-kahan-kharch-hoga-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:34.830Z\",\n            \"updated\": \"2019-07-03T05:30:34.830Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 158,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 14th June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-14th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.062Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6ut6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152249/zara-hut-kay-callers-day-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:35.063Z\",\n            \"updated\": \"2019-07-03T05:30:35.063Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 159,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Ali Raza Abdi Ka Qatal Muqadma) \\u2013 13th June 2019\",\n            \"slug\": \"zara-hut-kay-ali-raza-abdi-ka-qatal-muqadma-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.301Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/pib16LicjiI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152200/zara-hut-kay-ali-raza-abdi-ka-qatal-muqadma-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:35.302Z\",\n            \"updated\": \"2019-07-03T05:30:35.302Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 160,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Why Imran Khan Is So Tensed?) \\u2013 12th June 2019\",\n            \"slug\": \"zara-hut-kay-why-imran-khan-is-so-tensed-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.554Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aymez\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152136/zara-hut-kay-why-imran-khan-is-so-tensed-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:35.555Z\",\n            \"updated\": \"2019-07-03T05:30:35.555Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 161,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Asif Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"zara-hut-kay-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:35.813Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ar2bv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152014/zara-hut-kay-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:35.814Z\",\n            \"updated\": \"2019-07-03T05:30:35.814Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 162,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Mehtab Channa Se Mehtab Rashdi Tak Ka Safar) \\u2013 7th June 2019\",\n            \"slug\": \"zara-hut-kay-mehtab-channa-se-mehtab-rashdi-tak-ka-safar-7th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.074Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aimbp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151853/zara-hut-kay-mehtab-channa-se-mehtab-rashdi-tak-ka-safar-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:36.075Z\",\n            \"updated\": \"2019-07-03T05:30:36.075Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 163,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Eid Special With Qavi Khan) \\u2013 6th June 2019\",\n            \"slug\": \"zara-hut-kay-eid-special-with-qavi-khan-6th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.310Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7afp9p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151809/zara-hut-kay-eid-special-with-qavi-khan-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:36.310Z\",\n            \"updated\": \"2019-07-03T05:30:36.310Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 164,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"zara-hut-kay-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.572Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/qFnS7jb-FjQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151783/zara-hut-kay-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:36.573Z\",\n            \"updated\": \"2019-07-03T05:30:36.573Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 165,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Pakistan , Talent Or Technology) \\u2013 1st June 2019\",\n            \"slug\": \"zara-hut-kay-pakistan-talent-or-technology-1st-june-2019\",\n            \"publish_date\": \"2019-07-03T05:30:36.811Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a13eu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151617/zara-hut-kay-pakistan-talent-or-technology-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:36.812Z\",\n            \"updated\": \"2019-07-03T05:30:36.812Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 166,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 31st May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-31st-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.042Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xvjy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151560/zara-hut-kay-callers-day-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:37.043Z\",\n            \"updated\": \"2019-07-03T05:30:37.043Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 167,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Moon Sighting, Science & Fawad Chaudhry) \\u2013 28th May 2019\",\n            \"slug\": \"zara-hut-kay-moon-sighting-science-fawad-chaudhry-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.323Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mqny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151397/zara-hut-kay-moon-sighting-science-fawad-chaudhry-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:37.324Z\",\n            \"updated\": \"2019-07-03T05:30:37.324Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 168,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (PTM Ka Masla Siasat Se Hal Hoga) \\u2013 27th May 2019\",\n            \"slug\": \"zara-hut-kay-ptm-ka-masla-siasat-se-hal-hoga-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.583Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79itne\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151354/zara-hut-kay-ptm-ka-masla-siasat-se-hal-hoga-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:37.584Z\",\n            \"updated\": \"2019-07-03T05:30:37.584Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 169,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Kal Kayh Sahafi , CEJ IBA) \\u2013 25th May 2019\",\n            \"slug\": \"zara-hut-kay-kal-kayh-sahafi-cej-iba-25th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:37.843Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79ccp5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151241/zara-hut-kay-kal-kayh-sahafi-cej-iba-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:37.843Z\",\n            \"updated\": \"2019-07-03T05:30:37.843Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 170,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 24th May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-24th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.100Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7996w5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151200/zara-hut-kay-callers-day-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:38.101Z\",\n            \"updated\": \"2019-07-03T05:30:38.101Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 171,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Modi Aik Baar Phir Jeet Gaye) \\u2013 23rd May 2019\",\n            \"slug\": \"zara-hut-kay-modi-aik-baar-phir-jeet-gaye-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.351Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795nx7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151127/zara-hut-kay-modi-aik-baar-phir-jeet-gaye-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:38.351Z\",\n            \"updated\": \"2019-07-03T05:30:38.351Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 172,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Justice For 10 Year Old Girl Farishta) \\u2013 21st May 2019\",\n            \"slug\": \"zara-hut-kay-justice-for-10-year-old-girl-farishta-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.585Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ynno\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151022/zara-hut-kay-justice-for-10-year-old-girl-farishta-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:38.585Z\",\n            \"updated\": \"2019-07-03T05:30:38.585Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 173,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Sehat Ka Shoba Ya Black Comedy) \\u2013 18th May 2019\",\n            \"slug\": \"zara-hut-kay-sehat-ka-shoba-ya-black-comedy-18th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:38.821Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ovbr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150873/zara-hut-kay-sehat-ka-shoba-ya-black-comedy-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:38.822Z\",\n            \"updated\": \"2019-07-03T05:30:38.822Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 174,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Discussion on Current Issues) \\u2013 17th May 2019\",\n            \"slug\": \"zara-hut-kay-discussion-on-current-issues-17th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.060Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78llc2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150810/zara-hut-kay-discussion-on-current-issues-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:39.061Z\",\n            \"updated\": \"2019-07-03T05:30:39.061Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 175,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Health System in Sindh) \\u2013 16th May 2019\",\n            \"slug\": \"zara-hut-kay-health-system-in-sindh-16th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.322Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78i1kx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150751/zara-hut-kay-health-system-in-sindh-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:39.323Z\",\n            \"updated\": \"2019-07-03T05:30:39.323Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 176,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Heart, Brain And Science) \\u2013 15th May 2019\",\n            \"slug\": \"zara-hut-kay-heart-brain-and-science-15th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.590Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ewc1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150688/zara-hut-kay-heart-brain-and-science-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:39.591Z\",\n            \"updated\": \"2019-07-03T05:30:39.591Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 177,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Whatsapp Bhi Heck Hogaya) \\u2013 14th May 2019\",\n            \"slug\": \"zara-hut-kay-whatsapp-bhi-heck-hogaya-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:39.841Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bqaa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150617/zara-hut-kay-whatsapp-bhi-heck-hogaya-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:39.842Z\",\n            \"updated\": \"2019-07-03T05:30:39.842Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 178,\n        \"fields\": {\n            \"title\": \"Zara Hat Kay (Callers Day) - 13th May 2019\",\n            \"slug\": \"zara-hat-kay-callers-day-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.073Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/yXV0gwQkf58\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150569/zara-hat-kay-callers-day-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:40.074Z\",\n            \"updated\": \"2019-07-03T05:30:40.074Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 179,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Zara Hut Kay) \\u2013 11th May 2019\",\n            \"slug\": \"zara-hut-kay-zara-hut-kay-11th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.309Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x782ccs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150431/zara-hut-kay-zara-hut-kay-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:40.310Z\",\n            \"updated\": \"2019-07-03T05:30:40.310Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 180,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 10th May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-10th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.548Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77z881\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150383/zara-hut-kay-callers-day-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:40.548Z\",\n            \"updated\": \"2019-07-03T05:30:40.548Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 181,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Human Smuggling Via Marriage Fraud) \\u2013 9th May 2019\",\n            \"slug\": \"zara-hut-kay-human-smuggling-via-marriage-fraud-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:40.785Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/mo8Gl5sEQOc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150327/zara-hut-kay-human-smuggling-via-marriage-fraud-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:40.788Z\",\n            \"updated\": \"2019-07-03T05:30:40.788Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 182,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Zamant Na Milay Tu Bhag Jao) \\u2013 7th May 2019\",\n            \"slug\": \"zara-hut-kay-zamant-na-milay-tu-bhag-jao-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:41.042Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77op47\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150186/zara-hut-kay-zamant-na-milay-tu-bhag-jao-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:41.043Z\",\n            \"updated\": \"2019-07-03T05:30:41.043Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 183,\n        \"fields\": {\n            \"title\": \"Zara Hut Kay (Yahan Say Kaiynat Ko Dehko) \\u2013 6th May 2019\",\n            \"slug\": \"zara-hut-kay-yahan-say-kaiynat-ko-dehko-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T05:30:41.330Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77l13j\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150115/zara-hut-kay-yahan-say-kaiynat-ko-dehko-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 1,\n                \"feed_id\": 3,\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T05:30:41.331Z\",\n            \"updated\": \"2019-07-03T05:30:41.331Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 585,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Mehngai Ka Tofan) - 2nd July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:00:40.397Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/eYVpn3C2Xy0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153395/dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:40.397Z\",\n            \"updated\": \"2019-07-03T06:00:40.397Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 586,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T06:00:41.800Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/QloijplKJto\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153324/dunya-kamran-khan-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:41.801Z\",\n            \"updated\": \"2019-07-03T06:00:41.801Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 587,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Polio Spreading in Pakistan) - 28th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-polio-spreading-in-pakistan-28th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.031Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/P0hh6TdPpJU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153126/dunya-kamran-khan-kay-sath-polio-spreading-in-pakistan-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:42.032Z\",\n            \"updated\": \"2019-07-03T06:00:42.032Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 588,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Development in Money Laundering Case) - 27th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-development-in-money-laundering-case-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.290Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/PrnSBQrUXjc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153057/dunya-kamran-khan-kay-sath-development-in-money-laundering-case-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:42.291Z\",\n            \"updated\": \"2019-07-03T06:00:42.291Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 589,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Dollar 163 Ka Ho Gaya) - 26th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-dollar-163-ka-ho-gaya-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.534Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/PYYdMNfojDc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152984/dunya-kamran-khan-kay-sath-dollar-163-ka-ho-gaya-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:42.535Z\",\n            \"updated\": \"2019-07-03T06:00:42.535Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 590,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (IMF Program Shuru Ho Gaya) - 25th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imf-program-shuru-ho-gaya-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:42.791Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/VIC-07Pl6Rw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152924/dunya-kamran-khan-kay-sath-imf-program-shuru-ho-gaya-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:42.792Z\",\n            \"updated\": \"2019-07-03T06:00:42.792Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 591,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Peshawar BRT Project) - 24th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-peshawar-brt-project-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.049Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/B9Rfm0hsUL8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152854/dunya-kamran-khan-kay-sath-peshawar-brt-project-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:43.050Z\",\n            \"updated\": \"2019-07-03T06:00:43.050Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 592,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Corrupt Tareen Soba Qarar) - 21st June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-corrupt-tareen-soba-qarar-21st-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.315Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/pGxMgvLGKlQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152654/dunya-kamran-khan-kay-sath-sindh-corrupt-tareen-soba-qarar-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:43.316Z\",\n            \"updated\": \"2019-07-03T06:00:43.316Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 593,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Discussion on Different Issues) - 20th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-discussion-on-different-issues-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.552Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/JdK8atReMCk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152598/dunya-kamran-khan-kay-sath-discussion-on-different-issues-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:43.552Z\",\n            \"updated\": \"2019-07-03T06:00:43.552Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 594,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan Ki Maeeshat Aur Siasat) - 17th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistan-ki-maeeshat-aur-siasat-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:43.777Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/tyZ7l-KRJJE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152412/dunya-kamran-khan-kay-sath-pakistan-ki-maeeshat-aur-siasat-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:43.777Z\",\n            \"updated\": \"2019-07-03T06:00:43.777Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 595,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan's Economic Condition) - 14th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistans-economic-condition-14th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.022Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/OrR09_WSPJA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152252/dunya-kamran-khan-kay-sath-pakistan-s-economic-condition-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:44.023Z\",\n            \"updated\": \"2019-07-03T06:00:44.023Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 596,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Budget Aur Taxes) - 13th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-budget-aur-taxes-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.299Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/CHI_r7c8Jp8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152188/dunya-kamran-khan-kay-sath-budget-aur-taxes-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:44.300Z\",\n            \"updated\": \"2019-07-03T06:00:44.300Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 597,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Imran Khan Ka Khitab) - 12th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imran-khan-ka-khitab-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.553Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/niL8RLEXm88\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152142/dunya-kamran-khan-kay-sath-imran-khan-ka-khitab-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:44.554Z\",\n            \"updated\": \"2019-07-03T06:00:44.554Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 598,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Budget 2019-20) - 11th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-budget-2019-20-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:44.786Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/ubnXlT3rTkA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152081/dunya-kamran-khan-kay-sath-budget-2019-20-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:44.786Z\",\n            \"updated\": \"2019-07-03T06:00:44.786Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 599,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Asif Zardari Ki Giraftari) - 10th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.019Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/kvDkPGix4FM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152019/dunya-kamran-khan-kay-sath-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:45.019Z\",\n            \"updated\": \"2019-07-03T06:00:45.019Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 600,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Discussion on Different Issues) - 7th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-discussion-on-different-issues-7th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.249Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/hAoZjjyn8Ik\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151858/dunya-kamran-khan-kay-sath-discussion-on-different-issues-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:45.250Z\",\n            \"updated\": \"2019-07-03T06:00:45.250Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 601,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Siasi Mahaz Arai Mein Izafa) - 31st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-siasi-mahaz-arai-mein-izafa-31st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.495Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/TxxNdXtIf_g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151563/dunya-kamran-khan-kay-sath-siasi-mahaz-arai-mein-izafa-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:45.496Z\",\n            \"updated\": \"2019-07-03T06:00:45.496Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 602,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Accountability in Military) - 30th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-accountability-in-military-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:45.743Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/AyJA1xSj85c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151513/dunya-kamran-khan-kay-sath-accountability-in-military-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:45.743Z\",\n            \"updated\": \"2019-07-03T06:00:45.743Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 603,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Reference Against Judges) - 29th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-reference-against-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.007Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/fgMe66Qg1QE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151454/dunya-kamran-khan-kay-sath-reference-against-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:46.008Z\",\n            \"updated\": \"2019-07-03T06:00:46.009Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 604,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Opposition Active Against Govt) - 28th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-opposition-active-against-govt-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.285Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/32xwX0ZKTeY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151392/dunya-kamran-khan-kay-sath-opposition-active-against-govt-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:46.286Z\",\n            \"updated\": \"2019-07-03T06:00:46.286Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 605,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Higher Tax Target) - 27th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-higher-tax-target-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.526Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/aLcrB7rfmDo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151359/dunya-kamran-khan-kay-sath-higher-tax-target-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:46.527Z\",\n            \"updated\": \"2019-07-03T06:00:46.527Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 606,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Economy Getting Better) - 23rd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-economy-getting-better-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:46.766Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/5dQ4t4mVifw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151132/dunya-kamran-khan-kay-sath-economy-getting-better-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:46.767Z\",\n            \"updated\": \"2019-07-03T06:00:46.767Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 607,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan's Economy) - 22nd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistans-economy-22nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.047Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/tGizpdAf4lc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151077/dunya-kamran-khan-kay-sath-pakistan-s-economy-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:47.047Z\",\n            \"updated\": \"2019-07-03T06:00:47.047Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 608,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Chairman NAB, Other Issues) - 21st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-chairman-nab-other-issues-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.304Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/T7LksP9h3cw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151028/dunya-kamran-khan-kay-sath-chairman-nab-other-issues-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:47.305Z\",\n            \"updated\": \"2019-07-03T06:00:47.305Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 609,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (NAB's Message to Business Community) - 20th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-nabs-message-to-business-community-20th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.559Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/wNySXXObcA0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150959/dunya-kamran-khan-kay-sath-nab-s-message-to-business-community-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:47.560Z\",\n            \"updated\": \"2019-07-03T06:00:47.560Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 610,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Economy Issues) - 17th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-economy-issues-17th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:47.802Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/vpLknAh5QJc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150813/dunya-kamran-khan-kay-sath-economy-issues-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:47.803Z\",\n            \"updated\": \"2019-07-03T06:00:47.803Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 611,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistani Maeeshat) - 16th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistani-maeeshat-16th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:48.070Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/MST06SpL2Ks\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150756/dunya-kamran-khan-kay-sath-pakistani-maeeshat-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:48.071Z\",\n            \"updated\": \"2019-07-03T06:00:48.071Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 612,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Terrorism in Balochistan, Karachi Issues) - 15th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-terrorism-in-balochistan-karachi-issues-15th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:48.420Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/6TmBiZtIXx4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150683/dunya-kamran-khan-kay-sath-terrorism-in-balochistan-karachi-issues-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:48.422Z\",\n            \"updated\": \"2019-07-03T06:00:48.422Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 613,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Cases on Zardari & Bilawal) - 14th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-cases-on-zardari-bilawal-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:48.759Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/xeAkEWUWxp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150615/dunya-kamran-khan-kay-sath-cases-on-zardari-bilawal-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:48.760Z\",\n            \"updated\": \"2019-07-03T06:00:48.761Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 614,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (IMF, 1000 Buses For Karachi) - 13th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imf-1000-buses-for-karachi-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.008Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/1iTV7gL7KUk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150565/dunya-kamran-khan-kay-sath-imf-1000-buses-for-karachi-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:49.008Z\",\n            \"updated\": \"2019-07-03T06:00:49.008Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 615,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Strict Conditions of IMF) - 10th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-strict-conditions-of-imf-10th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.291Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/LSTZeN8kDx0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150386/dunya-kamran-khan-kay-sath-strict-conditions-of-imf-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:49.292Z\",\n            \"updated\": \"2019-07-03T06:00:49.292Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 616,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pak Iran Gas Pipeline Project) - 9th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pak-iran-gas-pipeline-project-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.537Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/Ha69Up_D9ZE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150318/dunya-kamran-khan-kay-sath-pak-iran-gas-pipeline-project-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:49.538Z\",\n            \"updated\": \"2019-07-03T06:00:49.538Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 617,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Mein Gandam Chori) - 8th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-mein-gandam-chori-8th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:49.767Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/vfNJ4jLfc44\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150259/dunya-kamran-khan-kay-sath-sindh-mein-gandam-chori-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:49.768Z\",\n            \"updated\": \"2019-07-03T06:00:49.768Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 618,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Multiple Issues) - 7th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-multiple-issues-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.005Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/5Ix6o0afr3Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150185/dunya-kamran-khan-kay-sath-multiple-issues-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:50.006Z\",\n            \"updated\": \"2019-07-03T06:00:50.006Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 619,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (PTI Hakumat Mein Tabdeeli) - 6th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pti-hakumat-mein-tabdeeli-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.267Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/XwaqwJDdVtg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150117/dunya-kamran-khan-kay-sath-pti-hakumat-mein-tabdeeli-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:50.268Z\",\n            \"updated\": \"2019-07-03T06:00:50.268Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 620,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (NAB, Maeeshat, Sehafat) - 3rd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-nab-maeeshat-sehafat-3rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.516Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/wQH7qauMBJ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149938/dunya-kamran-khan-kay-sath-nab-maeeshat-sehafat-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:50.517Z\",\n            \"updated\": \"2019-07-03T06:00:50.517Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 621,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Hakumat Gandam Chori) -  2nd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-hakumat-gandam-chori-2nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:50.757Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/XDm_7G37PEk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149868/dunya-kamran-khan-kay-sath-sindh-hakumat-gandam-chori-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:50.758Z\",\n            \"updated\": \"2019-07-03T06:00:50.758Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 622,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (Imran Khan Speech, Masood Azhar) - 1st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imran-khan-speech-masood-azhar-1st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:00:51.040Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/Ymv2UpNVyts\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149803/dunya-kamran-khan-kay-sath-imran-khan-speech-masood-azhar-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:51.041Z\",\n            \"updated\": \"2019-07-03T06:00:51.041Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 623,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (PM China Visit, Aids in Larkana) - 30th April 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pm-china-visit-aids-in-larkana-30th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:00:51.280Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/EMmBH67FTks\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149730/dunya-kamran-khan-kay-sath-pm-china-visit-aids-in-larkana-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:51.281Z\",\n            \"updated\": \"2019-07-03T06:00:51.281Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 624,\n        \"fields\": {\n            \"title\": \"Dunya Kamran Khan Kay Sath (DG ISPR Press Conference) - 29th April 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-dg-ispr-press-conference-29th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:00:51.514Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/Hb6yVtSGAcs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149661/dunya-kamran-khan-kay-sath-dg-ispr-press-conference-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 2,\n                \"feed_id\": 11,\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:00:51.515Z\",\n            \"updated\": \"2019-07-03T06:00:51.515Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 625,\n        \"fields\": {\n            \"title\": \"Live with Dr Shahid Masood (Imran Khan Vs Others) - 2nd July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-vs-others-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:22:05.700Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/CMOcCrpLnK0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153369/live-with-dr-shahid-masood-imran-khan-vs-others-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:05.700Z\",\n            \"updated\": \"2019-07-03T06:22:05.700Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 626,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan Aur Naya Siasi Manzarnama) - 1st July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-aur-naya-siasi-manzarnama-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T06:22:06.918Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/JbjG8ceoee8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153297/live-with-dr-shahid-masood-imran-khan-aur-naya-siasi-manzarnama-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:06.918Z\",\n            \"updated\": \"2019-07-03T06:22:06.918Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 627,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan Aur Loti Hui Daulat) - 30th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.181Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/u8rlFF5rH-E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153227/live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:07.181Z\",\n            \"updated\": \"2019-07-03T06:22:07.181Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 628,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Muashi Dehshatgardi Ka Bharpoor Waar) - 29th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-muashi-dehshatgardi-ka-bharpoor-waar-29th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.453Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/plS_RS9Bsg0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153167/live-with-dr-shahid-masood-muashi-dehshatgardi-ka-bharpoor-waar-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:07.453Z\",\n            \"updated\": \"2019-07-03T06:22:07.454Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 629,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Govt And Army on Same Page) - 28th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-govt-and-army-on-same-page-28th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.696Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/wvCNG36Q4FA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153102/live-with-dr-shahid-masood-govt-and-army-on-same-page-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:07.696Z\",\n            \"updated\": \"2019-07-03T06:22:07.696Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 630,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan & Economic Terrorism) - 27th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-economic-terrorism-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:07.953Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/ga4jGny3A1A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153032/live-with-dr-shahid-masood-imran-khan-economic-terrorism-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:07.953Z\",\n            \"updated\": \"2019-07-03T06:22:07.953Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 631,\n        \"fields\": {\n            \"title\": \"Live with Dr. Sahiad Masood (Kia Imran Khan Ke Imtihan Khatam Ho Gaye) - 26th June 2019\",\n            \"slug\": \"live-with-dr-sahiad-masood-kia-imran-khan-ke-imtihan-khatam-ho-gaye-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.206Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/EhANNbeuU4U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152960/live-with-dr-sahiad-masood-kia-imran-khan-ke-imtihan-khatam-ho-gaye-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:08.207Z\",\n            \"updated\": \"2019-07-03T06:22:08.207Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 632,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Nahi Maane) - 25th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-nahi-maane-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.434Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/r12YYNoQlns\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152889/live-with-dr-shahid-masood-imran-khan-nahi-maane-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:08.436Z\",\n            \"updated\": \"2019-07-03T06:22:08.436Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 633,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Misaq e Maeeshat Aur Imran Khan) - 24th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-misaq-e-maeeshat-aur-imran-khan-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.664Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/7aJQZiWQBOI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152819/live-with-dr-shahid-masood-misaq-e-maeeshat-aur-imran-khan-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:08.665Z\",\n            \"updated\": \"2019-07-03T06:22:08.665Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 634,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Misaq e Maeeshat Aur Ahtasab) - 23rd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-misaq-e-maeeshat-aur-ahtasab-23rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:08.930Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/1XIYh-Cxxek\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152767/live-with-dr-shahid-masood-misaq-e-maeeshat-aur-ahtasab-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:08.931Z\",\n            \"updated\": \"2019-07-03T06:22:08.931Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 635,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Maryam Nawaz Vs Shahbaz Sharif) - 22nd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:09.510Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/PtcQngWr8ho\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152706/live-with-dr-shahid-masood-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:09.511Z\",\n            \"updated\": \"2019-07-03T06:22:09.511Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 636,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Halaat e Hazira, Bari Tabdeeli) - 21st June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-halaat-e-hazira-bari-tabdeeli-21st-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:09.774Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/88bW0825kGA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152629/live-with-dr-shahid-masood-halaat-e-hazira-bari-tabdeeli-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:09.775Z\",\n            \"updated\": \"2019-07-03T06:22:09.775Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 637,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Kia Huwa Taira Wada) - 20th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-kia-huwa-taira-wada-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.008Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/4HtyUbVMq8Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152573/live-with-dr-shahid-masood-kia-huwa-taira-wada-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:10.008Z\",\n            \"updated\": \"2019-07-03T06:22:10.008Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 638,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Kasheedagi) - 19th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-kasheedagi-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.240Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/HuJGbcJBgOA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152505/live-with-dr-shahid-masood-kasheedagi-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:10.241Z\",\n            \"updated\": \"2019-07-03T06:22:10.241Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 639,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Bohran Ya Tasadam) - 18th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-bohran-ya-tasadam-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.489Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/THbiK48o1Tk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152450/live-with-dr-shahid-masood-bohran-ya-tasadam-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:10.490Z\",\n            \"updated\": \"2019-07-03T06:22:10.490Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 640,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Game of Power) - 17th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-game-of-power-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.724Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/bC65EqAc3BQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152378/live-with-dr-shahid-masood-game-of-power-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:10.725Z\",\n            \"updated\": \"2019-07-03T06:22:10.725Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 641,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Ahtajaj Aur Ahtasab) - 16th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ahtajaj-aur-ahtasab-16th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:10.954Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/cNWt-TJldaE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152336/live-with-dr-shahid-masood-ahtajaj-aur-ahtasab-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:10.954Z\",\n            \"updated\": \"2019-07-03T06:22:10.954Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 642,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (More Arrests) - 15th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-more-arrests-15th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.183Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/fZc2uI7erUo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152285/live-with-dr-shahid-masood-more-arrests-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:11.183Z\",\n            \"updated\": \"2019-07-03T06:22:11.184Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 643,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Who Will Be Arrested Next) - 14th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-who-will-be-arrested-next-14th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.431Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/m8dBai6Tt-I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152230/live-with-dr-shahid-masood-who-will-be-arrested-next-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:11.432Z\",\n            \"updated\": \"2019-07-03T06:22:11.432Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 644,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Minus All..???) - 13th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-minus-all-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.676Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/XsC-VQhOPnc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152175/live-with-dr-shahid-masood-minus-all-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:11.677Z\",\n            \"updated\": \"2019-07-03T06:22:11.677Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 645,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Vs Others) - 12th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-vs-others-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:11.901Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/wIHMxmdvXAE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152112/live-with-dr-shahid-masood-imran-khan-vs-others-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:11.901Z\",\n            \"updated\": \"2019-07-03T06:22:11.902Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 646,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Budget, Arrests And Movement) - 11th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-budget-arrests-and-movement-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.135Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/N2Ivnx-7nPk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152061/live-with-dr-shahid-masood-budget-arrests-and-movement-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:12.136Z\",\n            \"updated\": \"2019-07-03T06:22:12.136Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 647,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Asif Zardari Arrested) - 10th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.395Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/OOO4EOTi-TE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151988/live-with-dr-shahid-masood-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:12.398Z\",\n            \"updated\": \"2019-07-03T06:22:12.398Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 648,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Bohran Aur Tasadam) - 9th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-bohran-aur-tasadam-9th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.653Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/AkiHALPvqPY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151921/live-with-dr-shahid-masood-bohran-aur-tasadam-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:12.654Z\",\n            \"updated\": \"2019-07-03T06:22:12.654Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 649,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Ajeeb Loog Hain) - 8th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ajeeb-loog-hain-8th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:12.883Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/UepLG2cqGic\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151878/live-with-dr-shahid-masood-ajeeb-loog-hain-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:12.883Z\",\n            \"updated\": \"2019-07-03T06:22:12.884Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 650,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Third Day Eid Special) - 7th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-third-day-eid-special-7th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.123Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/IW5u_G-hd6g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151831/live-with-dr-shahid-masood-third-day-eid-special-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:13.123Z\",\n            \"updated\": \"2019-07-03T06:22:13.123Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 651,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Second Day Eid Special) - 6th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-second-day-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.385Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/12C8u9B-sUI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151800/live-with-dr-shahid-masood-second-day-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:13.385Z\",\n            \"updated\": \"2019-07-03T06:22:13.385Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 652,\n        \"fields\": {\n            \"title\": \"Eid Special Show With Dr. Shahid Masood (Day-1) - 5th June 2019\",\n            \"slug\": \"eid-special-show-with-dr-shahid-masood-day-1-5th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.629Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/ukt_nmw3qd0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151757/eid-special-show-with-dr-shahid-masood-day-1-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:13.629Z\",\n            \"updated\": \"2019-07-03T06:22:13.629Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 653,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Eid Ke Baad Halaat) - 4th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-eid-ke-baad-halaat-4th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:13.891Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/7idGHZK4uy4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151718/live-with-dr-shahid-masood-eid-ke-baad-halaat-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:13.891Z\",\n            \"updated\": \"2019-07-03T06:22:13.892Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 654,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Mega Corruption Cases) - 3rd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-mega-corruption-cases-3rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.167Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/36hFLy1ZVGc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151684/live-with-dr-shahid-masood-mega-corruption-cases-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:14.168Z\",\n            \"updated\": \"2019-07-03T06:22:14.168Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 655,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Takht Ya Takhta) - 2nd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-takht-ya-takhta-2nd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.425Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/ozO-RtyNXqs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151650/live-with-dr-shahid-masood-takht-ya-takhta-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:14.426Z\",\n            \"updated\": \"2019-07-03T06:22:14.426Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 656,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Last Balls of Match) - 1st June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-last-balls-of-match-1st-june-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.660Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/EPW8sbDatfs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151599/live-with-dr-shahid-masood-last-balls-of-match-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:14.660Z\",\n            \"updated\": \"2019-07-03T06:22:14.660Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 657,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Trembling, Shaking Democracy) - 31st May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-trembling-shaking-democracy-31st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:14.898Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/cD_MOrHJvK4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151549/live-with-dr-shahid-masood-trembling-shaking-democracy-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:14.899Z\",\n            \"updated\": \"2019-07-03T06:22:14.899Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 658,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Hukamran Aur Riasat) - 30th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-hukamran-aur-riasat-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.129Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/nkx_AFo9wkQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151487/live-with-dr-shahid-masood-hukamran-aur-riasat-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:15.129Z\",\n            \"updated\": \"2019-07-03T06:22:15.129Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 659,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Why Imran Khan Is Silent?) - 29th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-why-imran-khan-is-silent-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.405Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/oFucibuRxvI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151428/live-with-dr-shahid-masood-why-imran-khan-is-silent-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:15.406Z\",\n            \"updated\": \"2019-07-03T06:22:15.407Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 660,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Ki Pur Asrar Khamoshi) - 28th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-ki-pur-asrar-khamoshi-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.664Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/C6MHdDy7xMg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151382/live-with-dr-shahid-masood-imran-khan-ki-pur-asrar-khamoshi-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:15.664Z\",\n            \"updated\": \"2019-07-03T06:22:15.664Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 661,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (PTM Issue, Chairman NAB Controversy) - 27th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ptm-issue-chairman-nab-controversy-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:15.967Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/iyTyBTXugpk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151335/live-with-dr-shahid-masood-ptm-issue-chairman-nab-controversy-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:15.968Z\",\n            \"updated\": \"2019-07-03T06:22:15.968Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 662,\n        \"fields\": {\n            \"title\": \"Live With Dr. Shahid Masood (When Will State Take Action Against PTM?) - 26th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-when-will-state-take-action-against-ptm-26th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:16.230Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/UyHq3G7Odgs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151282/live-with-dr-shahid-masood-when-will-state-take-action-against-ptm-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:16.230Z\",\n            \"updated\": \"2019-07-03T06:22:16.230Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 663,\n        \"fields\": {\n            \"title\": \"Live With Dr Shahid Masood (Chairman NAB & Dirty Politics) \\u2013 25th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-chairman-nab-dirty-politics-25th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:16.481Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/o6dadGppguY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151235/live-with-dr-shahid-masood-chairman-nab-dirty-politics-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:16.482Z\",\n            \"updated\": \"2019-07-03T06:22:16.482Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 664,\n        \"fields\": {\n            \"title\": \"Live with Dr. Shahid Masood (Chairman NAB Scandal) - 24th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:22:16.720Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/faG4PJc0hAw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151178/live-with-dr-shahid-masood-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 3,\n                \"feed_id\": 6,\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"created_on\": \"2019-07-03T06:22:16.720Z\",\n            \"updated\": \"2019-07-03T06:22:16.720Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 665,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Amnesty Scheme, Other Issues) - 30th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:02.870Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/k5USPAIelXc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/153242/meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:02.871Z\",\n            \"updated\": \"2019-07-03T06:29:02.871Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 666,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Different Issues) \\u2013 23rd June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-different-issues-23rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.094Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/zCygDFsBiLA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/152770/meray-mutabiq-with-hassan-nisar-different-issues-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:04.095Z\",\n            \"updated\": \"2019-07-03T06:29:04.095Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 667,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Different Issues) \\u2013 16th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-16th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.315Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/X6Syg2r6aOo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/152339/meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:04.315Z\",\n            \"updated\": \"2019-07-03T06:29:04.315Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 668,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Current Issues) \\u2013 9th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-9th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.536Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/pKW-OYkAbQs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151924/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:04.536Z\",\n            \"updated\": \"2019-07-03T06:29:04.536Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 669,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 2nd June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:04.793Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/LondCQqorZ8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151665/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:04.794Z\",\n            \"updated\": \"2019-07-03T06:29:04.794Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 670,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) - 26th May 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-26th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:05.008Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ucZfd8DESNA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151307/meray-mutabiq-with-hassan-nisar-current-issues-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:05.008Z\",\n            \"updated\": \"2019-07-03T06:29:05.008Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 671,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) \\u2013 12th May 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-12th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:05.249Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/6OSk5b305_c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/150509/meray-mutabiq-with-hassan-nisar-current-issues-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:05.250Z\",\n            \"updated\": \"2019-07-03T06:29:05.250Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 672,\n        \"fields\": {\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 2nd September 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-september-2018\",\n            \"publish_date\": \"2019-07-03T06:29:05.497Z\",\n            \"target_date\": \"2018-09-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t03l6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/135460/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:05.500Z\",\n            \"updated\": \"2019-07-03T06:29:05.500Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 673,\n        \"fields\": {\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 26th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-26th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:05.758Z\",\n            \"target_date\": \"2018-08-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6smwe3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134966/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-26th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:05.759Z\",\n            \"updated\": \"2019-07-03T06:29:05.760Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 674,\n        \"fields\": {\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Imran Khan Became PM) - 19th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-imran-khan-became-pm-19th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.017Z\",\n            \"target_date\": \"2018-08-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6s945s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134591/mere-mutabiq-with-hassan-nisar-imran-khan-became-pm-19th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:06.018Z\",\n            \"updated\": \"2019-07-03T06:29:06.018Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 675,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 12th August 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-12th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.292Z\",\n            \"target_date\": \"2018-08-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rvz2q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134122/meray-mutabiq-with-hassan-nisar-current-issues-12th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:06.294Z\",\n            \"updated\": \"2019-07-03T06:29:06.294Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 676,\n        \"fields\": {\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Current Issues) - 5th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-current-issues-5th-august-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.537Z\",\n            \"target_date\": \"2018-08-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rgsf2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/133665/mere-mutabiq-with-hassan-nisar-current-issues-5th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:06.537Z\",\n            \"updated\": \"2019-07-03T06:29:06.537Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 677,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 29th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-29th-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:06.780Z\",\n            \"target_date\": \"2018-07-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qmnci\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/133200/meray-mutabiq-with-hassan-nisar-current-issues-29th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:06.781Z\",\n            \"updated\": \"2019-07-03T06:29:06.781Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 678,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 22nd July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-22nd-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.030Z\",\n            \"target_date\": \"2018-07-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6psevy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/132776/meray-mutabiq-with-hassan-nisar-current-issues-22nd-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:07.030Z\",\n            \"updated\": \"2019-07-03T06:29:07.030Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 679,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 15th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-15th-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.274Z\",\n            \"target_date\": \"2018-07-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6osrli\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/132350/meray-mutabiq-with-hassan-nisar-current-issues-15th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:07.275Z\",\n            \"updated\": \"2019-07-03T06:29:07.275Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 680,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Nawaz Sharif & Maryam Convicted) \\u2013 8th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-nawaz-sharif-maryam-convicted-8th-july-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.532Z\",\n            \"target_date\": \"2018-07-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nz5gq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/131917/meray-mutabiq-with-hassan-nisar-nawaz-sharif-maryam-convicted-8th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:07.533Z\",\n            \"updated\": \"2019-07-03T06:29:07.533Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 681,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 24th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-24th-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:07.862Z\",\n            \"target_date\": \"2018-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6moa9q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/131102/meray-mutabiq-with-hassan-nisar-current-issues-24th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:07.863Z\",\n            \"updated\": \"2019-07-03T06:29:07.863Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 682,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 17th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-17th-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.083Z\",\n            \"target_date\": \"2018-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6m3gtt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/130694/meray-mutabiq-with-hassan-nisar-current-issues-17th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:08.084Z\",\n            \"updated\": \"2019-07-03T06:29:08.084Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 683,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 10th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-10th-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.317Z\",\n            \"target_date\": \"2018-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6lj2h2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/130315/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-10th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:08.318Z\",\n            \"updated\": \"2019-07-03T06:29:08.318Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 684,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 3rd June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-3rd-june-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.541Z\",\n            \"target_date\": \"2018-06-03\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kyihe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/129845/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-3rd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:08.542Z\",\n            \"updated\": \"2019-07-03T06:29:08.542Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 685,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 27th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-27th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:08.786Z\",\n            \"target_date\": \"2018-05-27\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kfxj6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/129344/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-27th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:08.787Z\",\n            \"updated\": \"2019-07-03T06:29:08.787Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 686,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 20th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-20th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.005Z\",\n            \"target_date\": \"2018-05-20\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jx509\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128946/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-20th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:09.005Z\",\n            \"updated\": \"2019-07-03T06:29:09.005Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 687,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Nawaz Sharif's Statement) \\u2013 13th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-nawaz-sharifs-statement-13th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.231Z\",\n            \"target_date\": \"2018-05-13\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jfoaw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128503/meray-mutabiq-with-hassan-nisar-nawaz-sharif-s-statement-13th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:09.231Z\",\n            \"updated\": \"2019-07-03T06:29:09.231Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 688,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) - 7th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-7th-may-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.445Z\",\n            \"target_date\": \"2018-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6j1kad\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128143/meray-mutabiq-with-hassan-nisar-current-issues-7th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:09.445Z\",\n            \"updated\": \"2019-07-03T06:29:09.445Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 689,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 29th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-29th-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.678Z\",\n            \"target_date\": \"2018-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6imf7x\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/127670/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-29th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:09.678Z\",\n            \"updated\": \"2019-07-03T06:29:09.678Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 690,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 22nd April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-22nd-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:09.888Z\",\n            \"target_date\": \"2018-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6i84cw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/127244/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-22nd-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:09.889Z\",\n            \"updated\": \"2019-07-03T06:29:09.889Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 691,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 15th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-15th-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.118Z\",\n            \"target_date\": \"2018-04-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6husot\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126808/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-15th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:10.119Z\",\n            \"updated\": \"2019-07-03T06:29:10.119Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 692,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Different Issues) \\u2013 8th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-8th-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.357Z\",\n            \"target_date\": \"2018-04-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6hi1px\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126374/meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-8th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:10.358Z\",\n            \"updated\": \"2019-07-03T06:29:10.358Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 693,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 1st April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-1st-april-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.593Z\",\n            \"target_date\": \"2018-04-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6h6cwf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126026/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-1st-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:10.593Z\",\n            \"updated\": \"2019-07-03T06:29:10.593Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 694,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 11th March 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-march-2018\",\n            \"publish_date\": \"2019-07-03T06:29:10.804Z\",\n            \"target_date\": \"2018-03-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6g474n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/124749/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-march-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:10.804Z\",\n            \"updated\": \"2019-07-03T06:29:10.804Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 695,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues)  \\u2013 4th March 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-4th-march-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.022Z\",\n            \"target_date\": \"2018-03-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6fmh0t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/124331/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-4th-march-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:11.022Z\",\n            \"updated\": \"2019-07-03T06:29:11.022Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 696,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Different Issues) \\u2013 25th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-different-issues-25th-february-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.231Z\",\n            \"target_date\": \"2018-02-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6f9wb3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123953/meray-mutabiq-with-hassan-nisar-different-issues-25th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:11.231Z\",\n            \"updated\": \"2019-07-03T06:29:11.231Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 697,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 18th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-18th-february-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.453Z\",\n            \"target_date\": \"2018-02-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ey6xo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123540/meray-mutabiq-with-hassan-nisar-current-issues-18th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:11.455Z\",\n            \"updated\": \"2019-07-03T06:29:11.455Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 698,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Current Issues) \\u2013 11th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-february-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.703Z\",\n            \"target_date\": \"2018-02-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6elfon\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123170/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:11.704Z\",\n            \"updated\": \"2019-07-03T06:29:11.704Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 699,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on current issues) \\u2013 28th January 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-28th-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:11.974Z\",\n            \"target_date\": \"2018-01-29\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6du35d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/122327/meray-mutabiq-with-hassan-nisar-28th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:11.975Z\",\n            \"updated\": \"2019-07-03T06:29:11.975Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 700,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq (Discussion on Current Issues) \\u2013 21st January 2018\",\n            \"slug\": \"meray-mutabiq-discussion-on-current-issues-21st-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:12.211Z\",\n            \"target_date\": \"2018-01-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6dgl9u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/121893/meray-mutabiq-discussion-on-current-issues-21st-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:12.211Z\",\n            \"updated\": \"2019-07-03T06:29:12.211Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 701,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Kasur Incident & Other Issues) \\u2013 14th January 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-kasur-incident-other-issues-14th-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:12.446Z\",\n            \"target_date\": \"2018-01-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6d3u6p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/121459/meray-mutabiq-with-hassan-nisar-kasur-incident-other-issues-14th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:12.446Z\",\n            \"updated\": \"2019-07-03T06:29:12.446Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 702,\n        \"fields\": {\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 7th January 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-7th-january-2018\",\n            \"publish_date\": \"2019-07-03T06:29:12.688Z\",\n            \"target_date\": \"2018-01-08\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6creiu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120829/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-7th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:12.688Z\",\n            \"updated\": \"2019-07-03T06:29:12.688Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 703,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 31st December 2017\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-31st-december-2017\",\n            \"publish_date\": \"2019-07-03T06:29:12.924Z\",\n            \"target_date\": \"2017-12-31\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6cgtqb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120471/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-31st-december-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:12.925Z\",\n            \"updated\": \"2019-07-03T06:29:12.925Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 704,\n        \"fields\": {\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 24th December 2017\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-24th-december-2017\",\n            \"publish_date\": \"2019-07-03T06:29:13.185Z\",\n            \"target_date\": \"2017-12-25\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6c69o7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120027/meray-mutabiq-with-hassan-nisar-current-issues-24th-december-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 4,\n                \"feed_id\": 5,\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:13.187Z\",\n            \"updated\": \"2019-07-03T06:29:13.187Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 705,\n        \"fields\": {\n            \"title\": \"Off The Record (Rana Sanauallah, Imran Khan Ki Opposition Ko Offer) \\u2013 2nd July 2019\",\n            \"slug\": \"off-the-record-rana-sanauallah-imran-khan-ki-opposition-ko-offer-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:29:23.311Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd6re\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153382/off-the-record-rana-sanauallah-imran-khan-ki-opposition-ko-offer-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:23.312Z\",\n            \"updated\": \"2019-07-03T06:29:23.312Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 706,\n        \"fields\": {\n            \"title\": \"Off The Record (All Parties Conference, Inflation) - 27th June 2019\",\n            \"slug\": \"off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:23.996Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0nyh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153037/off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:23.997Z\",\n            \"updated\": \"2019-07-03T06:29:23.997Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 707,\n        \"fields\": {\n            \"title\": \"Off The Record (APC Ne Kia Hasil Kia?) \\u2013 26th June 2019\",\n            \"slug\": \"off-the-record-apc-ne-kia-hasil-kia-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:24.262Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxz7c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152973/off-the-record-apc-ne-kia-hasil-kia-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:24.263Z\",\n            \"updated\": \"2019-07-03T06:29:24.263Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 708,\n        \"fields\": {\n            \"title\": \"Off The Record (Misaq e Maeeshat Kia Hai) \\u2013 25th June 2019\",\n            \"slug\": \"off-the-record-misaq-e-maeeshat-kia-hai-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:24.508Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvc9b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152900/off-the-record-misaq-e-maeeshat-kia-hai-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:24.508Z\",\n            \"updated\": \"2019-07-03T06:29:24.508Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 709,\n        \"fields\": {\n            \"title\": \"Off The Record (Opposition Aur Hakumat Mein Mahaz Arai) - 24th June 2019\",\n            \"slug\": \"off-the-record-opposition-aur-hakumat-mein-mahaz-arai-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:24.743Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt3no\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152839/off-the-record-opposition-aur-hakumat-mein-mahaz-arai-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:24.744Z\",\n            \"updated\": \"2019-07-03T06:29:24.744Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 710,\n        \"fields\": {\n            \"title\": \"Off The Record (Hakumat Aur Opposition Mein Mahaz Aarai) - 20th June 2019\",\n            \"slug\": \"off-the-record-hakumat-aur-opposition-mein-mahaz-aarai-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.040Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl9pi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152578/off-the-record-hakumat-aur-opposition-mein-mahaz-aarai-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:25.041Z\",\n            \"updated\": \"2019-07-03T06:29:25.041Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 711,\n        \"fields\": {\n            \"title\": \"Off The Record (Opposition Rejects Budget) \\u2013 19th June 2019\",\n            \"slug\": \"off-the-record-opposition-rejects-budget-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.354Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjkoc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152511/off-the-record-opposition-rejects-budget-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:25.354Z\",\n            \"updated\": \"2019-07-03T06:29:25.354Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 712,\n        \"fields\": {\n            \"title\": \"Off The Record (Qaumi Assembly Mein Hungama) - 18th June 2019\",\n            \"slug\": \"off-the-record-qaumi-assembly-mein-hungama-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.682Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhuqm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152454/off-the-record-qaumi-assembly-mein-hungama-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:25.683Z\",\n            \"updated\": \"2019-07-03T06:29:25.683Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 713,\n        \"fields\": {\n            \"title\": \"Off The Record (Qaumi Assembly Ka Ijlas) - 17th June 2019\",\n            \"slug\": \"off-the-record-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:25.955Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgf3b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152395/off-the-record-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:25.956Z\",\n            \"updated\": \"2019-07-03T06:29:25.956Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 714,\n        \"fields\": {\n            \"title\": \"Off The Record (Opposition Leaders Ki Giraftari) - 13th June 2019\",\n            \"slug\": \"off-the-record-opposition-leaders-ki-giraftari-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.203Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2c8f\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152177/off-the-record-opposition-leaders-ki-giraftari-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:26.204Z\",\n            \"updated\": \"2019-07-03T06:29:26.204Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 715,\n        \"fields\": {\n            \"title\": \"Off The Record (24000 Billion Debt in 10 Years?) - 12th June 2019\",\n            \"slug\": \"off-the-record-24000-billion-debt-in-10-years-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.449Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay5iu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152124/off-the-record-24000-billion-debt-in-10-years-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:26.449Z\",\n            \"updated\": \"2019-07-03T06:29:26.449Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 716,\n        \"fields\": {\n            \"title\": \"Off The Record (Hamza Shahbaz Arrested) \\u2013 11th June 2019\",\n            \"slug\": \"off-the-record-hamza-shahbaz-arrested-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.677Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aty9b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152064/off-the-record-hamza-shahbaz-arrested-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:26.678Z\",\n            \"updated\": \"2019-07-03T06:29:26.678Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 717,\n        \"fields\": {\n            \"title\": \"Off The Record (Asif Zardari Arrested) - 10th June 2019\",\n            \"slug\": \"off-the-record-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:26.908Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqy9e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152026/off-the-record-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:26.908Z\",\n            \"updated\": \"2019-07-03T06:29:26.908Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 718,\n        \"fields\": {\n            \"title\": \"Off The Record (Second Day Eid Special) \\u2013 6th June 2019\",\n            \"slug\": \"off-the-record-second-day-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.146Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7afc8d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151813/off-the-record-second-day-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:27.147Z\",\n            \"updated\": \"2019-07-03T06:29:27.147Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 719,\n        \"fields\": {\n            \"title\": \"Off The Record (Day One Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"off-the-record-day-one-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.401Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7acc23\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151780/off-the-record-day-one-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:27.402Z\",\n            \"updated\": \"2019-07-03T06:29:27.402Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 720,\n        \"fields\": {\n            \"title\": \"Off The Record (Maryam Nawaz in Action, Shahbaz Sharif Silent) - 4th June 2019\",\n            \"slug\": \"off-the-record-maryam-nawaz-in-action-shahbaz-sharif-silent-4th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.631Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7a98un\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151723/off-the-record-maryam-nawaz-in-action-shahbaz-sharif-silent-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:27.632Z\",\n            \"updated\": \"2019-07-03T06:29:27.632Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 721,\n        \"fields\": {\n            \"title\": \"Off The Record (PMLN Politics Vs PTI Politics) \\u2013 3rd June 2019\",\n            \"slug\": \"off-the-record-pmln-politics-vs-pti-politics-3rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:29:27.872Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a67zt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151699/off-the-record-pmln-politics-vs-pti-politics-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:27.873Z\",\n            \"updated\": \"2019-07-03T06:29:27.873Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 722,\n        \"fields\": {\n            \"title\": \"Off The Record (Adlia Bachao Tehreek Ka Elan) - 30th May 2019\",\n            \"slug\": \"off-the-record-adlia-bachao-tehreek-ka-elan-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.113Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79td7b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151491/off-the-record-adlia-bachao-tehreek-ka-elan-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:28.113Z\",\n            \"updated\": \"2019-07-03T06:29:28.113Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 723,\n        \"fields\": {\n            \"title\": \"Off The Record (Opposition Giving Tough Time to Govt) - 29th May 2019\",\n            \"slug\": \"off-the-record-opposition-giving-tough-time-to-govt-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.378Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79q01u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151429/off-the-record-opposition-giving-tough-time-to-govt-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:28.378Z\",\n            \"updated\": \"2019-07-03T06:29:28.378Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 724,\n        \"fields\": {\n            \"title\": \"Off The Record (Kia Nawaz Sharif Atomi Dhamakon Ki Waja Se Jail Mein) -28th May 2019\",\n            \"slug\": \"off-the-record-kia-nawaz-sharif-atomi-dhamakon-ki-waja-se-jail-mein-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.606Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mbud\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151385/off-the-record-kia-nawaz-sharif-atomi-dhamakon-ki-waja-se-jail-mein-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:28.607Z\",\n            \"updated\": \"2019-07-03T06:29:28.607Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 725,\n        \"fields\": {\n            \"title\": \"Off The Record (Issue of Chairman NAB's Leaked Video) - 27th May 2019\",\n            \"slug\": \"off-the-record-issue-of-chairman-nabs-leaked-video-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:28.861Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79ifyp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151341/off-the-record-issue-of-chairman-nab-s-leaked-video-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:28.862Z\",\n            \"updated\": \"2019-07-03T06:29:28.862Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 726,\n        \"fields\": {\n            \"title\": \"Off The Record (Ab Vote Ko Izzat Do Plus Hoga - Nawaz Sharif) - 23rd May 2019\",\n            \"slug\": \"off-the-record-ab-vote-ko-izzat-do-plus-hoga-nawaz-sharif-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.095Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x795f5n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151113/off-the-record-ab-vote-ko-izzat-do-plus-hoga-nawaz-sharif-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:29.095Z\",\n            \"updated\": \"2019-07-03T06:29:29.095Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 727,\n        \"fields\": {\n            \"title\": \"Off The Record (Maryam Nawaz Ki Hakumat Per Tanqeed) - 22nd May 2019\",\n            \"slug\": \"off-the-record-maryam-nawaz-ki-hakumat-per-tanqeed-22nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.315Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x791sps\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151058/off-the-record-maryam-nawaz-ki-hakumat-per-tanqeed-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:29.316Z\",\n            \"updated\": \"2019-07-03T06:29:29.316Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 728,\n        \"fields\": {\n            \"title\": \"Off The Record (Chairman NAB Interview to Javed Chaudhry) - 21st May 2019\",\n            \"slug\": \"off-the-record-chairman-nab-interview-to-javed-chaudhry-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.531Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y9n7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150998/off-the-record-chairman-nab-interview-to-javed-chaudhry-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:29.532Z\",\n            \"updated\": \"2019-07-03T06:29:29.532Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 729,\n        \"fields\": {\n            \"title\": \"Off The Record (Kia Opposition Eid Ke Baad Tehreek Chalaye Gi) - 20th May 2019\",\n            \"slug\": \"off-the-record-kia-opposition-eid-ke-baad-tehreek-chalaye-gi-20th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.749Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ulg4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150947/off-the-record-kia-opposition-eid-ke-baad-tehreek-chalaye-gi-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:29.750Z\",\n            \"updated\": \"2019-07-03T06:29:29.750Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 730,\n        \"fields\": {\n            \"title\": \"Off The Record (Dollar Rate Increased, Opposition Ready on Protest) - 16th May 2019\",\n            \"slug\": \"off-the-record-dollar-rate-increased-opposition-ready-on-protest-16th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:29.972Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hnrm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150736/off-the-record-dollar-rate-increased-opposition-ready-on-protest-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:29.972Z\",\n            \"updated\": \"2019-07-03T06:29:29.973Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 731,\n        \"fields\": {\n            \"title\": \"Off The Record (Will Govt Complete Its Tenure?) - 15th May 2019\",\n            \"slug\": \"off-the-record-will-govt-complete-its-tenure-15th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.225Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ekj3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150661/off-the-record-will-govt-complete-its-tenure-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:30.227Z\",\n            \"updated\": \"2019-07-03T06:29:30.227Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 732,\n        \"fields\": {\n            \"title\": \"Off The Record (PTI Govt Tax Amnesty Scheme) - 14th May 2019\",\n            \"slug\": \"off-the-record-pti-govt-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.456Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bayu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150598/off-the-record-pti-govt-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:30.456Z\",\n            \"updated\": \"2019-07-03T06:29:30.456Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 733,\n        \"fields\": {\n            \"title\": \"Off The Record (IMF Package, Opposition Objections) - 13th May 2019\",\n            \"slug\": \"off-the-record-imf-package-opposition-objections-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.687Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787vpe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150551/off-the-record-imf-package-opposition-objections-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:30.687Z\",\n            \"updated\": \"2019-07-03T06:29:30.687Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 734,\n        \"fields\": {\n            \"title\": \"Off The Record (Assembly Mein Opposition Ka Hungama) - 9th May 2019\",\n            \"slug\": \"off-the-record-assembly-mein-opposition-ka-hungama-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:30.910Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77v3x8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150297/off-the-record-assembly-mein-opposition-ka-hungama-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:30.910Z\",\n            \"updated\": \"2019-07-03T06:29:30.910Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 735,\n        \"fields\": {\n            \"title\": \"Off The Record (Mushahid Ullah Khan Exclusive Interview) - 8th May 2019\",\n            \"slug\": \"off-the-record-mushahid-ullah-khan-exclusive-interview-8th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.160Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rg60\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150231/off-the-record-mushahid-ullah-khan-exclusive-interview-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:31.161Z\",\n            \"updated\": \"2019-07-03T06:29:31.161Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 736,\n        \"fields\": {\n            \"title\": \"Off The Record (Nawaz Sharif Ki Jail Wapis Rawangi) - 7th May 2019\",\n            \"slug\": \"off-the-record-nawaz-sharif-ki-jail-wapis-rawangi-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.390Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77obxw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150165/off-the-record-nawaz-sharif-ki-jail-wapis-rawangi-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:31.391Z\",\n            \"updated\": \"2019-07-03T06:29:31.391Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 737,\n        \"fields\": {\n            \"title\": \"Off The Record (IMF, Mehngai, Opposition) - 6th May 2019\",\n            \"slug\": \"off-the-record-imf-mehngai-opposition-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.620Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77klqa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150097/off-the-record-imf-mehngai-opposition-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:31.620Z\",\n            \"updated\": \"2019-07-03T06:29:31.620Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 738,\n        \"fields\": {\n            \"title\": \"Off The Record (Shahbaz Sharif London Se Wapis Kab Ayein Ge?) - 2nd May 2019\",\n            \"slug\": \"off-the-record-shahbaz-sharif-london-se-wapis-kab-ayein-ge-2nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:31.835Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x777yny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149845/off-the-record-shahbaz-sharif-london-se-wapis-kab-ayein-ge-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:31.836Z\",\n            \"updated\": \"2019-07-03T06:29:31.836Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 739,\n        \"fields\": {\n            \"title\": \"Off The Record (PTI Ke 23 Saal, Imran Khan Ki Hakumat) - 1st May 2019\",\n            \"slug\": \"off-the-record-pti-ke-23-saal-imran-khan-ki-hakumat-1st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.061Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774smq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149781/off-the-record-pti-ke-23-saal-imran-khan-ki-hakumat-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:32.062Z\",\n            \"updated\": \"2019-07-03T06:29:32.062Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 740,\n        \"fields\": {\n            \"title\": \"Off The Record (Kia Muashi Badhali Ka Zimmedar NAB?) - 30th April 2019\",\n            \"slug\": \"off-the-record-kia-muashi-badhali-ka-zimmedar-nab-30th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.287Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771rjx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149704/off-the-record-kia-muashi-badhali-ka-zimmedar-nab-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:32.287Z\",\n            \"updated\": \"2019-07-03T06:29:32.288Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 741,\n        \"fields\": {\n            \"title\": \"Off The Record (DG ISPR Press Conference) - 29th April 2019\",\n            \"slug\": \"off-the-record-dg-ispr-press-conference-29th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.544Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xxn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149638/off-the-record-dg-ispr-press-conference-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:32.545Z\",\n            \"updated\": \"2019-07-03T06:29:32.545Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 742,\n        \"fields\": {\n            \"title\": \"Off The Record (Nawaz Sharif Want to Go Abroad?) - 25th April 2019\",\n            \"slug\": \"off-the-record-nawaz-sharif-want-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:32.812Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l9wb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149406/off-the-record-nawaz-sharif-want-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:32.813Z\",\n            \"updated\": \"2019-07-03T06:29:32.813Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 743,\n        \"fields\": {\n            \"title\": \"Off The Record (Bilawal Sahiba, Kia PM Ki Zaban Phisal Gai) - 24th April 2019\",\n            \"slug\": \"off-the-record-bilawal-sahiba-kia-pm-ki-zaban-phisal-gai-24th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:29:33.046Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76i4td\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149342/off-the-record-bilawal-sahiba-kia-pm-ki-zaban-phisal-gai-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:33.046Z\",\n            \"updated\": \"2019-07-03T06:29:33.046Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 744,\n        \"fields\": {\n            \"title\": \"Off The Record (Imran Khan's Statement in Iran) - 23rd February 2019\",\n            \"slug\": \"off-the-record-imran-khans-statement-in-iran-23rd-february-2019\",\n            \"publish_date\": \"2019-07-03T06:29:33.292Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fgi1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149288/off-the-record-imran-khan-s-statement-in-iran-23rd-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 5,\n                \"feed_id\": 10,\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:29:33.292Z\",\n            \"updated\": \"2019-07-03T06:29:33.293Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 745,\n        \"fields\": {\n            \"title\": \"Muqabil (Who Is Behind Rana Sanaullah's Arrest?) \\u2013 2nd July 2019\",\n            \"slug\": \"muqabil-who-is-behind-rana-sanaullahs-arrest-2nd-july-2019\",\n            \"publish_date\": \"2019-07-03T06:30:10.312Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdbo5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153387/muqabil-who-is-behind-rana-sanaullah-s-arrest-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:10.312Z\",\n            \"updated\": \"2019-07-03T06:30:10.313Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 746,\n        \"fields\": {\n            \"title\": \"Muqabil (Is PM Helpless In Front of Corruption Mafia) \\u2013 1st July 2019\",\n            \"slug\": \"muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"publish_date\": \"2019-07-03T06:30:10.948Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7camu6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153314/muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:10.949Z\",\n            \"updated\": \"2019-07-03T06:30:10.949Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 747,\n        \"fields\": {\n            \"title\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi) \\u2013 27th June 2019\",\n            \"slug\": \"muqabil-kia-opposition-tehreek-chalaye-gi-27th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.192Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0v66\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153054/muqabil-kia-opposition-tehreek-chalaye-gi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:11.193Z\",\n            \"updated\": \"2019-07-03T06:30:11.193Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 748,\n        \"fields\": {\n            \"title\": \"Muqabil (How To Control Dollar Rate) \\u2013 26th June 2019\",\n            \"slug\": \"muqabil-how-to-control-dollar-rate-26th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.461Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by4xs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152974/muqabil-how-to-control-dollar-rate-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:11.462Z\",\n            \"updated\": \"2019-07-03T06:30:11.462Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 749,\n        \"fields\": {\n            \"title\": \"Muqabil (Politics And Economy, Big Challenges) \\u2013 25th June 2019\",\n            \"slug\": \"muqabil-politics-and-economy-big-challenges-25th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.706Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvgfl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152906/muqabil-politics-and-economy-big-challenges-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:11.707Z\",\n            \"updated\": \"2019-07-03T06:30:11.707Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 750,\n        \"fields\": {\n            \"title\": \"Muqabil (Govt's Good News For Businessmen) \\u2013 24th June 2019\",\n            \"slug\": \"muqabil-govts-good-news-for-businessmen-24th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:11.933Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt3dn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152840/muqabil-govt-s-good-news-for-businessmen-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:11.934Z\",\n            \"updated\": \"2019-07-03T06:30:11.934Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 751,\n        \"fields\": {\n            \"title\": \"Muqabil (Train Accident, Other Issues) \\u2013 20th June 2019\",\n            \"slug\": \"muqabil-train-accident-other-issues-20th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.197Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7blfxz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152590/muqabil-train-accident-other-issues-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:12.198Z\",\n            \"updated\": \"2019-07-03T06:30:12.198Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 752,\n        \"fields\": {\n            \"title\": \"Muqabil (Ziddi Pan Aur Siasi Tanao Ka Anjam Kia Hoga) \\u2013 19th June 2019\",\n            \"slug\": \"muqabil-ziddi-pan-aur-siasi-tanao-ka-anjam-kia-hoga-19th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.502Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjooq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152521/muqabil-ziddi-pan-aur-siasi-tanao-ka-anjam-kia-hoga-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:12.503Z\",\n            \"updated\": \"2019-07-03T06:30:12.503Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 753,\n        \"fields\": {\n            \"title\": \"Muqabil (Govt Policies And Opposition) \\u2013 18th June 2019\",\n            \"slug\": \"muqabil-govt-policies-and-opposition-18th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.737Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bi0bz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152465/muqabil-govt-policies-and-opposition-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:12.737Z\",\n            \"updated\": \"2019-07-03T06:30:12.737Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 754,\n        \"fields\": {\n            \"title\": \"Muqabil (Pakistan Ki Muashi Aur Siasi Sorat e Haal) \\u2013 17th June 2019\",\n            \"slug\": \"muqabil-pakistan-ki-muashi-aur-siasi-sorat-e-haal-17th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:12.974Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgkbx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152406/muqabil-pakistan-ki-muashi-aur-siasi-sorat-e-haal-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:12.974Z\",\n            \"updated\": \"2019-07-03T06:30:12.974Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 755,\n        \"fields\": {\n            \"title\": \"Muqabil (Discussion on Different Issues) \\u2013 13th June 2019\",\n            \"slug\": \"muqabil-discussion-on-different-issues-13th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.250Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/UM2nU7HE8rI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152195/muqabil-discussion-on-different-issues-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:13.251Z\",\n            \"updated\": \"2019-07-03T06:30:13.252Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 756,\n        \"fields\": {\n            \"title\": \"Muqabil (Opposition's Strategy After Big Arrests) \\u2013 12th June 2019\",\n            \"slug\": \"muqabil-oppositions-strategy-after-big-arrests-12th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.488Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayhyn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152131/muqabil-opposition-s-strategy-after-big-arrests-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:13.489Z\",\n            \"updated\": \"2019-07-03T06:30:13.489Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 757,\n        \"fields\": {\n            \"title\": \"Muqabil (Altaf Hussain Ki Giraftari) \\u2013 11th June 2019\",\n            \"slug\": \"muqabil-altaf-hussain-ki-giraftari-11th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.724Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aui2n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152080/muqabil-altaf-hussain-ki-giraftari-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:13.724Z\",\n            \"updated\": \"2019-07-03T06:30:13.724Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 758,\n        \"fields\": {\n            \"title\": \"Muqabil (Asif Zardari's Arrest & Other Issues) \\u2013 10th June 2019\",\n            \"slug\": \"muqabil-asif-zardaris-arrest-other-issues-10th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:13.956Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqxod\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152004/muqabil-asif-zardari-s-arrest-other-issues-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:13.957Z\",\n            \"updated\": \"2019-07-03T06:30:13.957Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 759,\n        \"fields\": {\n            \"title\": \"Muqabil (Eid Akhlas o Eisaar Ka Naam Hai) \\u2013 4th June 2019\",\n            \"slug\": \"muqabil-eid-akhlas-o-eisaar-ka-naam-hai-4th-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.191Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a9irs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151726/muqabil-eid-akhlas-o-eisaar-ka-naam-hai-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:14.192Z\",\n            \"updated\": \"2019-07-03T06:30:14.192Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 760,\n        \"fields\": {\n            \"title\": \"Muqabil (Zartaj Gul Ki Wazarat Khatre Mein) \\u2013 3rd June 2019\",\n            \"slug\": \"muqabil-zartaj-gul-ki-wazarat-khatre-mein-3rd-june-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.437Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/caTT9YdTCwg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151702/muqabil-zartaj-gul-ki-wazarat-khatre-mein-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:14.438Z\",\n            \"updated\": \"2019-07-03T06:30:14.438Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 761,\n        \"fields\": {\n            \"title\": \"Muqabil (Big Decision of Army Chief) \\u2013 30th May 2019\",\n            \"slug\": \"muqabil-big-decision-of-army-chief-30th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.657Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tpzn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151505/muqabil-big-decision-of-army-chief-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:14.657Z\",\n            \"updated\": \"2019-07-03T06:30:14.658Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 762,\n        \"fields\": {\n            \"title\": \"Muqabil (PTI Govt Files Reference Against Judges) \\u2013 29th May 2019\",\n            \"slug\": \"muqabil-pti-govt-files-reference-against-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:14.881Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79qcwz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151433/muqabil-pti-govt-files-reference-against-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:14.881Z\",\n            \"updated\": \"2019-07-03T06:30:14.881Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 763,\n        \"fields\": {\n            \"title\": \"Muqabil (Are PMLN, PPP United Against PTI Govt?) \\u2013 28th May 2019\",\n            \"slug\": \"muqabil-are-pmln-ppp-united-against-pti-govt-28th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.113Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mkq8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151390/muqabil-are-pmln-ppp-united-against-pti-govt-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:15.113Z\",\n            \"updated\": \"2019-07-03T06:30:15.113Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 764,\n        \"fields\": {\n            \"title\": \"Muqabil (Pakistan Army Ki Check Post Per Hamla) \\u2013 27th May 2019\",\n            \"slug\": \"muqabil-pakistan-army-ki-check-post-per-hamla-27th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.349Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79imca\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151348/muqabil-pakistan-army-ki-check-post-per-hamla-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:15.350Z\",\n            \"updated\": \"2019-07-03T06:30:15.350Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 765,\n        \"fields\": {\n            \"title\": \"Muqabil (Modi Won Once Again in India) \\u2013 23rd May 2019\",\n            \"slug\": \"muqabil-modi-won-once-again-in-india-23rd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.593Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795kpp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151124/muqabil-modi-won-once-again-in-india-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:15.594Z\",\n            \"updated\": \"2019-07-03T06:30:15.594Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 766,\n        \"fields\": {\n            \"title\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi?) \\u2013 22nd May 2019\",\n            \"slug\": \"muqabil-kia-opposition-tehreek-chalaye-gi-22nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:15.901Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/dvUb6j3sM7Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151066/muqabil-kia-opposition-tehreek-chalaye-gi-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:15.901Z\",\n            \"updated\": \"2019-07-03T06:30:15.901Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 767,\n        \"fields\": {\n            \"title\": \"Muqabil (NAB Chairman Interview Issue) \\u2013 21st May 2019\",\n            \"slug\": \"muqabil-nab-chairman-interview-issue-21st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.139Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78yizg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151008/muqabil-nab-chairman-interview-issue-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:16.140Z\",\n            \"updated\": \"2019-07-03T06:30:16.140Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 768,\n        \"fields\": {\n            \"title\": \"Muqabil (Govt Performance & Opposition's Plan) \\u2013 20th May 2019\",\n            \"slug\": \"muqabil-govt-performance-oppositions-plan-20th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.387Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uw75\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150951/muqabil-govt-performance-opposition-s-plan-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:16.387Z\",\n            \"updated\": \"2019-07-03T06:30:16.388Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 769,\n        \"fields\": {\n            \"title\": \"Muqabil (Economy, Amnesty, Iran America Issue) \\u2013 14th May 2019\",\n            \"slug\": \"muqabil-economy-amnesty-iran-america-issue-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.639Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78eqxl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150674/muqabil-economy-amnesty-iran-america-issue-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:16.639Z\",\n            \"updated\": \"2019-07-03T06:30:16.639Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 770,\n        \"fields\": {\n            \"title\": \"Muqabil (PTI's Amnesty Scheme, IMF, Economy) - 14th May 2019\",\n            \"slug\": \"muqabil-ptis-amnesty-scheme-imf-economy-14th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:16.880Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bo40\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150607/muqabil-pti-s-amnesty-scheme-imf-economy-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:16.881Z\",\n            \"updated\": \"2019-07-03T06:30:16.881Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 771,\n        \"fields\": {\n            \"title\": \"Muqabil (IMF Deal, Awam Ke Liye Kaisa?) \\u2013 13th May 2019\",\n            \"slug\": \"muqabil-imf-deal-awam-ke-liye-kaisa-13th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.164Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/i-LBkAfsqJo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150568/muqabil-imf-deal-awam-ke-liye-kaisa-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:17.165Z\",\n            \"updated\": \"2019-07-03T06:30:17.165Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 772,\n        \"fields\": {\n            \"title\": \"Muqabil (Opposition Ki Hungama Arai) \\u2013 9th May 2019\",\n            \"slug\": \"muqabil-opposition-ki-hungama-arai-9th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.467Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77vei0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150302/muqabil-opposition-ki-hungama-arai-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:17.468Z\",\n            \"updated\": \"2019-07-03T06:30:17.468Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 773,\n        \"fields\": {\n            \"title\": \"Muqabil (Nawaz Sharif Wapis Jail Mein) \\u2013 8th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-wapis-jail-mein-8th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.704Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rrc6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150239/muqabil-nawaz-sharif-wapis-jail-mein-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:17.704Z\",\n            \"updated\": \"2019-07-03T06:30:17.704Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 774,\n        \"fields\": {\n            \"title\": \"Muqabil (Nawaz Sharif Again in Kot Lakhpat Jail) \\u2013 7th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-again-in-kot-lakhpat-jail-7th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:17.932Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77ol2m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150173/muqabil-nawaz-sharif-again-in-kot-lakhpat-jail-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:17.933Z\",\n            \"updated\": \"2019-07-03T06:30:17.933Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 775,\n        \"fields\": {\n            \"title\": \"Muqabil (Nawaz Sharif Back To Prison, Other Issues) - 6th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-back-to-prison-other-issues-6th-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.168Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kww5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150103/muqabil-nawaz-sharif-back-to-prison-other-issues-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:18.169Z\",\n            \"updated\": \"2019-07-03T06:30:18.169Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 776,\n        \"fields\": {\n            \"title\": \"Muqabil (Kia Imran Khan Pakistan Ko Theek Kar Payein Ge) \\u2013 2nd May 2019\",\n            \"slug\": \"muqabil-kia-imran-khan-pakistan-ko-theek-kar-payein-ge-2nd-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.424Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77892e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149853/muqabil-kia-imran-khan-pakistan-ko-theek-kar-payein-ge-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:18.425Z\",\n            \"updated\": \"2019-07-03T06:30:18.425Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 777,\n        \"fields\": {\n            \"title\": \"Muqabil (PM Imran Khan Speech on PTI Foundation Day) \\u2013 1st May 2019\",\n            \"slug\": \"muqabil-pm-imran-khan-speech-on-pti-foundation-day-1st-may-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.671Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x775111\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149791/muqabil-pm-imran-khan-speech-on-pti-foundation-day-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:18.672Z\",\n            \"updated\": \"2019-07-03T06:30:18.673Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 778,\n        \"fields\": {\n            \"title\": \"Muqabil (Discussion on Multiple Issues) \\u2013 30th April 2019\",\n            \"slug\": \"muqabil-discussion-on-multiple-issues-30th-april-2019\",\n            \"publish_date\": \"2019-07-03T06:30:18.945Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7720nv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149716/muqabil-discussion-on-multiple-issues-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"is_active\": true,\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 6,\n                \"feed_id\": 9,\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"created_on\": \"2019-07-03T06:30:18.945Z\",\n            \"updated\": \"2019-07-03T06:30:18.945Z\",\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    }\n]\n":1hiZ3v:-sAGO9WmLJmGr41qpNSBakZ0RTc