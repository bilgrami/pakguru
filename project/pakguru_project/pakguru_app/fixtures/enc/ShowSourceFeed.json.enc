"[\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 1,\n        \"fields\": {\n            \"name\": \"YouTube - 60 Minutes\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:15:13.753Z\",\n            \"updated\": \"2019-07-01T01:43:06.946Z\",\n            \"extra_data\": null,\n            \"show_name\": \"60 Minutes\",\n            \"channel\": 1,\n            \"playlist_link\": \"https://www.youtube.com/user/60minutes/playlists?view=1&sort=dd&flow=grid\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?v=UNvdyKiNP_A\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source\": \"Youtube\",\n            \"feed_quality\": \"1080p\",\n            \"priority\": 1,\n            \"country\": [\n                2\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 2,\n        \"fields\": {\n            \"name\": \"YouTube - Zara Hat Kay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T03:13:12.619Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:36:31.821Z\",\n            \"updated\": \"2019-07-01T03:13:12.619Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=odMfq4uvawg&list=PLqvJuaAfjXbQZEZrIYkNHyd5JYW4peIwE\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?time_continue=2&v=bsc23Rabj0w\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source\": \"Youtube\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 3,\n            \"country\": [\n                2\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 3,\n        \"fields\": {\n            \"name\": \"unewstv - Zara Hat Kay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T02:09:02.888Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:42:27.916Z\",\n            \"updated\": \"2019-07-03T02:09:02.889Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153186/zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"title_example\": \"Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019 Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019\",\n            \"title_search_pattern\": \"{show name} ({episode title}) \\u2013 {date: DDth MMM YYYY}\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 4,\n        \"fields\": {\n            \"name\": \"Talk Shows Central - Zara Hat Kay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T03:12:33.822Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T02:48:30.906Z\",\n            \"updated\": \"2019-07-01T03:12:33.822Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/playlist?list=PL3kMf0Q991MNBSj9EmVLH-lkOIQ07e3xu\",\n            \"latest_show_link\": \"https://youtu.be/5Hs3PpRgw1U?list=PL3kMf0Q991MNBSj9EmVLH-lkOIQ07e3xu\",\n            \"title_example\": \"Another Huge Success of PM Imran Khan | Zara Hat Kay | 28 June 2019 | Dawn News\",\n            \"title_search_pattern\": \"{Episode Name} | {Show name} | {date:DD MMM YYYY} | {Channel Name}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source\": \"Talk Shows Central\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 5,\n        \"fields\": {\n            \"name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:28:36.458Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:55:27.463Z\",\n            \"updated\": \"2019-07-03T06:28:36.458Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"latest_show_link\": \"http://www.unewstv.com/153242/meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"title_example\": \"Meray Mutabiq With Hassan Nisar (Amnesty Scheme, Other Issues) - 30th June 2019\",\n            \"title_search_pattern\": \"{show name} ({episode title}) \\u2013 {date: DDth MMM YYYY}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 6,\n        \"fields\": {\n            \"name\": \"unewstv - Live with Dr. Shahid Masood\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:13:18.027Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T08:55:53.055Z\",\n            \"updated\": \"2019-07-03T06:13:18.027Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Live with Dr. Shahid Masood\",\n            \"channel\": 5,\n            \"playlist_link\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"latest_show_link\": \"http://www.unewstv.com/153227/live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"title_example\": \"Live with Dr. Shahid Masood (Imran Khan Aur Loti Hui Daulat) - 30th June 2019\",\n            \"title_search_pattern\": \"Live with Dr. Shahid Masood (Muashi Dehshatgardi Ka Bharpoor Waar) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"720p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 7,\n        \"fields\": {\n            \"name\": \"Geo News - Score with Yahya Hussaini\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:07:08.136Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:07:08.136Z\",\n            \"updated\": \"2019-07-01T19:07:08.136Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Score with Yahya Hussaini\",\n            \"channel\": 4,\n            \"playlist_link\": \"https://www.geo.tv/shows/score\",\n            \"latest_show_link\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"title_example\": \"Score - 28-June-2019\",\n            \"title_search_pattern\": \"Score - 27-June-2019\",\n            \"search_api_url\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"search_api_pattern\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"feed_source\": \"Other\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 8,\n        \"fields\": {\n            \"name\": \"HUM TV - Deewar e Shab\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:52:37.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:52:37.901Z\",\n            \"updated\": \"2019-07-01T19:52:37.901Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Deewar e Shab\",\n            \"channel\": 6,\n            \"playlist_link\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"latest_show_link\": \"https://www.hum.tv/deewar-e-shab-episode-04/\",\n            \"title_example\": \"Deewar e Shab Episode #04 HUM TV Drama 29 June 2019\",\n            \"title_search_pattern\": \"Deewar e Shab Episode #03 HUM TV Drama 22 June 2019\",\n            \"search_api_url\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"search_api_pattern\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"feed_source\": \"Other\",\n            \"feed_quality\": \"1080p\",\n            \"priority\": 2,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 9,\n        \"fields\": {\n            \"name\": \"unewstv - Muqabil\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:15:37.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:01:55.446Z\",\n            \"updated\": \"2019-07-03T06:15:37.632Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Muqabil\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153314/muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"title_example\": \"Muqabil (Is PM Helpless In Front of Corruption Mafia) \\u2013 1st July 2019\",\n            \"title_search_pattern\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi) \\u2013 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"search_api_pattern\": null,\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 10,\n        \"fields\": {\n            \"name\": \"unewstv - Off The Record\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:15:16.180Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:28:47.497Z\",\n            \"updated\": \"2019-07-03T06:15:16.180Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Off The Record\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"latest_show_link\": \"http://www.unewstv.com/153037/off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"title_example\": \"Off The Record (All Parties Conference, Inflation) - 27th June 2019\",\n            \"title_search_pattern\": \"Off The Record (APC Ne Kia Hasil Kia?) \\u2013 26th June 2019 June 26, 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 11,\n        \"fields\": {\n            \"name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T04:15:01.447Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T04:15:01.447Z\",\n            \"updated\": \"2019-07-03T04:15:01.447Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"latest_show_link\": \"http://www.unewstv.com/153395/dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"title_example\": \"Dunya Kamran Khan Kay Sath (Mehngai Ka Tofan) - 2nd July 2019 Dunya Kamran Khan Kay Sath (Mehngai Ka Tofan) - 2nd July 2019\",\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 12,\n        \"fields\": {\n            \"name\": \"unewstv - Aap Kay Muqabil\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T07:53:27.275Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T07:53:27.275Z\",\n            \"updated\": \"2019-07-03T07:53:27.276Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Aap Kay Muqabil\",\n            \"channel\": 9,\n            \"playlist_link\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"latest_show_link\": \"http://www.unewstv.com/153388/aap-kay-muqabil-rana-sanaullah-s-arrest-other-issues-2nd-july-2019\",\n            \"title_example\": \"Aap Kay Muqabil (Rana Sanaullah's Arrest, Other Issues) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Aap Kay Muqabil (PM Imran Khan's Interview About Amnesty & Taxes) \\u2013 1st July 2019 July 01, 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 13,\n        \"fields\": {\n            \"name\": \"unewstv - The Reporters\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:07:28.898Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:07:28.898Z\",\n            \"updated\": \"2019-07-03T08:07:28.898Z\",\n            \"extra_data\": null,\n            \"show_name\": \"The Reporters\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153376/the-reporters-pm-imran-khan-s-offer-to-nawaz-zardari-2nd-july-2019\",\n            \"title_example\": \"The Reporters (PM Imran Khan's Offer to Nawaz & Zardari) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"The Reporters (Opposition's All Parties Conference Failed) - 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 14,\n        \"fields\": {\n            \"name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:25:07.063Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:25:07.063Z\",\n            \"updated\": \"2019-07-03T08:25:07.063Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"latest_show_link\": \"http://www.unewstv.com/153325/aaj-shahzeb-khanzada-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"title_example\": \"Aaj Shahzeb Khanzada Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"title_search_pattern\": \"Aaj Shahzaib Khanzada Ke Saath (Army Chief's Statement About Economy) \\u2013 28th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 15,\n        \"fields\": {\n            \"name\": \"unewstv - Night Edition\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:37:06.514Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:37:06.514Z\",\n            \"updated\": \"2019-07-03T08:37:06.514Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Night Edition\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153244/night-edition-big-shock-for-pmln-30th-june-2019\",\n            \"title_example\": \"Night Edition (Big Shock For PMLN?) \\u2013 30th June 2019\",\n            \"title_search_pattern\": \"Night Edition (Budget Approved, Opposition Failed?) \\u2013 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 16,\n        \"fields\": {\n            \"name\": \"unewstv - Jirga\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:48:42.453Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:48:42.453Z\",\n            \"updated\": \"2019-07-03T08:48:42.453Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Jirga\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"latest_show_link\": \"http://www.unewstv.com/153255/jirga-with-saleem-safi-ashraf-ghani-special-interview-30th-june-2019\",\n            \"title_example\": \"Jirga With Saleem Safi (Ashraf Ghani Special Interview) - 30th June 2019\",\n            \"title_search_pattern\": \"Jirga with Saleem Safi (Qamar Zaman Kaira Exclusive) - 22nd June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 17,\n        \"fields\": {\n            \"name\": \"unewstv - Bebaak\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:56:47.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:56:47.316Z\",\n            \"updated\": \"2019-07-03T08:56:47.316Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Bebaak\",\n            \"channel\": 5,\n            \"playlist_link\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153396/bebaak-production-orders-arrests-economy-2nd-july-2019\",\n            \"title_example\": \"Bebaak (Production Orders, Arrests, Economy) - 2nd July 2019\",\n            \"title_search_pattern\": \"Bebaak (Rana Sanaullah Arrested, Shahbaz Maryam Meeting) - 1st July 2019 July 01, 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 18,\n        \"fields\": {\n            \"name\": \"unewstv - Capital Talk\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:10:26.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:10:26.810Z\",\n            \"updated\": \"2019-07-03T09:10:26.810Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Capital Talk\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"latest_show_link\": \"http://www.unewstv.com/153400/capital-talk-fazal-ur-rehman-exclusive-interview-2nd-july-2019\",\n            \"title_example\": \"Capital Talk (Fazal ur Rehman Exclusive Interview) - 2nd July 2019\",\n            \"title_search_pattern\": \"Capital Talk (Cricket Se Siasat Tak) \\u2013 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 19,\n        \"fields\": {\n            \"name\": \"unewstv - Hard Talk Pakistan\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:17:40.682Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:17:40.682Z\",\n            \"updated\": \"2019-07-03T09:17:40.682Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Hard Talk Pakistan\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"latest_show_link\": \"http://www.unewstv.com/153236/hard-talk-pakistan-with-moeed-pirzada-cracks-in-pmln-30th-june-2019\",\n            \"title_example\": \"Hard Talk Pakistan With Moeed Pirzada (Cracks in PMLN) - 30th June 2019\",\n            \"title_search_pattern\": \"Hard Talk Pakistan With Moeed Pirzada (Mid Term Elections Ka Mutalba) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 20,\n        \"fields\": {\n            \"name\": \"unewstv - Power Play\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:27:35.039Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:27:35.039Z\",\n            \"updated\": \"2019-07-03T09:27:35.039Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Power Play\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153405/power-play-chairman-fbr-shabbar-zaidi-exclusive-interview-2nd-july-2019\",\n            \"title_example\": \"Power Play (Chairman FBR Shabbar Zaidi Exclusive Interview) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Power Play (Beqabu Dollar Aur Maeeshat) \\u2013 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 21,\n        \"fields\": {\n            \"name\": \"unewstv - Najam Sethi Show\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:45:08.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:45:08.610Z\",\n            \"updated\": \"2019-07-03T09:45:08.610Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Najam Sethi Show\",\n            \"channel\": 10,\n            \"playlist_link\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"latest_show_link\": \"http://www.unewstv.com/153386/najam-sethi-show-more-arrests-asif-zardari-s-interview-2nd-july-2019\",\n            \"title_example\": \"Najam Sethi Show (More Arrests, Asif Zardari's Interview) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Najam Sethi Show (PM Imran Khan's Speech) \\u2013 1st July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 22,\n        \"fields\": {\n            \"name\": \"unewstv - Think Tank\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:04:23.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:04:23.845Z\",\n            \"updated\": \"2019-07-03T18:04:23.845Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Think Tank\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153231/think-tank-pmln-in-trouble-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"title_example\": \"Think Tank (PMLN In Trouble, PMLN Members Meet Imran Khan) - 30th June 2019\",\n            \"title_search_pattern\": \"Think Tank (Attitude of Govt And Opposition) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 23,\n        \"fields\": {\n            \"name\": \"unewstv - Harf e Raaz\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:21:12.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:21:12.286Z\",\n            \"updated\": \"2019-07-03T18:21:12.286Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Harf e Raaz\",\n            \"channel\": 11,\n            \"playlist_link\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"latest_show_link\": \"http://www.unewstv.com/153437/harf-e-raaz-why-america-now-favours-pakistan-3rd-july-2019\",\n            \"title_example\": \"Harf e Raaz (Why America Now Favours Pakistan?) - 3rd July 2019\",\n            \"title_search_pattern\": \"Harf e Raaz With Orya Maqbool Jan (Anti Opposition Drive) - 2nd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 24,\n        \"fields\": {\n            \"name\": \"unewstv - Khara Sach\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:33:41.023Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:33:41.023Z\",\n            \"updated\": \"2019-07-03T18:33:41.023Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Khara Sach\",\n            \"channel\": 10,\n            \"playlist_link\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"latest_show_link\": \"http://www.unewstv.com/153404/khara-sach-with-mubashir-lucman-production-orders-issue-2nd-july-2019\",\n            \"title_example\": \"Khara Sach With Mubashir Lucman (Production Orders Issue) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Khara Sach With Mubashir Lucman (Sheikh Rasheed Exclusive Interview) \\u2013 1st July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 25,\n        \"fields\": {\n            \"name\": \"unewstv - Kal Tak\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:45:37.770Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:45:37.770Z\",\n            \"updated\": \"2019-07-03T18:45:37.770Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Kal Tak\",\n            \"channel\": 12,\n            \"playlist_link\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"latest_show_link\": \"http://www.unewstv.com/153391/kal-tak-with-javed-chaudhry-imran-khan-s-big-announcement-2nd-july-2019\",\n            \"title_example\": \"Kal Tak with Javed Chaudhry (Imran Khan's Big Announcement) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Kal tak with Javed Chaudhry (PMLN Mein Cracks) \\u2013 1st July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 26,\n        \"fields\": {\n            \"name\": \"unewstv - Faisla Aap Ka\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T19:06:23.531Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:06:23.537Z\",\n            \"updated\": \"2019-07-03T19:06:23.538Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Faisla Aap Ka\",\n            \"channel\": 13,\n            \"playlist_link\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"latest_show_link\": \"http://www.unewstv.com/153433/faisla-aap-ka-cases-on-opposition-leaders-3rd-july-2019\",\n            \"title_example\": \"Faisla Aap Ka (Cases on Opposition Leaders) \\u2013 3rd July 2019\",\n            \"title_search_pattern\": \"Faisla Aap Ka (Production Order Ke Qanoon Mein Tarmeem Ka Faisla) \\u2013 2nd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 27,\n        \"fields\": {\n            \"name\": \"unewstv - To The Point\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T19:19:35.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:19:35.884Z\",\n            \"updated\": \"2019-07-03T19:19:35.884Z\",\n            \"extra_data\": null,\n            \"show_name\": \"To The Point\",\n            \"channel\": 12,\n            \"playlist_link\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"latest_show_link\": \"http://www.unewstv.com/153251/to-the-point-cracks-in-pmln-30th-june-2019\",\n            \"title_example\": \"To The Point (Cracks in PMLN) \\u2013 30th June 2019\",\n            \"title_search_pattern\": \"To The Point (Opposition Failed To Reject Budget) \\u2013 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"country\": [\n                4\n            ]\n        }\n    }\n]\n":1hiu2w:q-sr5QUS4RWqhdNj6LejbkuxcZk