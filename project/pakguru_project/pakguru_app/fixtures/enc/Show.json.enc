"[\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 1,\n        \"fields\": {\n            \"name\": \"60 Minutes\",\n            \"description\": \"60 Minutes is an American news magazine and television program broadcast on the CBS television network. Debuting in 1968, the program was created by Don Hewitt, who chose to set it apart from other news programs by using a unique style of reporter-centered investigation.\\r\\n\\r\\nhttps://en.wikipedia.org/wiki/60_Minutes\\r\\n\\r\\nhttps://www.youtube.com/user/60minutes\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:05:15.181Z\",\n            \"updated\": \"2019-07-01T01:15:52.903Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": \"https://www.facebook.com/60minutes/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Lesley Stahl (host, 1991\\u2013present, co-editor), Scott Pelley (host, 2003\\u2013present), Bill Whitaker (host, 2014\\u2013present), John Dickerson (2019\\u2013present)\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 1,\n            \"primary_feed\": 1,\n            \"locale\": 1,\n            \"total_shows\": -1,\n            \"country\": [\n                2\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 2,\n        \"fields\": {\n            \"name\": \"Zara Hat Kay\",\n            \"description\": \"Zara Hat Kay \\u2013 Your dose of daily news, away from the mainstream talk shows, a show that speaks your mind and is interactive with the public on social media.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:03:46.932Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:34:13.765Z\",\n            \"updated\": \"2020-01-15T06:03:46.932Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": \"https://www.facebook.com/ZHKDawn/\",\n            \"twitter_link\": \"https://twitter.com/zarahatkay_dawn\",\n            \"instagram_link\": null,\n            \"host_name\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 2,\n            \"primary_feed\": 3,\n            \"locale\": 2,\n            \"total_shows\": 171,\n            \"country\": [\n                1,\n                2,\n                4\n            ],\n            \"additional_feeds\": [\n                2,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 3,\n        \"fields\": {\n            \"name\": \"Meray Mutabiq With Hassan Nisar\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-06T05:18:02.434Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:58:03.243Z\",\n            \"updated\": \"2020-01-06T05:18:02.434Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Hassan Nisar\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 5,\n            \"locale\": 2,\n            \"total_shows\": 64,\n            \"country\": [\n                1\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 4,\n        \"fields\": {\n            \"name\": \"Live with Dr. Shahid Masood\",\n            \"description\": \"G News Network, commonly known as GNN, is a Pakistani 24-hour news and current affairs channel based in Lahore, Pakistan. It is owned and operated by Gourmet Foods.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:20:16.036Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T09:03:22.498Z\",\n            \"updated\": \"2020-01-14T19:20:16.036Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://www.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"host_name\": \"Dr. Shahid Masood\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 5,\n            \"primary_feed\": 6,\n            \"locale\": 2,\n            \"total_shows\": 230,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": [\n                6\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 5,\n        \"fields\": {\n            \"name\": \"Score with Yahya Hussaini\",\n            \"description\": \"Score is a Pakistani sports talk show hosted by Yahya Hussaini that is broadcast on Geo TV. It is written by Khursheed Alam and directed by Farrukh Suleman. The show debuted in February 2011.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:11:18.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:11:18.786Z\",\n            \"updated\": \"2019-07-01T19:11:18.786Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Yahya Hussaini\",\n            \"airtime\": null,\n            \"category\": 6,\n            \"channel\": 4,\n            \"primary_feed\": 7,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                1\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 6,\n        \"fields\": {\n            \"name\": \"Deewar e Shab\",\n            \"description\": \"Deewar-e-Shab is a 2019 Pakistani epic historical television series created and produced by Momina Duraid of MD Productions, and directed by Iqbal Hussain. It is the dramatization of the novel of the same name by Aliya Bukhari.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:55:12.407Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:55:12.407Z\",\n            \"updated\": \"2019-07-01T19:55:12.407Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.hum.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCEeEQxm6qc_qaTE7qTV5aLQ\",\n            \"facebook_link\": \"https://www.facebook.com/humtvpakistan\",\n            \"twitter_link\": null,\n            \"instagram_link\": \"https://www.instagram.com/humtvpakistanofficial/\",\n            \"host_name\": \"HUM TV\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": 8,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                1\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 7,\n        \"fields\": {\n            \"name\": \"Muqabil\",\n            \"description\": \"Haroon ur Rasheed and Zafar Hilaly expose the political failures in our society, in a highly rated and popular TV show, Muqabil, hosted by Alina Shigri. Watch as how both of these seasoned journalists unfold the various sides of stories, everyday at 10:03 PM from Monday to Thursday.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:16:26.469Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:07:46.271Z\",\n            \"updated\": \"2020-01-13T05:16:26.469Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"host_name\": \"Haroon ur Rasheed, Zafar Hilaly\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 7,\n            \"primary_feed\": 9,\n            \"locale\": 2,\n            \"total_shows\": 135,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 8,\n        \"fields\": {\n            \"name\": \"Off The Record\",\n            \"description\": \"Kashif Abasi is a Pakistani journalist, television talk show host and anchorperson based in Islamabad. He hosts the current affairs talk show Off the Record on ARY News.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:19:38.931Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:33:36.918Z\",\n            \"updated\": \"2020-01-14T19:19:38.931Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCMmpLL2ucRHAXbNHiCPyIyg\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"host_name\": \"Kashif Abbasi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 8,\n            \"primary_feed\": 10,\n            \"locale\": 2,\n            \"total_shows\": 148,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 9,\n        \"fields\": {\n            \"name\": \"Dunya Kamran Khan Kay Sath\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:02:58.448Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T04:16:16.944Z\",\n            \"updated\": \"2020-01-15T06:02:58.448Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Kamran Khan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 11,\n            \"locale\": 2,\n            \"total_shows\": 168,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 10,\n        \"fields\": {\n            \"name\": \"Aap Kay Muqabil\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-20T04:12:09.138Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T07:58:42.860Z\",\n            \"updated\": \"2019-09-20T04:12:09.138Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://aapnews.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCPTF7suymU_TvRvRPYuHdvA\",\n            \"facebook_link\": \"https://web.facebook.com/aapnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aapnewspk\",\n            \"instagram_link\": \"https://www.instagram.com/aapnewspk/\",\n            \"host_name\": \"Rauf Klasra, Amir Mateen\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 9,\n            \"primary_feed\": 12,\n            \"locale\": 2,\n            \"total_shows\": 55,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 11,\n        \"fields\": {\n            \"name\": \"The Reporters\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:19:25.862Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:18:08.135Z\",\n            \"updated\": \"2020-01-14T19:19:25.862Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/user/ARYNEWSofficial\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"host_name\": \"Sabir Shakir\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 8,\n            \"primary_feed\": 13,\n            \"locale\": 2,\n            \"total_shows\": 153,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 12,\n        \"fields\": {\n            \"name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n            \"description\": \"A program that combines fast paced news, undivided analysis and stories that make headlines. Anchored by an energetic and strong host, Shahzeb Khanzada.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:02:46.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:30:54.772Z\",\n            \"updated\": \"2020-01-15T06:02:46.098Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"host_name\": \"Shahzaib Khanzada\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 14,\n            \"locale\": 2,\n            \"total_shows\": 164,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 13,\n        \"fields\": {\n            \"name\": \"Night Edition\",\n            \"description\": \"Night Edition is a Current Affair Program hosted by Shazia Akram.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:19:14.546Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:45:55.320Z\",\n            \"updated\": \"2020-01-14T19:19:14.546Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"host_name\": \"Shazia Akram\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 7,\n            \"primary_feed\": 15,\n            \"locale\": 2,\n            \"total_shows\": 128,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 14,\n        \"fields\": {\n            \"name\": \"Jirga\",\n            \"description\": \"Jirga covers every important issue related to politics, economy, sociology, religion and international relations. It is a journey to achieve prosperous future by providing access to bitter truth through serious and thought provoking dialogue.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:15:42.339Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:51:28.128Z\",\n            \"updated\": \"2020-01-13T05:15:42.339Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"host_name\": \"Saleem Safi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 16,\n            \"locale\": 2,\n            \"total_shows\": 87,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 15,\n        \"fields\": {\n            \"name\": \"Bebaak\",\n            \"description\": \"Ch. Ghulam Hussain and Saeed Qazi will provide you with insights and indepth analysis only on Bebaak, only on GNN!\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-09T21:03:02.767Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:02:59.193Z\",\n            \"updated\": \"2019-08-09T21:03:02.767Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://web.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"host_name\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 5,\n            \"primary_feed\": 17,\n            \"locale\": 2,\n            \"total_shows\": 55,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 16,\n        \"fields\": {\n            \"name\": \"Capital Talk\",\n            \"description\": \"Capital Talk looks at the challenges, issues and concerns facing Pakistan on a daily basis. The format includes a panel of renowned personalities who participate in a dialogue which contributes\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:19:03.413Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:12:30.638Z\",\n            \"updated\": \"2020-01-14T19:19:03.413Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"host_name\": \"Hamid Mir\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 18,\n            \"locale\": 2,\n            \"total_shows\": 148,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 17,\n        \"fields\": {\n            \"name\": \"Hard Talk Pakistan\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:18:58.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:19:58.058Z\",\n            \"updated\": \"2020-01-14T19:18:58.700Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"host_name\": \"Dr. Moeed Pirzada\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 7,\n            \"primary_feed\": 19,\n            \"locale\": 2,\n            \"total_shows\": 127,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 18,\n        \"fields\": {\n            \"name\": \"Power Play\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:02:21.374Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:29:47.363Z\",\n            \"updated\": \"2020-01-15T06:02:21.374Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/user/ARYNEWSofficial\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"host_name\": \"Arshad Sharif\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 8,\n            \"primary_feed\": 20,\n            \"locale\": 2,\n            \"total_shows\": 142,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 19,\n        \"fields\": {\n            \"name\": \"Najam Sethi Show\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-08T01:35:12.108Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:48:03.417Z\",\n            \"updated\": \"2019-08-08T01:35:12.108Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.24newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCcmpeVbSSQlZRvHfdC-CRwg\",\n            \"facebook_link\": \"https://web.facebook.com/24NewsHD.tv?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/24NewsHDtv\",\n            \"instagram_link\": null,\n            \"host_name\": \"Najam Sethi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 10,\n            \"primary_feed\": 21,\n            \"locale\": 2,\n            \"total_shows\": 53,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 20,\n        \"fields\": {\n            \"name\": \"Think Tank\",\n            \"description\": \"It's not a TV show, it's a Think Tank. The participants are Sohail Warraich, Ayaz Amir, Haroon ur Rasheed and Salman Ghani. Presented by brainy girl Syeda Ayesha Naz.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:15:05.489Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:11:14.738Z\",\n            \"updated\": \"2020-01-13T05:15:05.489Z\",\n            \"extra_data\": null,\n            \"website_link\": \"http://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/dunyanews1\",\n            \"facebook_link\": \"https://web.facebook.com/dunyanews?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews\",\n            \"instagram_link\": null,\n            \"host_name\": \"Syeda Ayesha Naz\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 22,\n            \"locale\": 2,\n            \"total_shows\": 121,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 21,\n        \"fields\": {\n            \"name\": \"Harf e Raaz\",\n            \"description\": \"Harf E Raz is a flagship Neo News program which is a one-hour debate on current events hosted by Jameel Farooqui.And Creative Presenter by Orya Maqbool Jan . Harf E Raz looks at the challenges, issues, and concerns facing Pakistan on a daily basis.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:18:42.004Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:26:26.869Z\",\n            \"updated\": \"2020-01-14T19:18:42.004Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.neonetwork.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCAsvFcpUQegneSh0QAUd64A\",\n            \"facebook_link\": \"https://web.facebook.com/neotvnetwork/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/NeoNewsUR\",\n            \"instagram_link\": null,\n            \"host_name\": \"Orya Maqbool Jan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 11,\n            \"primary_feed\": 23,\n            \"locale\": 2,\n            \"total_shows\": 148,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 22,\n        \"fields\": {\n            \"name\": \"Khara Sach\",\n            \"description\": \"Mubashir Luqman brings you the latest news with his hard-hitting analysis on Pakistan politics in Khara Sach.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:03:25.656Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:36:11.261Z\",\n            \"updated\": \"2020-01-15T06:03:25.656Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Quote\": 0,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"https://www.24newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCcmpeVbSSQlZRvHfdC-CRwg\",\n            \"facebook_link\": \"https://web.facebook.com/24NewsHD.tv?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/24NewsHDtv\",\n            \"instagram_link\": null,\n            \"host_name\": \"Mubashir Lucman\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 10,\n            \"primary_feed\": 24,\n            \"locale\": 2,\n            \"total_shows\": 93,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 23,\n        \"fields\": {\n            \"name\": \"Kal tak with Javed Chaudhry\",\n            \"description\": \"Kal Tak is a Pakistani television show that covers a variety of subject include social issues and current affairs.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:18:28.528Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:51:19.433Z\",\n            \"updated\": \"2020-01-14T19:18:28.528Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://web.facebook.com/expressnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"host_name\": \"Javed Chaudhry\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 25,\n            \"locale\": 2,\n            \"total_shows\": 148,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 24,\n        \"fields\": {\n            \"name\": \"Faisla Aap Ka\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:19:52.074Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:13:45.942Z\",\n            \"updated\": \"2020-01-14T19:19:52.074Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.aaj.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCgBAPAcLsh_MAPvJprIz89w\",\n            \"facebook_link\": \"https://web.facebook.com/aajtv0/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aaj_urdu\",\n            \"instagram_link\": null,\n            \"host_name\": \"Asma Sherazi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 13,\n            \"primary_feed\": 26,\n            \"locale\": 2,\n            \"total_shows\": 145,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 25,\n        \"fields\": {\n            \"name\": \"To The Point\",\n            \"description\": \"To the Point is a Pakistani television show that covers a variety of subject include social issues and current affairs.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:18:37.993Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:24:03.444Z\",\n            \"updated\": \"2020-01-14T19:18:37.993Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://web.facebook.com/expressnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"host_name\": \"Mansoor Ali Khan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 27,\n            \"locale\": 2,\n            \"total_shows\": 116,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 26,\n        \"fields\": {\n            \"name\": \"News Eye\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:02:00.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T18:08:46.554Z\",\n            \"updated\": \"2020-01-15T06:02:00.526Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.dawnnews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/dawnnewspakistan\",\n            \"facebook_link\": \"https://web.facebook.com/dawndotcom/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/Dawn_News?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\",\n            \"instagram_link\": null,\n            \"host_name\": \"Mehar Bokhari\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 2,\n            \"primary_feed\": 28,\n            \"locale\": 2,\n            \"total_shows\": 138,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 27,\n        \"fields\": {\n            \"name\": \"G For Gharida\",\n            \"description\": \"G For Gharidah is a Pakistani television show that is aired on Aaj TV and hosted by Gharidah Farooqi which covers a variety of subject including social issues and current affairs.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T18:57:49.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T18:27:54.433Z\",\n            \"updated\": \"2019-07-04T18:57:49.423Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.aaj.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCgBAPAcLsh_MAPvJprIz89w\",\n            \"facebook_link\": \"https://web.facebook.com/aajtv0/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aaj_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/aaj.tv/\",\n            \"host_name\": \"Gharidah Farooqi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 13,\n            \"primary_feed\": 29,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 28,\n        \"fields\": {\n            \"name\": \"Nasim Zehra @ 8:00\",\n            \"description\": \"Senior journalist Nasim Zehra brings leading personalities for deep analysis and discussions on her program Nasim Zehra @8:00.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T03:48:31.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T18:37:07.344Z\",\n            \"updated\": \"2020-01-14T03:48:31.225Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.24newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCcmpeVbSSQlZRvHfdC-CRwg\",\n            \"facebook_link\": \"https://web.facebook.com/24NewsHD.tv?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/24NewsHDtv\",\n            \"instagram_link\": null,\n            \"host_name\": \"Nasim Zehra\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 10,\n            \"primary_feed\": 30,\n            \"locale\": 2,\n            \"total_shows\": 99,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 29,\n        \"fields\": {\n            \"name\": \"Breaking Point with Malick\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:14:19.302Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T19:03:11.753Z\",\n            \"updated\": \"2020-01-13T05:14:19.302Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.humnews.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC0Um3pnZ2WGBEeoA3BX2sKw?feature=embeds_subscribe_title\",\n            \"facebook_link\": \"https://web.facebook.com/HUMNewsPakistan/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/humnewspakistan\",\n            \"instagram_link\": \"https://www.instagram.com/humnewspakistan/\",\n            \"host_name\": \"M. malick\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 6,\n            \"primary_feed\": 31,\n            \"locale\": 2,\n            \"total_shows\": 118,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 30,\n        \"fields\": {\n            \"name\": \"Face to Face with Ayesha Bakhsh\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:14:13.206Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T19:22:05.502Z\",\n            \"updated\": \"2020-01-13T05:14:13.206Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://web.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"host_name\": \"Ayesha Bakhsh\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 5,\n            \"primary_feed\": 32,\n            \"locale\": 2,\n            \"total_shows\": 114,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 31,\n        \"fields\": {\n            \"name\": \"Tajzia Sami Ibrahim Kay Sath\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:18:04.182Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T19:38:09.629Z\",\n            \"updated\": \"2020-01-14T19:18:04.182Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.bolnetwork.com/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCz2yxQJZgiB_5elTzqV7FiQ\",\n            \"facebook_link\": \"https://web.facebook.com/BOLNETWORK/\",\n            \"twitter_link\": \"https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fwww.bolnetwork.com%2F&ref_src=twsrc%5Etfw&screen_name=BOLNetwork&tw_p=followbutton\",\n            \"instagram_link\": null,\n            \"host_name\": \"Sami Ibrahim\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 14,\n            \"primary_feed\": 33,\n            \"locale\": 2,\n            \"total_shows\": 220,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 32,\n        \"fields\": {\n            \"name\": \"News Beat\",\n            \"description\": \"A serious political show with Fereeha Idrees where the top policy makers of the country analyze news and current events that have shaped the current circumstances of the country.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:13:58.868Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T20:15:08.046Z\",\n            \"updated\": \"2020-01-13T05:13:58.868Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.samaa.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/samaatvnews\",\n            \"facebook_link\": \"https://web.facebook.com/samaatvnews?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/samaatv\",\n            \"instagram_link\": \"https://www.instagram.com/samaatv/\",\n            \"host_name\": \"Fereeha Idrees\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 15,\n            \"primary_feed\": 34,\n            \"locale\": 2,\n            \"total_shows\": 96,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 33,\n        \"fields\": {\n            \"name\": \"Nadeem Malik Live\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:17:54.655Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T20:29:54.134Z\",\n            \"updated\": \"2020-01-14T19:17:54.655Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.samaa.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/samaatvnews\",\n            \"facebook_link\": \"https://web.facebook.com/samaatvnews?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/samaatv\",\n            \"instagram_link\": \"https://www.instagram.com/samaatv/\",\n            \"host_name\": \"Nadeem Malik\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 15,\n            \"primary_feed\": 35,\n            \"locale\": 2,\n            \"total_shows\": 144,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 34,\n        \"fields\": {\n            \"name\": \"Aaj Rana Mubashir Kay Saath\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T03:48:01.245Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T20:46:12.186Z\",\n            \"updated\": \"2020-01-14T03:48:01.245Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.aaj.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCgBAPAcLsh_MAPvJprIz89w\",\n            \"facebook_link\": \"https://web.facebook.com/aajtv0/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aaj_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/aaj.tv/\",\n            \"host_name\": \"Rana Mubashir\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 13,\n            \"primary_feed\": 36,\n            \"locale\": 2,\n            \"total_shows\": 121,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 35,\n        \"fields\": {\n            \"name\": \"Ho Kya Raha Hai\",\n            \"description\": \"Arif Nizami and Asad Ullah Khan have an informal yet very professional and productive discussion on the current political situation in the country.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:17:45.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T20:58:04.220Z\",\n            \"updated\": \"2020-01-14T19:17:45.582Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"host_name\": \"Arif Nizami, Asad Ullah Khan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 7,\n            \"primary_feed\": 37,\n            \"locale\": 2,\n            \"total_shows\": 144,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 36,\n        \"fields\": {\n            \"name\": \"Nuqta e Nazar\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:17:40.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:08:33.155Z\",\n            \"updated\": \"2020-01-14T19:17:40.463Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"http://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 38,\n            \"locale\": 2,\n            \"total_shows\": 145,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 37,\n        \"fields\": {\n            \"name\": \"On The Front\",\n            \"description\": \"On the Front is a tri-weekly news program currently airing on the Dunya News television channel, broadcast from Pakistan. The show is hosted by Pakistani news personality and analyst Kamran Shahid.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:17:35.418Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:17:14.144Z\",\n            \"updated\": \"2020-01-14T19:17:35.418Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"http://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Kamran Shahid\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 39,\n            \"locale\": 2,\n            \"total_shows\": 145,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 38,\n        \"fields\": {\n            \"name\": \"Ikhtilafi Note\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:13:20.495Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:35:29.886Z\",\n            \"updated\": \"2020-01-13T05:13:20.495Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"http://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": \"https://web.facebook.com/dunyanews?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews\",\n            \"instagram_link\": \"https://twitter.com/samaatv\",\n            \"host_name\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 40,\n            \"locale\": 2,\n            \"total_shows\": 117,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 39,\n        \"fields\": {\n            \"name\": \"Seedhi Baat\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:17:24.837Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:45:46.695Z\",\n            \"updated\": \"2020-01-14T19:17:24.837Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"https://www.neonetwork.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCAsvFcpUQegneSh0QAUd64A\",\n            \"facebook_link\": \"https://web.facebook.com/neotvnetwork/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/NeoNewsUR\",\n            \"instagram_link\": null,\n            \"host_name\": \"Beenish Saleem\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 11,\n            \"primary_feed\": 41,\n            \"locale\": 2,\n            \"total_shows\": 142,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 40,\n        \"fields\": {\n            \"name\": \"Sawal Yeh Hai\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:12:59.042Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:53:52.679Z\",\n            \"updated\": \"2020-01-13T05:12:59.042Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/user/ARYNEWSofficial\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"host_name\": \"Maria Memon\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 8,\n            \"primary_feed\": 42,\n            \"locale\": 2,\n            \"total_shows\": 113,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 41,\n        \"fields\": {\n            \"name\": \"Report Card\",\n            \"description\": \"REPORT CARD is a roundup of the most important news items throughout the day discussed objectively with leading analysts and opinion makers.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:20:30.738Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-06T10:15:57.692Z\",\n            \"updated\": \"2020-01-14T19:20:30.738Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"host_name\": \"Analysts\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 46,\n            \"locale\": 2,\n            \"total_shows\": 189,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 42,\n        \"fields\": {\n            \"name\": \"Subah Pakistan With Shahista Lodhi\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T05:15:12.320Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T10:17:55.326Z\",\n            \"updated\": \"2019-07-07T05:15:12.320Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 0\n            },\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Shahista Lodhi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 16,\n            \"primary_feed\": 44,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 43,\n        \"fields\": {\n            \"name\": \"Naya Pakistan\",\n            \"description\": \"The show is based on robust discussions on news events and/or pressing current affairs issues, offering a unique but flexible format whereby facts, analyses and opinions are incorporated into different segments thereof. Moreover, the show not only focuses on discerning and discussing important issues and events but also offers various perspectives and conclusions to the viewers.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:17:50.461Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-06T16:17:31.101Z\",\n            \"updated\": \"2020-01-13T05:17:50.461Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"host_name\": \"Shahzad Iqbal\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 45,\n            \"locale\": 2,\n            \"total_shows\": 105,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 44,\n        \"fields\": {\n            \"name\": \"Aapas Ki Baat\",\n            \"description\": \"Aapas ki Baat is a quick paced live show about the news and happenings over the national and international sphere encompassing the views and analysis by veteran journalist Najam Sethi.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:03:33.501Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-06T16:32:50.284Z\",\n            \"updated\": \"2020-01-15T06:03:33.501Z\",\n            \"extra_data\": {\n                \"is_Joke\": 0,\n                \"is_Show\": 1,\n                \"is_Politics\": 1\n            },\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/geonews\",\n            \"facebook_link\": \"https://web.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": \"https://www.instagram.com/geonewsdottv/?hl=en\",\n            \"host_name\": \"Muneeb Farooq\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 4,\n            \"primary_feed\": 47,\n            \"locale\": 2,\n            \"total_shows\": 102,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 45,\n        \"fields\": {\n            \"name\": \"Sawera\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:30:45.434Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:54.156Z\",\n            \"updated\": \"2019-07-07T06:30:45.434Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"unknown\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 16,\n            \"primary_feed\": 51,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 46,\n        \"fields\": {\n            \"name\": \"Alif Allah Aur Insaan\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-09T16:53:41.203Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-07T06:32:03.013Z\",\n            \"updated\": \"2020-01-09T16:53:41.203Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Unknown\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": 52,\n            \"locale\": 2,\n            \"total_shows\": 12,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 47,\n        \"fields\": {\n            \"name\": \"Bulbulay\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-12-30T07:27:08.926Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:37:06.213Z\",\n            \"updated\": \"2019-12-30T07:27:08.926Z\",\n            \"extra_data\": {\n                \"is_Joke\": 1,\n                \"is_Show\": 0,\n                \"is_Quote\": 0,\n                \"is_Politics\": 0\n            },\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Unknown\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 17,\n            \"primary_feed\": 53,\n            \"locale\": 2,\n            \"total_shows\": 69,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 48,\n        \"fields\": {\n            \"name\": \"Dil e Majboor\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:44:19.625Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:41:51.748Z\",\n            \"updated\": \"2019-07-07T06:44:19.625Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Unknown\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 18,\n            \"primary_feed\": 54,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 49,\n        \"fields\": {\n            \"name\": \"Tonight With Fareeha\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T19:20:35.682Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T14:55:19.585Z\",\n            \"updated\": \"2020-01-14T19:20:35.682Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://abbtakk.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC5mwDEzm4FzXKoHPBDnuUQQ\",\n            \"facebook_link\": \"https://www.facebook.com/AbbTakk/?ref=bookmarks\",\n            \"twitter_link\": null,\n            \"instagram_link\": \"https://www.instagram.com/abbtakknewsofficial/\",\n            \"host_name\": \"Fareeha Idrees\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 19,\n            \"primary_feed\": 56,\n            \"locale\": 2,\n            \"total_shows\": 145,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 50,\n        \"fields\": {\n            \"name\": \"Mah E Tamaam\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-12T07:43:49.706Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:09:41.477Z\",\n            \"updated\": \"2020-01-12T07:43:49.706Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"HUM TV\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": 55,\n            \"locale\": 2,\n            \"total_shows\": 5,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 51,\n        \"fields\": {\n            \"name\": \"Hasb e Haal\",\n            \"description\": \"Your one stop destination for all Hasb E Haal episodes, Watch Azizi discussing different news, issues and imitating all the famous personalities of Pakistan. Enjoy and get ready for non-stop entertainment! Hosts: Junaid Saleem and Najia Baig Sohail Ahmed: Azizi\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T03:50:28.203Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:19:55.904Z\",\n            \"updated\": \"2020-01-14T03:50:28.203Z\",\n            \"extra_data\": null,\n            \"website_link\": \"http://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": \"https://www.facebook.com/dunyanews/\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\",\n            \"instagram_link\": null,\n            \"host_name\": \"Junaid Saleem, Sohail Ahmed\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 3,\n            \"primary_feed\": 57,\n            \"locale\": 2,\n            \"total_shows\": 145,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 52,\n        \"fields\": {\n            \"name\": \"Mazaaq Raat\",\n            \"description\": \"\\\"Mazaaq Raat is a top grossing Pakistani comedy television show airing on Dunya News. Hosting the show is Vasay Chaudhary accompanied with a humorous team including DJ Mohsin Abbas Haider and the talented Hina Niazi.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-15T06:03:21.657Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:30:25.229Z\",\n            \"updated\": \"2020-01-15T06:03:21.657Z\",\n            \"extra_data\": null,\n            \"website_link\": \"http://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": \"https://www.facebook.com/dunyanews/\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\",\n            \"instagram_link\": null,\n            \"host_name\": \"Vasay Chaudhry\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 3,\n            \"primary_feed\": 58,\n            \"locale\": 2,\n            \"total_shows\": 111,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 54,\n        \"fields\": {\n            \"name\": \"Syasi Theater\",\n            \"description\": \"Watch Syasi Theater a Comedy talk show where host Syed Wasi Shah invites famous Personalities and discuss different issues as well as general life discussion .\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-10T08:01:11.992Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:45:47.352Z\",\n            \"updated\": \"2020-01-10T08:01:11.992Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://www.facebook.com/expressnewspk\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"host_name\": \"Syed Wasi Shah\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 12,\n            \"primary_feed\": 59,\n            \"locale\": 2,\n            \"total_shows\": 110,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 55,\n        \"fields\": {\n            \"name\": \"Khabarnak\",\n            \"description\": \"A veritable \\u201cgossip column of talk shows\\u201d where in a tongue-in-cheek manner politics, current affairs and society are under discussion focusing on pertinent issues that affect us all.\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-13T05:14:31.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T16:02:21.207Z\",\n            \"updated\": \"2020-01-13T05:14:31.906Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.geo.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC_vt34wimdCzdkrzVejwX9g\",\n            \"facebook_link\": \"https://www.facebook.com/GeoUrduDotTv/\",\n            \"twitter_link\": \"https://twitter.com/geonews_urdu\",\n            \"instagram_link\": null,\n            \"host_name\": \"Ayesha Jahanzeb\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 4,\n            \"primary_feed\": 60,\n            \"locale\": 2,\n            \"total_shows\": 126,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 56,\n        \"fields\": {\n            \"name\": \"Khabardar\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-14T03:47:20.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T16:18:49.162Z\",\n            \"updated\": \"2020-01-14T03:47:20.906Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://www.facebook.com/expressnewspk\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"host_name\": \"Aftab Iqbal\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 12,\n            \"primary_feed\": 61,\n            \"locale\": 2,\n            \"total_shows\": 102,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 57,\n        \"fields\": {\n            \"name\": \"Khan\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-12T07:43:52.494Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T18:53:27.448Z\",\n            \"updated\": \"2020-01-12T07:43:52.494Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"GEO TV\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 16,\n            \"primary_feed\": 62,\n            \"locale\": 2,\n            \"total_shows\": 7,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 59,\n        \"fields\": {\n            \"name\": \"Udaari\",\n            \"description\": \"\",\n            \"is_active\": false,\n            \"effective_date\": \"2020-01-12T07:43:45.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T19:21:50.289Z\",\n            \"updated\": \"2020-01-12T07:43:45.693Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"HUM TV\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": 64,\n            \"locale\": 2,\n            \"total_shows\": 8,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 60,\n        \"fields\": {\n            \"name\": \"Naseebon Jali\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2020-01-12T07:43:31.521Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T19:11:24.977Z\",\n            \"updated\": \"2020-01-12T07:43:31.521Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Ayesha Sana\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": 43,\n            \"locale\": 2,\n            \"total_shows\": 42,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 61,\n        \"fields\": {\n            \"name\": \"Aangan\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-12-30T03:37:18.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-12T18:51:40.448Z\",\n            \"updated\": \"2019-12-30T03:37:18.392Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Sajal Aly, Mawra Hocane, Ahad Raza Mir\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": 65,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 64,\n        \"fields\": {\n            \"name\": \"Grift\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-24T18:03:45.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:36:37.632Z\",\n            \"updated\": \"2019-08-24T18:03:45.758Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Saddam Tufail\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 70,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 65,\n        \"fields\": {\n            \"name\": \"Dunya Kamran Khan Kay Sath\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-30T04:30:36.809Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:39:00.541Z\",\n            \"updated\": \"2019-08-30T04:30:36.809Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Kamran Khan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 67,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 66,\n        \"fields\": {\n            \"name\": \"Think Tank\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-20T08:42:09.407Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:42:07.610Z\",\n            \"updated\": \"2019-07-20T08:42:09.407Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Syeda Ayesha Naaz\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 68,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 67,\n        \"fields\": {\n            \"name\": \"Sawal Say Agay\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-20T08:47:22.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:47:21.260Z\",\n            \"updated\": \"2019-07-20T08:47:22.509Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Mujahid Barelvi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 2,\n            \"primary_feed\": 69,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 68,\n        \"fields\": {\n            \"name\": \"Pinjra\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-12-19T06:22:50.663Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-05T06:31:50.679Z\",\n            \"updated\": \"2019-12-19T06:22:50.663Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Yumna Zaidi, Samina Ahmed\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 20,\n            \"primary_feed\": 71,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": [\n                71\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 69,\n        \"fields\": {\n            \"name\": \"Kal Tak\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-06T04:13:37.752Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:13:36.714Z\",\n            \"updated\": \"2019-08-06T04:13:37.753Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Javed Chaudhary\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 72,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 70,\n        \"fields\": {\n            \"name\": \"Takrar\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-06T04:18:54.312Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:18:52.926Z\",\n            \"updated\": \"2019-08-06T04:18:54.312Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Imran Khan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 73,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 71,\n        \"fields\": {\n            \"name\": \"Spot Light\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-06T04:32:13.351Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:32:11.213Z\",\n            \"updated\": \"2019-08-06T04:32:13.351Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Munizae Jahangir\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 13,\n            \"primary_feed\": 74,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 72,\n        \"fields\": {\n            \"name\": \"News Eye\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-06T04:37:35.440Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:37:34.093Z\",\n            \"updated\": \"2019-08-06T04:37:35.440Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Mehar Bokhari\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 2,\n            \"primary_feed\": 75,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 73,\n        \"fields\": {\n            \"name\": \"Express Special\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-02T08:27:22.796Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-02T08:27:21.595Z\",\n            \"updated\": \"2019-09-02T08:27:22.796Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Junaid Haleem\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 76,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 74,\n        \"fields\": {\n            \"name\": \"Faisla Aap Ka\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T06:22:33.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T06:22:32.748Z\",\n            \"updated\": \"2019-09-03T06:22:33.891Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Asma Sherazi\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 13,\n            \"primary_feed\": 77,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 75,\n        \"fields\": {\n            \"name\": \"Tonight with Fereeha\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T07:02:06.885Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T07:02:05.608Z\",\n            \"updated\": \"2019-09-03T07:02:06.885Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Fereeha Idrees\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 19,\n            \"primary_feed\": 83,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 76,\n        \"fields\": {\n            \"name\": \"Benaqaab\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T07:02:58.008Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T07:02:57.036Z\",\n            \"updated\": \"2019-09-03T07:02:58.008Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Saifan Khan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 19,\n            \"primary_feed\": 82,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 77,\n        \"fields\": {\n            \"name\": \"News Wise\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T07:03:59.482Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T07:03:58.349Z\",\n            \"updated\": \"2019-09-03T07:03:59.482Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Arifa Noor\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 2,\n            \"primary_feed\": 81,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 78,\n        \"fields\": {\n            \"name\": \"Center Stage\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T07:08:43.719Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T07:08:42.856Z\",\n            \"updated\": \"2019-09-03T07:08:43.719Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Rehman Azhar\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 80,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 79,\n        \"fields\": {\n            \"name\": \"Ikhtalafi Note\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T07:11:56.099Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T07:11:55.208Z\",\n            \"updated\": \"2019-09-03T07:11:56.099Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Habib Akram, Saad Rasool\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 79,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 80,\n        \"fields\": {\n            \"name\": \"Do Raaye\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T07:18:51.803Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T07:18:50.500Z\",\n            \"updated\": \"2019-09-03T07:18:51.803Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Fasi Zaka\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 2,\n            \"primary_feed\": 78,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 81,\n        \"fields\": {\n            \"name\": \"Mazaaq Raat\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-12T05:23:26.492Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-12T05:23:25.304Z\",\n            \"updated\": \"2019-09-12T05:23:26.492Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Khurram Sohail Khan\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 3,\n            \"primary_feed\": 84,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 82,\n        \"fields\": {\n            \"name\": \"Hasb e Haal\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-12T05:25:51.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-12T05:25:50.759Z\",\n            \"updated\": \"2019-09-12T05:25:51.882Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Junaid Saleem\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 3,\n            \"primary_feed\": 85,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 83,\n        \"fields\": {\n            \"name\": \"Khabardar\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-12T05:28:31.579Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-12T05:28:30.637Z\",\n            \"updated\": \"2019-09-12T05:28:31.579Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Aftab Iqbal\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 12,\n            \"primary_feed\": 86,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 84,\n        \"fields\": {\n            \"name\": \"Syasi Theater\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-16T08:02:08.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-16T08:02:07.314Z\",\n            \"updated\": \"2019-09-16T08:02:08.929Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Syed Wasi Shah\",\n            \"airtime\": null,\n            \"category\": 7,\n            \"channel\": 12,\n            \"primary_feed\": 87,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 85,\n        \"fields\": {\n            \"name\": \"Ikhtalafi Note\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-16T08:06:25.440Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-16T08:06:23.849Z\",\n            \"updated\": \"2019-09-16T08:06:25.440Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 3,\n            \"primary_feed\": 88,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 86,\n        \"fields\": {\n            \"name\": \"To The Point\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-16T08:13:16.372Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-16T08:13:14.806Z\",\n            \"updated\": \"2019-09-16T08:13:16.372Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Mansoor Ali Khan\",\n            \"airtime\": null,\n            \"category\": 1,\n            \"channel\": 12,\n            \"primary_feed\": 89,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 87,\n        \"fields\": {\n            \"name\": \"Ghar Jamai\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-10-11T07:09:05.085Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-10-11T07:09:03.750Z\",\n            \"updated\": \"2019-10-11T07:09:05.085Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Ary Dramas\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 17,\n            \"primary_feed\": 90,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 88,\n        \"fields\": {\n            \"name\": \"Mohabbat Tumse Nafrat Hai\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-12-30T07:24:19.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-12-22T09:07:37.636Z\",\n            \"updated\": \"2019-12-30T07:24:19.392Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"Geo TV\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 16,\n            \"primary_feed\": 91,\n            \"locale\": 2,\n            \"total_shows\": 4,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": [\n                93\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 89,\n        \"fields\": {\n            \"name\": \"Zindagi Gulzar Hai\",\n            \"description\": \"\",\n            \"is_active\": false,\n            \"effective_date\": \"2019-12-26T07:12:03.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-12-26T07:12:01.843Z\",\n            \"updated\": \"2019-12-26T07:12:03.693Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"HUM TV\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 6,\n            \"primary_feed\": null,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.show\",\n        \"pk\": 90,\n        \"fields\": {\n            \"name\": \"Ab Dekh Khuda Kya Karta Hai\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-12-27T18:01:30.934Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-12-27T18:01:26.326Z\",\n            \"updated\": \"2019-12-27T18:01:30.934Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"host_name\": \"geo tv\",\n            \"airtime\": null,\n            \"category\": 5,\n            \"channel\": 16,\n            \"primary_feed\": 94,\n            \"locale\": 2,\n            \"total_shows\": -1,\n            \"country\": [\n                4\n            ],\n            \"additional_feeds\": []\n        }\n    }\n]\n":1irycT:ymPl5-AL-2TKtPeOSAkLGas1-zM