IltcbiAgICB7XG4gICAgICAgIFwibW9kZWxcIjogXCJwYWtndXJ1X2FwcC5jb3VudHJ5bGlzdFwiLFxuICAgICAgICBcInBrXCI6IDEsXG4gICAgICAgIFwiZmllbGRzXCI6IHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIlBha2lzdGFuXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IG51bGwsXG4gICAgICAgICAgICBcImlzX2FjdGl2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJlZmZlY3RpdmVfZGF0ZVwiOiBcIjIwMTktMDctMDFUMDE6NDM6MDYuOTQ2WlwiLFxuICAgICAgICAgICAgXCJleHBpcmF0aW9uX2RhdGVcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYWRkZWRfYnlcIjogW1xuICAgICAgICAgICAgICAgIFwic2hhaG5lZWxhXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNyZWF0ZWRcIjogXCIyMDE5LTA2LTMwVDE0OjU4OjU4LjM1OFpcIixcbiAgICAgICAgICAgIFwidXBkYXRlZFwiOiBcIjIwMTktMDYtMzBUMTQ6NTg6NTguMzU4WlwiLFxuICAgICAgICAgICAgXCJleHRyYV9kYXRhXCI6IG51bGwsXG4gICAgICAgICAgICBcInNob3J0X25hbWVcIjogXCJQS1wiLFxuICAgICAgICAgICAgXCJjYXBpdGFsX2NpdHlcIjogXCJJc2xhbWFiYWRcIixcbiAgICAgICAgICAgIFwiY291bnRyeV9waG9uZV9jb2RlXCI6IFwiKzkyXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm1vZGVsXCI6IFwicGFrZ3VydV9hcHAuY291bnRyeWxpc3RcIixcbiAgICAgICAgXCJwa1wiOiAyLFxuICAgICAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IG51bGwsXG4gICAgICAgICAgICBcImlzX2FjdGl2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJlZmZlY3RpdmVfZGF0ZVwiOiBcIjIwMTktMDctMDFUMDE6NDM6MDYuOTQ2WlwiLFxuICAgICAgICAgICAgXCJleHBpcmF0aW9uX2RhdGVcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYWRkZWRfYnlcIjogW1xuICAgICAgICAgICAgICAgIFwic2hhaG5lZWxhXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNyZWF0ZWRcIjogXCIyMDE5LTA2LTMwVDE0OjU5OjE5LjAxMVpcIixcbiAgICAgICAgICAgIFwidXBkYXRlZFwiOiBcIjIwMTktMDYtMzBUMTQ6NTk6MTkuMDExWlwiLFxuICAgICAgICAgICAgXCJleHRyYV9kYXRhXCI6IG51bGwsXG4gICAgICAgICAgICBcInNob3J0X25hbWVcIjogXCJVU0FcIixcbiAgICAgICAgICAgIFwiY2FwaXRhbF9jaXR5XCI6IFwiV2FzaGluZ3RvbiBELkMuXCIsXG4gICAgICAgICAgICBcImNvdW50cnlfcGhvbmVfY29kZVwiOiBcIisxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm1vZGVsXCI6IFwicGFrZ3VydV9hcHAuY291bnRyeWxpc3RcIixcbiAgICAgICAgXCJwa1wiOiAzLFxuICAgICAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJVbml0ZWQgQXJhYiBFbWlyYXRlc1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBudWxsLFxuICAgICAgICAgICAgXCJpc19hY3RpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZWZmZWN0aXZlX2RhdGVcIjogXCIyMDE5LTA3LTAxVDAxOjQzOjA2Ljk0NlpcIixcbiAgICAgICAgICAgIFwiZXhwaXJhdGlvbl9kYXRlXCI6IG51bGwsXG4gICAgICAgICAgICBcImFkZGVkX2J5XCI6IFtcbiAgICAgICAgICAgICAgICBcInNoYWhuZWVsYVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjcmVhdGVkXCI6IFwiMjAxOS0wNi0zMFQxNDo1OTo1OC40NTBaXCIsXG4gICAgICAgICAgICBcInVwZGF0ZWRcIjogXCIyMDE5LTA2LTMwVDE0OjU5OjU4LjQ1MFpcIixcbiAgICAgICAgICAgIFwiZXh0cmFfZGF0YVwiOiBudWxsLFxuICAgICAgICAgICAgXCJzaG9ydF9uYW1lXCI6IFwiVUFFXCIsXG4gICAgICAgICAgICBcImNhcGl0YWxfY2l0eVwiOiBcIkFidSBEaGFiaVwiLFxuICAgICAgICAgICAgXCJjb3VudHJ5X3Bob25lX2NvZGVcIjogXCIrOTcxXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm1vZGVsXCI6IFwicGFrZ3VydV9hcHAuY291bnRyeWxpc3RcIixcbiAgICAgICAgXCJwa1wiOiA0LFxuICAgICAgICBcImZpZWxkc1wiOiB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJBbGxcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbnVsbCxcbiAgICAgICAgICAgIFwiaXNfYWN0aXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcImVmZmVjdGl2ZV9kYXRlXCI6IFwiMjAxOS0wNy0wMVQwMTo0MzowNi45NDZaXCIsXG4gICAgICAgICAgICBcImV4cGlyYXRpb25fZGF0ZVwiOiBudWxsLFxuICAgICAgICAgICAgXCJhZGRlZF9ieVwiOiBbXG4gICAgICAgICAgICAgICAgXCJzaGFobmVlbGFcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY3JlYXRlZFwiOiBcIjIwMTktMDYtMzBUMTQ6NTk6NTguNDUwWlwiLFxuICAgICAgICAgICAgXCJ1cGRhdGVkXCI6IFwiMjAxOS0wNi0zMFQxNDo1OTo1OC40NTBaXCIsXG4gICAgICAgICAgICBcImV4dHJhX2RhdGFcIjogbnVsbCxcbiAgICAgICAgICAgIFwic2hvcnRfbmFtZVwiOiBcIkFsbFwiLFxuICAgICAgICAgICAgXCJjYXBpdGFsX2NpdHlcIjogXCJOL0FcIixcbiAgICAgICAgICAgIFwiY291bnRyeV9waG9uZV9jb2RlXCI6IG51bGxcbiAgICAgICAgfVxuICAgIH1cbl1cbiI:1j3BTc:r74EWjHKMQ3uCqbyPGfDzQTdtlo