"[\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 1,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T02:20:01.915Z\",\n            \"updated\": \"2019-07-03T09:16:51.870Z\",\n            \"extra_data\": {\n                \"D\": 440,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"1981.577\",\n                \"te\": \"2019-07-02T23:00:20.405191\",\n                \"ts\": \"2019-07-02T23:00:18.423614\"\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-02\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-03-1-bilgrami-test-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 2,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T04:21:48.801Z\",\n            \"updated\": \"2019-07-03T09:17:23.576Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"11704.222\",\n                \"te\": \"2019-07-02T23:00:51.740173\",\n                \"ts\": \"2019-07-02T23:00:40.035951\"\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-02\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-03-1-bilgrami-test_dunya-kamran.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 3,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:12:16.823Z\",\n            \"updated\": \"2019-07-03T09:17:47.290Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"11660.119\",\n                \"te\": \"2019-07-02T23:22:16.941555\",\n                \"ts\": \"2019-07-02T23:22:05.281436\"\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-02\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-03-1-bilgrami-test-shahid.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 4,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:22:58.424Z\",\n            \"updated\": \"2019-07-03T09:18:02.945Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"10926.814\",\n                \"te\": \"2019-07-02T23:29:13.557098\",\n                \"ts\": \"2019-07-02T23:29:02.630284\"\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-03-1-bilgrami-test-mere-mutabiq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 5,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:23:53.718Z\",\n            \"updated\": \"2019-07-03T09:19:33.861Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"10470.875\",\n                \"te\": \"2019-07-02T23:29:33.536965\",\n                \"ts\": \"2019-07-02T23:29:23.066090\"\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-02\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-03-1-bilgrami-test-off-the-record_Y5TXHLU.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 6,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-01T01:15:52.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T06:29:54.078Z\",\n            \"updated\": \"2019-07-03T09:14:48.823Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 34,\n                \"td\": \"9266.092\",\n                \"te\": \"2019-07-02T23:30:19.303064\",\n                \"ts\": \"2019-07-02T23:30:10.036972\"\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-02\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-03-1-bilgrami-test-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 7,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:24.614Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:41:15.690Z\",\n            \"updated\": \"2019-07-04T11:48:24.614Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 15,\n                \"td\": \"1671.423\",\n                \"te\": \"2019-07-04T04:48:24.614208\",\n                \"ts\": \"2019-07-04T04:48:22.942785\"\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabiljson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 8,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:27.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:41:38.678Z\",\n            \"updated\": \"2019-07-04T11:48:27.171Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"2521.043\",\n                \"te\": \"2019-07-04T04:48:27.170817\",\n                \"ts\": \"2019-07-04T04:48:24.649774\"\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_13-unewstv-the-reportersjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 9,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:30.245Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:42:00.488Z\",\n            \"updated\": \"2019-07-04T11:48:30.245Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"3051.306\",\n                \"te\": \"2019-07-04T04:48:30.245766\",\n                \"ts\": \"2019-07-04T04:48:27.194460\"\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzada-ke-saathjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 10,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:36.327Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:42:22.943Z\",\n            \"updated\": \"2019-07-04T11:48:36.327Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"2657.078\",\n                \"te\": \"2019-07-04T04:48:36.327046\",\n                \"ts\": \"2019-07-04T04:48:33.669968\"\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_15-unewstv-night-editionjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 11,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:39.671Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:42:45.029Z\",\n            \"updated\": \"2019-07-04T11:48:39.671Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"3303.058\",\n                \"te\": \"2019-07-04T04:48:39.671689\",\n                \"ts\": \"2019-07-04T04:48:36.368631\"\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_16-unewstv-jirgajson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 12,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:42.325Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:43:07.554Z\",\n            \"updated\": \"2019-07-04T11:48:42.325Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"2577.826\",\n                \"te\": \"2019-07-04T04:48:42.325465\",\n                \"ts\": \"2019-07-04T04:48:39.747639\"\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_17-unewstv-bebaakjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 13,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:48.650Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:43:29.620Z\",\n            \"updated\": \"2019-07-04T11:48:48.650Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"3309.903\",\n                \"te\": \"2019-07-04T04:48:48.650564\",\n                \"ts\": \"2019-07-04T04:48:45.340661\"\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_18-unewstv-capital-talkjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 14,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:50.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:43:46.910Z\",\n            \"updated\": \"2019-07-04T11:48:50.700Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 30,\n                \"td\": \"1996.6950000000002\",\n                \"te\": \"2019-07-04T04:48:50.700470\",\n                \"ts\": \"2019-07-04T04:48:48.703775\"\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistanjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 15,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:54.280Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:44:09.493Z\",\n            \"updated\": \"2019-07-04T11:48:54.280Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"3556.381\",\n                \"te\": \"2019-07-04T04:48:54.280267\",\n                \"ts\": \"2019-07-04T04:48:50.723886\"\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_20-unewstv-power-playjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 16,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:49:00.917Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:44:31.863Z\",\n            \"updated\": \"2019-07-04T11:49:00.917Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"3492.127\",\n                \"te\": \"2019-07-04T04:49:00.916867\",\n                \"ts\": \"2019-07-04T04:48:57.424740\"\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_21-unewstv-najam-sethi-showjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 17,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:49:03.968Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:44:54.141Z\",\n            \"updated\": \"2019-07-04T11:49:03.968Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"2999.9449999999997\",\n                \"te\": \"2019-07-04T04:49:03.967981\",\n                \"ts\": \"2019-07-04T04:49:00.968036\"\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_22-unewstv-think-tankjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 18,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:22.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:45:16.801Z\",\n            \"updated\": \"2019-07-04T11:48:22.911Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"6362.615\",\n                \"te\": \"2019-07-04T04:48:22.911010\",\n                \"ts\": \"2019-07-04T04:48:16.548395\"\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_23-unewstv-harf-e-raazjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 19,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T12:18:32.388Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:45:39.212Z\",\n            \"updated\": \"2019-07-04T12:18:32.388Z\",\n            \"extra_data\": {\n                \"D\": 440,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"1246.536\",\n                \"te\": \"2019-07-04T05:18:32.388435\",\n                \"ts\": \"2019-07-04T05:18:31.141899\"\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-2019-07-04-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 20,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:45.240Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:46:01.286Z\",\n            \"updated\": \"2019-07-04T11:48:45.240Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"2826.927\",\n                \"te\": \"2019-07-04T04:48:45.240201\",\n                \"ts\": \"2019-07-04T04:48:42.413274\"\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_25-unewstv-kal-takjson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 21,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-04T11:48:57.324Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:46:26.254Z\",\n            \"updated\": \"2019-07-04T11:48:57.324Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"2949.111\",\n                \"te\": \"2019-07-04T04:48:57.324298\",\n                \"ts\": \"2019-07-04T04:48:54.375187\"\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-04-1-bilgrami-feed_id_26-unewstv-faisla-aap-kajson\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 22,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-05T09:07:09.154Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-04T11:46:48.777Z\",\n            \"updated\": \"2019-07-05T09:07:09.155Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 40,\n                \"td\": \"5563.2919999999995\",\n                \"te\": \"2019-07-04T04:55:58.659313\",\n                \"ts\": \"2019-07-04T04:55:53.096021\"\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-2019-07-04-1-admin-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 23,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:43.739Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:57:14.940Z\",\n            \"updated\": \"2019-07-05T10:15:43.739Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"4339.793000000001\",\n                \"te\": \"2019-07-05T03:15:43.739695\",\n                \"ts\": \"2019-07-05T03:15:39.399902\"\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 24,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:39.350Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:57:37.911Z\",\n            \"updated\": \"2019-07-05T10:15:39.350Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"4147.331999999999\",\n                \"te\": \"2019-07-05T03:15:39.350376\",\n                \"ts\": \"2019-07-05T03:15:35.203044\"\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-hassan-nisar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 25,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:44.744Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:57:59.938Z\",\n            \"updated\": \"2019-07-05T10:15:44.744Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"984.165\",\n                \"te\": \"2019-07-05T03:15:44.744216\",\n                \"ts\": \"2019-07-05T03:15:43.760051\"\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 26,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:45.947Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:58:19.768Z\",\n            \"updated\": \"2019-07-05T10:15:45.947Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"1185.259\",\n                \"te\": \"2019-07-05T03:15:45.947532\",\n                \"ts\": \"2019-07-05T03:15:44.762273\"\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 27,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:46.765Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:58:41.154Z\",\n            \"updated\": \"2019-07-05T10:15:46.765Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"701.119\",\n                \"te\": \"2019-07-05T03:15:46.765804\",\n                \"ts\": \"2019-07-05T03:15:46.064685\"\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 28,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:47.230Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:59:02.787Z\",\n            \"updated\": \"2019-07-05T10:15:47.231Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"437.243\",\n                \"te\": \"2019-07-05T03:15:47.230803\",\n                \"ts\": \"2019-07-05T03:15:46.793560\"\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 29,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:47.615Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:59:11.585Z\",\n            \"updated\": \"2019-07-05T10:15:47.615Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"318.475\",\n                \"te\": \"2019-07-05T03:15:47.615566\",\n                \"ts\": \"2019-07-05T03:15:47.297091\"\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 30,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:48.297Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:59:33.520Z\",\n            \"updated\": \"2019-07-05T10:15:48.297Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"664.3829999999999\",\n                \"te\": \"2019-07-05T03:15:48.297563\",\n                \"ts\": \"2019-07-05T03:15:47.633180\"\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 31,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:48.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T09:59:55.284Z\",\n            \"updated\": \"2019-07-05T10:15:48.967Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"587.8679999999999\",\n                \"te\": \"2019-07-05T03:15:48.967510\",\n                \"ts\": \"2019-07-05T03:15:48.379642\"\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzada-ke-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 32,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:49.365Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:00:18.213Z\",\n            \"updated\": \"2019-07-05T10:15:49.365Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"378.233\",\n                \"te\": \"2019-07-05T03:15:49.365368\",\n                \"ts\": \"2019-07-05T03:15:48.987135\"\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 33,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:50.363Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:00:39.635Z\",\n            \"updated\": \"2019-07-05T10:15:50.364Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"977.294\",\n                \"te\": \"2019-07-05T03:15:50.363845\",\n                \"ts\": \"2019-07-05T03:15:49.386551\"\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 34,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:54.723Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:01:01.366Z\",\n            \"updated\": \"2019-07-05T10:15:54.723Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"1316.2769999999998\",\n                \"te\": \"2019-07-05T03:15:54.723021\",\n                \"ts\": \"2019-07-05T03:15:53.406744\"\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 35,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:55.147Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:01:24.435Z\",\n            \"updated\": \"2019-07-05T10:15:55.147Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"383.776\",\n                \"te\": \"2019-07-05T03:15:55.147236\",\n                \"ts\": \"2019-07-05T03:15:54.763460\"\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 36,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:55.448Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:01:41.074Z\",\n            \"updated\": \"2019-07-05T10:15:55.448Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"276.001\",\n                \"te\": \"2019-07-05T03:15:55.448786\",\n                \"ts\": \"2019-07-05T03:15:55.172785\"\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 37,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:59.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:02:02.688Z\",\n            \"updated\": \"2019-07-05T10:15:59.231Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"691.8499999999999\",\n                \"te\": \"2019-07-05T03:15:59.231359\",\n                \"ts\": \"2019-07-05T03:15:58.539509\"\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 38,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:59.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:02:24.638Z\",\n            \"updated\": \"2019-07-05T10:15:59.786Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"519.852\",\n                \"te\": \"2019-07-05T03:15:59.786823\",\n                \"ts\": \"2019-07-05T03:15:59.266971\"\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 39,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:00.836Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:02:46.549Z\",\n            \"updated\": \"2019-07-05T10:16:00.836Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"1024.453\",\n                \"te\": \"2019-07-05T03:16:00.836351\",\n                \"ts\": \"2019-07-05T03:15:59.811898\"\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 40,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:04.310Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:03:09.264Z\",\n            \"updated\": \"2019-07-05T10:16:04.310Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"435.827\",\n                \"te\": \"2019-07-05T03:16:04.310066\",\n                \"ts\": \"2019-07-05T03:16:03.874239\"\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 41,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:05.147Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:03:31.559Z\",\n            \"updated\": \"2019-07-05T10:16:05.147Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"818.708\",\n                \"te\": \"2019-07-05T03:16:05.147792\",\n                \"ts\": \"2019-07-05T03:16:04.329084\"\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 42,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:05.712Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:03:53.128Z\",\n            \"updated\": \"2019-07-05T10:16:05.712Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"504.807\",\n                \"te\": \"2019-07-05T03:16:05.712558\",\n                \"ts\": \"2019-07-05T03:16:05.207751\"\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 43,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.685Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:04:15.832Z\",\n            \"updated\": \"2019-07-05T10:16:08.685Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"373.439\",\n                \"te\": \"2019-07-05T03:16:08.685236\",\n                \"ts\": \"2019-07-05T03:16:08.311797\"\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 44,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:09.322Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:04:38.311Z\",\n            \"updated\": \"2019-07-05T10:16:09.322Z\",\n            \"extra_data\": {\n                \"D\": 11,\n                \"F\": 0,\n                \"S\": 0,\n                \"td\": \"598.018\",\n                \"te\": \"2019-07-05T03:16:09.321976\",\n                \"ts\": \"2019-07-05T03:16:08.723958\"\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 45,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:11.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:05:00.859Z\",\n            \"updated\": \"2019-07-05T10:16:11.918Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 1,\n                \"td\": \"2505.658\",\n                \"te\": \"2019-07-05T03:16:11.918699\",\n                \"ts\": \"2019-07-05T03:16:09.413041\"\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 46,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:05:23.868Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:05:23.787Z\",\n            \"updated\": \"2019-07-05T10:05:23.868Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 47,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:53.355Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:05:45.753Z\",\n            \"updated\": \"2019-07-05T10:15:53.355Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 1,\n                \"td\": \"2968.2439999999997\",\n                \"te\": \"2019-07-05T03:15:53.355114\",\n                \"ts\": \"2019-07-05T03:15:50.386870\"\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 48,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:15:58.459Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:06:07.805Z\",\n            \"updated\": \"2019-07-05T10:15:58.459Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 1,\n                \"td\": \"2983.67\",\n                \"te\": \"2019-07-05T03:15:58.459078\",\n                \"ts\": \"2019-07-05T03:15:55.475408\"\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 49,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:03.844Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:06:29.708Z\",\n            \"updated\": \"2019-07-05T10:16:03.844Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 1,\n                \"td\": \"2950.851\",\n                \"te\": \"2019-07-05T03:16:03.844807\",\n                \"ts\": \"2019-07-05T03:16:00.893956\"\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ayesha-bakhsh.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 50,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:08.277Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:06:50.941Z\",\n            \"updated\": \"2019-07-05T10:16:08.277Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 1,\n                \"td\": \"2526.049\",\n                \"te\": \"2019-07-05T03:16:08.277240\",\n                \"ts\": \"2019-07-05T03:16:05.751191\"\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 51,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T10:16:14.799Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-05T10:07:12.781Z\",\n            \"updated\": \"2019-07-05T10:16:14.799Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 1,\n                \"td\": \"2849.939\",\n                \"te\": \"2019-07-05T03:16:14.798834\",\n                \"ts\": \"2019-07-05T03:16:11.948895\"\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-05-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    }\n]\n":1hjZOz:IX1jb6dEOxzjqAV_AGwZ6tQKWZY