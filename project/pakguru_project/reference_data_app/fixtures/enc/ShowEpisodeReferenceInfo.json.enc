"[\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 459,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.1 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.1 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.870Z\",\n            \"updated\": \"2019-07-08T11:47:41.313Z\",\n            \"extra_data\": \"[('title', 'Episode #1.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 1), ('rating', 12345678910.0), ('original air date', '22 Oct. 2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.1 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.1 (2009)'), ('smart canonical title', 'Episode #1.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.1 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.1 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.1'), ('canonical episode title', 'Episode #1.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10319908\",\n            \"season_number\": 1,\n            \"episode_number\": 1,\n            \"running_number\": 1,\n            \"original_air_date_from_source\": \"22 Oct. 2009\",\n            \"original_air_date\": \"2009-10-22\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 460,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.2 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.2 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.885Z\",\n            \"updated\": \"2019-07-08T11:47:41.329Z\",\n            \"extra_data\": \"[('title', 'Episode #1.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.2 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.2 (2009)'), ('smart canonical title', 'Episode #1.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.2 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.2 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.2'), ('canonical episode title', 'Episode #1.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10319918\",\n            \"season_number\": 1,\n            \"episode_number\": 2,\n            \"running_number\": 2,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-03\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 461,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.3 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.3 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.337Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.902Z\",\n            \"updated\": \"2019-07-08T11:47:41.337Z\",\n            \"extra_data\": \"[('title', 'Episode #1.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.3 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.3 (2009)'), ('smart canonical title', 'Episode #1.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.3 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.3 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.3'), ('canonical episode title', 'Episode #1.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10319920\",\n            \"season_number\": 1,\n            \"episode_number\": 3,\n            \"running_number\": 3,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-04\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 462,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.4 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.4 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.346Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.910Z\",\n            \"updated\": \"2019-07-08T11:47:41.346Z\",\n            \"extra_data\": \"[('title', 'Episode #1.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.4 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.4 (2009)'), ('smart canonical title', 'Episode #1.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.4 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.4 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.4'), ('canonical episode title', 'Episode #1.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10319922\",\n            \"season_number\": 1,\n            \"episode_number\": 4,\n            \"running_number\": 4,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-05\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 463,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.5 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.5 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.354Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.920Z\",\n            \"updated\": \"2019-07-08T11:47:41.354Z\",\n            \"extra_data\": \"[('title', 'Episode #1.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.5 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.5 (2009)'), ('smart canonical title', 'Episode #1.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.5 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.5 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.5'), ('canonical episode title', 'Episode #1.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10319924\",\n            \"season_number\": 1,\n            \"episode_number\": 5,\n            \"running_number\": 5,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-06\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 464,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.6 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.6 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.361Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.930Z\",\n            \"updated\": \"2019-07-08T11:47:41.361Z\",\n            \"extra_data\": \"[('title', 'Episode #1.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.6 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.6 (2009)'), ('smart canonical title', 'Episode #1.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.6 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.6 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.6'), ('canonical episode title', 'Episode #1.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10322118\",\n            \"season_number\": 1,\n            \"episode_number\": 6,\n            \"running_number\": 6,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-07\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 465,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.7 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.7 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.367Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.939Z\",\n            \"updated\": \"2019-07-08T11:47:41.367Z\",\n            \"extra_data\": \"[('title', 'Episode #1.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.7 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.7 (2009)'), ('smart canonical title', 'Episode #1.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.7 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.7 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.7'), ('canonical episode title', 'Episode #1.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326570\",\n            \"season_number\": 1,\n            \"episode_number\": 7,\n            \"running_number\": 7,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-08\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 466,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.8 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.8 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.373Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.948Z\",\n            \"updated\": \"2019-07-08T11:47:41.373Z\",\n            \"extra_data\": \"[('title', 'Episode #1.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.8 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.8 (2009)'), ('smart canonical title', 'Episode #1.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.8 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.8 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.8'), ('canonical episode title', 'Episode #1.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326578\",\n            \"season_number\": 1,\n            \"episode_number\": 8,\n            \"running_number\": 8,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-09\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 467,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.9 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.9 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.379Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.956Z\",\n            \"updated\": \"2019-07-08T11:47:41.379Z\",\n            \"extra_data\": \"[('title', 'Episode #1.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.9 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.9 (2009)'), ('smart canonical title', 'Episode #1.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.9 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.9 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.9'), ('canonical episode title', 'Episode #1.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326580\",\n            \"season_number\": 1,\n            \"episode_number\": 9,\n            \"running_number\": 9,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-10\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 468,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.10 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.10 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.386Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.964Z\",\n            \"updated\": \"2019-07-08T11:47:41.386Z\",\n            \"extra_data\": \"[('title', 'Episode #1.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.10 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.10 (2009)'), ('smart canonical title', 'Episode #1.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.10 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.10 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.10'), ('canonical episode title', 'Episode #1.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326584\",\n            \"season_number\": 1,\n            \"episode_number\": 10,\n            \"running_number\": 10,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-11\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 469,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.11 (2009)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.11 (2009)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.391Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.974Z\",\n            \"updated\": \"2019-07-08T11:47:41.391Z\",\n            \"extra_data\": \"[('title', 'Episode #1.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2009'), ('year', '2009'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.11 (2009)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.11 (2009)'), ('smart canonical title', 'Episode #1.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.11 (2009)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #1.11 (2009)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #1.11'), ('canonical episode title', 'Episode #1.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326590\",\n            \"season_number\": 1,\n            \"episode_number\": 11,\n            \"running_number\": 11,\n            \"original_air_date_from_source\": \"2009\",\n            \"original_air_date\": \"2009-01-12\",\n            \"year\": 2009,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 470,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.1 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.1 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.983Z\",\n            \"updated\": \"2019-07-08T11:47:41.397Z\",\n            \"extra_data\": \"[('title', 'Episode #2.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.1 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.1 (2010)'), ('smart canonical title', 'Episode #2.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.1 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.1 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.1'), ('canonical episode title', 'Episode #2.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338372\",\n            \"season_number\": 2,\n            \"episode_number\": 1,\n            \"running_number\": 12,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-02\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 471,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.2 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.2 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.407Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:08.991Z\",\n            \"updated\": \"2019-07-08T11:47:41.407Z\",\n            \"extra_data\": \"[('title', 'Episode #2.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.2 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.2 (2010)'), ('smart canonical title', 'Episode #2.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.2 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.2 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.2'), ('canonical episode title', 'Episode #2.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326598\",\n            \"season_number\": 2,\n            \"episode_number\": 2,\n            \"running_number\": 13,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-03\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 472,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.3 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.3 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.413Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.000Z\",\n            \"updated\": \"2019-07-08T11:47:41.413Z\",\n            \"extra_data\": \"[('title', 'Episode #2.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.3 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.3 (2010)'), ('smart canonical title', 'Episode #2.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.3 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.3 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.3'), ('canonical episode title', 'Episode #2.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326604\",\n            \"season_number\": 2,\n            \"episode_number\": 3,\n            \"running_number\": 14,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-04\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 473,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.4 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.4 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.418Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.008Z\",\n            \"updated\": \"2019-07-08T11:47:41.418Z\",\n            \"extra_data\": \"[('title', 'Episode #2.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.4 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.4 (2010)'), ('smart canonical title', 'Episode #2.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.4 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.4 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.4'), ('canonical episode title', 'Episode #2.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326610\",\n            \"season_number\": 2,\n            \"episode_number\": 4,\n            \"running_number\": 15,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-05\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 474,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.5 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.5 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.424Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.017Z\",\n            \"updated\": \"2019-07-08T11:47:41.424Z\",\n            \"extra_data\": \"[('title', 'Episode #2.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.5 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.5 (2010)'), ('smart canonical title', 'Episode #2.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.5 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.5 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.5'), ('canonical episode title', 'Episode #2.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326616\",\n            \"season_number\": 2,\n            \"episode_number\": 5,\n            \"running_number\": 16,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-06\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 475,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.6 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.6 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.429Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.024Z\",\n            \"updated\": \"2019-07-08T11:47:41.429Z\",\n            \"extra_data\": \"[('title', 'Episode #2.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.6 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.6 (2010)'), ('smart canonical title', 'Episode #2.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.6 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.6 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.6'), ('canonical episode title', 'Episode #2.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326618\",\n            \"season_number\": 2,\n            \"episode_number\": 6,\n            \"running_number\": 17,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-07\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 476,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.7 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.7 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.435Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.033Z\",\n            \"updated\": \"2019-07-08T11:47:41.435Z\",\n            \"extra_data\": \"[('title', 'Episode #2.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.7 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.7 (2010)'), ('smart canonical title', 'Episode #2.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.7 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.7 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.7'), ('canonical episode title', 'Episode #2.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326626\",\n            \"season_number\": 2,\n            \"episode_number\": 7,\n            \"running_number\": 18,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-08\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 477,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.8 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.8 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.440Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.042Z\",\n            \"updated\": \"2019-07-08T11:47:41.440Z\",\n            \"extra_data\": \"[('title', 'Episode #2.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.8 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.8 (2010)'), ('smart canonical title', 'Episode #2.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.8 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.8 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.8'), ('canonical episode title', 'Episode #2.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326624\",\n            \"season_number\": 2,\n            \"episode_number\": 8,\n            \"running_number\": 19,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-09\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 478,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.9 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.9 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.447Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.050Z\",\n            \"updated\": \"2019-07-08T11:47:41.447Z\",\n            \"extra_data\": \"[('title', 'Episode #2.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.9 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.9 (2010)'), ('smart canonical title', 'Episode #2.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.9 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.9 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.9'), ('canonical episode title', 'Episode #2.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326628\",\n            \"season_number\": 2,\n            \"episode_number\": 9,\n            \"running_number\": 20,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-10\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 479,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.10 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.10 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.453Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.058Z\",\n            \"updated\": \"2019-07-08T11:47:41.453Z\",\n            \"extra_data\": \"[('title', 'Episode #2.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.10 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.10 (2010)'), ('smart canonical title', 'Episode #2.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.10 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.10 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.10'), ('canonical episode title', 'Episode #2.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326634\",\n            \"season_number\": 2,\n            \"episode_number\": 10,\n            \"running_number\": 21,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-11\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 480,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.11 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.11 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.459Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.067Z\",\n            \"updated\": \"2019-07-08T11:47:41.459Z\",\n            \"extra_data\": \"[('title', 'Episode #2.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.11 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.11 (2010)'), ('smart canonical title', 'Episode #2.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.11 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.11 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.11'), ('canonical episode title', 'Episode #2.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328244\",\n            \"season_number\": 2,\n            \"episode_number\": 11,\n            \"running_number\": 22,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-12\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 481,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.12 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.12 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.077Z\",\n            \"updated\": \"2019-07-08T11:47:41.465Z\",\n            \"extra_data\": \"[('title', 'Episode #2.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.12 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.12 (2010)'), ('smart canonical title', 'Episode #2.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.12 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.12 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.12'), ('canonical episode title', 'Episode #2.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328246\",\n            \"season_number\": 2,\n            \"episode_number\": 12,\n            \"running_number\": 23,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-13\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 482,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.13 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.13 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.472Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.086Z\",\n            \"updated\": \"2019-07-08T11:47:41.472Z\",\n            \"extra_data\": \"[('title', 'Episode #2.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.13 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.13 (2010)'), ('smart canonical title', 'Episode #2.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.13 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.13 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.13'), ('canonical episode title', 'Episode #2.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328248\",\n            \"season_number\": 2,\n            \"episode_number\": 13,\n            \"running_number\": 24,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-14\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 483,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.14 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.14 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.479Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.096Z\",\n            \"updated\": \"2019-07-08T11:47:41.479Z\",\n            \"extra_data\": \"[('title', 'Episode #2.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.14 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.14 (2010)'), ('smart canonical title', 'Episode #2.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.14 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.14 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.14'), ('canonical episode title', 'Episode #2.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328250\",\n            \"season_number\": 2,\n            \"episode_number\": 14,\n            \"running_number\": 25,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-15\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 484,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.15 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.15 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.488Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.104Z\",\n            \"updated\": \"2019-07-08T11:47:41.488Z\",\n            \"extra_data\": \"[('title', 'Episode #2.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.15 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.15 (2010)'), ('smart canonical title', 'Episode #2.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.15 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.15 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.15'), ('canonical episode title', 'Episode #2.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328252\",\n            \"season_number\": 2,\n            \"episode_number\": 15,\n            \"running_number\": 26,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-16\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 485,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.16 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.16 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.495Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.113Z\",\n            \"updated\": \"2019-07-08T11:47:41.495Z\",\n            \"extra_data\": \"[('title', 'Episode #2.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.16 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.16 (2010)'), ('smart canonical title', 'Episode #2.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.16 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.16 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.16'), ('canonical episode title', 'Episode #2.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328256\",\n            \"season_number\": 2,\n            \"episode_number\": 16,\n            \"running_number\": 27,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-17\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 486,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.17 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.17 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.501Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.125Z\",\n            \"updated\": \"2019-07-08T11:47:41.501Z\",\n            \"extra_data\": \"[('title', 'Episode #2.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.17 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.17 (2010)'), ('smart canonical title', 'Episode #2.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.17 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.17 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.17'), ('canonical episode title', 'Episode #2.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328258\",\n            \"season_number\": 2,\n            \"episode_number\": 17,\n            \"running_number\": 28,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-18\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 487,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.18 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.18 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.133Z\",\n            \"updated\": \"2019-07-08T11:47:41.509Z\",\n            \"extra_data\": \"[('title', 'Episode #2.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.18 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.18 (2010)'), ('smart canonical title', 'Episode #2.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.18 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.18 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.18'), ('canonical episode title', 'Episode #2.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328260\",\n            \"season_number\": 2,\n            \"episode_number\": 18,\n            \"running_number\": 29,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-19\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 488,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.19 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.19 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.516Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.139Z\",\n            \"updated\": \"2019-07-08T11:47:41.516Z\",\n            \"extra_data\": \"[('title', 'Episode #2.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.19 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.19 (2010)'), ('smart canonical title', 'Episode #2.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.19 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.19 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.19'), ('canonical episode title', 'Episode #2.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328262\",\n            \"season_number\": 2,\n            \"episode_number\": 19,\n            \"running_number\": 30,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-20\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 489,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.20 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.20 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.147Z\",\n            \"updated\": \"2019-07-08T11:47:41.522Z\",\n            \"extra_data\": \"[('title', 'Episode #2.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.20 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.20 (2010)'), ('smart canonical title', 'Episode #2.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.20 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.20 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.20'), ('canonical episode title', 'Episode #2.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328268\",\n            \"season_number\": 2,\n            \"episode_number\": 20,\n            \"running_number\": 31,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-21\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 490,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.21 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.21 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.528Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.154Z\",\n            \"updated\": \"2019-07-08T11:47:41.528Z\",\n            \"extra_data\": \"[('title', 'Episode #2.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.21 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.21 (2010)'), ('smart canonical title', 'Episode #2.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.21 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.21 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.21'), ('canonical episode title', 'Episode #2.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336720\",\n            \"season_number\": 2,\n            \"episode_number\": 21,\n            \"running_number\": 32,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-22\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 491,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.22 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.22 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.535Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.161Z\",\n            \"updated\": \"2019-07-08T11:47:41.535Z\",\n            \"extra_data\": \"[('title', 'Episode #2.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.22 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.22 (2010)'), ('smart canonical title', 'Episode #2.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.22 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.22 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.22'), ('canonical episode title', 'Episode #2.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336722\",\n            \"season_number\": 2,\n            \"episode_number\": 22,\n            \"running_number\": 33,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-23\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 492,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.23 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.23 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.544Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.169Z\",\n            \"updated\": \"2019-07-08T11:47:41.544Z\",\n            \"extra_data\": \"[('title', 'Episode #2.23'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 23), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.23'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.23 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.23 (2010)'), ('smart canonical title', 'Episode #2.23'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.23 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.23 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.23'), ('canonical episode title', 'Episode #2.23'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.23')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336726\",\n            \"season_number\": 2,\n            \"episode_number\": 23,\n            \"running_number\": 34,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-24\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.23\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 493,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.24 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.24 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.553Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.176Z\",\n            \"updated\": \"2019-07-08T11:47:41.553Z\",\n            \"extra_data\": \"[('title', 'Episode #2.24'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 24), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.24'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.24 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.24 (2010)'), ('smart canonical title', 'Episode #2.24'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.24 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.24 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.24'), ('canonical episode title', 'Episode #2.24'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.24')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336728\",\n            \"season_number\": 2,\n            \"episode_number\": 24,\n            \"running_number\": 35,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-25\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.24\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 494,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.25 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.25 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.559Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.183Z\",\n            \"updated\": \"2019-07-08T11:47:41.559Z\",\n            \"extra_data\": \"[('title', 'Episode #2.25'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 25), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.25'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.25 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.25 (2010)'), ('smart canonical title', 'Episode #2.25'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.25 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.25 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.25'), ('canonical episode title', 'Episode #2.25'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.25')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336732\",\n            \"season_number\": 2,\n            \"episode_number\": 25,\n            \"running_number\": 36,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-26\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.25\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 495,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.26 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.26 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.193Z\",\n            \"updated\": \"2019-07-08T11:47:41.568Z\",\n            \"extra_data\": \"[('title', 'Episode #2.26'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 26), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.26'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.26 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.26 (2010)'), ('smart canonical title', 'Episode #2.26'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.26 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.26 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.26'), ('canonical episode title', 'Episode #2.26'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.26')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336730\",\n            \"season_number\": 2,\n            \"episode_number\": 26,\n            \"running_number\": 37,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-27\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.26\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 496,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.27 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.27 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.576Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.202Z\",\n            \"updated\": \"2019-07-08T11:47:41.576Z\",\n            \"extra_data\": \"[('title', 'Episode #2.27'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 27), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.27'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.27 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.27 (2010)'), ('smart canonical title', 'Episode #2.27'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.27 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.27 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.27'), ('canonical episode title', 'Episode #2.27'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.27')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336734\",\n            \"season_number\": 2,\n            \"episode_number\": 27,\n            \"running_number\": 38,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-28\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.27\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 497,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.28 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.28 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.583Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.208Z\",\n            \"updated\": \"2019-07-08T11:47:41.583Z\",\n            \"extra_data\": \"[('title', 'Episode #2.28'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 28), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.28'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.28 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.28 (2010)'), ('smart canonical title', 'Episode #2.28'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.28 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.28 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.28'), ('canonical episode title', 'Episode #2.28'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.28')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336736\",\n            \"season_number\": 2,\n            \"episode_number\": 28,\n            \"running_number\": 39,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-29\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.28\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 498,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.29 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.29 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.589Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.218Z\",\n            \"updated\": \"2019-07-08T11:47:41.589Z\",\n            \"extra_data\": \"[('title', 'Episode #2.29'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 29), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.29'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.29 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.29 (2010)'), ('smart canonical title', 'Episode #2.29'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.29 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.29 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.29'), ('canonical episode title', 'Episode #2.29'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.29')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336738\",\n            \"season_number\": 2,\n            \"episode_number\": 29,\n            \"running_number\": 40,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-30\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.29\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 499,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.30 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.30 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.596Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.225Z\",\n            \"updated\": \"2019-07-08T11:47:41.596Z\",\n            \"extra_data\": \"[('title', 'Episode #2.30'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 30), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.30'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.30 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.30 (2010)'), ('smart canonical title', 'Episode #2.30'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.30 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.30 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.30'), ('canonical episode title', 'Episode #2.30'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.30')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336740\",\n            \"season_number\": 2,\n            \"episode_number\": 30,\n            \"running_number\": 41,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-01-31\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.30\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 500,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.31 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.31 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.602Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.234Z\",\n            \"updated\": \"2019-07-08T11:47:41.602Z\",\n            \"extra_data\": \"[('title', 'Episode #2.31'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 31), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.31'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.31 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.31 (2010)'), ('smart canonical title', 'Episode #2.31'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.31 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.31 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.31'), ('canonical episode title', 'Episode #2.31'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.31')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338374\",\n            \"season_number\": 2,\n            \"episode_number\": 31,\n            \"running_number\": 42,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-01\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.31\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 501,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.32 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.32 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.608Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.242Z\",\n            \"updated\": \"2019-07-08T11:47:41.608Z\",\n            \"extra_data\": \"[('title', 'Episode #2.32'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 32), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.32'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.32 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.32 (2010)'), ('smart canonical title', 'Episode #2.32'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.32 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.32 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.32'), ('canonical episode title', 'Episode #2.32'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.32')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338378\",\n            \"season_number\": 2,\n            \"episode_number\": 32,\n            \"running_number\": 43,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-02\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.32\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 502,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.33 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.33 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.614Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.252Z\",\n            \"updated\": \"2019-07-08T11:47:41.614Z\",\n            \"extra_data\": \"[('title', 'Episode #2.33'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 33), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.33'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.33 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.33 (2010)'), ('smart canonical title', 'Episode #2.33'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.33 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.33 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.33'), ('canonical episode title', 'Episode #2.33'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.33')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338380\",\n            \"season_number\": 2,\n            \"episode_number\": 33,\n            \"running_number\": 44,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-03\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.33\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 503,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.34 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.34 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.260Z\",\n            \"updated\": \"2019-07-08T11:47:41.620Z\",\n            \"extra_data\": \"[('title', 'Episode #2.34'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 34), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.34'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.34 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.34 (2010)'), ('smart canonical title', 'Episode #2.34'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.34 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.34 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.34'), ('canonical episode title', 'Episode #2.34'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.34')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338384\",\n            \"season_number\": 2,\n            \"episode_number\": 34,\n            \"running_number\": 45,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-04\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.34\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 504,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.35 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.35 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.626Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.269Z\",\n            \"updated\": \"2019-07-08T11:47:41.626Z\",\n            \"extra_data\": \"[('title', 'Episode #2.35'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 35), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.35'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.35 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.35 (2010)'), ('smart canonical title', 'Episode #2.35'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.35 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.35 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.35'), ('canonical episode title', 'Episode #2.35'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.35')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338386\",\n            \"season_number\": 2,\n            \"episode_number\": 35,\n            \"running_number\": 46,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-05\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.35\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 505,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.36 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.36 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.280Z\",\n            \"updated\": \"2019-07-08T11:47:41.632Z\",\n            \"extra_data\": \"[('title', 'Episode #2.36'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 36), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.36'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.36 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.36 (2010)'), ('smart canonical title', 'Episode #2.36'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.36 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.36 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.36'), ('canonical episode title', 'Episode #2.36'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.36')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338388\",\n            \"season_number\": 2,\n            \"episode_number\": 36,\n            \"running_number\": 47,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-06\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.36\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 506,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.37 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.37 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.288Z\",\n            \"updated\": \"2019-07-08T11:47:41.639Z\",\n            \"extra_data\": \"[('title', 'Episode #2.37'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 37), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.37'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.37 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.37 (2010)'), ('smart canonical title', 'Episode #2.37'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.37 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.37 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.37'), ('canonical episode title', 'Episode #2.37'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.37')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338390\",\n            \"season_number\": 2,\n            \"episode_number\": 37,\n            \"running_number\": 48,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-07\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.37\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 507,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.38 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.38 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.645Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.296Z\",\n            \"updated\": \"2019-07-08T11:47:41.645Z\",\n            \"extra_data\": \"[('title', 'Episode #2.38'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 38), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.38'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.38 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.38 (2010)'), ('smart canonical title', 'Episode #2.38'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.38 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.38 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.38'), ('canonical episode title', 'Episode #2.38'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.38')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338392\",\n            \"season_number\": 2,\n            \"episode_number\": 38,\n            \"running_number\": 49,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-08\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.38\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 508,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.39 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.39 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.653Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.304Z\",\n            \"updated\": \"2019-07-08T11:47:41.653Z\",\n            \"extra_data\": \"[('title', 'Episode #2.39'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 39), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.39'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.39 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.39 (2010)'), ('smart canonical title', 'Episode #2.39'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.39 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.39 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.39'), ('canonical episode title', 'Episode #2.39'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.39')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338396\",\n            \"season_number\": 2,\n            \"episode_number\": 39,\n            \"running_number\": 50,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-09\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.39\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 509,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.40 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.40 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.659Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.313Z\",\n            \"updated\": \"2019-07-08T11:47:41.659Z\",\n            \"extra_data\": \"[('title', 'Episode #2.40'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 40), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.40'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.40 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.40 (2010)'), ('smart canonical title', 'Episode #2.40'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.40 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.40 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.40'), ('canonical episode title', 'Episode #2.40'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.40')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338398\",\n            \"season_number\": 2,\n            \"episode_number\": 40,\n            \"running_number\": 51,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-10\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.40\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 510,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.41 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.41 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.665Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.321Z\",\n            \"updated\": \"2019-07-08T11:47:41.665Z\",\n            \"extra_data\": \"[('title', 'Episode #2.41'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 41), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.41'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.41 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.41 (2010)'), ('smart canonical title', 'Episode #2.41'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.41 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.41 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.41'), ('canonical episode title', 'Episode #2.41'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.41')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338400\",\n            \"season_number\": 2,\n            \"episode_number\": 41,\n            \"running_number\": 52,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-11\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.41\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 511,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.42 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.42 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.671Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.330Z\",\n            \"updated\": \"2019-07-08T11:47:41.671Z\",\n            \"extra_data\": \"[('title', 'Episode #2.42'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 42), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.42'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.42 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.42 (2010)'), ('smart canonical title', 'Episode #2.42'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.42 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.42 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.42'), ('canonical episode title', 'Episode #2.42'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.42')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338404\",\n            \"season_number\": 2,\n            \"episode_number\": 42,\n            \"running_number\": 53,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-12\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.42\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 512,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.43 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.43 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.678Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.338Z\",\n            \"updated\": \"2019-07-08T11:47:41.678Z\",\n            \"extra_data\": \"[('title', 'Episode #2.43'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 43), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.43'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.43 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.43 (2010)'), ('smart canonical title', 'Episode #2.43'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.43 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.43 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.43'), ('canonical episode title', 'Episode #2.43'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.43')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338406\",\n            \"season_number\": 2,\n            \"episode_number\": 43,\n            \"running_number\": 54,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-13\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.43\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 513,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.44 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.44 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.346Z\",\n            \"updated\": \"2019-07-08T11:47:41.684Z\",\n            \"extra_data\": \"[('title', 'Episode #2.44'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 44), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.44'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.44 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.44 (2010)'), ('smart canonical title', 'Episode #2.44'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.44 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.44 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.44'), ('canonical episode title', 'Episode #2.44'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.44')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338408\",\n            \"season_number\": 2,\n            \"episode_number\": 44,\n            \"running_number\": 55,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-14\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.44\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 514,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.45 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.45 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.690Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.354Z\",\n            \"updated\": \"2019-07-08T11:47:41.690Z\",\n            \"extra_data\": \"[('title', 'Episode #2.45'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 45), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.45'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.45 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.45 (2010)'), ('smart canonical title', 'Episode #2.45'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.45 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.45 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.45'), ('canonical episode title', 'Episode #2.45'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.45')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338410\",\n            \"season_number\": 2,\n            \"episode_number\": 45,\n            \"running_number\": 56,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-15\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.45\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 515,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.46 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.46 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.695Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.363Z\",\n            \"updated\": \"2019-07-08T11:47:41.695Z\",\n            \"extra_data\": \"[('title', 'Episode #2.46'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 46), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.46'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.46 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.46 (2010)'), ('smart canonical title', 'Episode #2.46'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.46 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.46 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.46'), ('canonical episode title', 'Episode #2.46'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.46')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338412\",\n            \"season_number\": 2,\n            \"episode_number\": 46,\n            \"running_number\": 57,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-16\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.46\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 516,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.47 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.47 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.701Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.373Z\",\n            \"updated\": \"2019-07-08T11:47:41.701Z\",\n            \"extra_data\": \"[('title', 'Episode #2.47'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 47), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.47'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.47 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.47 (2010)'), ('smart canonical title', 'Episode #2.47'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.47 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.47 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.47'), ('canonical episode title', 'Episode #2.47'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.47')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338414\",\n            \"season_number\": 2,\n            \"episode_number\": 47,\n            \"running_number\": 58,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-17\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.47\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 517,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.48 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.48 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.382Z\",\n            \"updated\": \"2019-07-08T11:47:41.708Z\",\n            \"extra_data\": \"[('title', 'Episode #2.48'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 48), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.48'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.48 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.48 (2010)'), ('smart canonical title', 'Episode #2.48'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.48 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.48 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.48'), ('canonical episode title', 'Episode #2.48'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.48')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338416\",\n            \"season_number\": 2,\n            \"episode_number\": 48,\n            \"running_number\": 59,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-18\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.48\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 518,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.49 (2010)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.49 (2010)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.714Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.390Z\",\n            \"updated\": \"2019-07-08T11:47:41.714Z\",\n            \"extra_data\": \"[('title', 'Episode #2.49'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 2), ('episode', 49), ('rating', 12345678910.0), ('original air date', '2010'), ('year', '2010'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #2.49'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.49 (2010)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.49 (2010)'), ('smart canonical title', 'Episode #2.49'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.49 (2010)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #2.49 (2010)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #2.49'), ('canonical episode title', 'Episode #2.49'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #2.49')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326606\",\n            \"season_number\": 2,\n            \"episode_number\": 49,\n            \"running_number\": 60,\n            \"original_air_date_from_source\": \"2010\",\n            \"original_air_date\": \"2010-02-19\",\n            \"year\": 2010,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #2.49\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 519,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.1 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.1 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.720Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.398Z\",\n            \"updated\": \"2019-07-08T11:47:41.720Z\",\n            \"extra_data\": \"[('title', 'Episode #3.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.1 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.1 (2011)'), ('smart canonical title', 'Episode #3.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.1 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.1 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.1'), ('canonical episode title', 'Episode #3.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326636\",\n            \"season_number\": 3,\n            \"episode_number\": 1,\n            \"running_number\": 61,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-02\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 520,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.2 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.2 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.726Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.407Z\",\n            \"updated\": \"2019-07-08T11:47:41.726Z\",\n            \"extra_data\": \"[('title', 'Episode #3.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.2 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.2 (2011)'), ('smart canonical title', 'Episode #3.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.2 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.2 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.2'), ('canonical episode title', 'Episode #3.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326638\",\n            \"season_number\": 3,\n            \"episode_number\": 2,\n            \"running_number\": 62,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-03\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 521,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.3 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.3 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.732Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.417Z\",\n            \"updated\": \"2019-07-08T11:47:41.732Z\",\n            \"extra_data\": \"[('title', 'Episode #3.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.3 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.3 (2011)'), ('smart canonical title', 'Episode #3.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.3 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.3 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.3'), ('canonical episode title', 'Episode #3.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326640\",\n            \"season_number\": 3,\n            \"episode_number\": 3,\n            \"running_number\": 63,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-04\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 522,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.4 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.4 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.739Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.427Z\",\n            \"updated\": \"2019-07-08T11:47:41.739Z\",\n            \"extra_data\": \"[('title', 'Episode #3.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.4 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.4 (2011)'), ('smart canonical title', 'Episode #3.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.4 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.4 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.4'), ('canonical episode title', 'Episode #3.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326644\",\n            \"season_number\": 3,\n            \"episode_number\": 4,\n            \"running_number\": 64,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-05\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 523,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.5 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.5 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.745Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.435Z\",\n            \"updated\": \"2019-07-08T11:47:41.745Z\",\n            \"extra_data\": \"[('title', 'Episode #3.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.5 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.5 (2011)'), ('smart canonical title', 'Episode #3.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.5 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.5 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.5'), ('canonical episode title', 'Episode #3.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326648\",\n            \"season_number\": 3,\n            \"episode_number\": 5,\n            \"running_number\": 65,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-06\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 524,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.6 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.6 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.751Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.444Z\",\n            \"updated\": \"2019-07-08T11:47:41.751Z\",\n            \"extra_data\": \"[('title', 'Episode #3.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.6 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.6 (2011)'), ('smart canonical title', 'Episode #3.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.6 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.6 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.6'), ('canonical episode title', 'Episode #3.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326654\",\n            \"season_number\": 3,\n            \"episode_number\": 6,\n            \"running_number\": 66,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-07\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 525,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.7 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.7 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.452Z\",\n            \"updated\": \"2019-07-08T11:47:41.758Z\",\n            \"extra_data\": \"[('title', 'Episode #3.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.7 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.7 (2011)'), ('smart canonical title', 'Episode #3.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.7 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.7 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.7'), ('canonical episode title', 'Episode #3.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326662\",\n            \"season_number\": 3,\n            \"episode_number\": 7,\n            \"running_number\": 67,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-08\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 526,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.8 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.8 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.460Z\",\n            \"updated\": \"2019-07-08T11:47:41.763Z\",\n            \"extra_data\": \"[('title', 'Episode #3.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.8 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.8 (2011)'), ('smart canonical title', 'Episode #3.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.8 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.8 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.8'), ('canonical episode title', 'Episode #3.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326664\",\n            \"season_number\": 3,\n            \"episode_number\": 8,\n            \"running_number\": 68,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-09\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 527,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.9 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.9 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.769Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.469Z\",\n            \"updated\": \"2019-07-08T11:47:41.769Z\",\n            \"extra_data\": \"[('title', 'Episode #3.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.9 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.9 (2011)'), ('smart canonical title', 'Episode #3.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.9 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.9 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.9'), ('canonical episode title', 'Episode #3.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326666\",\n            \"season_number\": 3,\n            \"episode_number\": 9,\n            \"running_number\": 69,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-10\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 528,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.10 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.10 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.775Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.477Z\",\n            \"updated\": \"2019-07-08T11:47:41.775Z\",\n            \"extra_data\": \"[('title', 'Episode #3.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.10 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.10 (2011)'), ('smart canonical title', 'Episode #3.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.10 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.10 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.10'), ('canonical episode title', 'Episode #3.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326672\",\n            \"season_number\": 3,\n            \"episode_number\": 10,\n            \"running_number\": 70,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-11\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 529,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.11 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.11 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.781Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.486Z\",\n            \"updated\": \"2019-07-08T11:47:41.781Z\",\n            \"extra_data\": \"[('title', 'Episode #3.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.11 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.11 (2011)'), ('smart canonical title', 'Episode #3.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.11 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.11 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.11'), ('canonical episode title', 'Episode #3.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328220\",\n            \"season_number\": 3,\n            \"episode_number\": 11,\n            \"running_number\": 71,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-12\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 530,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.12 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.12 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.788Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.495Z\",\n            \"updated\": \"2019-07-08T11:47:41.788Z\",\n            \"extra_data\": \"[('title', 'Episode #3.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.12 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.12 (2011)'), ('smart canonical title', 'Episode #3.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.12 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.12 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.12'), ('canonical episode title', 'Episode #3.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328222\",\n            \"season_number\": 3,\n            \"episode_number\": 12,\n            \"running_number\": 72,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-13\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 531,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.13 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.13 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.795Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.503Z\",\n            \"updated\": \"2019-07-08T11:47:41.795Z\",\n            \"extra_data\": \"[('title', 'Episode #3.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.13 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.13 (2011)'), ('smart canonical title', 'Episode #3.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.13 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.13 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.13'), ('canonical episode title', 'Episode #3.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328224\",\n            \"season_number\": 3,\n            \"episode_number\": 13,\n            \"running_number\": 73,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-14\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 532,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.14 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.14 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.801Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.511Z\",\n            \"updated\": \"2019-07-08T11:47:41.801Z\",\n            \"extra_data\": \"[('title', 'Episode #3.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.14 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.14 (2011)'), ('smart canonical title', 'Episode #3.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.14 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.14 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.14'), ('canonical episode title', 'Episode #3.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328226\",\n            \"season_number\": 3,\n            \"episode_number\": 14,\n            \"running_number\": 74,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-15\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 533,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.15 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.15 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.807Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.519Z\",\n            \"updated\": \"2019-07-08T11:47:41.807Z\",\n            \"extra_data\": \"[('title', 'Episode #3.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.15 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.15 (2011)'), ('smart canonical title', 'Episode #3.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.15 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.15 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.15'), ('canonical episode title', 'Episode #3.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328228\",\n            \"season_number\": 3,\n            \"episode_number\": 15,\n            \"running_number\": 75,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-16\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 534,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.16 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.16 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.813Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.527Z\",\n            \"updated\": \"2019-07-08T11:47:41.813Z\",\n            \"extra_data\": \"[('title', 'Episode #3.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.16 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.16 (2011)'), ('smart canonical title', 'Episode #3.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.16 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.16 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.16'), ('canonical episode title', 'Episode #3.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328232\",\n            \"season_number\": 3,\n            \"episode_number\": 16,\n            \"running_number\": 76,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-17\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 535,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.17 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.17 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.820Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.535Z\",\n            \"updated\": \"2019-07-08T11:47:41.820Z\",\n            \"extra_data\": \"[('title', 'Episode #3.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.17 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.17 (2011)'), ('smart canonical title', 'Episode #3.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.17 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.17 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.17'), ('canonical episode title', 'Episode #3.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328234\",\n            \"season_number\": 3,\n            \"episode_number\": 17,\n            \"running_number\": 77,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-18\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 536,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.18 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.18 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.826Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.543Z\",\n            \"updated\": \"2019-07-08T11:47:41.826Z\",\n            \"extra_data\": \"[('title', 'Episode #3.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.18 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.18 (2011)'), ('smart canonical title', 'Episode #3.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.18 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.18 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.18'), ('canonical episode title', 'Episode #3.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328236\",\n            \"season_number\": 3,\n            \"episode_number\": 18,\n            \"running_number\": 78,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-19\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 537,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.19 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.19 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.833Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.551Z\",\n            \"updated\": \"2019-07-08T11:47:41.833Z\",\n            \"extra_data\": \"[('title', 'Episode #3.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.19 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.19 (2011)'), ('smart canonical title', 'Episode #3.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.19 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.19 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.19'), ('canonical episode title', 'Episode #3.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328238\",\n            \"season_number\": 3,\n            \"episode_number\": 19,\n            \"running_number\": 79,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-20\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 538,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.20 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.20 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.839Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.559Z\",\n            \"updated\": \"2019-07-08T11:47:41.839Z\",\n            \"extra_data\": \"[('title', 'Episode #3.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.20 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.20 (2011)'), ('smart canonical title', 'Episode #3.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.20 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.20 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.20'), ('canonical episode title', 'Episode #3.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328240\",\n            \"season_number\": 3,\n            \"episode_number\": 20,\n            \"running_number\": 80,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-21\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 539,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.21 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.21 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.566Z\",\n            \"updated\": \"2019-07-08T11:47:41.845Z\",\n            \"extra_data\": \"[('title', 'Episode #3.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.21 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.21 (2011)'), ('smart canonical title', 'Episode #3.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.21 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.21 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.21'), ('canonical episode title', 'Episode #3.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336744\",\n            \"season_number\": 3,\n            \"episode_number\": 21,\n            \"running_number\": 81,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-22\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 540,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.22 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.22 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.852Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.574Z\",\n            \"updated\": \"2019-07-08T11:47:41.852Z\",\n            \"extra_data\": \"[('title', 'Episode #3.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.22 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.22 (2011)'), ('smart canonical title', 'Episode #3.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.22 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.22 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.22'), ('canonical episode title', 'Episode #3.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336746\",\n            \"season_number\": 3,\n            \"episode_number\": 22,\n            \"running_number\": 82,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-23\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 541,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.23 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.23 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.857Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.583Z\",\n            \"updated\": \"2019-07-08T11:47:41.857Z\",\n            \"extra_data\": \"[('title', 'Episode #3.23'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 23), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.23'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.23 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.23 (2011)'), ('smart canonical title', 'Episode #3.23'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.23 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.23 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.23'), ('canonical episode title', 'Episode #3.23'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.23')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336748\",\n            \"season_number\": 3,\n            \"episode_number\": 23,\n            \"running_number\": 83,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-24\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.23\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 542,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.24 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.24 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.863Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.591Z\",\n            \"updated\": \"2019-07-08T11:47:41.863Z\",\n            \"extra_data\": \"[('title', 'Episode #3.24'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 24), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.24'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.24 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.24 (2011)'), ('smart canonical title', 'Episode #3.24'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.24 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.24 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.24'), ('canonical episode title', 'Episode #3.24'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.24')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336752\",\n            \"season_number\": 3,\n            \"episode_number\": 24,\n            \"running_number\": 84,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-25\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.24\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 543,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.25 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.25 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.600Z\",\n            \"updated\": \"2019-07-08T11:47:41.870Z\",\n            \"extra_data\": \"[('title', 'Episode #3.25'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 25), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.25'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.25 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.25 (2011)'), ('smart canonical title', 'Episode #3.25'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.25 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.25 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.25'), ('canonical episode title', 'Episode #3.25'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.25')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336754\",\n            \"season_number\": 3,\n            \"episode_number\": 25,\n            \"running_number\": 85,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-26\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.25\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 544,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.26 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.26 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.608Z\",\n            \"updated\": \"2019-07-08T11:47:41.876Z\",\n            \"extra_data\": \"[('title', 'Episode #3.26'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 26), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.26'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.26 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.26 (2011)'), ('smart canonical title', 'Episode #3.26'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.26 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.26 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.26'), ('canonical episode title', 'Episode #3.26'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.26')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336756\",\n            \"season_number\": 3,\n            \"episode_number\": 26,\n            \"running_number\": 86,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-27\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.26\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 545,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.27 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.27 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.617Z\",\n            \"updated\": \"2019-07-08T11:47:41.882Z\",\n            \"extra_data\": \"[('title', 'Episode #3.27'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 27), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.27'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.27 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.27 (2011)'), ('smart canonical title', 'Episode #3.27'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.27 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.27 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.27'), ('canonical episode title', 'Episode #3.27'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.27')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336758\",\n            \"season_number\": 3,\n            \"episode_number\": 27,\n            \"running_number\": 87,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-28\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.27\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 546,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.28 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.28 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.889Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.627Z\",\n            \"updated\": \"2019-07-08T11:47:41.889Z\",\n            \"extra_data\": \"[('title', 'Episode #3.28'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 28), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.28'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.28 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.28 (2011)'), ('smart canonical title', 'Episode #3.28'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.28 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.28 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.28'), ('canonical episode title', 'Episode #3.28'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.28')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336762\",\n            \"season_number\": 3,\n            \"episode_number\": 28,\n            \"running_number\": 88,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-29\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.28\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 547,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.29 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.29 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.895Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.635Z\",\n            \"updated\": \"2019-07-08T11:47:41.895Z\",\n            \"extra_data\": \"[('title', 'Episode #3.29'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 29), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.29'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.29 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.29 (2011)'), ('smart canonical title', 'Episode #3.29'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.29 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.29 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.29'), ('canonical episode title', 'Episode #3.29'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.29')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336760\",\n            \"season_number\": 3,\n            \"episode_number\": 29,\n            \"running_number\": 89,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-30\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.29\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 548,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.30 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.30 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.645Z\",\n            \"updated\": \"2019-07-08T11:47:41.901Z\",\n            \"extra_data\": \"[('title', 'Episode #3.30'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 30), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.30'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.30 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.30 (2011)'), ('smart canonical title', 'Episode #3.30'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.30 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.30 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.30'), ('canonical episode title', 'Episode #3.30'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.30')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336764\",\n            \"season_number\": 3,\n            \"episode_number\": 30,\n            \"running_number\": 90,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-01-31\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.30\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 549,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.31 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.31 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.684Z\",\n            \"updated\": \"2019-07-08T11:47:41.907Z\",\n            \"extra_data\": \"[('title', 'Episode #3.31'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 31), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.31'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.31 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.31 (2011)'), ('smart canonical title', 'Episode #3.31'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.31 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.31 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.31'), ('canonical episode title', 'Episode #3.31'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.31')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336766\",\n            \"season_number\": 3,\n            \"episode_number\": 31,\n            \"running_number\": 91,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-01\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.31\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 550,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.32 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.32 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.692Z\",\n            \"updated\": \"2019-07-08T11:47:41.913Z\",\n            \"extra_data\": \"[('title', 'Episode #3.32'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 32), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.32'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.32 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.32 (2011)'), ('smart canonical title', 'Episode #3.32'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.32 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.32 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.32'), ('canonical episode title', 'Episode #3.32'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.32')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336768\",\n            \"season_number\": 3,\n            \"episode_number\": 32,\n            \"running_number\": 92,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-02\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.32\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 551,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.33 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.33 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.705Z\",\n            \"updated\": \"2019-07-08T11:47:41.919Z\",\n            \"extra_data\": \"[('title', 'Episode #3.33'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 33), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.33'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.33 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.33 (2011)'), ('smart canonical title', 'Episode #3.33'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.33 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.33 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.33'), ('canonical episode title', 'Episode #3.33'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.33')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336770\",\n            \"season_number\": 3,\n            \"episode_number\": 33,\n            \"running_number\": 93,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-03\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.33\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 552,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.34 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.34 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.925Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.717Z\",\n            \"updated\": \"2019-07-08T11:47:41.925Z\",\n            \"extra_data\": \"[('title', 'Episode #3.34'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 34), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.34'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.34 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.34 (2011)'), ('smart canonical title', 'Episode #3.34'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.34 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.34 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.34'), ('canonical episode title', 'Episode #3.34'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.34')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336772\",\n            \"season_number\": 3,\n            \"episode_number\": 34,\n            \"running_number\": 94,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-04\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.34\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 553,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.35 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.35 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.932Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.732Z\",\n            \"updated\": \"2019-07-08T11:47:41.932Z\",\n            \"extra_data\": \"[('title', 'Episode #3.35'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 35), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.35'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.35 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.35 (2011)'), ('smart canonical title', 'Episode #3.35'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.35 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.35 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.35'), ('canonical episode title', 'Episode #3.35'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.35')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336774\",\n            \"season_number\": 3,\n            \"episode_number\": 35,\n            \"running_number\": 95,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-05\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.35\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 554,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.36 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.36 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.938Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.743Z\",\n            \"updated\": \"2019-07-08T11:47:41.938Z\",\n            \"extra_data\": \"[('title', 'Episode #3.36'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 36), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.36'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.36 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.36 (2011)'), ('smart canonical title', 'Episode #3.36'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.36 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.36 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.36'), ('canonical episode title', 'Episode #3.36'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.36')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336778\",\n            \"season_number\": 3,\n            \"episode_number\": 36,\n            \"running_number\": 96,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-06\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.36\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 555,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.37 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.37 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.751Z\",\n            \"updated\": \"2019-07-08T11:47:41.944Z\",\n            \"extra_data\": \"[('title', 'Episode #3.37'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 37), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.37'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.37 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.37 (2011)'), ('smart canonical title', 'Episode #3.37'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.37 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.37 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.37'), ('canonical episode title', 'Episode #3.37'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.37')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336780\",\n            \"season_number\": 3,\n            \"episode_number\": 37,\n            \"running_number\": 97,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-07\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.37\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 556,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.38 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.38 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.951Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.758Z\",\n            \"updated\": \"2019-07-08T11:47:41.951Z\",\n            \"extra_data\": \"[('title', 'Episode #3.38'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 38), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.38'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.38 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.38 (2011)'), ('smart canonical title', 'Episode #3.38'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.38 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.38 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.38'), ('canonical episode title', 'Episode #3.38'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.38')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336782\",\n            \"season_number\": 3,\n            \"episode_number\": 38,\n            \"running_number\": 98,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-08\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.38\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 557,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.39 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.39 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.957Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.768Z\",\n            \"updated\": \"2019-07-08T11:47:41.957Z\",\n            \"extra_data\": \"[('title', 'Episode #3.39'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 39), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.39'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.39 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.39 (2011)'), ('smart canonical title', 'Episode #3.39'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.39 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.39 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.39'), ('canonical episode title', 'Episode #3.39'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.39')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336784\",\n            \"season_number\": 3,\n            \"episode_number\": 39,\n            \"running_number\": 99,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-09\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.39\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 558,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.40 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.40 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.963Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.777Z\",\n            \"updated\": \"2019-07-08T11:47:41.963Z\",\n            \"extra_data\": \"[('title', 'Episode #3.40'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 40), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.40'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.40 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.40 (2011)'), ('smart canonical title', 'Episode #3.40'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.40 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.40 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.40'), ('canonical episode title', 'Episode #3.40'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.40')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336786\",\n            \"season_number\": 3,\n            \"episode_number\": 40,\n            \"running_number\": 100,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-10\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.40\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 559,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.41 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.41 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.969Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.785Z\",\n            \"updated\": \"2019-07-08T11:47:41.969Z\",\n            \"extra_data\": \"[('title', 'Episode #3.41'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 41), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.41'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.41 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.41 (2011)'), ('smart canonical title', 'Episode #3.41'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.41 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.41 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.41'), ('canonical episode title', 'Episode #3.41'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.41')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339010\",\n            \"season_number\": 3,\n            \"episode_number\": 41,\n            \"running_number\": 101,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-11\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.41\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 560,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.42 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.42 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.975Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.793Z\",\n            \"updated\": \"2019-07-08T11:47:41.975Z\",\n            \"extra_data\": \"[('title', 'Episode #3.42'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 42), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.42'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.42 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.42 (2011)'), ('smart canonical title', 'Episode #3.42'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.42 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.42 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.42'), ('canonical episode title', 'Episode #3.42'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.42')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339016\",\n            \"season_number\": 3,\n            \"episode_number\": 42,\n            \"running_number\": 102,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-12\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.42\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 561,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.43 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.43 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.982Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.801Z\",\n            \"updated\": \"2019-07-08T11:47:41.982Z\",\n            \"extra_data\": \"[('title', 'Episode #3.43'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 43), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.43'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.43 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.43 (2011)'), ('smart canonical title', 'Episode #3.43'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.43 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.43 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.43'), ('canonical episode title', 'Episode #3.43'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.43')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339018\",\n            \"season_number\": 3,\n            \"episode_number\": 43,\n            \"running_number\": 103,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-13\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.43\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 562,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.44 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.44 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.990Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.809Z\",\n            \"updated\": \"2019-07-08T11:47:41.990Z\",\n            \"extra_data\": \"[('title', 'Episode #3.44'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 44), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.44'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.44 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.44 (2011)'), ('smart canonical title', 'Episode #3.44'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.44 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.44 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.44'), ('canonical episode title', 'Episode #3.44'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.44')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339020\",\n            \"season_number\": 3,\n            \"episode_number\": 44,\n            \"running_number\": 104,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-14\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.44\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 563,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.45 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.45 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:41.997Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.817Z\",\n            \"updated\": \"2019-07-08T11:47:41.997Z\",\n            \"extra_data\": \"[('title', 'Episode #3.45'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 45), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.45'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.45 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.45 (2011)'), ('smart canonical title', 'Episode #3.45'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.45 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.45 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.45'), ('canonical episode title', 'Episode #3.45'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.45')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339022\",\n            \"season_number\": 3,\n            \"episode_number\": 45,\n            \"running_number\": 105,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-15\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.45\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 564,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.46 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.46 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.006Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.827Z\",\n            \"updated\": \"2019-07-08T11:47:42.006Z\",\n            \"extra_data\": \"[('title', 'Episode #3.46'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 46), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.46'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.46 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.46 (2011)'), ('smart canonical title', 'Episode #3.46'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.46 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.46 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.46'), ('canonical episode title', 'Episode #3.46'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.46')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339024\",\n            \"season_number\": 3,\n            \"episode_number\": 46,\n            \"running_number\": 106,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-16\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.46\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 565,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.47 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.47 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.013Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.836Z\",\n            \"updated\": \"2019-07-08T11:47:42.013Z\",\n            \"extra_data\": \"[('title', 'Episode #3.47'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 47), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.47'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.47 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.47 (2011)'), ('smart canonical title', 'Episode #3.47'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.47 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.47 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.47'), ('canonical episode title', 'Episode #3.47'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.47')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339026\",\n            \"season_number\": 3,\n            \"episode_number\": 47,\n            \"running_number\": 107,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-17\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.47\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 566,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.48 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.48 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.021Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.844Z\",\n            \"updated\": \"2019-07-08T11:47:42.021Z\",\n            \"extra_data\": \"[('title', 'Episode #3.48'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 48), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.48'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.48 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.48 (2011)'), ('smart canonical title', 'Episode #3.48'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.48 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.48 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.48'), ('canonical episode title', 'Episode #3.48'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.48')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339028\",\n            \"season_number\": 3,\n            \"episode_number\": 48,\n            \"running_number\": 108,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-18\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.48\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 567,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.49 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.49 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.027Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.855Z\",\n            \"updated\": \"2019-07-08T11:47:42.027Z\",\n            \"extra_data\": \"[('title', 'Episode #3.49'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 49), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.49'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.49 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.49 (2011)'), ('smart canonical title', 'Episode #3.49'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.49 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.49 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.49'), ('canonical episode title', 'Episode #3.49'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.49')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339030\",\n            \"season_number\": 3,\n            \"episode_number\": 49,\n            \"running_number\": 109,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-19\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.49\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 568,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.50 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.50 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.034Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.866Z\",\n            \"updated\": \"2019-07-08T11:47:42.034Z\",\n            \"extra_data\": \"[('title', 'Episode #3.50'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 50), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.50'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.50 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.50 (2011)'), ('smart canonical title', 'Episode #3.50'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.50 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.50 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.50'), ('canonical episode title', 'Episode #3.50'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.50')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339032\",\n            \"season_number\": 3,\n            \"episode_number\": 50,\n            \"running_number\": 110,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-20\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.50\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 569,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.51 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.51 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.042Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.877Z\",\n            \"updated\": \"2019-07-08T11:47:42.042Z\",\n            \"extra_data\": \"[('title', 'Episode #3.51'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 51), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.51'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.51 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.51 (2011)'), ('smart canonical title', 'Episode #3.51'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.51 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.51 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.51'), ('canonical episode title', 'Episode #3.51'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.51')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339034\",\n            \"season_number\": 3,\n            \"episode_number\": 51,\n            \"running_number\": 111,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-21\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.51\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 570,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.52 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.52 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.885Z\",\n            \"updated\": \"2019-07-08T11:47:42.050Z\",\n            \"extra_data\": \"[('title', 'Episode #3.52'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 52), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.52'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.52 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.52 (2011)'), ('smart canonical title', 'Episode #3.52'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.52 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.52 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.52'), ('canonical episode title', 'Episode #3.52'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.52')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339036\",\n            \"season_number\": 3,\n            \"episode_number\": 52,\n            \"running_number\": 112,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-22\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.52\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 571,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.53 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.53 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.057Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.894Z\",\n            \"updated\": \"2019-07-08T11:47:42.057Z\",\n            \"extra_data\": \"[('title', 'Episode #3.53'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 53), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.53'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.53 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.53 (2011)'), ('smart canonical title', 'Episode #3.53'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.53 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.53 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.53'), ('canonical episode title', 'Episode #3.53'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.53')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339042\",\n            \"season_number\": 3,\n            \"episode_number\": 53,\n            \"running_number\": 113,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-23\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.53\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 572,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.54 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.54 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.063Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.904Z\",\n            \"updated\": \"2019-07-08T11:47:42.063Z\",\n            \"extra_data\": \"[('title', 'Episode #3.54'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 54), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.54'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.54 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.54 (2011)'), ('smart canonical title', 'Episode #3.54'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.54 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.54 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.54'), ('canonical episode title', 'Episode #3.54'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.54')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339040\",\n            \"season_number\": 3,\n            \"episode_number\": 54,\n            \"running_number\": 114,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-24\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.54\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 573,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.55 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.55 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.069Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.912Z\",\n            \"updated\": \"2019-07-08T11:47:42.069Z\",\n            \"extra_data\": \"[('title', 'Episode #3.55'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 55), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.55'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.55 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.55 (2011)'), ('smart canonical title', 'Episode #3.55'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.55 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.55 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.55'), ('canonical episode title', 'Episode #3.55'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.55')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339044\",\n            \"season_number\": 3,\n            \"episode_number\": 55,\n            \"running_number\": 115,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-25\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.55\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 574,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.56 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.56 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.075Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.922Z\",\n            \"updated\": \"2019-07-08T11:47:42.075Z\",\n            \"extra_data\": \"[('title', 'Episode #3.56'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 56), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.56'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.56 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.56 (2011)'), ('smart canonical title', 'Episode #3.56'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.56 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.56 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.56'), ('canonical episode title', 'Episode #3.56'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.56')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339048\",\n            \"season_number\": 3,\n            \"episode_number\": 56,\n            \"running_number\": 116,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-26\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.56\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 575,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.57 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.57 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.080Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.931Z\",\n            \"updated\": \"2019-07-08T11:47:42.080Z\",\n            \"extra_data\": \"[('title', 'Episode #3.57'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 57), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.57'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.57 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.57 (2011)'), ('smart canonical title', 'Episode #3.57'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.57 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.57 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.57'), ('canonical episode title', 'Episode #3.57'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.57')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339046\",\n            \"season_number\": 3,\n            \"episode_number\": 57,\n            \"running_number\": 117,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-27\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.57\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 576,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.58 (2011)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.58 (2011)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.085Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.939Z\",\n            \"updated\": \"2019-07-08T11:47:42.085Z\",\n            \"extra_data\": \"[('title', 'Episode #3.58'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 3), ('episode', 58), ('rating', 12345678910.0), ('original air date', '2011'), ('year', '2011'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #3.58'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.58 (2011)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.58 (2011)'), ('smart canonical title', 'Episode #3.58'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.58 (2011)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #3.58 (2011)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #3.58'), ('canonical episode title', 'Episode #3.58'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #3.58')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326652\",\n            \"season_number\": 3,\n            \"episode_number\": 58,\n            \"running_number\": 118,\n            \"original_air_date_from_source\": \"2011\",\n            \"original_air_date\": \"2011-02-28\",\n            \"year\": 2011,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #3.58\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 577,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.1 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.1 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.948Z\",\n            \"updated\": \"2019-07-08T11:47:42.091Z\",\n            \"extra_data\": \"[('title', 'Episode #4.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.1 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.1 (2012)'), ('smart canonical title', 'Episode #4.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.1 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.1 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.1'), ('canonical episode title', 'Episode #4.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326676\",\n            \"season_number\": 4,\n            \"episode_number\": 1,\n            \"running_number\": 119,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-02\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 578,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.2 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.2 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.096Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.956Z\",\n            \"updated\": \"2019-07-08T11:47:42.096Z\",\n            \"extra_data\": \"[('title', 'Episode #4.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.2 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.2 (2012)'), ('smart canonical title', 'Episode #4.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.2 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.2 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.2'), ('canonical episode title', 'Episode #4.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326678\",\n            \"season_number\": 4,\n            \"episode_number\": 2,\n            \"running_number\": 120,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-03\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 579,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.3 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.3 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.103Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.966Z\",\n            \"updated\": \"2019-07-08T11:47:42.103Z\",\n            \"extra_data\": \"[('title', 'Episode #4.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.3 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.3 (2012)'), ('smart canonical title', 'Episode #4.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.3 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.3 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.3'), ('canonical episode title', 'Episode #4.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326680\",\n            \"season_number\": 4,\n            \"episode_number\": 3,\n            \"running_number\": 121,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-04\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 580,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.4 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.4 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.111Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.974Z\",\n            \"updated\": \"2019-07-08T11:47:42.111Z\",\n            \"extra_data\": \"[('title', 'Episode #4.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.4 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.4 (2012)'), ('smart canonical title', 'Episode #4.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.4 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.4 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.4'), ('canonical episode title', 'Episode #4.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326688\",\n            \"season_number\": 4,\n            \"episode_number\": 4,\n            \"running_number\": 122,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-05\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 581,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.5 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.5 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.117Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.984Z\",\n            \"updated\": \"2019-07-08T11:47:42.117Z\",\n            \"extra_data\": \"[('title', 'Episode #4.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.5 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.5 (2012)'), ('smart canonical title', 'Episode #4.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.5 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.5 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.5'), ('canonical episode title', 'Episode #4.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326682\",\n            \"season_number\": 4,\n            \"episode_number\": 5,\n            \"running_number\": 123,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-06\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 582,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.6 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.6 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.124Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:09.992Z\",\n            \"updated\": \"2019-07-08T11:47:42.124Z\",\n            \"extra_data\": \"[('title', 'Episode #4.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.6 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.6 (2012)'), ('smart canonical title', 'Episode #4.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.6 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.6 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.6'), ('canonical episode title', 'Episode #4.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326694\",\n            \"season_number\": 4,\n            \"episode_number\": 6,\n            \"running_number\": 124,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-07\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 583,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.7 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.7 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.131Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.003Z\",\n            \"updated\": \"2019-07-08T11:47:42.131Z\",\n            \"extra_data\": \"[('title', 'Episode #4.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.7 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.7 (2012)'), ('smart canonical title', 'Episode #4.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.7 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.7 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.7'), ('canonical episode title', 'Episode #4.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326692\",\n            \"season_number\": 4,\n            \"episode_number\": 7,\n            \"running_number\": 125,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-08\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 584,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.8 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.8 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.137Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.012Z\",\n            \"updated\": \"2019-07-08T11:47:42.137Z\",\n            \"extra_data\": \"[('title', 'Episode #4.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.8 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.8 (2012)'), ('smart canonical title', 'Episode #4.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.8 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.8 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.8'), ('canonical episode title', 'Episode #4.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326702\",\n            \"season_number\": 4,\n            \"episode_number\": 8,\n            \"running_number\": 126,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-09\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 585,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.9 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.9 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.144Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.024Z\",\n            \"updated\": \"2019-07-08T11:47:42.144Z\",\n            \"extra_data\": \"[('title', 'Episode #4.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.9 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.9 (2012)'), ('smart canonical title', 'Episode #4.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.9 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.9 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.9'), ('canonical episode title', 'Episode #4.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326704\",\n            \"season_number\": 4,\n            \"episode_number\": 9,\n            \"running_number\": 127,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-10\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 586,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.10 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.10 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.151Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.032Z\",\n            \"updated\": \"2019-07-08T11:47:42.151Z\",\n            \"extra_data\": \"[('title', 'Episode #4.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.10 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.10 (2012)'), ('smart canonical title', 'Episode #4.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.10 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.10 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.10'), ('canonical episode title', 'Episode #4.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326708\",\n            \"season_number\": 4,\n            \"episode_number\": 10,\n            \"running_number\": 128,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-11\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 587,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.11 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.11 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.158Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.041Z\",\n            \"updated\": \"2019-07-08T11:47:42.158Z\",\n            \"extra_data\": \"[('title', 'Episode #4.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.11 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.11 (2012)'), ('smart canonical title', 'Episode #4.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.11 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.11 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.11'), ('canonical episode title', 'Episode #4.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328198\",\n            \"season_number\": 4,\n            \"episode_number\": 11,\n            \"running_number\": 129,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-12\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 588,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.12 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.12 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.051Z\",\n            \"updated\": \"2019-07-08T11:47:42.164Z\",\n            \"extra_data\": \"[('title', 'Episode #4.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.12 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.12 (2012)'), ('smart canonical title', 'Episode #4.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.12 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.12 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.12'), ('canonical episode title', 'Episode #4.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328200\",\n            \"season_number\": 4,\n            \"episode_number\": 12,\n            \"running_number\": 130,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-13\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 589,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.13 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.13 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.062Z\",\n            \"updated\": \"2019-07-08T11:47:42.171Z\",\n            \"extra_data\": \"[('title', 'Episode #4.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.13 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.13 (2012)'), ('smart canonical title', 'Episode #4.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.13 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.13 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.13'), ('canonical episode title', 'Episode #4.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328202\",\n            \"season_number\": 4,\n            \"episode_number\": 13,\n            \"running_number\": 131,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-14\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 590,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.14 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.14 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.070Z\",\n            \"updated\": \"2019-07-08T11:47:42.177Z\",\n            \"extra_data\": \"[('title', 'Episode #4.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.14 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.14 (2012)'), ('smart canonical title', 'Episode #4.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.14 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.14 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.14'), ('canonical episode title', 'Episode #4.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328204\",\n            \"season_number\": 4,\n            \"episode_number\": 14,\n            \"running_number\": 132,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-15\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 591,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.15 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.15 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.183Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.081Z\",\n            \"updated\": \"2019-07-08T11:47:42.183Z\",\n            \"extra_data\": \"[('title', 'Episode #4.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.15 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.15 (2012)'), ('smart canonical title', 'Episode #4.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.15 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.15 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.15'), ('canonical episode title', 'Episode #4.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328206\",\n            \"season_number\": 4,\n            \"episode_number\": 15,\n            \"running_number\": 133,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-16\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 592,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.16 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.16 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.189Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.089Z\",\n            \"updated\": \"2019-07-08T11:47:42.189Z\",\n            \"extra_data\": \"[('title', 'Episode #4.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.16 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.16 (2012)'), ('smart canonical title', 'Episode #4.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.16 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.16 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.16'), ('canonical episode title', 'Episode #4.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328208\",\n            \"season_number\": 4,\n            \"episode_number\": 16,\n            \"running_number\": 134,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-17\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 593,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.17 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.17 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.195Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.099Z\",\n            \"updated\": \"2019-07-08T11:47:42.195Z\",\n            \"extra_data\": \"[('title', 'Episode #4.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.17 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.17 (2012)'), ('smart canonical title', 'Episode #4.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.17 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.17 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.17'), ('canonical episode title', 'Episode #4.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328210\",\n            \"season_number\": 4,\n            \"episode_number\": 17,\n            \"running_number\": 135,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-18\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 594,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.18 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.18 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.202Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.113Z\",\n            \"updated\": \"2019-07-08T11:47:42.202Z\",\n            \"extra_data\": \"[('title', 'Episode #4.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.18 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.18 (2012)'), ('smart canonical title', 'Episode #4.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.18 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.18 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.18'), ('canonical episode title', 'Episode #4.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328212\",\n            \"season_number\": 4,\n            \"episode_number\": 18,\n            \"running_number\": 136,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-19\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 595,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.19 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.19 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.122Z\",\n            \"updated\": \"2019-07-08T11:47:42.208Z\",\n            \"extra_data\": \"[('title', 'Episode #4.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.19 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.19 (2012)'), ('smart canonical title', 'Episode #4.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.19 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.19 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.19'), ('canonical episode title', 'Episode #4.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328216\",\n            \"season_number\": 4,\n            \"episode_number\": 19,\n            \"running_number\": 137,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-20\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 596,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.20 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.20 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.215Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.130Z\",\n            \"updated\": \"2019-07-08T11:47:42.215Z\",\n            \"extra_data\": \"[('title', 'Episode #4.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.20 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.20 (2012)'), ('smart canonical title', 'Episode #4.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.20 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.20 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.20'), ('canonical episode title', 'Episode #4.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328218\",\n            \"season_number\": 4,\n            \"episode_number\": 20,\n            \"running_number\": 138,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-21\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 597,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.21 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.21 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.220Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.138Z\",\n            \"updated\": \"2019-07-08T11:47:42.220Z\",\n            \"extra_data\": \"[('title', 'Episode #4.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.21 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.21 (2012)'), ('smart canonical title', 'Episode #4.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.21 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.21 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.21'), ('canonical episode title', 'Episode #4.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336798\",\n            \"season_number\": 4,\n            \"episode_number\": 21,\n            \"running_number\": 139,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-22\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 598,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.22 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.22 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.226Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.146Z\",\n            \"updated\": \"2019-07-08T11:47:42.226Z\",\n            \"extra_data\": \"[('title', 'Episode #4.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.22 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.22 (2012)'), ('smart canonical title', 'Episode #4.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.22 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.22 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.22'), ('canonical episode title', 'Episode #4.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336796\",\n            \"season_number\": 4,\n            \"episode_number\": 22,\n            \"running_number\": 140,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-23\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 599,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.23 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.23 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.154Z\",\n            \"updated\": \"2019-07-08T11:47:42.231Z\",\n            \"extra_data\": \"[('title', 'Episode #4.23'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 23), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.23'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.23 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.23 (2012)'), ('smart canonical title', 'Episode #4.23'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.23 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.23 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.23'), ('canonical episode title', 'Episode #4.23'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.23')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336800\",\n            \"season_number\": 4,\n            \"episode_number\": 23,\n            \"running_number\": 141,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-24\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.23\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 600,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.24 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.24 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.237Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.162Z\",\n            \"updated\": \"2019-07-08T11:47:42.237Z\",\n            \"extra_data\": \"[('title', 'Episode #4.24'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 24), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.24'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.24 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.24 (2012)'), ('smart canonical title', 'Episode #4.24'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.24 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.24 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.24'), ('canonical episode title', 'Episode #4.24'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.24')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336802\",\n            \"season_number\": 4,\n            \"episode_number\": 24,\n            \"running_number\": 142,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-25\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.24\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 601,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.25 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.25 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.242Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.170Z\",\n            \"updated\": \"2019-07-08T11:47:42.242Z\",\n            \"extra_data\": \"[('title', 'Episode #4.25'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 25), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.25'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.25 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.25 (2012)'), ('smart canonical title', 'Episode #4.25'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.25 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.25 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.25'), ('canonical episode title', 'Episode #4.25'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.25')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336806\",\n            \"season_number\": 4,\n            \"episode_number\": 25,\n            \"running_number\": 143,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-26\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.25\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 602,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.26 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.26 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.248Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.178Z\",\n            \"updated\": \"2019-07-08T11:47:42.248Z\",\n            \"extra_data\": \"[('title', 'Episode #4.26'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 26), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.26'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.26 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.26 (2012)'), ('smart canonical title', 'Episode #4.26'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.26 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.26 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.26'), ('canonical episode title', 'Episode #4.26'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.26')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336804\",\n            \"season_number\": 4,\n            \"episode_number\": 26,\n            \"running_number\": 144,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-27\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.26\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 603,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.27 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.27 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.254Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.189Z\",\n            \"updated\": \"2019-07-08T11:47:42.254Z\",\n            \"extra_data\": \"[('title', 'Episode #4.27'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 27), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.27'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.27 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.27 (2012)'), ('smart canonical title', 'Episode #4.27'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.27 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.27 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.27'), ('canonical episode title', 'Episode #4.27'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.27')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336808\",\n            \"season_number\": 4,\n            \"episode_number\": 27,\n            \"running_number\": 145,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-28\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.27\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 604,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.28 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.28 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.259Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.197Z\",\n            \"updated\": \"2019-07-08T11:47:42.259Z\",\n            \"extra_data\": \"[('title', 'Episode #4.28'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 28), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.28'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.28 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.28 (2012)'), ('smart canonical title', 'Episode #4.28'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.28 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.28 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.28'), ('canonical episode title', 'Episode #4.28'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.28')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336812\",\n            \"season_number\": 4,\n            \"episode_number\": 28,\n            \"running_number\": 146,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-29\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.28\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 605,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.29 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.29 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.266Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.206Z\",\n            \"updated\": \"2019-07-08T11:47:42.266Z\",\n            \"extra_data\": \"[('title', 'Episode #4.29'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 29), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.29'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.29 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.29 (2012)'), ('smart canonical title', 'Episode #4.29'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.29 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.29 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.29'), ('canonical episode title', 'Episode #4.29'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.29')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336810\",\n            \"season_number\": 4,\n            \"episode_number\": 29,\n            \"running_number\": 147,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-30\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.29\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 606,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.30 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.30 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.273Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.215Z\",\n            \"updated\": \"2019-07-08T11:47:42.273Z\",\n            \"extra_data\": \"[('title', 'Episode #4.30'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 30), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.30'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.30 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.30 (2012)'), ('smart canonical title', 'Episode #4.30'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.30 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.30 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.30'), ('canonical episode title', 'Episode #4.30'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.30')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336814\",\n            \"season_number\": 4,\n            \"episode_number\": 30,\n            \"running_number\": 148,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-01-31\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.30\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 607,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.31 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.31 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.279Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.225Z\",\n            \"updated\": \"2019-07-08T11:47:42.279Z\",\n            \"extra_data\": \"[('title', 'Episode #4.31'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 31), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.31'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.31 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.31 (2012)'), ('smart canonical title', 'Episode #4.31'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.31 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.31 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.31'), ('canonical episode title', 'Episode #4.31'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.31')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336816\",\n            \"season_number\": 4,\n            \"episode_number\": 31,\n            \"running_number\": 149,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-01\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.31\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 608,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.32 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.32 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.312Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.236Z\",\n            \"updated\": \"2019-07-08T11:47:42.312Z\",\n            \"extra_data\": \"[('title', 'Episode #4.32'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 32), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.32'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.32 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.32 (2012)'), ('smart canonical title', 'Episode #4.32'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.32 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.32 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.32'), ('canonical episode title', 'Episode #4.32'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.32')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336818\",\n            \"season_number\": 4,\n            \"episode_number\": 32,\n            \"running_number\": 150,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-02\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.32\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 609,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.33 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.33 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.318Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.248Z\",\n            \"updated\": \"2019-07-08T11:47:42.318Z\",\n            \"extra_data\": \"[('title', 'Episode #4.33'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 33), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.33'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.33 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.33 (2012)'), ('smart canonical title', 'Episode #4.33'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.33 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.33 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.33'), ('canonical episode title', 'Episode #4.33'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.33')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336820\",\n            \"season_number\": 4,\n            \"episode_number\": 33,\n            \"running_number\": 151,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-03\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.33\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 610,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.34 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.34 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.323Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.255Z\",\n            \"updated\": \"2019-07-08T11:47:42.323Z\",\n            \"extra_data\": \"[('title', 'Episode #4.34'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 34), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.34'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.34 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.34 (2012)'), ('smart canonical title', 'Episode #4.34'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.34 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.34 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.34'), ('canonical episode title', 'Episode #4.34'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.34')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336824\",\n            \"season_number\": 4,\n            \"episode_number\": 34,\n            \"running_number\": 152,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-04\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.34\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 611,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.35 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.35 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.265Z\",\n            \"updated\": \"2019-07-08T11:47:42.329Z\",\n            \"extra_data\": \"[('title', 'Episode #4.35'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 35), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.35'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.35 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.35 (2012)'), ('smart canonical title', 'Episode #4.35'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.35 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.35 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.35'), ('canonical episode title', 'Episode #4.35'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.35')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336826\",\n            \"season_number\": 4,\n            \"episode_number\": 35,\n            \"running_number\": 153,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-05\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.35\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 612,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.36 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.36 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.335Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.273Z\",\n            \"updated\": \"2019-07-08T11:47:42.335Z\",\n            \"extra_data\": \"[('title', 'Episode #4.36'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 36), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.36'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.36 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.36 (2012)'), ('smart canonical title', 'Episode #4.36'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.36 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.36 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.36'), ('canonical episode title', 'Episode #4.36'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.36')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336822\",\n            \"season_number\": 4,\n            \"episode_number\": 36,\n            \"running_number\": 154,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-06\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.36\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 613,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.37 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.37 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.341Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.286Z\",\n            \"updated\": \"2019-07-08T11:47:42.341Z\",\n            \"extra_data\": \"[('title', 'Episode #4.37'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 37), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.37'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.37 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.37 (2012)'), ('smart canonical title', 'Episode #4.37'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.37 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.37 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.37'), ('canonical episode title', 'Episode #4.37'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.37')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336828\",\n            \"season_number\": 4,\n            \"episode_number\": 37,\n            \"running_number\": 155,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-07\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.37\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 614,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.38 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.38 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.347Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.294Z\",\n            \"updated\": \"2019-07-08T11:47:42.347Z\",\n            \"extra_data\": \"[('title', 'Episode #4.38'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 38), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.38'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.38 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.38 (2012)'), ('smart canonical title', 'Episode #4.38'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.38 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.38 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.38'), ('canonical episode title', 'Episode #4.38'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.38')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336830\",\n            \"season_number\": 4,\n            \"episode_number\": 38,\n            \"running_number\": 156,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-08\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.38\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 615,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.39 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.39 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.352Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.303Z\",\n            \"updated\": \"2019-07-08T11:47:42.352Z\",\n            \"extra_data\": \"[('title', 'Episode #4.39'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 39), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.39'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.39 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.39 (2012)'), ('smart canonical title', 'Episode #4.39'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.39 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.39 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.39'), ('canonical episode title', 'Episode #4.39'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.39')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336832\",\n            \"season_number\": 4,\n            \"episode_number\": 39,\n            \"running_number\": 157,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-09\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.39\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 616,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.40 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.40 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.358Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.313Z\",\n            \"updated\": \"2019-07-08T11:47:42.358Z\",\n            \"extra_data\": \"[('title', 'Episode #4.40'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 40), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.40'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.40 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.40 (2012)'), ('smart canonical title', 'Episode #4.40'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.40 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.40 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.40'), ('canonical episode title', 'Episode #4.40'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.40')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336834\",\n            \"season_number\": 4,\n            \"episode_number\": 40,\n            \"running_number\": 158,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-10\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.40\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 617,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.41 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.41 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.364Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.322Z\",\n            \"updated\": \"2019-07-08T11:47:42.364Z\",\n            \"extra_data\": \"[('title', 'Episode #4.41'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 41), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.41'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.41 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.41 (2012)'), ('smart canonical title', 'Episode #4.41'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.41 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.41 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.41'), ('canonical episode title', 'Episode #4.41'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.41')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338962\",\n            \"season_number\": 4,\n            \"episode_number\": 41,\n            \"running_number\": 159,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-11\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.41\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 618,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.42 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.42 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.371Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.332Z\",\n            \"updated\": \"2019-07-08T11:47:42.371Z\",\n            \"extra_data\": \"[('title', 'Episode #4.42'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 42), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.42'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.42 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.42 (2012)'), ('smart canonical title', 'Episode #4.42'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.42 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.42 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.42'), ('canonical episode title', 'Episode #4.42'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.42')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338964\",\n            \"season_number\": 4,\n            \"episode_number\": 42,\n            \"running_number\": 160,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-12\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.42\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 619,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.43 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.43 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.377Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.341Z\",\n            \"updated\": \"2019-07-08T11:47:42.377Z\",\n            \"extra_data\": \"[('title', 'Episode #4.43'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 43), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.43'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.43 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.43 (2012)'), ('smart canonical title', 'Episode #4.43'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.43 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.43 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.43'), ('canonical episode title', 'Episode #4.43'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.43')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338966\",\n            \"season_number\": 4,\n            \"episode_number\": 43,\n            \"running_number\": 161,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-13\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.43\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 620,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.44 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.44 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.384Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.351Z\",\n            \"updated\": \"2019-07-08T11:47:42.384Z\",\n            \"extra_data\": \"[('title', 'Episode #4.44'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 44), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.44'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.44 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.44 (2012)'), ('smart canonical title', 'Episode #4.44'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.44 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.44 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.44'), ('canonical episode title', 'Episode #4.44'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.44')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338968\",\n            \"season_number\": 4,\n            \"episode_number\": 44,\n            \"running_number\": 162,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-14\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.44\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 621,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.45 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.45 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.390Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.359Z\",\n            \"updated\": \"2019-07-08T11:47:42.390Z\",\n            \"extra_data\": \"[('title', 'Episode #4.45'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 45), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.45'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.45 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.45 (2012)'), ('smart canonical title', 'Episode #4.45'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.45 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.45 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.45'), ('canonical episode title', 'Episode #4.45'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.45')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338972\",\n            \"season_number\": 4,\n            \"episode_number\": 45,\n            \"running_number\": 163,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-15\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.45\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 622,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.46 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.46 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.396Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.367Z\",\n            \"updated\": \"2019-07-08T11:47:42.396Z\",\n            \"extra_data\": \"[('title', 'Episode #4.46'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 46), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.46'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.46 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.46 (2012)'), ('smart canonical title', 'Episode #4.46'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.46 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.46 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.46'), ('canonical episode title', 'Episode #4.46'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.46')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338974\",\n            \"season_number\": 4,\n            \"episode_number\": 46,\n            \"running_number\": 164,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-16\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.46\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 623,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.47 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.47 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.402Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.388Z\",\n            \"updated\": \"2019-07-08T11:47:42.402Z\",\n            \"extra_data\": \"[('title', 'Episode #4.47'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 47), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.47'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.47 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.47 (2012)'), ('smart canonical title', 'Episode #4.47'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.47 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.47 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.47'), ('canonical episode title', 'Episode #4.47'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.47')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338976\",\n            \"season_number\": 4,\n            \"episode_number\": 47,\n            \"running_number\": 165,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-17\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.47\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 624,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.48 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.48 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.408Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.406Z\",\n            \"updated\": \"2019-07-08T11:47:42.408Z\",\n            \"extra_data\": \"[('title', 'Episode #4.48'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 48), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.48'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.48 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.48 (2012)'), ('smart canonical title', 'Episode #4.48'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.48 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.48 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.48'), ('canonical episode title', 'Episode #4.48'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.48')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338978\",\n            \"season_number\": 4,\n            \"episode_number\": 48,\n            \"running_number\": 166,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-18\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.48\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 625,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.49 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.49 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.428Z\",\n            \"updated\": \"2019-07-08T11:47:42.414Z\",\n            \"extra_data\": \"[('title', 'Episode #4.49'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 49), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.49'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.49 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.49 (2012)'), ('smart canonical title', 'Episode #4.49'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.49 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.49 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.49'), ('canonical episode title', 'Episode #4.49'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.49')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338980\",\n            \"season_number\": 4,\n            \"episode_number\": 49,\n            \"running_number\": 167,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-19\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.49\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 626,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.50 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.50 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.420Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.441Z\",\n            \"updated\": \"2019-07-08T11:47:42.420Z\",\n            \"extra_data\": \"[('title', 'Episode #4.50'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 50), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.50'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.50 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.50 (2012)'), ('smart canonical title', 'Episode #4.50'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.50 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.50 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.50'), ('canonical episode title', 'Episode #4.50'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.50')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338988\",\n            \"season_number\": 4,\n            \"episode_number\": 50,\n            \"running_number\": 168,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-20\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.50\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 627,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.51 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.51 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.426Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.455Z\",\n            \"updated\": \"2019-07-08T11:47:42.426Z\",\n            \"extra_data\": \"[('title', 'Episode #4.51'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 51), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.51'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.51 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.51 (2012)'), ('smart canonical title', 'Episode #4.51'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.51 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.51 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.51'), ('canonical episode title', 'Episode #4.51'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.51')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338986\",\n            \"season_number\": 4,\n            \"episode_number\": 51,\n            \"running_number\": 169,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-21\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.51\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 628,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.52 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.52 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.432Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.465Z\",\n            \"updated\": \"2019-07-08T11:47:42.432Z\",\n            \"extra_data\": \"[('title', 'Episode #4.52'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 52), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.52'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.52 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.52 (2012)'), ('smart canonical title', 'Episode #4.52'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.52 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.52 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.52'), ('canonical episode title', 'Episode #4.52'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.52')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338990\",\n            \"season_number\": 4,\n            \"episode_number\": 52,\n            \"running_number\": 170,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-22\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.52\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 629,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.53 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.53 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.441Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.474Z\",\n            \"updated\": \"2019-07-08T11:47:42.441Z\",\n            \"extra_data\": \"[('title', 'Episode #4.53'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 53), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.53'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.53 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.53 (2012)'), ('smart canonical title', 'Episode #4.53'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.53 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.53 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.53'), ('canonical episode title', 'Episode #4.53'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.53')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338992\",\n            \"season_number\": 4,\n            \"episode_number\": 53,\n            \"running_number\": 171,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-23\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.53\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 630,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.54 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.54 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.452Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.483Z\",\n            \"updated\": \"2019-07-08T11:47:42.452Z\",\n            \"extra_data\": \"[('title', 'Episode #4.54'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 54), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.54'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.54 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.54 (2012)'), ('smart canonical title', 'Episode #4.54'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.54 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.54 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.54'), ('canonical episode title', 'Episode #4.54'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.54')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338994\",\n            \"season_number\": 4,\n            \"episode_number\": 54,\n            \"running_number\": 172,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-24\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.54\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 631,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.55 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.55 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.461Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.500Z\",\n            \"updated\": \"2019-07-08T11:47:42.461Z\",\n            \"extra_data\": \"[('title', 'Episode #4.55'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 55), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.55'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.55 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.55 (2012)'), ('smart canonical title', 'Episode #4.55'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.55 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.55 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.55'), ('canonical episode title', 'Episode #4.55'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.55')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338996\",\n            \"season_number\": 4,\n            \"episode_number\": 55,\n            \"running_number\": 173,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-25\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.55\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 632,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.56 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.56 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.469Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.512Z\",\n            \"updated\": \"2019-07-08T11:47:42.469Z\",\n            \"extra_data\": \"[('title', 'Episode #4.56'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 56), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.56'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.56 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.56 (2012)'), ('smart canonical title', 'Episode #4.56'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.56 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.56 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.56'), ('canonical episode title', 'Episode #4.56'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.56')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338998\",\n            \"season_number\": 4,\n            \"episode_number\": 56,\n            \"running_number\": 174,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-26\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.56\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 633,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.57 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.57 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.478Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.522Z\",\n            \"updated\": \"2019-07-08T11:47:42.478Z\",\n            \"extra_data\": \"[('title', 'Episode #4.57'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 57), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.57'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.57 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.57 (2012)'), ('smart canonical title', 'Episode #4.57'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.57 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.57 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.57'), ('canonical episode title', 'Episode #4.57'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.57')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339000\",\n            \"season_number\": 4,\n            \"episode_number\": 57,\n            \"running_number\": 175,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-27\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.57\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 634,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.58 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.58 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.486Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.535Z\",\n            \"updated\": \"2019-07-08T11:47:42.486Z\",\n            \"extra_data\": \"[('title', 'Episode #4.58'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 58), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.58'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.58 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.58 (2012)'), ('smart canonical title', 'Episode #4.58'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.58 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.58 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.58'), ('canonical episode title', 'Episode #4.58'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.58')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339002\",\n            \"season_number\": 4,\n            \"episode_number\": 58,\n            \"running_number\": 176,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-28\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.58\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 635,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.59 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.59 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.496Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.545Z\",\n            \"updated\": \"2019-07-08T11:47:42.496Z\",\n            \"extra_data\": \"[('title', 'Episode #4.59'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 59), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.59'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.59 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.59 (2012)'), ('smart canonical title', 'Episode #4.59'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.59 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.59 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.59'), ('canonical episode title', 'Episode #4.59'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.59')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339004\",\n            \"season_number\": 4,\n            \"episode_number\": 59,\n            \"running_number\": 177,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-02-29\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.59\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 636,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.60 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.60 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.512Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.557Z\",\n            \"updated\": \"2019-07-08T11:47:42.512Z\",\n            \"extra_data\": \"[('title', 'Episode #4.60'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 60), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.60'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.60 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.60 (2012)'), ('smart canonical title', 'Episode #4.60'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.60 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.60 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.60'), ('canonical episode title', 'Episode #4.60'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.60')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10339008\",\n            \"season_number\": 4,\n            \"episode_number\": 60,\n            \"running_number\": 178,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-01\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.60\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 637,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.61 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.61 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.566Z\",\n            \"updated\": \"2019-07-08T11:47:42.522Z\",\n            \"extra_data\": \"[('title', 'Episode #4.61'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 61), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.61'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.61 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.61 (2012)'), ('smart canonical title', 'Episode #4.61'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.61 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.61 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.61'), ('canonical episode title', 'Episode #4.61'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.61')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340850\",\n            \"season_number\": 4,\n            \"episode_number\": 61,\n            \"running_number\": 179,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-02\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.61\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 638,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.62 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.62 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.529Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.575Z\",\n            \"updated\": \"2019-07-08T11:47:42.529Z\",\n            \"extra_data\": \"[('title', 'Episode #4.62'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 62), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.62'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.62 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.62 (2012)'), ('smart canonical title', 'Episode #4.62'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.62 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.62 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.62'), ('canonical episode title', 'Episode #4.62'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.62')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340852\",\n            \"season_number\": 4,\n            \"episode_number\": 62,\n            \"running_number\": 180,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-03\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.62\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 639,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.63 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.63 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.534Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.595Z\",\n            \"updated\": \"2019-07-08T11:47:42.534Z\",\n            \"extra_data\": \"[('title', 'Episode #4.63'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 63), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.63'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.63 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.63 (2012)'), ('smart canonical title', 'Episode #4.63'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.63 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.63 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.63'), ('canonical episode title', 'Episode #4.63'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.63')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340854\",\n            \"season_number\": 4,\n            \"episode_number\": 63,\n            \"running_number\": 181,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-04\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.63\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 640,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.64 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.64 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.541Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.615Z\",\n            \"updated\": \"2019-07-08T11:47:42.541Z\",\n            \"extra_data\": \"[('title', 'Episode #4.64'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 64), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.64'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.64 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.64 (2012)'), ('smart canonical title', 'Episode #4.64'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.64 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.64 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.64'), ('canonical episode title', 'Episode #4.64'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.64')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340856\",\n            \"season_number\": 4,\n            \"episode_number\": 64,\n            \"running_number\": 182,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-05\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.64\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 641,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.65 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.65 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.550Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.623Z\",\n            \"updated\": \"2019-07-08T11:47:42.550Z\",\n            \"extra_data\": \"[('title', 'Episode #4.65'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 65), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.65'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.65 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.65 (2012)'), ('smart canonical title', 'Episode #4.65'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.65 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.65 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.65'), ('canonical episode title', 'Episode #4.65'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.65')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340858\",\n            \"season_number\": 4,\n            \"episode_number\": 65,\n            \"running_number\": 183,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-06\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.65\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 642,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.66 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.66 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.559Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.630Z\",\n            \"updated\": \"2019-07-08T11:47:42.559Z\",\n            \"extra_data\": \"[('title', 'Episode #4.66'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 66), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.66'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.66 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.66 (2012)'), ('smart canonical title', 'Episode #4.66'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.66 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.66 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.66'), ('canonical episode title', 'Episode #4.66'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.66')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340862\",\n            \"season_number\": 4,\n            \"episode_number\": 66,\n            \"running_number\": 184,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-07\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.66\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 643,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.67 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.67 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.566Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.638Z\",\n            \"updated\": \"2019-07-08T11:47:42.566Z\",\n            \"extra_data\": \"[('title', 'Episode #4.67'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 67), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.67'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.67 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.67 (2012)'), ('smart canonical title', 'Episode #4.67'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.67 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.67 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.67'), ('canonical episode title', 'Episode #4.67'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.67')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340864\",\n            \"season_number\": 4,\n            \"episode_number\": 67,\n            \"running_number\": 185,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-08\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.67\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 644,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.68 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.68 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.645Z\",\n            \"updated\": \"2019-07-08T11:47:42.571Z\",\n            \"extra_data\": \"[('title', 'Episode #4.68'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 68), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.68'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.68 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.68 (2012)'), ('smart canonical title', 'Episode #4.68'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.68 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.68 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.68'), ('canonical episode title', 'Episode #4.68'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.68')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340868\",\n            \"season_number\": 4,\n            \"episode_number\": 68,\n            \"running_number\": 186,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-09\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.68\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 645,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.69 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.69 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.653Z\",\n            \"updated\": \"2019-07-08T11:47:42.577Z\",\n            \"extra_data\": \"[('title', 'Episode #4.69'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 69), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.69'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.69 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.69 (2012)'), ('smart canonical title', 'Episode #4.69'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.69 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.69 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.69'), ('canonical episode title', 'Episode #4.69'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.69')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340870\",\n            \"season_number\": 4,\n            \"episode_number\": 69,\n            \"running_number\": 187,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-10\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.69\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 646,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.70 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.70 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.660Z\",\n            \"updated\": \"2019-07-08T11:47:42.582Z\",\n            \"extra_data\": \"[('title', 'Episode #4.70'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 70), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.70'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.70 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.70 (2012)'), ('smart canonical title', 'Episode #4.70'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.70 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.70 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.70'), ('canonical episode title', 'Episode #4.70'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.70')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340872\",\n            \"season_number\": 4,\n            \"episode_number\": 70,\n            \"running_number\": 188,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-11\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.70\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 647,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.71 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.71 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.588Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.668Z\",\n            \"updated\": \"2019-07-08T11:47:42.588Z\",\n            \"extra_data\": \"[('title', 'Episode #4.71'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 71), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.71'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.71 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.71 (2012)'), ('smart canonical title', 'Episode #4.71'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.71 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.71 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.71'), ('canonical episode title', 'Episode #4.71'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.71')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340876\",\n            \"season_number\": 4,\n            \"episode_number\": 71,\n            \"running_number\": 189,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-12\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.71\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 648,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.72 (2012)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.72 (2012)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.594Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.675Z\",\n            \"updated\": \"2019-07-08T11:47:42.594Z\",\n            \"extra_data\": \"[('title', 'Episode #4.72'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 4), ('episode', 72), ('rating', 12345678910.0), ('original air date', '2012'), ('year', '2012'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #4.72'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.72 (2012)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.72 (2012)'), ('smart canonical title', 'Episode #4.72'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.72 (2012)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #4.72 (2012)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #4.72'), ('canonical episode title', 'Episode #4.72'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #4.72')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326698\",\n            \"season_number\": 4,\n            \"episode_number\": 72,\n            \"running_number\": 190,\n            \"original_air_date_from_source\": \"2012\",\n            \"original_air_date\": \"2012-03-13\",\n            \"year\": 2012,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #4.72\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 649,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.1 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.1 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.600Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.682Z\",\n            \"updated\": \"2019-07-08T11:47:42.600Z\",\n            \"extra_data\": \"[('title', 'Episode #5.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.1 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.1 (2013)'), ('smart canonical title', 'Episode #5.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.1 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.1 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.1'), ('canonical episode title', 'Episode #5.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326710\",\n            \"season_number\": 5,\n            \"episode_number\": 1,\n            \"running_number\": 191,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-02\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 650,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.2 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.2 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.606Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.691Z\",\n            \"updated\": \"2019-07-08T11:47:42.606Z\",\n            \"extra_data\": \"[('title', 'Episode #5.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.2 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.2 (2013)'), ('smart canonical title', 'Episode #5.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.2 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.2 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.2'), ('canonical episode title', 'Episode #5.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326712\",\n            \"season_number\": 5,\n            \"episode_number\": 2,\n            \"running_number\": 192,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-03\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 651,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.3 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.3 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.699Z\",\n            \"updated\": \"2019-07-08T11:47:42.612Z\",\n            \"extra_data\": \"[('title', 'Episode #5.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.3 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.3 (2013)'), ('smart canonical title', 'Episode #5.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.3 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.3 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.3'), ('canonical episode title', 'Episode #5.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326714\",\n            \"season_number\": 5,\n            \"episode_number\": 3,\n            \"running_number\": 193,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-04\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 652,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.4 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.4 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.618Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.705Z\",\n            \"updated\": \"2019-07-08T11:47:42.618Z\",\n            \"extra_data\": \"[('title', 'Episode #5.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.4 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.4 (2013)'), ('smart canonical title', 'Episode #5.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.4 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.4 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.4'), ('canonical episode title', 'Episode #5.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326722\",\n            \"season_number\": 5,\n            \"episode_number\": 4,\n            \"running_number\": 194,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-05\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 653,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.5 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.5 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.624Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.713Z\",\n            \"updated\": \"2019-07-08T11:47:42.624Z\",\n            \"extra_data\": \"[('title', 'Episode #5.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.5 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.5 (2013)'), ('smart canonical title', 'Episode #5.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.5 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.5 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.5'), ('canonical episode title', 'Episode #5.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326720\",\n            \"season_number\": 5,\n            \"episode_number\": 5,\n            \"running_number\": 195,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-06\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 654,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.6 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.6 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.630Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.721Z\",\n            \"updated\": \"2019-07-08T11:47:42.630Z\",\n            \"extra_data\": \"[('title', 'Episode #5.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.6 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.6 (2013)'), ('smart canonical title', 'Episode #5.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.6 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.6 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.6'), ('canonical episode title', 'Episode #5.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326726\",\n            \"season_number\": 5,\n            \"episode_number\": 6,\n            \"running_number\": 196,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-07\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 655,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.7 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.7 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.636Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.731Z\",\n            \"updated\": \"2019-07-08T11:47:42.636Z\",\n            \"extra_data\": \"[('title', 'Episode #5.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.7 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.7 (2013)'), ('smart canonical title', 'Episode #5.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.7 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.7 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.7'), ('canonical episode title', 'Episode #5.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326728\",\n            \"season_number\": 5,\n            \"episode_number\": 7,\n            \"running_number\": 197,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-08\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 656,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.8 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.8 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.641Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.739Z\",\n            \"updated\": \"2019-07-08T11:47:42.641Z\",\n            \"extra_data\": \"[('title', 'Episode #5.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.8 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.8 (2013)'), ('smart canonical title', 'Episode #5.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.8 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.8 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.8'), ('canonical episode title', 'Episode #5.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326730\",\n            \"season_number\": 5,\n            \"episode_number\": 8,\n            \"running_number\": 198,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-09\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 657,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.9 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.9 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.647Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.747Z\",\n            \"updated\": \"2019-07-08T11:47:42.647Z\",\n            \"extra_data\": \"[('title', 'Episode #5.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.9 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.9 (2013)'), ('smart canonical title', 'Episode #5.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.9 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.9 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.9'), ('canonical episode title', 'Episode #5.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326732\",\n            \"season_number\": 5,\n            \"episode_number\": 9,\n            \"running_number\": 199,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-10\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 658,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.10 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.10 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.654Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.754Z\",\n            \"updated\": \"2019-07-08T11:47:42.654Z\",\n            \"extra_data\": \"[('title', 'Episode #5.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.10 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.10 (2013)'), ('smart canonical title', 'Episode #5.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.10 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.10 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.10'), ('canonical episode title', 'Episode #5.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326736\",\n            \"season_number\": 5,\n            \"episode_number\": 10,\n            \"running_number\": 200,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-11\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 659,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.11 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.11 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.660Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.761Z\",\n            \"updated\": \"2019-07-08T11:47:42.660Z\",\n            \"extra_data\": \"[('title', 'Episode #5.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.11 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.11 (2013)'), ('smart canonical title', 'Episode #5.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.11 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.11 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.11'), ('canonical episode title', 'Episode #5.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328176\",\n            \"season_number\": 5,\n            \"episode_number\": 11,\n            \"running_number\": 201,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-12\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 660,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.12 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.12 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.665Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.769Z\",\n            \"updated\": \"2019-07-08T11:47:42.665Z\",\n            \"extra_data\": \"[('title', 'Episode #5.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.12 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.12 (2013)'), ('smart canonical title', 'Episode #5.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.12 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.12 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.12'), ('canonical episode title', 'Episode #5.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328178\",\n            \"season_number\": 5,\n            \"episode_number\": 12,\n            \"running_number\": 202,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-13\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 661,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.13 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.13 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.671Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.778Z\",\n            \"updated\": \"2019-07-08T11:47:42.671Z\",\n            \"extra_data\": \"[('title', 'Episode #5.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.13 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.13 (2013)'), ('smart canonical title', 'Episode #5.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.13 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.13 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.13'), ('canonical episode title', 'Episode #5.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328182\",\n            \"season_number\": 5,\n            \"episode_number\": 13,\n            \"running_number\": 203,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-14\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 662,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.14 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.14 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.680Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.786Z\",\n            \"updated\": \"2019-07-08T11:47:42.680Z\",\n            \"extra_data\": \"[('title', 'Episode #5.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.14 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.14 (2013)'), ('smart canonical title', 'Episode #5.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.14 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.14 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.14'), ('canonical episode title', 'Episode #5.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328184\",\n            \"season_number\": 5,\n            \"episode_number\": 14,\n            \"running_number\": 204,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-15\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 663,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.15 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.15 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.686Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.795Z\",\n            \"updated\": \"2019-07-08T11:47:42.686Z\",\n            \"extra_data\": \"[('title', 'Episode #5.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.15 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.15 (2013)'), ('smart canonical title', 'Episode #5.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.15 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.15 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.15'), ('canonical episode title', 'Episode #5.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328186\",\n            \"season_number\": 5,\n            \"episode_number\": 15,\n            \"running_number\": 205,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-16\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 664,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.16 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.16 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.692Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.803Z\",\n            \"updated\": \"2019-07-08T11:47:42.692Z\",\n            \"extra_data\": \"[('title', 'Episode #5.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.16 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.16 (2013)'), ('smart canonical title', 'Episode #5.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.16 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.16 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.16'), ('canonical episode title', 'Episode #5.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328188\",\n            \"season_number\": 5,\n            \"episode_number\": 16,\n            \"running_number\": 206,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-17\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 665,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.17 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.17 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.698Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.811Z\",\n            \"updated\": \"2019-07-08T11:47:42.698Z\",\n            \"extra_data\": \"[('title', 'Episode #5.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.17 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.17 (2013)'), ('smart canonical title', 'Episode #5.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.17 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.17 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.17'), ('canonical episode title', 'Episode #5.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328190\",\n            \"season_number\": 5,\n            \"episode_number\": 17,\n            \"running_number\": 207,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-18\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 666,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.18 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.18 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.705Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.825Z\",\n            \"updated\": \"2019-07-08T11:47:42.705Z\",\n            \"extra_data\": \"[('title', 'Episode #5.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.18 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.18 (2013)'), ('smart canonical title', 'Episode #5.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.18 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.18 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.18'), ('canonical episode title', 'Episode #5.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328192\",\n            \"season_number\": 5,\n            \"episode_number\": 18,\n            \"running_number\": 208,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-19\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 667,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.19 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.19 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.834Z\",\n            \"updated\": \"2019-07-08T11:47:42.711Z\",\n            \"extra_data\": \"[('title', 'Episode #5.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.19 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.19 (2013)'), ('smart canonical title', 'Episode #5.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.19 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.19 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.19'), ('canonical episode title', 'Episode #5.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328194\",\n            \"season_number\": 5,\n            \"episode_number\": 19,\n            \"running_number\": 209,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-20\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 668,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.20 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.20 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.717Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.842Z\",\n            \"updated\": \"2019-07-08T11:47:42.717Z\",\n            \"extra_data\": \"[('title', 'Episode #5.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.20 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.20 (2013)'), ('smart canonical title', 'Episode #5.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.20 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.20 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.20'), ('canonical episode title', 'Episode #5.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328196\",\n            \"season_number\": 5,\n            \"episode_number\": 20,\n            \"running_number\": 210,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-21\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 669,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.21 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.21 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.723Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.855Z\",\n            \"updated\": \"2019-07-08T11:47:42.723Z\",\n            \"extra_data\": \"[('title', 'Episode #5.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.21 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.21 (2013)'), ('smart canonical title', 'Episode #5.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.21 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.21 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.21'), ('canonical episode title', 'Episode #5.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336840\",\n            \"season_number\": 5,\n            \"episode_number\": 21,\n            \"running_number\": 211,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-22\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 670,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.22 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.22 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.729Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.868Z\",\n            \"updated\": \"2019-07-08T11:47:42.729Z\",\n            \"extra_data\": \"[('title', 'Episode #5.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.22 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.22 (2013)'), ('smart canonical title', 'Episode #5.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.22 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.22 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.22'), ('canonical episode title', 'Episode #5.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336844\",\n            \"season_number\": 5,\n            \"episode_number\": 22,\n            \"running_number\": 212,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-23\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 671,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.23 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.23 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.735Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.877Z\",\n            \"updated\": \"2019-07-08T11:47:42.735Z\",\n            \"extra_data\": \"[('title', 'Episode #5.23'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 23), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.23'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.23 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.23 (2013)'), ('smart canonical title', 'Episode #5.23'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.23 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.23 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.23'), ('canonical episode title', 'Episode #5.23'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.23')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336842\",\n            \"season_number\": 5,\n            \"episode_number\": 23,\n            \"running_number\": 213,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-24\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.23\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 672,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.24 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.24 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.741Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.887Z\",\n            \"updated\": \"2019-07-08T11:47:42.741Z\",\n            \"extra_data\": \"[('title', 'Episode #5.24'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 24), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.24'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.24 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.24 (2013)'), ('smart canonical title', 'Episode #5.24'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.24 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.24 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.24'), ('canonical episode title', 'Episode #5.24'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.24')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336846\",\n            \"season_number\": 5,\n            \"episode_number\": 24,\n            \"running_number\": 214,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-25\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.24\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 673,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.25 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.25 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.747Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.896Z\",\n            \"updated\": \"2019-07-08T11:47:42.747Z\",\n            \"extra_data\": \"[('title', 'Episode #5.25'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 25), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.25'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.25 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.25 (2013)'), ('smart canonical title', 'Episode #5.25'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.25 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.25 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.25'), ('canonical episode title', 'Episode #5.25'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.25')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336848\",\n            \"season_number\": 5,\n            \"episode_number\": 25,\n            \"running_number\": 215,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-26\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.25\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 674,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.26 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.26 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.754Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.903Z\",\n            \"updated\": \"2019-07-08T11:47:42.754Z\",\n            \"extra_data\": \"[('title', 'Episode #5.26'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 26), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.26'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.26 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.26 (2013)'), ('smart canonical title', 'Episode #5.26'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.26 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.26 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.26'), ('canonical episode title', 'Episode #5.26'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.26')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336852\",\n            \"season_number\": 5,\n            \"episode_number\": 26,\n            \"running_number\": 216,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-27\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.26\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 675,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.27 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.27 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.761Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.912Z\",\n            \"updated\": \"2019-07-08T11:47:42.761Z\",\n            \"extra_data\": \"[('title', 'Episode #5.27'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 27), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.27'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.27 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.27 (2013)'), ('smart canonical title', 'Episode #5.27'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.27 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.27 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.27'), ('canonical episode title', 'Episode #5.27'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.27')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336854\",\n            \"season_number\": 5,\n            \"episode_number\": 27,\n            \"running_number\": 217,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-28\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.27\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 676,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.28 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.28 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.767Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.921Z\",\n            \"updated\": \"2019-07-08T11:47:42.767Z\",\n            \"extra_data\": \"[('title', 'Episode #5.28'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 28), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.28'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.28 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.28 (2013)'), ('smart canonical title', 'Episode #5.28'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.28 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.28 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.28'), ('canonical episode title', 'Episode #5.28'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.28')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336856\",\n            \"season_number\": 5,\n            \"episode_number\": 28,\n            \"running_number\": 218,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-29\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.28\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 677,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.29 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.29 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.773Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.929Z\",\n            \"updated\": \"2019-07-08T11:47:42.773Z\",\n            \"extra_data\": \"[('title', 'Episode #5.29'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 29), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.29'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.29 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.29 (2013)'), ('smart canonical title', 'Episode #5.29'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.29 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.29 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.29'), ('canonical episode title', 'Episode #5.29'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.29')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336858\",\n            \"season_number\": 5,\n            \"episode_number\": 29,\n            \"running_number\": 219,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-30\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.29\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 678,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.30 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.30 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.938Z\",\n            \"updated\": \"2019-07-08T11:47:42.781Z\",\n            \"extra_data\": \"[('title', 'Episode #5.30'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 30), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.30'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.30 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.30 (2013)'), ('smart canonical title', 'Episode #5.30'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.30 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.30 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.30'), ('canonical episode title', 'Episode #5.30'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.30')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336860\",\n            \"season_number\": 5,\n            \"episode_number\": 30,\n            \"running_number\": 220,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-01-31\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.30\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 679,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.31 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.31 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.789Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.946Z\",\n            \"updated\": \"2019-07-08T11:47:42.789Z\",\n            \"extra_data\": \"[('title', 'Episode #5.31'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 31), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.31'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.31 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.31 (2013)'), ('smart canonical title', 'Episode #5.31'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.31 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.31 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.31'), ('canonical episode title', 'Episode #5.31'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.31')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336862\",\n            \"season_number\": 5,\n            \"episode_number\": 31,\n            \"running_number\": 221,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-01\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.31\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 680,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.32 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.32 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.795Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.954Z\",\n            \"updated\": \"2019-07-08T11:47:42.795Z\",\n            \"extra_data\": \"[('title', 'Episode #5.32'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 32), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.32'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.32 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.32 (2013)'), ('smart canonical title', 'Episode #5.32'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.32 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.32 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.32'), ('canonical episode title', 'Episode #5.32'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.32')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336866\",\n            \"season_number\": 5,\n            \"episode_number\": 32,\n            \"running_number\": 222,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-02\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.32\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 681,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.33 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.33 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.801Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.963Z\",\n            \"updated\": \"2019-07-08T11:47:42.801Z\",\n            \"extra_data\": \"[('title', 'Episode #5.33'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 33), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.33'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.33 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.33 (2013)'), ('smart canonical title', 'Episode #5.33'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.33 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.33 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.33'), ('canonical episode title', 'Episode #5.33'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.33')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336864\",\n            \"season_number\": 5,\n            \"episode_number\": 33,\n            \"running_number\": 223,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-03\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.33\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 682,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.34 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.34 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.972Z\",\n            \"updated\": \"2019-07-08T11:47:42.810Z\",\n            \"extra_data\": \"[('title', 'Episode #5.34'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 34), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.34'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.34 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.34 (2013)'), ('smart canonical title', 'Episode #5.34'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.34 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.34 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.34'), ('canonical episode title', 'Episode #5.34'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.34')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336868\",\n            \"season_number\": 5,\n            \"episode_number\": 34,\n            \"running_number\": 224,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-04\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.34\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 683,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.35 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.35 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.818Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.980Z\",\n            \"updated\": \"2019-07-08T11:47:42.818Z\",\n            \"extra_data\": \"[('title', 'Episode #5.35'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 35), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.35'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.35 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.35 (2013)'), ('smart canonical title', 'Episode #5.35'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.35 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.35 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.35'), ('canonical episode title', 'Episode #5.35'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.35')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336870\",\n            \"season_number\": 5,\n            \"episode_number\": 35,\n            \"running_number\": 225,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-05\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.35\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 684,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.36 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.36 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.826Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.988Z\",\n            \"updated\": \"2019-07-08T11:47:42.826Z\",\n            \"extra_data\": \"[('title', 'Episode #5.36'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 36), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.36'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.36 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.36 (2013)'), ('smart canonical title', 'Episode #5.36'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.36 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.36 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.36'), ('canonical episode title', 'Episode #5.36'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.36')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336872\",\n            \"season_number\": 5,\n            \"episode_number\": 36,\n            \"running_number\": 226,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-06\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.36\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 685,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.37 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.37 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.832Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:10.996Z\",\n            \"updated\": \"2019-07-08T11:47:42.832Z\",\n            \"extra_data\": \"[('title', 'Episode #5.37'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 37), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.37'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.37 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.37 (2013)'), ('smart canonical title', 'Episode #5.37'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.37 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.37 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.37'), ('canonical episode title', 'Episode #5.37'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.37')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336874\",\n            \"season_number\": 5,\n            \"episode_number\": 37,\n            \"running_number\": 227,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-07\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.37\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 686,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.38 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.38 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.839Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.005Z\",\n            \"updated\": \"2019-07-08T11:47:42.839Z\",\n            \"extra_data\": \"[('title', 'Episode #5.38'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 38), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.38'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.38 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.38 (2013)'), ('smart canonical title', 'Episode #5.38'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.38 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.38 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.38'), ('canonical episode title', 'Episode #5.38'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.38')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336878\",\n            \"season_number\": 5,\n            \"episode_number\": 38,\n            \"running_number\": 228,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-08\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.38\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 687,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.39 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.39 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.013Z\",\n            \"updated\": \"2019-07-08T11:47:42.845Z\",\n            \"extra_data\": \"[('title', 'Episode #5.39'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 39), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.39'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.39 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.39 (2013)'), ('smart canonical title', 'Episode #5.39'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.39 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.39 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.39'), ('canonical episode title', 'Episode #5.39'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.39')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336876\",\n            \"season_number\": 5,\n            \"episode_number\": 39,\n            \"running_number\": 229,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-09\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.39\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 688,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.40 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.40 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.852Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.022Z\",\n            \"updated\": \"2019-07-08T11:47:42.852Z\",\n            \"extra_data\": \"[('title', 'Episode #5.40'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 40), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.40'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.40 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.40 (2013)'), ('smart canonical title', 'Episode #5.40'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.40 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.40 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.40'), ('canonical episode title', 'Episode #5.40'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.40')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336880\",\n            \"season_number\": 5,\n            \"episode_number\": 40,\n            \"running_number\": 230,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-10\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.40\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 689,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.41 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.41 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.858Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.030Z\",\n            \"updated\": \"2019-07-08T11:47:42.858Z\",\n            \"extra_data\": \"[('title', 'Episode #5.41'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 41), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.41'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.41 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.41 (2013)'), ('smart canonical title', 'Episode #5.41'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.41 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.41 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.41'), ('canonical episode title', 'Episode #5.41'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.41')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338916\",\n            \"season_number\": 5,\n            \"episode_number\": 41,\n            \"running_number\": 231,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-11\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.41\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 690,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.42 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.42 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.043Z\",\n            \"updated\": \"2019-07-08T11:47:42.865Z\",\n            \"extra_data\": \"[('title', 'Episode #5.42'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 42), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.42'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.42 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.42 (2013)'), ('smart canonical title', 'Episode #5.42'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.42 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.42 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.42'), ('canonical episode title', 'Episode #5.42'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.42')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338918\",\n            \"season_number\": 5,\n            \"episode_number\": 42,\n            \"running_number\": 232,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-12\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.42\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 691,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.43 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.43 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.871Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.052Z\",\n            \"updated\": \"2019-07-08T11:47:42.871Z\",\n            \"extra_data\": \"[('title', 'Episode #5.43'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 43), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.43'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.43 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.43 (2013)'), ('smart canonical title', 'Episode #5.43'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.43 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.43 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.43'), ('canonical episode title', 'Episode #5.43'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.43')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338920\",\n            \"season_number\": 5,\n            \"episode_number\": 43,\n            \"running_number\": 233,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-13\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.43\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 692,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.44 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.44 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.877Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.060Z\",\n            \"updated\": \"2019-07-08T11:47:42.877Z\",\n            \"extra_data\": \"[('title', 'Episode #5.44'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 44), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.44'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.44 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.44 (2013)'), ('smart canonical title', 'Episode #5.44'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.44 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.44 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.44'), ('canonical episode title', 'Episode #5.44'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.44')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338922\",\n            \"season_number\": 5,\n            \"episode_number\": 44,\n            \"running_number\": 234,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-14\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.44\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 693,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.45 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.45 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.070Z\",\n            \"updated\": \"2019-07-08T11:47:42.884Z\",\n            \"extra_data\": \"[('title', 'Episode #5.45'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 45), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.45'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.45 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.45 (2013)'), ('smart canonical title', 'Episode #5.45'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.45 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.45 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.45'), ('canonical episode title', 'Episode #5.45'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.45')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338924\",\n            \"season_number\": 5,\n            \"episode_number\": 45,\n            \"running_number\": 235,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-15\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.45\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 694,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.46 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.46 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.078Z\",\n            \"updated\": \"2019-07-08T11:47:42.891Z\",\n            \"extra_data\": \"[('title', 'Episode #5.46'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 46), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.46'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.46 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.46 (2013)'), ('smart canonical title', 'Episode #5.46'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.46 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.46 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.46'), ('canonical episode title', 'Episode #5.46'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.46')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338926\",\n            \"season_number\": 5,\n            \"episode_number\": 46,\n            \"running_number\": 236,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-16\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.46\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 695,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.47 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.47 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.898Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.086Z\",\n            \"updated\": \"2019-07-08T11:47:42.898Z\",\n            \"extra_data\": \"[('title', 'Episode #5.47'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 47), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.47'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.47 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.47 (2013)'), ('smart canonical title', 'Episode #5.47'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.47 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.47 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.47'), ('canonical episode title', 'Episode #5.47'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.47')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338928\",\n            \"season_number\": 5,\n            \"episode_number\": 47,\n            \"running_number\": 237,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-17\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.47\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 696,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.48 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.48 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.904Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.093Z\",\n            \"updated\": \"2019-07-08T11:47:42.904Z\",\n            \"extra_data\": \"[('title', 'Episode #5.48'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 48), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.48'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.48 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.48 (2013)'), ('smart canonical title', 'Episode #5.48'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.48 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.48 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.48'), ('canonical episode title', 'Episode #5.48'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.48')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338930\",\n            \"season_number\": 5,\n            \"episode_number\": 48,\n            \"running_number\": 238,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-18\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.48\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 697,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.49 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.49 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.101Z\",\n            \"updated\": \"2019-07-08T11:47:42.911Z\",\n            \"extra_data\": \"[('title', 'Episode #5.49'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 49), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.49'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.49 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.49 (2013)'), ('smart canonical title', 'Episode #5.49'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.49 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.49 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.49'), ('canonical episode title', 'Episode #5.49'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.49')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338932\",\n            \"season_number\": 5,\n            \"episode_number\": 49,\n            \"running_number\": 239,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-19\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.49\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 698,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.50 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.50 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.108Z\",\n            \"updated\": \"2019-07-08T11:47:42.918Z\",\n            \"extra_data\": \"[('title', 'Episode #5.50'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 50), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.50'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.50 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.50 (2013)'), ('smart canonical title', 'Episode #5.50'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.50 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.50 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.50'), ('canonical episode title', 'Episode #5.50'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.50')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338934\",\n            \"season_number\": 5,\n            \"episode_number\": 50,\n            \"running_number\": 240,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-20\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.50\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 699,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.51 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.51 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.925Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.116Z\",\n            \"updated\": \"2019-07-08T11:47:42.925Z\",\n            \"extra_data\": \"[('title', 'Episode #5.51'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 51), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.51'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.51 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.51 (2013)'), ('smart canonical title', 'Episode #5.51'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.51 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.51 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.51'), ('canonical episode title', 'Episode #5.51'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.51')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338936\",\n            \"season_number\": 5,\n            \"episode_number\": 51,\n            \"running_number\": 241,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-21\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.51\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 700,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.52 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.52 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.931Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.124Z\",\n            \"updated\": \"2019-07-08T11:47:42.931Z\",\n            \"extra_data\": \"[('title', 'Episode #5.52'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 52), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.52'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.52 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.52 (2013)'), ('smart canonical title', 'Episode #5.52'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.52 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.52 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.52'), ('canonical episode title', 'Episode #5.52'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.52')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338938\",\n            \"season_number\": 5,\n            \"episode_number\": 52,\n            \"running_number\": 242,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-22\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.52\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 701,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.53 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.53 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.937Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.131Z\",\n            \"updated\": \"2019-07-08T11:47:42.937Z\",\n            \"extra_data\": \"[('title', 'Episode #5.53'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 53), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.53'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.53 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.53 (2013)'), ('smart canonical title', 'Episode #5.53'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.53 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.53 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.53'), ('canonical episode title', 'Episode #5.53'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.53')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338940\",\n            \"season_number\": 5,\n            \"episode_number\": 53,\n            \"running_number\": 243,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-23\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.53\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 702,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.54 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.54 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.139Z\",\n            \"updated\": \"2019-07-08T11:47:42.944Z\",\n            \"extra_data\": \"[('title', 'Episode #5.54'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 54), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.54'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.54 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.54 (2013)'), ('smart canonical title', 'Episode #5.54'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.54 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.54 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.54'), ('canonical episode title', 'Episode #5.54'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.54')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338944\",\n            \"season_number\": 5,\n            \"episode_number\": 54,\n            \"running_number\": 244,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-24\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.54\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 703,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.55 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.55 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.949Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.147Z\",\n            \"updated\": \"2019-07-08T11:47:42.949Z\",\n            \"extra_data\": \"[('title', 'Episode #5.55'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 55), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.55'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.55 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.55 (2013)'), ('smart canonical title', 'Episode #5.55'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.55 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.55 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.55'), ('canonical episode title', 'Episode #5.55'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.55')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338946\",\n            \"season_number\": 5,\n            \"episode_number\": 55,\n            \"running_number\": 245,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-25\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.55\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 704,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.56 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.56 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.955Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.155Z\",\n            \"updated\": \"2019-07-08T11:47:42.955Z\",\n            \"extra_data\": \"[('title', 'Episode #5.56'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 56), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.56'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.56 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.56 (2013)'), ('smart canonical title', 'Episode #5.56'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.56 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.56 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.56'), ('canonical episode title', 'Episode #5.56'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.56')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338948\",\n            \"season_number\": 5,\n            \"episode_number\": 56,\n            \"running_number\": 246,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-26\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.56\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 705,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.57 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.57 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.961Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.164Z\",\n            \"updated\": \"2019-07-08T11:47:42.961Z\",\n            \"extra_data\": \"[('title', 'Episode #5.57'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 57), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.57'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.57 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.57 (2013)'), ('smart canonical title', 'Episode #5.57'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.57 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.57 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.57'), ('canonical episode title', 'Episode #5.57'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.57')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338950\",\n            \"season_number\": 5,\n            \"episode_number\": 57,\n            \"running_number\": 247,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-27\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.57\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 706,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.58 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.58 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.174Z\",\n            \"updated\": \"2019-07-08T11:47:42.967Z\",\n            \"extra_data\": \"[('title', 'Episode #5.58'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 58), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.58'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.58 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.58 (2013)'), ('smart canonical title', 'Episode #5.58'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.58 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.58 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.58'), ('canonical episode title', 'Episode #5.58'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.58')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338956\",\n            \"season_number\": 5,\n            \"episode_number\": 58,\n            \"running_number\": 248,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-02-28\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.58\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 707,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.59 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.59 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.183Z\",\n            \"updated\": \"2019-07-08T11:47:42.973Z\",\n            \"extra_data\": \"[('title', 'Episode #5.59'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 59), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.59'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.59 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.59 (2013)'), ('smart canonical title', 'Episode #5.59'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.59 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.59 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.59'), ('canonical episode title', 'Episode #5.59'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.59')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338958\",\n            \"season_number\": 5,\n            \"episode_number\": 59,\n            \"running_number\": 249,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-01\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.59\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 708,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.60 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.60 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.979Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.191Z\",\n            \"updated\": \"2019-07-08T11:47:42.979Z\",\n            \"extra_data\": \"[('title', 'Episode #5.60'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 60), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.60'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.60 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.60 (2013)'), ('smart canonical title', 'Episode #5.60'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.60 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.60 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.60'), ('canonical episode title', 'Episode #5.60'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.60')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338960\",\n            \"season_number\": 5,\n            \"episode_number\": 60,\n            \"running_number\": 250,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-02\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.60\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 709,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.61 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.61 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.199Z\",\n            \"updated\": \"2019-07-08T11:47:42.986Z\",\n            \"extra_data\": \"[('title', 'Episode #5.61'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 61), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.61'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.61 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.61 (2013)'), ('smart canonical title', 'Episode #5.61'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.61 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.61 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.61'), ('canonical episode title', 'Episode #5.61'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.61')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340878\",\n            \"season_number\": 5,\n            \"episode_number\": 61,\n            \"running_number\": 251,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-03\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.61\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 710,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.62 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.62 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.992Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.207Z\",\n            \"updated\": \"2019-07-08T11:47:42.992Z\",\n            \"extra_data\": \"[('title', 'Episode #5.62'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 62), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.62'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.62 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.62 (2013)'), ('smart canonical title', 'Episode #5.62'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.62 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.62 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.62'), ('canonical episode title', 'Episode #5.62'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.62')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340880\",\n            \"season_number\": 5,\n            \"episode_number\": 62,\n            \"running_number\": 252,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-04\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.62\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 711,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.63 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.63 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:42.998Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.216Z\",\n            \"updated\": \"2019-07-08T11:47:42.998Z\",\n            \"extra_data\": \"[('title', 'Episode #5.63'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 63), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.63'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.63 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.63 (2013)'), ('smart canonical title', 'Episode #5.63'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.63 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.63 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.63'), ('canonical episode title', 'Episode #5.63'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.63')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340882\",\n            \"season_number\": 5,\n            \"episode_number\": 63,\n            \"running_number\": 253,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-05\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.63\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 712,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.64 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.64 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.004Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.225Z\",\n            \"updated\": \"2019-07-08T11:47:43.004Z\",\n            \"extra_data\": \"[('title', 'Episode #5.64'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 64), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.64'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.64 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.64 (2013)'), ('smart canonical title', 'Episode #5.64'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.64 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.64 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.64'), ('canonical episode title', 'Episode #5.64'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.64')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340886\",\n            \"season_number\": 5,\n            \"episode_number\": 64,\n            \"running_number\": 254,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-06\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.64\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 713,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.65 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.65 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.011Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.233Z\",\n            \"updated\": \"2019-07-08T11:47:43.011Z\",\n            \"extra_data\": \"[('title', 'Episode #5.65'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 65), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.65'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.65 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.65 (2013)'), ('smart canonical title', 'Episode #5.65'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.65 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.65 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.65'), ('canonical episode title', 'Episode #5.65'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.65')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10340888\",\n            \"season_number\": 5,\n            \"episode_number\": 65,\n            \"running_number\": 255,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-07\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.65\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 714,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.66 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.66 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.017Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.241Z\",\n            \"updated\": \"2019-07-08T11:47:43.017Z\",\n            \"extra_data\": \"[('title', 'Episode #5.66'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 66), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.66'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.66 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.66 (2013)'), ('smart canonical title', 'Episode #5.66'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.66 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.66 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.66'), ('canonical episode title', 'Episode #5.66'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.66')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348226\",\n            \"season_number\": 5,\n            \"episode_number\": 66,\n            \"running_number\": 256,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-08\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.66\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 715,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.67 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.67 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.023Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.250Z\",\n            \"updated\": \"2019-07-08T11:47:43.023Z\",\n            \"extra_data\": \"[('title', 'Episode #5.67'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 67), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.67'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.67 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.67 (2013)'), ('smart canonical title', 'Episode #5.67'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.67 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.67 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.67'), ('canonical episode title', 'Episode #5.67'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.67')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348224\",\n            \"season_number\": 5,\n            \"episode_number\": 67,\n            \"running_number\": 257,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-09\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.67\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 716,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.68 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.68 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.029Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.258Z\",\n            \"updated\": \"2019-07-08T11:47:43.029Z\",\n            \"extra_data\": \"[('title', 'Episode #5.68'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 68), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.68'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.68 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.68 (2013)'), ('smart canonical title', 'Episode #5.68'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.68 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.68 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.68'), ('canonical episode title', 'Episode #5.68'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.68')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348230\",\n            \"season_number\": 5,\n            \"episode_number\": 68,\n            \"running_number\": 258,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-10\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.68\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 717,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.69 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.69 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.037Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.266Z\",\n            \"updated\": \"2019-07-08T11:47:43.037Z\",\n            \"extra_data\": \"[('title', 'Episode #5.69'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 69), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.69'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.69 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.69 (2013)'), ('smart canonical title', 'Episode #5.69'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.69 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.69 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.69'), ('canonical episode title', 'Episode #5.69'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.69')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348232\",\n            \"season_number\": 5,\n            \"episode_number\": 69,\n            \"running_number\": 259,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-11\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.69\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 718,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.70 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.70 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.043Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.274Z\",\n            \"updated\": \"2019-07-08T11:47:43.043Z\",\n            \"extra_data\": \"[('title', 'Episode #5.70'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 70), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.70'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.70 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.70 (2013)'), ('smart canonical title', 'Episode #5.70'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.70 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.70 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.70'), ('canonical episode title', 'Episode #5.70'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.70')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348234\",\n            \"season_number\": 5,\n            \"episode_number\": 70,\n            \"running_number\": 260,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-12\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.70\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 719,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.71 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.71 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.048Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.286Z\",\n            \"updated\": \"2019-07-08T11:47:43.048Z\",\n            \"extra_data\": \"[('title', 'Episode #5.71'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 71), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.71'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.71 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.71 (2013)'), ('smart canonical title', 'Episode #5.71'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.71 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.71 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.71'), ('canonical episode title', 'Episode #5.71'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.71')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348240\",\n            \"season_number\": 5,\n            \"episode_number\": 71,\n            \"running_number\": 261,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-13\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.71\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 720,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.72 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.72 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.055Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.294Z\",\n            \"updated\": \"2019-07-08T11:47:43.055Z\",\n            \"extra_data\": \"[('title', 'Episode #5.72'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 72), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.72'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.72 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.72 (2013)'), ('smart canonical title', 'Episode #5.72'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.72 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.72 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.72'), ('canonical episode title', 'Episode #5.72'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.72')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348238\",\n            \"season_number\": 5,\n            \"episode_number\": 72,\n            \"running_number\": 262,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-14\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.72\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 721,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.73 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.73 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.061Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.302Z\",\n            \"updated\": \"2019-07-08T11:47:43.061Z\",\n            \"extra_data\": \"[('title', 'Episode #5.73'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 73), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.73'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.73 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.73 (2013)'), ('smart canonical title', 'Episode #5.73'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.73 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.73 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.73'), ('canonical episode title', 'Episode #5.73'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.73')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348242\",\n            \"season_number\": 5,\n            \"episode_number\": 73,\n            \"running_number\": 263,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-15\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.73\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 722,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.74 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.74 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.068Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.309Z\",\n            \"updated\": \"2019-07-08T11:47:43.068Z\",\n            \"extra_data\": \"[('title', 'Episode #5.74'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 74), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.74'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.74 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.74 (2013)'), ('smart canonical title', 'Episode #5.74'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.74 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.74 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.74'), ('canonical episode title', 'Episode #5.74'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.74')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348244\",\n            \"season_number\": 5,\n            \"episode_number\": 74,\n            \"running_number\": 264,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-16\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.74\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 723,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.75 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.75 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.075Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.317Z\",\n            \"updated\": \"2019-07-08T11:47:43.075Z\",\n            \"extra_data\": \"[('title', 'Episode #5.75'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 75), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.75'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.75 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.75 (2013)'), ('smart canonical title', 'Episode #5.75'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.75 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.75 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.75'), ('canonical episode title', 'Episode #5.75'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.75')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348246\",\n            \"season_number\": 5,\n            \"episode_number\": 75,\n            \"running_number\": 265,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-17\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.75\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 724,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.76 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.76 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.081Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.325Z\",\n            \"updated\": \"2019-07-08T11:47:43.081Z\",\n            \"extra_data\": \"[('title', 'Episode #5.76'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 76), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.76'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.76 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.76 (2013)'), ('smart canonical title', 'Episode #5.76'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.76 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.76 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.76'), ('canonical episode title', 'Episode #5.76'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.76')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348248\",\n            \"season_number\": 5,\n            \"episode_number\": 76,\n            \"running_number\": 266,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-18\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.76\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 725,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.77 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.77 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.088Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.334Z\",\n            \"updated\": \"2019-07-08T11:47:43.088Z\",\n            \"extra_data\": \"[('title', 'Episode #5.77'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 77), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.77'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.77 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.77 (2013)'), ('smart canonical title', 'Episode #5.77'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.77 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.77 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.77'), ('canonical episode title', 'Episode #5.77'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.77')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348250\",\n            \"season_number\": 5,\n            \"episode_number\": 77,\n            \"running_number\": 267,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-19\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.77\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 726,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.78 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.78 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.095Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.342Z\",\n            \"updated\": \"2019-07-08T11:47:43.095Z\",\n            \"extra_data\": \"[('title', 'Episode #5.78'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 78), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.78'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.78 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.78 (2013)'), ('smart canonical title', 'Episode #5.78'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.78 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.78 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.78'), ('canonical episode title', 'Episode #5.78'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.78')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348252\",\n            \"season_number\": 5,\n            \"episode_number\": 78,\n            \"running_number\": 268,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-20\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.78\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 727,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.79 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.79 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.102Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.350Z\",\n            \"updated\": \"2019-07-08T11:47:43.102Z\",\n            \"extra_data\": \"[('title', 'Episode #5.79'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 79), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.79'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.79 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.79 (2013)'), ('smart canonical title', 'Episode #5.79'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.79 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.79 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.79'), ('canonical episode title', 'Episode #5.79'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.79')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348254\",\n            \"season_number\": 5,\n            \"episode_number\": 79,\n            \"running_number\": 269,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-21\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.79\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 728,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.80 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.80 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.108Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.358Z\",\n            \"updated\": \"2019-07-08T11:47:43.108Z\",\n            \"extra_data\": \"[('title', 'Episode #5.80'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 80), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.80'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.80 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.80 (2013)'), ('smart canonical title', 'Episode #5.80'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.80 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.80 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.80'), ('canonical episode title', 'Episode #5.80'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.80')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348258\",\n            \"season_number\": 5,\n            \"episode_number\": 80,\n            \"running_number\": 270,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-22\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.80\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 729,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.81 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.81 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.114Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.366Z\",\n            \"updated\": \"2019-07-08T11:47:43.114Z\",\n            \"extra_data\": \"[('title', 'Episode #5.81'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 81), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.81'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.81 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.81 (2013)'), ('smart canonical title', 'Episode #5.81'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.81 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.81 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.81'), ('canonical episode title', 'Episode #5.81'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.81')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348262\",\n            \"season_number\": 5,\n            \"episode_number\": 81,\n            \"running_number\": 271,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-23\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.81\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 730,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.82 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.82 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.120Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.374Z\",\n            \"updated\": \"2019-07-08T11:47:43.120Z\",\n            \"extra_data\": \"[('title', 'Episode #5.82'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 82), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.82'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.82 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.82 (2013)'), ('smart canonical title', 'Episode #5.82'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.82 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.82 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.82'), ('canonical episode title', 'Episode #5.82'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.82')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348260\",\n            \"season_number\": 5,\n            \"episode_number\": 82,\n            \"running_number\": 272,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-24\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.82\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 731,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.83 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.83 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.126Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.382Z\",\n            \"updated\": \"2019-07-08T11:47:43.126Z\",\n            \"extra_data\": \"[('title', 'Episode #5.83'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 83), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.83'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.83 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.83 (2013)'), ('smart canonical title', 'Episode #5.83'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.83 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.83 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.83'), ('canonical episode title', 'Episode #5.83'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.83')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348264\",\n            \"season_number\": 5,\n            \"episode_number\": 83,\n            \"running_number\": 273,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-25\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.83\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 732,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.84 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.84 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.132Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.389Z\",\n            \"updated\": \"2019-07-08T11:47:43.132Z\",\n            \"extra_data\": \"[('title', 'Episode #5.84'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 84), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.84'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.84 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.84 (2013)'), ('smart canonical title', 'Episode #5.84'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.84 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.84 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.84'), ('canonical episode title', 'Episode #5.84'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.84')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10348266\",\n            \"season_number\": 5,\n            \"episode_number\": 84,\n            \"running_number\": 274,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-26\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.84\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 733,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.85 (2013)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.85 (2013)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.138Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.398Z\",\n            \"updated\": \"2019-07-08T11:47:43.138Z\",\n            \"extra_data\": \"[('title', 'Episode #5.85'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 5), ('episode', 85), ('rating', 12345678910.0), ('original air date', '2013'), ('year', '2013'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #5.85'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.85 (2013)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.85 (2013)'), ('smart canonical title', 'Episode #5.85'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.85 (2013)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #5.85 (2013)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #5.85'), ('canonical episode title', 'Episode #5.85'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #5.85')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326734\",\n            \"season_number\": 5,\n            \"episode_number\": 85,\n            \"running_number\": 275,\n            \"original_air_date_from_source\": \"2013\",\n            \"original_air_date\": \"2013-03-27\",\n            \"year\": 2013,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #5.85\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 734,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.1 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.1 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.144Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.405Z\",\n            \"updated\": \"2019-07-08T11:47:43.144Z\",\n            \"extra_data\": \"[('title', 'Episode #6.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.1 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.1 (2014)'), ('smart canonical title', 'Episode #6.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.1 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.1 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.1'), ('canonical episode title', 'Episode #6.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326738\",\n            \"season_number\": 6,\n            \"episode_number\": 1,\n            \"running_number\": 276,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-02\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 735,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.2 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.2 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.150Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.414Z\",\n            \"updated\": \"2019-07-08T11:47:43.150Z\",\n            \"extra_data\": \"[('title', 'Episode #6.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.2 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.2 (2014)'), ('smart canonical title', 'Episode #6.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.2 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.2 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.2'), ('canonical episode title', 'Episode #6.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326740\",\n            \"season_number\": 6,\n            \"episode_number\": 2,\n            \"running_number\": 277,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-03\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 736,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.3 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.3 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.156Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.422Z\",\n            \"updated\": \"2019-07-08T11:47:43.156Z\",\n            \"extra_data\": \"[('title', 'Episode #6.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.3 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.3 (2014)'), ('smart canonical title', 'Episode #6.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.3 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.3 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.3'), ('canonical episode title', 'Episode #6.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326742\",\n            \"season_number\": 6,\n            \"episode_number\": 3,\n            \"running_number\": 278,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-04\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 737,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.4 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.4 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.430Z\",\n            \"updated\": \"2019-07-08T11:47:43.161Z\",\n            \"extra_data\": \"[('title', 'Episode #6.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.4 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.4 (2014)'), ('smart canonical title', 'Episode #6.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.4 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.4 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.4'), ('canonical episode title', 'Episode #6.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326744\",\n            \"season_number\": 6,\n            \"episode_number\": 4,\n            \"running_number\": 279,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-05\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 738,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.5 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.5 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.168Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.438Z\",\n            \"updated\": \"2019-07-08T11:47:43.168Z\",\n            \"extra_data\": \"[('title', 'Episode #6.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.5 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.5 (2014)'), ('smart canonical title', 'Episode #6.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.5 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.5 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.5'), ('canonical episode title', 'Episode #6.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326746\",\n            \"season_number\": 6,\n            \"episode_number\": 5,\n            \"running_number\": 280,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-06\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 739,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.6 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.6 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.174Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.448Z\",\n            \"updated\": \"2019-07-08T11:47:43.174Z\",\n            \"extra_data\": \"[('title', 'Episode #6.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.6 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.6 (2014)'), ('smart canonical title', 'Episode #6.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.6 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.6 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.6'), ('canonical episode title', 'Episode #6.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326754\",\n            \"season_number\": 6,\n            \"episode_number\": 6,\n            \"running_number\": 281,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-07\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 740,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.9 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.9 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.180Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.456Z\",\n            \"updated\": \"2019-07-08T11:47:43.180Z\",\n            \"extra_data\": \"[('title', 'Episode #6.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.9 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.9 (2014)'), ('smart canonical title', 'Episode #6.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.9 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.9 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.9'), ('canonical episode title', 'Episode #6.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326758\",\n            \"season_number\": 6,\n            \"episode_number\": 9,\n            \"running_number\": 282,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-10\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 741,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.10 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.10 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.186Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.464Z\",\n            \"updated\": \"2019-07-08T11:47:43.186Z\",\n            \"extra_data\": \"[('title', 'Episode #6.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.10 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.10 (2014)'), ('smart canonical title', 'Episode #6.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.10 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.10 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.10'), ('canonical episode title', 'Episode #6.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326760\",\n            \"season_number\": 6,\n            \"episode_number\": 10,\n            \"running_number\": 283,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-11\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 742,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.11 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.11 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.192Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.473Z\",\n            \"updated\": \"2019-07-08T11:47:43.192Z\",\n            \"extra_data\": \"[('title', 'Episode #6.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.11 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.11 (2014)'), ('smart canonical title', 'Episode #6.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.11 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.11 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.11'), ('canonical episode title', 'Episode #6.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328150\",\n            \"season_number\": 6,\n            \"episode_number\": 11,\n            \"running_number\": 284,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-12\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 743,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.12 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.12 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.198Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.482Z\",\n            \"updated\": \"2019-07-08T11:47:43.198Z\",\n            \"extra_data\": \"[('title', 'Episode #6.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.12 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.12 (2014)'), ('smart canonical title', 'Episode #6.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.12 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.12 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.12'), ('canonical episode title', 'Episode #6.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328152\",\n            \"season_number\": 6,\n            \"episode_number\": 12,\n            \"running_number\": 285,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-13\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 744,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.13 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.13 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.292Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.490Z\",\n            \"updated\": \"2019-07-08T11:47:43.292Z\",\n            \"extra_data\": \"[('title', 'Episode #6.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.13 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.13 (2014)'), ('smart canonical title', 'Episode #6.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.13 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.13 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.13'), ('canonical episode title', 'Episode #6.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328154\",\n            \"season_number\": 6,\n            \"episode_number\": 13,\n            \"running_number\": 286,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-14\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 745,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.14 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.14 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.298Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.498Z\",\n            \"updated\": \"2019-07-08T11:47:43.298Z\",\n            \"extra_data\": \"[('title', 'Episode #6.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.14 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.14 (2014)'), ('smart canonical title', 'Episode #6.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.14 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.14 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.14'), ('canonical episode title', 'Episode #6.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328158\",\n            \"season_number\": 6,\n            \"episode_number\": 14,\n            \"running_number\": 287,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-15\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 746,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.15 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.15 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.304Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.507Z\",\n            \"updated\": \"2019-07-08T11:47:43.304Z\",\n            \"extra_data\": \"[('title', 'Episode #6.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.15 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.15 (2014)'), ('smart canonical title', 'Episode #6.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.15 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.15 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.15'), ('canonical episode title', 'Episode #6.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326748\",\n            \"season_number\": 6,\n            \"episode_number\": 15,\n            \"running_number\": 288,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-16\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 747,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.16 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.16 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.310Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.516Z\",\n            \"updated\": \"2019-07-08T11:47:43.310Z\",\n            \"extra_data\": \"[('title', 'Episode #6.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.16 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.16 (2014)'), ('smart canonical title', 'Episode #6.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.16 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.16 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.16'), ('canonical episode title', 'Episode #6.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328160\",\n            \"season_number\": 6,\n            \"episode_number\": 16,\n            \"running_number\": 289,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-17\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 748,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.17 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.17 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.525Z\",\n            \"updated\": \"2019-07-08T11:47:43.316Z\",\n            \"extra_data\": \"[('title', 'Episode #6.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.17 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.17 (2014)'), ('smart canonical title', 'Episode #6.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.17 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.17 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.17'), ('canonical episode title', 'Episode #6.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328162\",\n            \"season_number\": 6,\n            \"episode_number\": 17,\n            \"running_number\": 290,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-18\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 749,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.18 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.18 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.322Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.534Z\",\n            \"updated\": \"2019-07-08T11:47:43.322Z\",\n            \"extra_data\": \"[('title', 'Episode #6.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.18 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.18 (2014)'), ('smart canonical title', 'Episode #6.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.18 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.18 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.18'), ('canonical episode title', 'Episode #6.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328164\",\n            \"season_number\": 6,\n            \"episode_number\": 18,\n            \"running_number\": 291,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-19\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 750,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.19 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.19 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.327Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.543Z\",\n            \"updated\": \"2019-07-08T11:47:43.327Z\",\n            \"extra_data\": \"[('title', 'Episode #6.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.19 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.19 (2014)'), ('smart canonical title', 'Episode #6.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.19 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.19 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.19'), ('canonical episode title', 'Episode #6.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328166\",\n            \"season_number\": 6,\n            \"episode_number\": 19,\n            \"running_number\": 292,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-20\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 751,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.20 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.20 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.333Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.551Z\",\n            \"updated\": \"2019-07-08T11:47:43.333Z\",\n            \"extra_data\": \"[('title', 'Episode #6.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.20 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.20 (2014)'), ('smart canonical title', 'Episode #6.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.20 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.20 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.20'), ('canonical episode title', 'Episode #6.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328170\",\n            \"season_number\": 6,\n            \"episode_number\": 20,\n            \"running_number\": 293,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-21\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 752,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.21 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.21 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.339Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.559Z\",\n            \"updated\": \"2019-07-08T11:47:43.339Z\",\n            \"extra_data\": \"[('title', 'Episode #6.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.21 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.21 (2014)'), ('smart canonical title', 'Episode #6.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.21 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.21 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.21'), ('canonical episode title', 'Episode #6.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336886\",\n            \"season_number\": 6,\n            \"episode_number\": 21,\n            \"running_number\": 294,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-22\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 753,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.22 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.22 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.346Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.566Z\",\n            \"updated\": \"2019-07-08T11:47:43.346Z\",\n            \"extra_data\": \"[('title', 'Episode #6.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.22 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.22 (2014)'), ('smart canonical title', 'Episode #6.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.22 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.22 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.22'), ('canonical episode title', 'Episode #6.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336884\",\n            \"season_number\": 6,\n            \"episode_number\": 22,\n            \"running_number\": 295,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-23\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 754,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.23 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.23 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.352Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.576Z\",\n            \"updated\": \"2019-07-08T11:47:43.352Z\",\n            \"extra_data\": \"[('title', 'Episode #6.23'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 23), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.23'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.23 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.23 (2014)'), ('smart canonical title', 'Episode #6.23'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.23 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.23 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.23'), ('canonical episode title', 'Episode #6.23'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.23')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336888\",\n            \"season_number\": 6,\n            \"episode_number\": 23,\n            \"running_number\": 296,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-24\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.23\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 755,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.24 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.24 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.358Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.585Z\",\n            \"updated\": \"2019-07-08T11:47:43.358Z\",\n            \"extra_data\": \"[('title', 'Episode #6.24'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 24), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.24'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.24 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.24 (2014)'), ('smart canonical title', 'Episode #6.24'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.24 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.24 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.24'), ('canonical episode title', 'Episode #6.24'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.24')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336892\",\n            \"season_number\": 6,\n            \"episode_number\": 24,\n            \"running_number\": 297,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-25\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.24\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 756,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.25 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.25 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.364Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.592Z\",\n            \"updated\": \"2019-07-08T11:47:43.364Z\",\n            \"extra_data\": \"[('title', 'Episode #6.25'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 25), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.25'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.25 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.25 (2014)'), ('smart canonical title', 'Episode #6.25'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.25 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.25 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.25'), ('canonical episode title', 'Episode #6.25'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.25')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336890\",\n            \"season_number\": 6,\n            \"episode_number\": 25,\n            \"running_number\": 298,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-26\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.25\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 757,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.26 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.26 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.370Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.600Z\",\n            \"updated\": \"2019-07-08T11:47:43.370Z\",\n            \"extra_data\": \"[('title', 'Episode #6.26'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 26), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.26'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.26 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.26 (2014)'), ('smart canonical title', 'Episode #6.26'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.26 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.26 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.26'), ('canonical episode title', 'Episode #6.26'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.26')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336896\",\n            \"season_number\": 6,\n            \"episode_number\": 26,\n            \"running_number\": 299,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-27\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.26\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 758,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.27 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.27 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.376Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.666Z\",\n            \"updated\": \"2019-07-08T11:47:43.376Z\",\n            \"extra_data\": \"[('title', 'Episode #6.27'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 27), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.27'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.27 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.27 (2014)'), ('smart canonical title', 'Episode #6.27'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.27 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.27 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.27'), ('canonical episode title', 'Episode #6.27'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.27')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336898\",\n            \"season_number\": 6,\n            \"episode_number\": 27,\n            \"running_number\": 300,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-28\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.27\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 759,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.28 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.28 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.383Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.674Z\",\n            \"updated\": \"2019-07-08T11:47:43.383Z\",\n            \"extra_data\": \"[('title', 'Episode #6.28'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 28), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.28'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.28 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.28 (2014)'), ('smart canonical title', 'Episode #6.28'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.28 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.28 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.28'), ('canonical episode title', 'Episode #6.28'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.28')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336900\",\n            \"season_number\": 6,\n            \"episode_number\": 28,\n            \"running_number\": 301,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-29\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.28\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 760,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.29 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.29 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.389Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.682Z\",\n            \"updated\": \"2019-07-08T11:47:43.389Z\",\n            \"extra_data\": \"[('title', 'Episode #6.29'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 29), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.29'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.29 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.29 (2014)'), ('smart canonical title', 'Episode #6.29'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.29 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.29 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.29'), ('canonical episode title', 'Episode #6.29'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.29')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336902\",\n            \"season_number\": 6,\n            \"episode_number\": 29,\n            \"running_number\": 302,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-30\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.29\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 761,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.30 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.30 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.396Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.689Z\",\n            \"updated\": \"2019-07-08T11:47:43.396Z\",\n            \"extra_data\": \"[('title', 'Episode #6.30'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 30), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.30'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.30 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.30 (2014)'), ('smart canonical title', 'Episode #6.30'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.30 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.30 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.30'), ('canonical episode title', 'Episode #6.30'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.30')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336904\",\n            \"season_number\": 6,\n            \"episode_number\": 30,\n            \"running_number\": 303,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-01-31\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.30\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 762,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.31 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.31 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.402Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.697Z\",\n            \"updated\": \"2019-07-08T11:47:43.402Z\",\n            \"extra_data\": \"[('title', 'Episode #6.31'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 31), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.31'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.31 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.31 (2014)'), ('smart canonical title', 'Episode #6.31'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.31 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.31 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.31'), ('canonical episode title', 'Episode #6.31'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.31')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336906\",\n            \"season_number\": 6,\n            \"episode_number\": 31,\n            \"running_number\": 304,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-01\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.31\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 763,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.32 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.32 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.408Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.705Z\",\n            \"updated\": \"2019-07-08T11:47:43.408Z\",\n            \"extra_data\": \"[('title', 'Episode #6.32'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 32), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.32'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.32 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.32 (2014)'), ('smart canonical title', 'Episode #6.32'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.32 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.32 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.32'), ('canonical episode title', 'Episode #6.32'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.32')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336908\",\n            \"season_number\": 6,\n            \"episode_number\": 32,\n            \"running_number\": 305,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-02\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.32\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 764,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.33 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.33 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.713Z\",\n            \"updated\": \"2019-07-08T11:47:43.414Z\",\n            \"extra_data\": \"[('title', 'Episode #6.33'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 33), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.33'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.33 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.33 (2014)'), ('smart canonical title', 'Episode #6.33'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.33 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.33 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.33'), ('canonical episode title', 'Episode #6.33'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.33')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336910\",\n            \"season_number\": 6,\n            \"episode_number\": 33,\n            \"running_number\": 306,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-03\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.33\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 765,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.34 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.34 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.420Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.722Z\",\n            \"updated\": \"2019-07-08T11:47:43.420Z\",\n            \"extra_data\": \"[('title', 'Episode #6.34'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 34), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.34'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.34 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.34 (2014)'), ('smart canonical title', 'Episode #6.34'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.34 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.34 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.34'), ('canonical episode title', 'Episode #6.34'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.34')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336914\",\n            \"season_number\": 6,\n            \"episode_number\": 34,\n            \"running_number\": 307,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-04\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.34\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 766,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.35 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.35 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.427Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.730Z\",\n            \"updated\": \"2019-07-08T11:47:43.427Z\",\n            \"extra_data\": \"[('title', 'Episode #6.35'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 35), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.35'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.35 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.35 (2014)'), ('smart canonical title', 'Episode #6.35'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.35 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.35 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.35'), ('canonical episode title', 'Episode #6.35'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.35')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336916\",\n            \"season_number\": 6,\n            \"episode_number\": 35,\n            \"running_number\": 308,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-05\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.35\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 767,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.36 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.36 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.432Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.739Z\",\n            \"updated\": \"2019-07-08T11:47:43.432Z\",\n            \"extra_data\": \"[('title', 'Episode #6.36'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 36), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.36'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.36 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.36 (2014)'), ('smart canonical title', 'Episode #6.36'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.36 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.36 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.36'), ('canonical episode title', 'Episode #6.36'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.36')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336920\",\n            \"season_number\": 6,\n            \"episode_number\": 36,\n            \"running_number\": 309,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-06\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.36\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 768,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.37 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.37 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.752Z\",\n            \"updated\": \"2019-07-08T11:47:43.438Z\",\n            \"extra_data\": \"[('title', 'Episode #6.37'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 37), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.37'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.37 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.37 (2014)'), ('smart canonical title', 'Episode #6.37'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.37 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.37 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.37'), ('canonical episode title', 'Episode #6.37'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.37')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326752\",\n            \"season_number\": 6,\n            \"episode_number\": 37,\n            \"running_number\": 310,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-07\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.37\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 769,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.38 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.38 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.445Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.761Z\",\n            \"updated\": \"2019-07-08T11:47:43.445Z\",\n            \"extra_data\": \"[('title', 'Episode #6.38'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 38), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.38'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.38 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.38 (2014)'), ('smart canonical title', 'Episode #6.38'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.38 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.38 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.38'), ('canonical episode title', 'Episode #6.38'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.38')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336922\",\n            \"season_number\": 6,\n            \"episode_number\": 38,\n            \"running_number\": 311,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-08\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.38\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 770,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.39 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.39 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.451Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.769Z\",\n            \"updated\": \"2019-07-08T11:47:43.451Z\",\n            \"extra_data\": \"[('title', 'Episode #6.39'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 39), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.39'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.39 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.39 (2014)'), ('smart canonical title', 'Episode #6.39'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.39 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.39 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.39'), ('canonical episode title', 'Episode #6.39'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.39')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336926\",\n            \"season_number\": 6,\n            \"episode_number\": 39,\n            \"running_number\": 312,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-09\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.39\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 771,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.40 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.40 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.458Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.777Z\",\n            \"updated\": \"2019-07-08T11:47:43.458Z\",\n            \"extra_data\": \"[('title', 'Episode #6.40'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 40), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.40'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.40 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.40 (2014)'), ('smart canonical title', 'Episode #6.40'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.40 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.40 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.40'), ('canonical episode title', 'Episode #6.40'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.40')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336928\",\n            \"season_number\": 6,\n            \"episode_number\": 40,\n            \"running_number\": 313,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-10\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.40\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 772,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.41 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.41 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.785Z\",\n            \"updated\": \"2019-07-08T11:47:43.463Z\",\n            \"extra_data\": \"[('title', 'Episode #6.41'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 41), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.41'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.41 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.41 (2014)'), ('smart canonical title', 'Episode #6.41'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.41 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.41 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.41'), ('canonical episode title', 'Episode #6.41'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.41')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338876\",\n            \"season_number\": 6,\n            \"episode_number\": 41,\n            \"running_number\": 314,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-11\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.41\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 773,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.42 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.42 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.470Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.794Z\",\n            \"updated\": \"2019-07-08T11:47:43.470Z\",\n            \"extra_data\": \"[('title', 'Episode #6.42'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 42), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.42'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.42 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.42 (2014)'), ('smart canonical title', 'Episode #6.42'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.42 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.42 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.42'), ('canonical episode title', 'Episode #6.42'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.42')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338878\",\n            \"season_number\": 6,\n            \"episode_number\": 42,\n            \"running_number\": 315,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-12\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.42\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 774,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.43 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.43 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.476Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.803Z\",\n            \"updated\": \"2019-07-08T11:47:43.476Z\",\n            \"extra_data\": \"[('title', 'Episode #6.43'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 43), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.43'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.43 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.43 (2014)'), ('smart canonical title', 'Episode #6.43'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.43 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.43 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.43'), ('canonical episode title', 'Episode #6.43'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.43')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338882\",\n            \"season_number\": 6,\n            \"episode_number\": 43,\n            \"running_number\": 316,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-13\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.43\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 775,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.44 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.44 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.482Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.811Z\",\n            \"updated\": \"2019-07-08T11:47:43.482Z\",\n            \"extra_data\": \"[('title', 'Episode #6.44'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 44), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.44'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.44 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.44 (2014)'), ('smart canonical title', 'Episode #6.44'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.44 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.44 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.44'), ('canonical episode title', 'Episode #6.44'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.44')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338884\",\n            \"season_number\": 6,\n            \"episode_number\": 44,\n            \"running_number\": 317,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-14\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.44\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 776,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.45 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.45 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.488Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.819Z\",\n            \"updated\": \"2019-07-08T11:47:43.488Z\",\n            \"extra_data\": \"[('title', 'Episode #6.45'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 45), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.45'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.45 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.45 (2014)'), ('smart canonical title', 'Episode #6.45'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.45 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.45 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.45'), ('canonical episode title', 'Episode #6.45'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.45')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338888\",\n            \"season_number\": 6,\n            \"episode_number\": 45,\n            \"running_number\": 318,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-15\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.45\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 777,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.46 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.46 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.495Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.827Z\",\n            \"updated\": \"2019-07-08T11:47:43.495Z\",\n            \"extra_data\": \"[('title', 'Episode #6.46'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 46), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.46'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.46 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.46 (2014)'), ('smart canonical title', 'Episode #6.46'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.46 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.46 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.46'), ('canonical episode title', 'Episode #6.46'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.46')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338890\",\n            \"season_number\": 6,\n            \"episode_number\": 46,\n            \"running_number\": 319,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-16\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.46\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 778,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.47 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.47 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.501Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.835Z\",\n            \"updated\": \"2019-07-08T11:47:43.501Z\",\n            \"extra_data\": \"[('title', 'Episode #6.47'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 47), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.47'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.47 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.47 (2014)'), ('smart canonical title', 'Episode #6.47'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.47 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.47 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.47'), ('canonical episode title', 'Episode #6.47'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.47')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338896\",\n            \"season_number\": 6,\n            \"episode_number\": 47,\n            \"running_number\": 320,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-17\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.47\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 779,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.48 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.48 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.507Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.843Z\",\n            \"updated\": \"2019-07-08T11:47:43.507Z\",\n            \"extra_data\": \"[('title', 'Episode #6.48'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 48), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.48'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.48 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.48 (2014)'), ('smart canonical title', 'Episode #6.48'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.48 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.48 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.48'), ('canonical episode title', 'Episode #6.48'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.48')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338898\",\n            \"season_number\": 6,\n            \"episode_number\": 48,\n            \"running_number\": 321,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-18\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.48\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 780,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.49 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.49 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.515Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.852Z\",\n            \"updated\": \"2019-07-08T11:47:43.515Z\",\n            \"extra_data\": \"[('title', 'Episode #6.49'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 49), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.49'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.49 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.49 (2014)'), ('smart canonical title', 'Episode #6.49'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.49 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.49 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.49'), ('canonical episode title', 'Episode #6.49'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.49')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338902\",\n            \"season_number\": 6,\n            \"episode_number\": 49,\n            \"running_number\": 322,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-19\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.49\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 781,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.50 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.50 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.523Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.860Z\",\n            \"updated\": \"2019-07-08T11:47:43.523Z\",\n            \"extra_data\": \"[('title', 'Episode #6.50'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 50), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.50'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.50 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.50 (2014)'), ('smart canonical title', 'Episode #6.50'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.50 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.50 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.50'), ('canonical episode title', 'Episode #6.50'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.50')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338904\",\n            \"season_number\": 6,\n            \"episode_number\": 50,\n            \"running_number\": 323,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-20\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.50\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 782,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.51 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.51 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.530Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.871Z\",\n            \"updated\": \"2019-07-08T11:47:43.530Z\",\n            \"extra_data\": \"[('title', 'Episode #6.51'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 51), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.51'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.51 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.51 (2014)'), ('smart canonical title', 'Episode #6.51'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.51 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.51 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.51'), ('canonical episode title', 'Episode #6.51'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.51')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338906\",\n            \"season_number\": 6,\n            \"episode_number\": 51,\n            \"running_number\": 324,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-21\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.51\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 783,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.52 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.52 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.539Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.880Z\",\n            \"updated\": \"2019-07-08T11:47:43.539Z\",\n            \"extra_data\": \"[('title', 'Episode #6.52'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 52), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.52'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.52 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.52 (2014)'), ('smart canonical title', 'Episode #6.52'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.52 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.52 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.52'), ('canonical episode title', 'Episode #6.52'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.52')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326750\",\n            \"season_number\": 6,\n            \"episode_number\": 52,\n            \"running_number\": 325,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-22\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.52\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 784,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.53 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.53 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.545Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.889Z\",\n            \"updated\": \"2019-07-08T11:47:43.545Z\",\n            \"extra_data\": \"[('title', 'Episode #6.53'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 53), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.53'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.53 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.53 (2014)'), ('smart canonical title', 'Episode #6.53'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.53 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.53 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.53'), ('canonical episode title', 'Episode #6.53'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.53')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338908\",\n            \"season_number\": 6,\n            \"episode_number\": 53,\n            \"running_number\": 326,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-23\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.53\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 785,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.54 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.54 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.552Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.899Z\",\n            \"updated\": \"2019-07-08T11:47:43.552Z\",\n            \"extra_data\": \"[('title', 'Episode #6.54'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 54), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.54'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.54 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.54 (2014)'), ('smart canonical title', 'Episode #6.54'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.54 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.54 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.54'), ('canonical episode title', 'Episode #6.54'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.54')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338912\",\n            \"season_number\": 6,\n            \"episode_number\": 54,\n            \"running_number\": 327,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-24\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.54\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 786,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.55 (2014)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.55 (2014)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.558Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.909Z\",\n            \"updated\": \"2019-07-08T11:47:43.558Z\",\n            \"extra_data\": \"[('title', 'Episode #6.55'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 6), ('episode', 55), ('rating', 12345678910.0), ('original air date', '2014'), ('year', '2014'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #6.55'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.55 (2014)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.55 (2014)'), ('smart canonical title', 'Episode #6.55'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.55 (2014)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #6.55 (2014)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #6.55'), ('canonical episode title', 'Episode #6.55'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #6.55')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338910\",\n            \"season_number\": 6,\n            \"episode_number\": 55,\n            \"running_number\": 328,\n            \"original_air_date_from_source\": \"2014\",\n            \"original_air_date\": \"2014-02-25\",\n            \"year\": 2014,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #6.55\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 787,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.1 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.1 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.566Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.918Z\",\n            \"updated\": \"2019-07-08T11:47:43.566Z\",\n            \"extra_data\": \"[('title', 'Episode #7.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.1 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.1 (2015)'), ('smart canonical title', 'Episode #7.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.1 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.1 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.1'), ('canonical episode title', 'Episode #7.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326766\",\n            \"season_number\": 7,\n            \"episode_number\": 1,\n            \"running_number\": 329,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-02\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 788,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.2 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.2 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.927Z\",\n            \"updated\": \"2019-07-08T11:47:43.575Z\",\n            \"extra_data\": \"[('title', 'Episode #7.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.2 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.2 (2015)'), ('smart canonical title', 'Episode #7.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.2 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.2 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.2'), ('canonical episode title', 'Episode #7.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326770\",\n            \"season_number\": 7,\n            \"episode_number\": 2,\n            \"running_number\": 330,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-03\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 789,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.3 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.3 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.935Z\",\n            \"updated\": \"2019-07-08T11:47:43.582Z\",\n            \"extra_data\": \"[('title', 'Episode #7.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.3 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.3 (2015)'), ('smart canonical title', 'Episode #7.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.3 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.3 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.3'), ('canonical episode title', 'Episode #7.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326768\",\n            \"season_number\": 7,\n            \"episode_number\": 3,\n            \"running_number\": 331,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-04\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 790,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.4 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.4 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.589Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.944Z\",\n            \"updated\": \"2019-07-08T11:47:43.589Z\",\n            \"extra_data\": \"[('title', 'Episode #7.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.4 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.4 (2015)'), ('smart canonical title', 'Episode #7.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.4 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.4 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.4'), ('canonical episode title', 'Episode #7.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326772\",\n            \"season_number\": 7,\n            \"episode_number\": 4,\n            \"running_number\": 332,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-05\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 791,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.5 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.5 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.596Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.953Z\",\n            \"updated\": \"2019-07-08T11:47:43.596Z\",\n            \"extra_data\": \"[('title', 'Episode #7.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.5 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.5 (2015)'), ('smart canonical title', 'Episode #7.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.5 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.5 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.5'), ('canonical episode title', 'Episode #7.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326774\",\n            \"season_number\": 7,\n            \"episode_number\": 5,\n            \"running_number\": 333,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-06\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 792,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.6 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.6 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.602Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.961Z\",\n            \"updated\": \"2019-07-08T11:47:43.602Z\",\n            \"extra_data\": \"[('title', 'Episode #7.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.6 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.6 (2015)'), ('smart canonical title', 'Episode #7.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.6 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.6 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.6'), ('canonical episode title', 'Episode #7.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326782\",\n            \"season_number\": 7,\n            \"episode_number\": 6,\n            \"running_number\": 334,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-07\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 793,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.7 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.7 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.609Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.969Z\",\n            \"updated\": \"2019-07-08T11:47:43.609Z\",\n            \"extra_data\": \"[('title', 'Episode #7.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.7 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.7 (2015)'), ('smart canonical title', 'Episode #7.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.7 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.7 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.7'), ('canonical episode title', 'Episode #7.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326780\",\n            \"season_number\": 7,\n            \"episode_number\": 7,\n            \"running_number\": 335,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-08\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 794,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.8 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.8 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.978Z\",\n            \"updated\": \"2019-07-08T11:47:43.617Z\",\n            \"extra_data\": \"[('title', 'Episode #7.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.8 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.8 (2015)'), ('smart canonical title', 'Episode #7.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.8 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.8 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.8'), ('canonical episode title', 'Episode #7.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326784\",\n            \"season_number\": 7,\n            \"episode_number\": 8,\n            \"running_number\": 336,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-09\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 795,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.9 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.9 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.623Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.987Z\",\n            \"updated\": \"2019-07-08T11:47:43.623Z\",\n            \"extra_data\": \"[('title', 'Episode #7.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.9 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.9 (2015)'), ('smart canonical title', 'Episode #7.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.9 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.9 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.9'), ('canonical episode title', 'Episode #7.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326788\",\n            \"season_number\": 7,\n            \"episode_number\": 9,\n            \"running_number\": 337,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-10\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 796,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.10 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.10 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.628Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:11.995Z\",\n            \"updated\": \"2019-07-08T11:47:43.628Z\",\n            \"extra_data\": \"[('title', 'Episode #7.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.10 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.10 (2015)'), ('smart canonical title', 'Episode #7.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.10 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.10 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.10'), ('canonical episode title', 'Episode #7.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326790\",\n            \"season_number\": 7,\n            \"episode_number\": 10,\n            \"running_number\": 338,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-11\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 797,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.11 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.11 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.634Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.006Z\",\n            \"updated\": \"2019-07-08T11:47:43.635Z\",\n            \"extra_data\": \"[('title', 'Episode #7.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.11 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.11 (2015)'), ('smart canonical title', 'Episode #7.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.11 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.11 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.11'), ('canonical episode title', 'Episode #7.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328126\",\n            \"season_number\": 7,\n            \"episode_number\": 11,\n            \"running_number\": 339,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-12\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 798,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.12 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.12 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.666Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.014Z\",\n            \"updated\": \"2019-07-08T11:47:43.667Z\",\n            \"extra_data\": \"[('title', 'Episode #7.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.12 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.12 (2015)'), ('smart canonical title', 'Episode #7.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.12 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.12 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.12'), ('canonical episode title', 'Episode #7.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328130\",\n            \"season_number\": 7,\n            \"episode_number\": 12,\n            \"running_number\": 340,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-13\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 799,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.13 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.13 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.675Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.021Z\",\n            \"updated\": \"2019-07-08T11:47:43.675Z\",\n            \"extra_data\": \"[('title', 'Episode #7.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.13 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.13 (2015)'), ('smart canonical title', 'Episode #7.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.13 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.13 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.13'), ('canonical episode title', 'Episode #7.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328132\",\n            \"season_number\": 7,\n            \"episode_number\": 13,\n            \"running_number\": 341,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-14\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 800,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.14 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.14 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.028Z\",\n            \"updated\": \"2019-07-08T11:47:43.697Z\",\n            \"extra_data\": \"[('title', 'Episode #7.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.14 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.14 (2015)'), ('smart canonical title', 'Episode #7.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.14 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.14 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.14'), ('canonical episode title', 'Episode #7.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328134\",\n            \"season_number\": 7,\n            \"episode_number\": 14,\n            \"running_number\": 342,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-15\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 801,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.15 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.15 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.036Z\",\n            \"updated\": \"2019-07-08T11:47:43.708Z\",\n            \"extra_data\": \"[('title', 'Episode #7.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.15 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.15 (2015)'), ('smart canonical title', 'Episode #7.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.15 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.15 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.15'), ('canonical episode title', 'Episode #7.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328136\",\n            \"season_number\": 7,\n            \"episode_number\": 15,\n            \"running_number\": 343,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-16\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 802,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.16 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.16 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.717Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.043Z\",\n            \"updated\": \"2019-07-08T11:47:43.717Z\",\n            \"extra_data\": \"[('title', 'Episode #7.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.16 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.16 (2015)'), ('smart canonical title', 'Episode #7.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.16 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.16 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.16'), ('canonical episode title', 'Episode #7.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328138\",\n            \"season_number\": 7,\n            \"episode_number\": 16,\n            \"running_number\": 344,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-17\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 803,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.17 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.17 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.725Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.051Z\",\n            \"updated\": \"2019-07-08T11:47:43.725Z\",\n            \"extra_data\": \"[('title', 'Episode #7.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.17 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.17 (2015)'), ('smart canonical title', 'Episode #7.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.17 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.17 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.17'), ('canonical episode title', 'Episode #7.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328140\",\n            \"season_number\": 7,\n            \"episode_number\": 17,\n            \"running_number\": 345,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-18\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 804,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.18 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.18 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.808Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.059Z\",\n            \"updated\": \"2019-07-08T11:47:43.808Z\",\n            \"extra_data\": \"[('title', 'Episode #7.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.18 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.18 (2015)'), ('smart canonical title', 'Episode #7.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.18 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.18 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.18'), ('canonical episode title', 'Episode #7.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328142\",\n            \"season_number\": 7,\n            \"episode_number\": 18,\n            \"running_number\": 346,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-19\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 805,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.19 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.19 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.814Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.066Z\",\n            \"updated\": \"2019-07-08T11:47:43.814Z\",\n            \"extra_data\": \"[('title', 'Episode #7.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.19 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.19 (2015)'), ('smart canonical title', 'Episode #7.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.19 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.19 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.19'), ('canonical episode title', 'Episode #7.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328144\",\n            \"season_number\": 7,\n            \"episode_number\": 19,\n            \"running_number\": 347,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-20\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 806,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.20 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.20 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.822Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.075Z\",\n            \"updated\": \"2019-07-08T11:47:43.822Z\",\n            \"extra_data\": \"[('title', 'Episode #7.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.20 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.20 (2015)'), ('smart canonical title', 'Episode #7.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.20 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.20 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.20'), ('canonical episode title', 'Episode #7.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328146\",\n            \"season_number\": 7,\n            \"episode_number\": 20,\n            \"running_number\": 348,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-21\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 807,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.21 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.21 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.830Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.083Z\",\n            \"updated\": \"2019-07-08T11:47:43.830Z\",\n            \"extra_data\": \"[('title', 'Episode #7.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.21 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.21 (2015)'), ('smart canonical title', 'Episode #7.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.21 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.21 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.21'), ('canonical episode title', 'Episode #7.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336932\",\n            \"season_number\": 7,\n            \"episode_number\": 21,\n            \"running_number\": 349,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-22\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 808,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.22 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.22 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.836Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.091Z\",\n            \"updated\": \"2019-07-08T11:47:43.836Z\",\n            \"extra_data\": \"[('title', 'Episode #7.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.22 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.22 (2015)'), ('smart canonical title', 'Episode #7.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.22 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.22 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.22'), ('canonical episode title', 'Episode #7.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336936\",\n            \"season_number\": 7,\n            \"episode_number\": 22,\n            \"running_number\": 350,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-23\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 809,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.23 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.23 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.843Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.101Z\",\n            \"updated\": \"2019-07-08T11:47:43.843Z\",\n            \"extra_data\": \"[('title', 'Episode #7.23'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 23), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.23'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.23 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.23 (2015)'), ('smart canonical title', 'Episode #7.23'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.23 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.23 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.23'), ('canonical episode title', 'Episode #7.23'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.23')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336938\",\n            \"season_number\": 7,\n            \"episode_number\": 23,\n            \"running_number\": 351,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-24\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.23\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 810,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.24 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.24 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.850Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.111Z\",\n            \"updated\": \"2019-07-08T11:47:43.850Z\",\n            \"extra_data\": \"[('title', 'Episode #7.24'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 24), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.24'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.24 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.24 (2015)'), ('smart canonical title', 'Episode #7.24'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.24 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.24 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.24'), ('canonical episode title', 'Episode #7.24'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.24')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336942\",\n            \"season_number\": 7,\n            \"episode_number\": 24,\n            \"running_number\": 352,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-25\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.24\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 811,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.25 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.25 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.856Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.123Z\",\n            \"updated\": \"2019-07-08T11:47:43.856Z\",\n            \"extra_data\": \"[('title', 'Episode #7.25'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 25), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.25'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.25 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.25 (2015)'), ('smart canonical title', 'Episode #7.25'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.25 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.25 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.25'), ('canonical episode title', 'Episode #7.25'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.25')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336946\",\n            \"season_number\": 7,\n            \"episode_number\": 25,\n            \"running_number\": 353,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-26\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.25\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 812,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.26 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.26 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.861Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.132Z\",\n            \"updated\": \"2019-07-08T11:47:43.862Z\",\n            \"extra_data\": \"[('title', 'Episode #7.26'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 26), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.26'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.26 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.26 (2015)'), ('smart canonical title', 'Episode #7.26'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.26 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.26 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.26'), ('canonical episode title', 'Episode #7.26'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.26')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336950\",\n            \"season_number\": 7,\n            \"episode_number\": 26,\n            \"running_number\": 354,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-27\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.26\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 813,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.27 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.27 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.867Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.140Z\",\n            \"updated\": \"2019-07-08T11:47:43.867Z\",\n            \"extra_data\": \"[('title', 'Episode #7.27'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 27), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.27'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.27 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.27 (2015)'), ('smart canonical title', 'Episode #7.27'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.27 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.27 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.27'), ('canonical episode title', 'Episode #7.27'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.27')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336948\",\n            \"season_number\": 7,\n            \"episode_number\": 27,\n            \"running_number\": 355,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-28\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.27\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 814,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.28 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.28 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.874Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.147Z\",\n            \"updated\": \"2019-07-08T11:47:43.874Z\",\n            \"extra_data\": \"[('title', 'Episode #7.28'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 28), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.28'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.28 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.28 (2015)'), ('smart canonical title', 'Episode #7.28'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.28 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.28 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.28'), ('canonical episode title', 'Episode #7.28'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.28')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336952\",\n            \"season_number\": 7,\n            \"episode_number\": 28,\n            \"running_number\": 356,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-29\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.28\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 815,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.29 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.29 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.155Z\",\n            \"updated\": \"2019-07-08T11:47:43.880Z\",\n            \"extra_data\": \"[('title', 'Episode #7.29'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 29), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.29'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.29 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.29 (2015)'), ('smart canonical title', 'Episode #7.29'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.29 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.29 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.29'), ('canonical episode title', 'Episode #7.29'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.29')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336954\",\n            \"season_number\": 7,\n            \"episode_number\": 29,\n            \"running_number\": 357,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-30\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.29\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 816,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.30 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.30 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.887Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.163Z\",\n            \"updated\": \"2019-07-08T11:47:43.887Z\",\n            \"extra_data\": \"[('title', 'Episode #7.30'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 30), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.30'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.30 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.30 (2015)'), ('smart canonical title', 'Episode #7.30'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.30 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.30 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.30'), ('canonical episode title', 'Episode #7.30'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.30')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336956\",\n            \"season_number\": 7,\n            \"episode_number\": 30,\n            \"running_number\": 358,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-01-31\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.30\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 817,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.31 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.31 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.899Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.172Z\",\n            \"updated\": \"2019-07-08T11:47:43.899Z\",\n            \"extra_data\": \"[('title', 'Episode #7.31'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 31), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.31'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.31 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.31 (2015)'), ('smart canonical title', 'Episode #7.31'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.31 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.31 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.31'), ('canonical episode title', 'Episode #7.31'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.31')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338838\",\n            \"season_number\": 7,\n            \"episode_number\": 31,\n            \"running_number\": 359,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-01\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.31\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 818,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.32 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.32 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.180Z\",\n            \"updated\": \"2019-07-08T11:47:43.906Z\",\n            \"extra_data\": \"[('title', 'Episode #7.32'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 32), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.32'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.32 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.32 (2015)'), ('smart canonical title', 'Episode #7.32'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.32 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.32 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.32'), ('canonical episode title', 'Episode #7.32'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.32')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338842\",\n            \"season_number\": 7,\n            \"episode_number\": 32,\n            \"running_number\": 360,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-02\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.32\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 819,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.33 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.33 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.912Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.188Z\",\n            \"updated\": \"2019-07-08T11:47:43.912Z\",\n            \"extra_data\": \"[('title', 'Episode #7.33'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 33), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.33'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.33 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.33 (2015)'), ('smart canonical title', 'Episode #7.33'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.33 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.33 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.33'), ('canonical episode title', 'Episode #7.33'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.33')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338840\",\n            \"season_number\": 7,\n            \"episode_number\": 33,\n            \"running_number\": 361,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-03\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.33\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 820,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.34 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.34 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.196Z\",\n            \"updated\": \"2019-07-08T11:47:43.918Z\",\n            \"extra_data\": \"[('title', 'Episode #7.34'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 34), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.34'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.34 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.34 (2015)'), ('smart canonical title', 'Episode #7.34'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.34 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.34 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.34'), ('canonical episode title', 'Episode #7.34'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.34')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338844\",\n            \"season_number\": 7,\n            \"episode_number\": 34,\n            \"running_number\": 362,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-04\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.34\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 821,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.35 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.35 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.924Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.204Z\",\n            \"updated\": \"2019-07-08T11:47:43.924Z\",\n            \"extra_data\": \"[('title', 'Episode #7.35'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 35), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.35'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.35 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.35 (2015)'), ('smart canonical title', 'Episode #7.35'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.35 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.35 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.35'), ('canonical episode title', 'Episode #7.35'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.35')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338846\",\n            \"season_number\": 7,\n            \"episode_number\": 35,\n            \"running_number\": 363,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-05\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.35\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 822,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.36 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.36 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.212Z\",\n            \"updated\": \"2019-07-08T11:47:43.929Z\",\n            \"extra_data\": \"[('title', 'Episode #7.36'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 36), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.36'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.36 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.36 (2015)'), ('smart canonical title', 'Episode #7.36'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.36 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.36 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.36'), ('canonical episode title', 'Episode #7.36'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.36')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338848\",\n            \"season_number\": 7,\n            \"episode_number\": 36,\n            \"running_number\": 364,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-06\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.36\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 823,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.37 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.37 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.935Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.220Z\",\n            \"updated\": \"2019-07-08T11:47:43.935Z\",\n            \"extra_data\": \"[('title', 'Episode #7.37'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 37), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.37'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.37 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.37 (2015)'), ('smart canonical title', 'Episode #7.37'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.37 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.37 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.37'), ('canonical episode title', 'Episode #7.37'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.37')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338850\",\n            \"season_number\": 7,\n            \"episode_number\": 37,\n            \"running_number\": 365,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-07\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.37\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 824,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.38 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.38 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.940Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.229Z\",\n            \"updated\": \"2019-07-08T11:47:43.940Z\",\n            \"extra_data\": \"[('title', 'Episode #7.38'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 38), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.38'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.38 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.38 (2015)'), ('smart canonical title', 'Episode #7.38'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.38 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.38 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.38'), ('canonical episode title', 'Episode #7.38'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.38')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338852\",\n            \"season_number\": 7,\n            \"episode_number\": 38,\n            \"running_number\": 366,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-08\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.38\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 825,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.39 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.39 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.237Z\",\n            \"updated\": \"2019-07-08T11:47:43.946Z\",\n            \"extra_data\": \"[('title', 'Episode #7.39'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 39), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.39'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.39 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.39 (2015)'), ('smart canonical title', 'Episode #7.39'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.39 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.39 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.39'), ('canonical episode title', 'Episode #7.39'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.39')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338854\",\n            \"season_number\": 7,\n            \"episode_number\": 39,\n            \"running_number\": 367,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-09\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.39\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 826,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.40 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.40 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.952Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.245Z\",\n            \"updated\": \"2019-07-08T11:47:43.952Z\",\n            \"extra_data\": \"[('title', 'Episode #7.40'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 40), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.40'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.40 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.40 (2015)'), ('smart canonical title', 'Episode #7.40'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.40 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.40 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.40'), ('canonical episode title', 'Episode #7.40'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.40')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338856\",\n            \"season_number\": 7,\n            \"episode_number\": 40,\n            \"running_number\": 368,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-10\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.40\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 827,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.41 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.41 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.959Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.254Z\",\n            \"updated\": \"2019-07-08T11:47:43.959Z\",\n            \"extra_data\": \"[('title', 'Episode #7.41'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 41), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.41'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.41 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.41 (2015)'), ('smart canonical title', 'Episode #7.41'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.41 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.41 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.41'), ('canonical episode title', 'Episode #7.41'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.41')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338860\",\n            \"season_number\": 7,\n            \"episode_number\": 41,\n            \"running_number\": 369,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-11\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.41\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 828,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.42 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.42 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.964Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.262Z\",\n            \"updated\": \"2019-07-08T11:47:43.964Z\",\n            \"extra_data\": \"[('title', 'Episode #7.42'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 42), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.42'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.42 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.42 (2015)'), ('smart canonical title', 'Episode #7.42'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.42 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.42 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.42'), ('canonical episode title', 'Episode #7.42'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.42')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338858\",\n            \"season_number\": 7,\n            \"episode_number\": 42,\n            \"running_number\": 370,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-12\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.42\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 829,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.43 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.43 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.971Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.270Z\",\n            \"updated\": \"2019-07-08T11:47:43.971Z\",\n            \"extra_data\": \"[('title', 'Episode #7.43'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 43), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.43'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.43 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.43 (2015)'), ('smart canonical title', 'Episode #7.43'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.43 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.43 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.43'), ('canonical episode title', 'Episode #7.43'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.43')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338864\",\n            \"season_number\": 7,\n            \"episode_number\": 43,\n            \"running_number\": 371,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-13\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.43\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 830,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.44 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.44 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.978Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.278Z\",\n            \"updated\": \"2019-07-08T11:47:43.978Z\",\n            \"extra_data\": \"[('title', 'Episode #7.44'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 44), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.44'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.44 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.44 (2015)'), ('smart canonical title', 'Episode #7.44'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.44 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.44 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.44'), ('canonical episode title', 'Episode #7.44'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.44')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338868\",\n            \"season_number\": 7,\n            \"episode_number\": 44,\n            \"running_number\": 372,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-14\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.44\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 831,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.45 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.45 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.984Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.289Z\",\n            \"updated\": \"2019-07-08T11:47:43.984Z\",\n            \"extra_data\": \"[('title', 'Episode #7.45'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 45), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.45'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.45 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.45 (2015)'), ('smart canonical title', 'Episode #7.45'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.45 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.45 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.45'), ('canonical episode title', 'Episode #7.45'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.45')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338866\",\n            \"season_number\": 7,\n            \"episode_number\": 45,\n            \"running_number\": 373,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-15\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.45\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 832,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.46 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.46 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.990Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.297Z\",\n            \"updated\": \"2019-07-08T11:47:43.990Z\",\n            \"extra_data\": \"[('title', 'Episode #7.46'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 46), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.46'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.46 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.46 (2015)'), ('smart canonical title', 'Episode #7.46'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.46 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.46 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.46'), ('canonical episode title', 'Episode #7.46'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.46')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338870\",\n            \"season_number\": 7,\n            \"episode_number\": 46,\n            \"running_number\": 374,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-16\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.46\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 833,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.47 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.47 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:43.996Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.306Z\",\n            \"updated\": \"2019-07-08T11:47:43.996Z\",\n            \"extra_data\": \"[('title', 'Episode #7.47'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 47), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.47'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.47 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.47 (2015)'), ('smart canonical title', 'Episode #7.47'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.47 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.47 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.47'), ('canonical episode title', 'Episode #7.47'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.47')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338872\",\n            \"season_number\": 7,\n            \"episode_number\": 47,\n            \"running_number\": 375,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-17\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.47\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 834,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.48 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.48 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.003Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.315Z\",\n            \"updated\": \"2019-07-08T11:47:44.003Z\",\n            \"extra_data\": \"[('title', 'Episode #7.48'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 48), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.48'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.48 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.48 (2015)'), ('smart canonical title', 'Episode #7.48'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.48 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.48 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.48'), ('canonical episode title', 'Episode #7.48'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.48')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338874\",\n            \"season_number\": 7,\n            \"episode_number\": 48,\n            \"running_number\": 376,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-18\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.48\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 835,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.49 (2015)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.49 (2015)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.325Z\",\n            \"updated\": \"2019-07-08T11:47:44.010Z\",\n            \"extra_data\": \"[('title', 'Episode #7.49'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 7), ('episode', 49), ('rating', 12345678910.0), ('original air date', '2015'), ('year', '2015'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #7.49'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.49 (2015)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.49 (2015)'), ('smart canonical title', 'Episode #7.49'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.49 (2015)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #7.49 (2015)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #7.49'), ('canonical episode title', 'Episode #7.49'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #7.49')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326778\",\n            \"season_number\": 7,\n            \"episode_number\": 49,\n            \"running_number\": 377,\n            \"original_air_date_from_source\": \"2015\",\n            \"original_air_date\": \"2015-02-19\",\n            \"year\": 2015,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #7.49\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 836,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.1 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.1 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.016Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.344Z\",\n            \"updated\": \"2019-07-08T11:47:44.016Z\",\n            \"extra_data\": \"[('title', 'Episode #8.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.1 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.1 (2016)'), ('smart canonical title', 'Episode #8.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.1 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.1 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.1'), ('canonical episode title', 'Episode #8.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326794\",\n            \"season_number\": 8,\n            \"episode_number\": 1,\n            \"running_number\": 378,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-02\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 837,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.2 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.2 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.022Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.356Z\",\n            \"updated\": \"2019-07-08T11:47:44.022Z\",\n            \"extra_data\": \"[('title', 'Episode #8.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.2 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.2 (2016)'), ('smart canonical title', 'Episode #8.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.2 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.2 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.2'), ('canonical episode title', 'Episode #8.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326796\",\n            \"season_number\": 8,\n            \"episode_number\": 2,\n            \"running_number\": 379,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-03\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 838,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.3 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.3 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.364Z\",\n            \"updated\": \"2019-07-08T11:47:44.028Z\",\n            \"extra_data\": \"[('title', 'Episode #8.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.3 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.3 (2016)'), ('smart canonical title', 'Episode #8.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.3 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.3 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.3'), ('canonical episode title', 'Episode #8.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326802\",\n            \"season_number\": 8,\n            \"episode_number\": 3,\n            \"running_number\": 380,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-04\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 839,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.4 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.4 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.034Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.375Z\",\n            \"updated\": \"2019-07-08T11:47:44.034Z\",\n            \"extra_data\": \"[('title', 'Episode #8.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.4 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.4 (2016)'), ('smart canonical title', 'Episode #8.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.4 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.4 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.4'), ('canonical episode title', 'Episode #8.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326800\",\n            \"season_number\": 8,\n            \"episode_number\": 4,\n            \"running_number\": 381,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-05\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 840,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.5 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.5 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.041Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.386Z\",\n            \"updated\": \"2019-07-08T11:47:44.041Z\",\n            \"extra_data\": \"[('title', 'Episode #8.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.5 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.5 (2016)'), ('smart canonical title', 'Episode #8.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.5 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.5 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.5'), ('canonical episode title', 'Episode #8.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326804\",\n            \"season_number\": 8,\n            \"episode_number\": 5,\n            \"running_number\": 382,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-06\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 841,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.6 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.6 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.047Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.394Z\",\n            \"updated\": \"2019-07-08T11:47:44.048Z\",\n            \"extra_data\": \"[('title', 'Episode #8.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.6 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.6 (2016)'), ('smart canonical title', 'Episode #8.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.6 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.6 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.6'), ('canonical episode title', 'Episode #8.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326808\",\n            \"season_number\": 8,\n            \"episode_number\": 6,\n            \"running_number\": 383,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-07\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 842,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.7 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.7 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.054Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.404Z\",\n            \"updated\": \"2019-07-08T11:47:44.054Z\",\n            \"extra_data\": \"[('title', 'Episode #8.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.7 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.7 (2016)'), ('smart canonical title', 'Episode #8.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.7 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.7 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.7'), ('canonical episode title', 'Episode #8.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326810\",\n            \"season_number\": 8,\n            \"episode_number\": 7,\n            \"running_number\": 384,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-08\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 843,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.8 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.8 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.060Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.412Z\",\n            \"updated\": \"2019-07-08T11:47:44.060Z\",\n            \"extra_data\": \"[('title', 'Episode #8.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.8 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.8 (2016)'), ('smart canonical title', 'Episode #8.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.8 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.8 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.8'), ('canonical episode title', 'Episode #8.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326812\",\n            \"season_number\": 8,\n            \"episode_number\": 8,\n            \"running_number\": 385,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-09\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 844,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.9 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.9 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.066Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.423Z\",\n            \"updated\": \"2019-07-08T11:47:44.066Z\",\n            \"extra_data\": \"[('title', 'Episode #8.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.9 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.9 (2016)'), ('smart canonical title', 'Episode #8.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.9 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.9 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.9'), ('canonical episode title', 'Episode #8.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326814\",\n            \"season_number\": 8,\n            \"episode_number\": 9,\n            \"running_number\": 386,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-10\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 845,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.10 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.10 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.072Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.433Z\",\n            \"updated\": \"2019-07-08T11:47:44.072Z\",\n            \"extra_data\": \"[('title', 'Episode #8.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.10 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.10 (2016)'), ('smart canonical title', 'Episode #8.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.10 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.10 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.10'), ('canonical episode title', 'Episode #8.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326816\",\n            \"season_number\": 8,\n            \"episode_number\": 10,\n            \"running_number\": 387,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-11\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 846,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.11 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.11 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.077Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.443Z\",\n            \"updated\": \"2019-07-08T11:47:44.077Z\",\n            \"extra_data\": \"[('title', 'Episode #8.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.11 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.11 (2016)'), ('smart canonical title', 'Episode #8.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.11 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.11 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.11'), ('canonical episode title', 'Episode #8.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328100\",\n            \"season_number\": 8,\n            \"episode_number\": 11,\n            \"running_number\": 388,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-12\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 847,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.12 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.12 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.084Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.453Z\",\n            \"updated\": \"2019-07-08T11:47:44.084Z\",\n            \"extra_data\": \"[('title', 'Episode #8.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.12 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.12 (2016)'), ('smart canonical title', 'Episode #8.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.12 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.12 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.12'), ('canonical episode title', 'Episode #8.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328098\",\n            \"season_number\": 8,\n            \"episode_number\": 12,\n            \"running_number\": 389,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-13\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 848,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.13 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.13 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.089Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.461Z\",\n            \"updated\": \"2019-07-08T11:47:44.089Z\",\n            \"extra_data\": \"[('title', 'Episode #8.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.13 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.13 (2016)'), ('smart canonical title', 'Episode #8.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.13 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.13 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.13'), ('canonical episode title', 'Episode #8.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328104\",\n            \"season_number\": 8,\n            \"episode_number\": 13,\n            \"running_number\": 390,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-14\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 849,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.14 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.14 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.096Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.483Z\",\n            \"updated\": \"2019-07-08T11:47:44.096Z\",\n            \"extra_data\": \"[('title', 'Episode #8.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.14 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.14 (2016)'), ('smart canonical title', 'Episode #8.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.14 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.14 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.14'), ('canonical episode title', 'Episode #8.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328108\",\n            \"season_number\": 8,\n            \"episode_number\": 14,\n            \"running_number\": 391,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-15\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 850,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.15 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.15 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.107Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.494Z\",\n            \"updated\": \"2019-07-08T11:47:44.107Z\",\n            \"extra_data\": \"[('title', 'Episode #8.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.15 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.15 (2016)'), ('smart canonical title', 'Episode #8.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.15 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.15 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.15'), ('canonical episode title', 'Episode #8.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328110\",\n            \"season_number\": 8,\n            \"episode_number\": 15,\n            \"running_number\": 392,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-16\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 851,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.16 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.16 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.113Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.504Z\",\n            \"updated\": \"2019-07-08T11:47:44.113Z\",\n            \"extra_data\": \"[('title', 'Episode #8.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.16 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.16 (2016)'), ('smart canonical title', 'Episode #8.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.16 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.16 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.16'), ('canonical episode title', 'Episode #8.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328112\",\n            \"season_number\": 8,\n            \"episode_number\": 16,\n            \"running_number\": 393,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-17\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 852,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.17 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.17 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.119Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.512Z\",\n            \"updated\": \"2019-07-08T11:47:44.119Z\",\n            \"extra_data\": \"[('title', 'Episode #8.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.17 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.17 (2016)'), ('smart canonical title', 'Episode #8.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.17 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.17 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.17'), ('canonical episode title', 'Episode #8.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328114\",\n            \"season_number\": 8,\n            \"episode_number\": 17,\n            \"running_number\": 394,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-18\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 853,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.18 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.18 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.126Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.521Z\",\n            \"updated\": \"2019-07-08T11:47:44.126Z\",\n            \"extra_data\": \"[('title', 'Episode #8.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.18 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.18 (2016)'), ('smart canonical title', 'Episode #8.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.18 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.18 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.18'), ('canonical episode title', 'Episode #8.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328116\",\n            \"season_number\": 8,\n            \"episode_number\": 18,\n            \"running_number\": 395,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-19\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 854,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.19 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.19 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.133Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.530Z\",\n            \"updated\": \"2019-07-08T11:47:44.133Z\",\n            \"extra_data\": \"[('title', 'Episode #8.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.19 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.19 (2016)'), ('smart canonical title', 'Episode #8.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.19 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.19 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.19'), ('canonical episode title', 'Episode #8.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328120\",\n            \"season_number\": 8,\n            \"episode_number\": 19,\n            \"running_number\": 396,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-20\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 855,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.20 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.20 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.139Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.538Z\",\n            \"updated\": \"2019-07-08T11:47:44.139Z\",\n            \"extra_data\": \"[('title', 'Episode #8.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.20 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.20 (2016)'), ('smart canonical title', 'Episode #8.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.20 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.20 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.20'), ('canonical episode title', 'Episode #8.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328122\",\n            \"season_number\": 8,\n            \"episode_number\": 20,\n            \"running_number\": 397,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-21\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 856,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.21 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.21 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.145Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.546Z\",\n            \"updated\": \"2019-07-08T11:47:44.145Z\",\n            \"extra_data\": \"[('title', 'Episode #8.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.21 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.21 (2016)'), ('smart canonical title', 'Episode #8.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.21 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.21 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.21'), ('canonical episode title', 'Episode #8.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336964\",\n            \"season_number\": 8,\n            \"episode_number\": 21,\n            \"running_number\": 398,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-22\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 857,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.22 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.22 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.150Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.554Z\",\n            \"updated\": \"2019-07-08T11:47:44.150Z\",\n            \"extra_data\": \"[('title', 'Episode #8.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.22 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.22 (2016)'), ('smart canonical title', 'Episode #8.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.22 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.22 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.22'), ('canonical episode title', 'Episode #8.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336966\",\n            \"season_number\": 8,\n            \"episode_number\": 22,\n            \"running_number\": 399,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-23\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 858,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.23 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.23 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.157Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.565Z\",\n            \"updated\": \"2019-07-08T11:47:44.157Z\",\n            \"extra_data\": \"[('title', 'Episode #8.23'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 23), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.23'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.23 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.23 (2016)'), ('smart canonical title', 'Episode #8.23'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.23 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.23 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.23'), ('canonical episode title', 'Episode #8.23'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.23')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336970\",\n            \"season_number\": 8,\n            \"episode_number\": 23,\n            \"running_number\": 400,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-24\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.23\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 859,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.24 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.24 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.581Z\",\n            \"updated\": \"2019-07-08T11:47:44.164Z\",\n            \"extra_data\": \"[('title', 'Episode #8.24'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 24), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.24'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.24 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.24 (2016)'), ('smart canonical title', 'Episode #8.24'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.24 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.24 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.24'), ('canonical episode title', 'Episode #8.24'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.24')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336968\",\n            \"season_number\": 8,\n            \"episode_number\": 24,\n            \"running_number\": 401,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-25\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.24\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 860,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.25 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.25 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.170Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.595Z\",\n            \"updated\": \"2019-07-08T11:47:44.170Z\",\n            \"extra_data\": \"[('title', 'Episode #8.25'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 25), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.25'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.25 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.25 (2016)'), ('smart canonical title', 'Episode #8.25'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.25 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.25 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.25'), ('canonical episode title', 'Episode #8.25'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.25')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336972\",\n            \"season_number\": 8,\n            \"episode_number\": 25,\n            \"running_number\": 402,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-26\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.25\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 861,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.26 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.26 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.602Z\",\n            \"updated\": \"2019-07-08T11:47:44.177Z\",\n            \"extra_data\": \"[('title', 'Episode #8.26'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 26), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.26'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.26 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.26 (2016)'), ('smart canonical title', 'Episode #8.26'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.26 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.26 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.26'), ('canonical episode title', 'Episode #8.26'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.26')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336976\",\n            \"season_number\": 8,\n            \"episode_number\": 26,\n            \"running_number\": 403,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-27\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.26\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 862,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.27 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.27 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.184Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.610Z\",\n            \"updated\": \"2019-07-08T11:47:44.184Z\",\n            \"extra_data\": \"[('title', 'Episode #8.27'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 27), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.27'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.27 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.27 (2016)'), ('smart canonical title', 'Episode #8.27'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.27 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.27 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.27'), ('canonical episode title', 'Episode #8.27'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.27')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336978\",\n            \"season_number\": 8,\n            \"episode_number\": 27,\n            \"running_number\": 404,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-28\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.27\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 863,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.28 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.28 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.619Z\",\n            \"updated\": \"2019-07-08T11:47:44.191Z\",\n            \"extra_data\": \"[('title', 'Episode #8.28'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 28), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.28'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.28 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.28 (2016)'), ('smart canonical title', 'Episode #8.28'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.28 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.28 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.28'), ('canonical episode title', 'Episode #8.28'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.28')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336984\",\n            \"season_number\": 8,\n            \"episode_number\": 28,\n            \"running_number\": 405,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-29\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.28\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 864,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.29 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.29 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.197Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.628Z\",\n            \"updated\": \"2019-07-08T11:47:44.197Z\",\n            \"extra_data\": \"[('title', 'Episode #8.29'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 29), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.29'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.29 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.29 (2016)'), ('smart canonical title', 'Episode #8.29'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.29 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.29 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.29'), ('canonical episode title', 'Episode #8.29'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.29')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336982\",\n            \"season_number\": 8,\n            \"episode_number\": 29,\n            \"running_number\": 406,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-30\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.29\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 865,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.30 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.30 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.203Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.639Z\",\n            \"updated\": \"2019-07-08T11:47:44.203Z\",\n            \"extra_data\": \"[('title', 'Episode #8.30'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 30), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.30'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.30 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.30 (2016)'), ('smart canonical title', 'Episode #8.30'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.30 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.30 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.30'), ('canonical episode title', 'Episode #8.30'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.30')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336986\",\n            \"season_number\": 8,\n            \"episode_number\": 30,\n            \"running_number\": 407,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-01-31\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.30\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 866,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.31 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.31 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.209Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.668Z\",\n            \"updated\": \"2019-07-08T11:47:44.210Z\",\n            \"extra_data\": \"[('title', 'Episode #8.31'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 31), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.31'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.31 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.31 (2016)'), ('smart canonical title', 'Episode #8.31'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.31 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.31 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.31'), ('canonical episode title', 'Episode #8.31'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.31')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336990\",\n            \"season_number\": 8,\n            \"episode_number\": 31,\n            \"running_number\": 408,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-01\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.31\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 867,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.32 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.32 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.215Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.677Z\",\n            \"updated\": \"2019-07-08T11:47:44.216Z\",\n            \"extra_data\": \"[('title', 'Episode #8.32'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 32), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.32'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.32 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.32 (2016)'), ('smart canonical title', 'Episode #8.32'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.32 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.32 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.32'), ('canonical episode title', 'Episode #8.32'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.32')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336994\",\n            \"season_number\": 8,\n            \"episode_number\": 32,\n            \"running_number\": 409,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-02\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.32\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 868,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.33 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.33 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.222Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.687Z\",\n            \"updated\": \"2019-07-08T11:47:44.222Z\",\n            \"extra_data\": \"[('title', 'Episode #8.33'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 33), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.33'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.33 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.33 (2016)'), ('smart canonical title', 'Episode #8.33'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.33 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.33 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.33'), ('canonical episode title', 'Episode #8.33'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.33')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336992\",\n            \"season_number\": 8,\n            \"episode_number\": 33,\n            \"running_number\": 410,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-03\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.33\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 869,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.34 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.34 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.228Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.696Z\",\n            \"updated\": \"2019-07-08T11:47:44.228Z\",\n            \"extra_data\": \"[('title', 'Episode #8.34'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 34), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.34'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.34 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.34 (2016)'), ('smart canonical title', 'Episode #8.34'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.34 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.34 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.34'), ('canonical episode title', 'Episode #8.34'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.34')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336998\",\n            \"season_number\": 8,\n            \"episode_number\": 34,\n            \"running_number\": 411,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-04\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.34\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 870,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.35 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.35 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.235Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.706Z\",\n            \"updated\": \"2019-07-08T11:47:44.235Z\",\n            \"extra_data\": \"[('title', 'Episode #8.35'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 35), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.35'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.35 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.35 (2016)'), ('smart canonical title', 'Episode #8.35'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.35 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.35 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.35'), ('canonical episode title', 'Episode #8.35'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.35')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10336996\",\n            \"season_number\": 8,\n            \"episode_number\": 35,\n            \"running_number\": 412,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-05\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.35\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 871,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.36 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.36 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.241Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.714Z\",\n            \"updated\": \"2019-07-08T11:47:44.241Z\",\n            \"extra_data\": \"[('title', 'Episode #8.36'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 36), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.36'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.36 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.36 (2016)'), ('smart canonical title', 'Episode #8.36'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.36 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.36 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.36'), ('canonical episode title', 'Episode #8.36'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.36')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10337002\",\n            \"season_number\": 8,\n            \"episode_number\": 36,\n            \"running_number\": 413,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-06\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.36\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 872,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.37 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.37 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.247Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.727Z\",\n            \"updated\": \"2019-07-08T11:47:44.247Z\",\n            \"extra_data\": \"[('title', 'Episode #8.37'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 37), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.37'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.37 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.37 (2016)'), ('smart canonical title', 'Episode #8.37'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.37 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.37 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.37'), ('canonical episode title', 'Episode #8.37'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.37')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10337004\",\n            \"season_number\": 8,\n            \"episode_number\": 37,\n            \"running_number\": 414,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-07\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.37\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 873,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.38 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.38 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.254Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.734Z\",\n            \"updated\": \"2019-07-08T11:47:44.254Z\",\n            \"extra_data\": \"[('title', 'Episode #8.38'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 38), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.38'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.38 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.38 (2016)'), ('smart canonical title', 'Episode #8.38'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.38 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.38 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.38'), ('canonical episode title', 'Episode #8.38'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.38')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10337008\",\n            \"season_number\": 8,\n            \"episode_number\": 38,\n            \"running_number\": 415,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-08\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.38\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 874,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.39 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.39 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.260Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.743Z\",\n            \"updated\": \"2019-07-08T11:47:44.260Z\",\n            \"extra_data\": \"[('title', 'Episode #8.39'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 39), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.39'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.39 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.39 (2016)'), ('smart canonical title', 'Episode #8.39'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.39 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.39 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.39'), ('canonical episode title', 'Episode #8.39'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.39')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10337006\",\n            \"season_number\": 8,\n            \"episode_number\": 39,\n            \"running_number\": 416,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-09\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.39\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 875,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.40 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.40 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.267Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.757Z\",\n            \"updated\": \"2019-07-08T11:47:44.267Z\",\n            \"extra_data\": \"[('title', 'Episode #8.40'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 40), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.40'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.40 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.40 (2016)'), ('smart canonical title', 'Episode #8.40'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.40 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.40 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.40'), ('canonical episode title', 'Episode #8.40'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.40')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10337010\",\n            \"season_number\": 8,\n            \"episode_number\": 40,\n            \"running_number\": 417,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-10\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.40\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 876,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.41 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.41 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.273Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.769Z\",\n            \"updated\": \"2019-07-08T11:47:44.273Z\",\n            \"extra_data\": \"[('title', 'Episode #8.41'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 41), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.41'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.41 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.41 (2016)'), ('smart canonical title', 'Episode #8.41'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.41 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.41 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.41'), ('canonical episode title', 'Episode #8.41'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.41')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338806\",\n            \"season_number\": 8,\n            \"episode_number\": 41,\n            \"running_number\": 418,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-11\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.41\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 877,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.42 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.42 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.280Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.776Z\",\n            \"updated\": \"2019-07-08T11:47:44.280Z\",\n            \"extra_data\": \"[('title', 'Episode #8.42'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 42), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.42'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.42 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.42 (2016)'), ('smart canonical title', 'Episode #8.42'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.42 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.42 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.42'), ('canonical episode title', 'Episode #8.42'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.42')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338804\",\n            \"season_number\": 8,\n            \"episode_number\": 42,\n            \"running_number\": 419,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-12\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.42\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 878,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.43 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.43 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.801Z\",\n            \"updated\": \"2019-07-08T11:47:44.286Z\",\n            \"extra_data\": \"[('title', 'Episode #8.43'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 43), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.43'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.43 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.43 (2016)'), ('smart canonical title', 'Episode #8.43'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.43 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.43 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.43'), ('canonical episode title', 'Episode #8.43'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.43')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338810\",\n            \"season_number\": 8,\n            \"episode_number\": 43,\n            \"running_number\": 420,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-13\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.43\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 879,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.44 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.44 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.293Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.808Z\",\n            \"updated\": \"2019-07-08T11:47:44.293Z\",\n            \"extra_data\": \"[('title', 'Episode #8.44'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 44), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.44'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.44 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.44 (2016)'), ('smart canonical title', 'Episode #8.44'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.44 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.44 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.44'), ('canonical episode title', 'Episode #8.44'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.44')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338814\",\n            \"season_number\": 8,\n            \"episode_number\": 44,\n            \"running_number\": 421,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-14\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.44\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 880,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.45 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.45 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.299Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.816Z\",\n            \"updated\": \"2019-07-08T11:47:44.299Z\",\n            \"extra_data\": \"[('title', 'Episode #8.45'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 45), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.45'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.45 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.45 (2016)'), ('smart canonical title', 'Episode #8.45'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.45 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.45 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.45'), ('canonical episode title', 'Episode #8.45'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.45')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338816\",\n            \"season_number\": 8,\n            \"episode_number\": 45,\n            \"running_number\": 422,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-15\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.45\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 881,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.46 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.46 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.305Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.823Z\",\n            \"updated\": \"2019-07-08T11:47:44.305Z\",\n            \"extra_data\": \"[('title', 'Episode #8.46'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 46), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.46'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.46 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.46 (2016)'), ('smart canonical title', 'Episode #8.46'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.46 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.46 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.46'), ('canonical episode title', 'Episode #8.46'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.46')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338818\",\n            \"season_number\": 8,\n            \"episode_number\": 46,\n            \"running_number\": 423,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-16\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.46\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 882,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.47 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.47 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.312Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.831Z\",\n            \"updated\": \"2019-07-08T11:47:44.312Z\",\n            \"extra_data\": \"[('title', 'Episode #8.47'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 47), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.47'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.47 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.47 (2016)'), ('smart canonical title', 'Episode #8.47'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.47 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.47 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.47'), ('canonical episode title', 'Episode #8.47'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.47')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338820\",\n            \"season_number\": 8,\n            \"episode_number\": 47,\n            \"running_number\": 424,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-17\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.47\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 883,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.48 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.48 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.318Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.839Z\",\n            \"updated\": \"2019-07-08T11:47:44.318Z\",\n            \"extra_data\": \"[('title', 'Episode #8.48'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 48), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.48'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.48 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.48 (2016)'), ('smart canonical title', 'Episode #8.48'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.48 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.48 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.48'), ('canonical episode title', 'Episode #8.48'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.48')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338822\",\n            \"season_number\": 8,\n            \"episode_number\": 48,\n            \"running_number\": 425,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-18\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.48\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 884,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.49 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.49 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.324Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.846Z\",\n            \"updated\": \"2019-07-08T11:47:44.324Z\",\n            \"extra_data\": \"[('title', 'Episode #8.49'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 49), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.49'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.49 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.49 (2016)'), ('smart canonical title', 'Episode #8.49'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.49 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.49 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.49'), ('canonical episode title', 'Episode #8.49'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.49')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338826\",\n            \"season_number\": 8,\n            \"episode_number\": 49,\n            \"running_number\": 426,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-19\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.49\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 885,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.50 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.50 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.330Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.854Z\",\n            \"updated\": \"2019-07-08T11:47:44.330Z\",\n            \"extra_data\": \"[('title', 'Episode #8.50'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 50), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.50'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.50 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.50 (2016)'), ('smart canonical title', 'Episode #8.50'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.50 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.50 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.50'), ('canonical episode title', 'Episode #8.50'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.50')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338828\",\n            \"season_number\": 8,\n            \"episode_number\": 50,\n            \"running_number\": 427,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-20\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.50\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 886,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.51 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.51 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.335Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.861Z\",\n            \"updated\": \"2019-07-08T11:47:44.335Z\",\n            \"extra_data\": \"[('title', 'Episode #8.51'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 51), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.51'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.51 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.51 (2016)'), ('smart canonical title', 'Episode #8.51'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.51 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.51 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.51'), ('canonical episode title', 'Episode #8.51'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.51')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338830\",\n            \"season_number\": 8,\n            \"episode_number\": 51,\n            \"running_number\": 428,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-21\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.51\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 887,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.52 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.52 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.341Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.870Z\",\n            \"updated\": \"2019-07-08T11:47:44.341Z\",\n            \"extra_data\": \"[('title', 'Episode #8.52'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 52), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.52'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.52 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.52 (2016)'), ('smart canonical title', 'Episode #8.52'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.52 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.52 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.52'), ('canonical episode title', 'Episode #8.52'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.52')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338832\",\n            \"season_number\": 8,\n            \"episode_number\": 52,\n            \"running_number\": 429,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-22\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.52\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 888,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.53 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.53 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.348Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.881Z\",\n            \"updated\": \"2019-07-08T11:47:44.348Z\",\n            \"extra_data\": \"[('title', 'Episode #8.53'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 53), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.53'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.53 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.53 (2016)'), ('smart canonical title', 'Episode #8.53'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.53 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.53 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.53'), ('canonical episode title', 'Episode #8.53'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.53')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10338834\",\n            \"season_number\": 8,\n            \"episode_number\": 53,\n            \"running_number\": 430,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-23\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.53\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 889,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.54 (2016)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.54 (2016)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.354Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.890Z\",\n            \"updated\": \"2019-07-08T11:47:44.354Z\",\n            \"extra_data\": \"[('title', 'Episode #8.54'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 8), ('episode', 54), ('rating', 12345678910.0), ('original air date', '2016'), ('year', '2016'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #8.54'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.54 (2016)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.54 (2016)'), ('smart canonical title', 'Episode #8.54'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.54 (2016)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #8.54 (2016)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #8.54'), ('canonical episode title', 'Episode #8.54'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #8.54')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326806\",\n            \"season_number\": 8,\n            \"episode_number\": 54,\n            \"running_number\": 431,\n            \"original_air_date_from_source\": \"2016\",\n            \"original_air_date\": \"2016-02-24\",\n            \"year\": 2016,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #8.54\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 890,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.1 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.1 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.360Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.899Z\",\n            \"updated\": \"2019-07-08T11:47:44.360Z\",\n            \"extra_data\": \"[('title', 'Episode #9.1'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 1), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.1'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.1 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.1 (2017)'), ('smart canonical title', 'Episode #9.1'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.1 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.1 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.1'), ('canonical episode title', 'Episode #9.1'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.1')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326820\",\n            \"season_number\": 9,\n            \"episode_number\": 1,\n            \"running_number\": 432,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-02\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.1\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 891,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.2 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.2 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.907Z\",\n            \"updated\": \"2019-07-08T11:47:44.366Z\",\n            \"extra_data\": \"[('title', 'Episode #9.2'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.2'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.2 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.2 (2017)'), ('smart canonical title', 'Episode #9.2'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.2 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.2 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.2'), ('canonical episode title', 'Episode #9.2'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.2')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326824\",\n            \"season_number\": 9,\n            \"episode_number\": 2,\n            \"running_number\": 433,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-03\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.2\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 892,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.3 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.3 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.372Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.915Z\",\n            \"updated\": \"2019-07-08T11:47:44.372Z\",\n            \"extra_data\": \"[('title', 'Episode #9.3'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 3), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.3'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.3 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.3 (2017)'), ('smart canonical title', 'Episode #9.3'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.3 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.3 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.3'), ('canonical episode title', 'Episode #9.3'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.3')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326826\",\n            \"season_number\": 9,\n            \"episode_number\": 3,\n            \"running_number\": 434,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-04\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.3\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 893,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.4 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.4 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.923Z\",\n            \"updated\": \"2019-07-08T11:47:44.378Z\",\n            \"extra_data\": \"[('title', 'Episode #9.4'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 4), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.4'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.4 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.4 (2017)'), ('smart canonical title', 'Episode #9.4'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.4 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.4 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.4'), ('canonical episode title', 'Episode #9.4'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.4')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326832\",\n            \"season_number\": 9,\n            \"episode_number\": 4,\n            \"running_number\": 435,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-05\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 894,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.5 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.5 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.385Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.931Z\",\n            \"updated\": \"2019-07-08T11:47:44.385Z\",\n            \"extra_data\": \"[('title', 'Episode #9.5'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 5), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.5'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.5 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.5 (2017)'), ('smart canonical title', 'Episode #9.5'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.5 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.5 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.5'), ('canonical episode title', 'Episode #9.5'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.5')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326834\",\n            \"season_number\": 9,\n            \"episode_number\": 5,\n            \"running_number\": 436,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-06\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 895,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.6 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.6 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.391Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.939Z\",\n            \"updated\": \"2019-07-08T11:47:44.391Z\",\n            \"extra_data\": \"[('title', 'Episode #9.6'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 6), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.6'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.6 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.6 (2017)'), ('smart canonical title', 'Episode #9.6'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.6 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.6 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.6'), ('canonical episode title', 'Episode #9.6'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.6')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326836\",\n            \"season_number\": 9,\n            \"episode_number\": 6,\n            \"running_number\": 437,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-07\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 896,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.7 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.7 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.947Z\",\n            \"updated\": \"2019-07-08T11:47:44.397Z\",\n            \"extra_data\": \"[('title', 'Episode #9.7'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 7), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.7'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.7 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.7 (2017)'), ('smart canonical title', 'Episode #9.7'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.7 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.7 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.7'), ('canonical episode title', 'Episode #9.7'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.7')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326838\",\n            \"season_number\": 9,\n            \"episode_number\": 7,\n            \"running_number\": 438,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-08\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 897,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.8 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.8 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.403Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.956Z\",\n            \"updated\": \"2019-07-08T11:47:44.403Z\",\n            \"extra_data\": \"[('title', 'Episode #9.8'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 8), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.8'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.8 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.8 (2017)'), ('smart canonical title', 'Episode #9.8'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.8 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.8 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.8'), ('canonical episode title', 'Episode #9.8'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.8')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326840\",\n            \"season_number\": 9,\n            \"episode_number\": 8,\n            \"running_number\": 439,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-09\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 898,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.9 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.9 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.409Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.964Z\",\n            \"updated\": \"2019-07-08T11:47:44.409Z\",\n            \"extra_data\": \"[('title', 'Episode #9.9'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 9), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.9'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.9 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.9 (2017)'), ('smart canonical title', 'Episode #9.9'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.9 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.9 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.9'), ('canonical episode title', 'Episode #9.9'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.9')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326842\",\n            \"season_number\": 9,\n            \"episode_number\": 9,\n            \"running_number\": 440,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-10\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 899,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.10 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.10 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.415Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.972Z\",\n            \"updated\": \"2019-07-08T11:47:44.415Z\",\n            \"extra_data\": \"[('title', 'Episode #9.10'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 10), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.10'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.10 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.10 (2017)'), ('smart canonical title', 'Episode #9.10'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.10 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.10 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.10'), ('canonical episode title', 'Episode #9.10'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.10')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326844\",\n            \"season_number\": 9,\n            \"episode_number\": 10,\n            \"running_number\": 441,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-11\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 900,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.11 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.11 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.421Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.982Z\",\n            \"updated\": \"2019-07-08T11:47:44.421Z\",\n            \"extra_data\": \"[('title', 'Episode #9.11'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 11), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.11'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.11 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.11 (2017)'), ('smart canonical title', 'Episode #9.11'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.11 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.11 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.11'), ('canonical episode title', 'Episode #9.11'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.11')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328068\",\n            \"season_number\": 9,\n            \"episode_number\": 11,\n            \"running_number\": 442,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-12\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 901,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.12 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.12 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.428Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.990Z\",\n            \"updated\": \"2019-07-08T11:47:44.428Z\",\n            \"extra_data\": \"[('title', 'Episode #9.12'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 12), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.12'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.12 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.12 (2017)'), ('smart canonical title', 'Episode #9.12'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.12 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.12 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.12'), ('canonical episode title', 'Episode #9.12'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.12')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328066\",\n            \"season_number\": 9,\n            \"episode_number\": 12,\n            \"running_number\": 443,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-13\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 902,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.13 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.13 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.436Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:12.999Z\",\n            \"updated\": \"2019-07-08T11:47:44.436Z\",\n            \"extra_data\": \"[('title', 'Episode #9.13'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 13), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.13'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.13 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.13 (2017)'), ('smart canonical title', 'Episode #9.13'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.13 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.13 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.13'), ('canonical episode title', 'Episode #9.13'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.13')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328070\",\n            \"season_number\": 9,\n            \"episode_number\": 13,\n            \"running_number\": 444,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-14\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.13\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 903,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.14 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.14 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.442Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.007Z\",\n            \"updated\": \"2019-07-08T11:47:44.442Z\",\n            \"extra_data\": \"[('title', 'Episode #9.14'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 14), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.14'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.14 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.14 (2017)'), ('smart canonical title', 'Episode #9.14'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.14 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.14 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.14'), ('canonical episode title', 'Episode #9.14'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.14')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328072\",\n            \"season_number\": 9,\n            \"episode_number\": 14,\n            \"running_number\": 445,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-15\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.14\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 904,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.15 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.15 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.449Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.017Z\",\n            \"updated\": \"2019-07-08T11:47:44.449Z\",\n            \"extra_data\": \"[('title', 'Episode #9.15'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 15), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.15'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.15 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.15 (2017)'), ('smart canonical title', 'Episode #9.15'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.15 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.15 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.15'), ('canonical episode title', 'Episode #9.15'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.15')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328074\",\n            \"season_number\": 9,\n            \"episode_number\": 15,\n            \"running_number\": 446,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-16\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.15\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 905,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.16 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.16 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.458Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.025Z\",\n            \"updated\": \"2019-07-08T11:47:44.458Z\",\n            \"extra_data\": \"[('title', 'Episode #9.16'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 16), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.16'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.16 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.16 (2017)'), ('smart canonical title', 'Episode #9.16'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.16 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.16 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.16'), ('canonical episode title', 'Episode #9.16'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.16')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328078\",\n            \"season_number\": 9,\n            \"episode_number\": 16,\n            \"running_number\": 447,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-17\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.16\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 906,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.17 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.17 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.464Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.034Z\",\n            \"updated\": \"2019-07-08T11:47:44.464Z\",\n            \"extra_data\": \"[('title', 'Episode #9.17'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 17), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.17'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.17 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.17 (2017)'), ('smart canonical title', 'Episode #9.17'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.17 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.17 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.17'), ('canonical episode title', 'Episode #9.17'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.17')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328080\",\n            \"season_number\": 9,\n            \"episode_number\": 17,\n            \"running_number\": 448,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-18\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.17\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 907,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.18 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.18 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.471Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.043Z\",\n            \"updated\": \"2019-07-08T11:47:44.471Z\",\n            \"extra_data\": \"[('title', 'Episode #9.18'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 18), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.18'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.18 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.18 (2017)'), ('smart canonical title', 'Episode #9.18'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.18 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.18 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.18'), ('canonical episode title', 'Episode #9.18'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.18')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328082\",\n            \"season_number\": 9,\n            \"episode_number\": 18,\n            \"running_number\": 449,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-19\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.18\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 908,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.19 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.19 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.477Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.051Z\",\n            \"updated\": \"2019-07-08T11:47:44.477Z\",\n            \"extra_data\": \"[('title', 'Episode #9.19'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 19), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.19'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.19 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.19 (2017)'), ('smart canonical title', 'Episode #9.19'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.19 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.19 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.19'), ('canonical episode title', 'Episode #9.19'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.19')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328084\",\n            \"season_number\": 9,\n            \"episode_number\": 19,\n            \"running_number\": 450,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-20\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.19\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 909,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.20 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.20 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.484Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.060Z\",\n            \"updated\": \"2019-07-08T11:47:44.484Z\",\n            \"extra_data\": \"[('title', 'Episode #9.20'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 20), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.20'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.20 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.20 (2017)'), ('smart canonical title', 'Episode #9.20'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.20 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.20 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.20'), ('canonical episode title', 'Episode #9.20'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.20')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328088\",\n            \"season_number\": 9,\n            \"episode_number\": 20,\n            \"running_number\": 451,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-21\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.20\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 910,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.21 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.21 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.490Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.068Z\",\n            \"updated\": \"2019-07-08T11:47:44.490Z\",\n            \"extra_data\": \"[('title', 'Episode #9.21'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 21), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.21'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.21 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.21 (2017)'), ('smart canonical title', 'Episode #9.21'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.21 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.21 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.21'), ('canonical episode title', 'Episode #9.21'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.21')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10328090\",\n            \"season_number\": 9,\n            \"episode_number\": 21,\n            \"running_number\": 452,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-22\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.21\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 911,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.22 (2017)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.22 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.496Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.076Z\",\n            \"updated\": \"2019-07-08T11:47:44.496Z\",\n            \"extra_data\": \"[('title', 'Episode #9.22'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 9), ('episode', 22), ('rating', 12345678910.0), ('original air date', '2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #9.22'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.22 (2017)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.22 (2017)'), ('smart canonical title', 'Episode #9.22'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.22 (2017)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Episode #9.22 (2017)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Episode #9.22'), ('canonical episode title', 'Episode #9.22'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #9.22')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10326822\",\n            \"season_number\": 9,\n            \"episode_number\": 22,\n            \"running_number\": 453,\n            \"original_air_date_from_source\": \"2017\",\n            \"original_air_date\": \"2017-01-23\",\n            \"year\": 2017,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #9.22\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 912,\n        \"fields\": {\n            \"name\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Phir Bulbulay (2019)\",\n            \"description\": \"\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Phir Bulbulay (2019)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T11:47:44.503Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T10:40:13.085Z\",\n            \"updated\": \"2019-07-08T11:47:44.503Z\",\n            \"extra_data\": \"[('title', 'Phir Bulbulay'), ('kind', 'episode'), ('episode of', <Movie id:4191600[http] title:_\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" (None)_>), ('season', 10), ('episode', 1), ('rating', 12345678910.0), ('original air date', '7 May 2019'), ('year', '2019'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Phir Bulbulay'), ('long imdb title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Phir Bulbulay (2019)'), ('long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Phir Bulbulay (2019)'), ('smart canonical title', 'Phir Bulbulay'), ('smart long imdb canonical title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Phir Bulbulay (2019)'), ('long imdb episode title', '\\\"Bulbulay (TV Series 2009\\u2013 ) - IMDb\\\" Phir Bulbulay (2019)'), ('series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('episode title', 'Phir Bulbulay'), ('canonical episode title', 'Phir Bulbulay'), ('smart canonical series title', 'Bulbulay (TV Series 2009\\u2013 ) - IMDb'), ('smart canonical episode title', 'Phir Bulbulay')]\",\n            \"source_type\": 1,\n            \"show\": 47,\n            \"show_reference_info\": 1,\n            \"reference_key\": \"10319910\",\n            \"season_number\": 10,\n            \"episode_number\": 1,\n            \"running_number\": 454,\n            \"original_air_date_from_source\": \"7 May 2019\",\n            \"original_air_date\": \"2019-05-07\",\n            \"year\": 2019,\n            \"series_title\": \"Bulbulay (TV Series 2009\\u2013 ) - IMDb\",\n            \"episode_title\": \"Phir Bulbulay\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 913,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:05:02.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": null,\n            \"created\": \"2019-07-08T12:05:02.774Z\",\n            \"updated\": \"2019-07-08T12:05:02.774Z\",\n            \"extra_data\": null,\n            \"source_type\": null,\n            \"show\": null,\n            \"show_reference_info\": null,\n            \"reference_key\": null,\n            \"season_number\": null,\n            \"episode_number\": null,\n            \"running_number\": null,\n            \"original_air_date_from_source\": null,\n            \"original_air_date\": null,\n            \"year\": null,\n            \"series_title\": null,\n            \"episode_title\": null,\n            \"plot\": null\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 914,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.1 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.1 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.722Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.714Z\",\n            \"updated\": \"2019-07-08T12:08:17.722Z\",\n            \"extra_data\": \"[('title', 'Episode #1.1'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 1), ('rating', 12345678910.0), ('original air date', '25 Apr. 2017'), ('year', '2017'), ('plot', '\\\\n    Story of trust, relationships and regrets, revolving around five people with different backgrounds and their faith and conviction. It highlights the concept of how the creator rewards the people who believe in hard work and patience.    '), ('canonical title', 'Episode #1.1'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.1 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.1 (2017)'), ('smart canonical title', 'Episode #1.1'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.1 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.1 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.1'), ('canonical episode title', 'Episode #1.1'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.1')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197648\",\n            \"season_number\": 1,\n            \"episode_number\": 1,\n            \"running_number\": 1,\n            \"original_air_date_from_source\": \"25 Apr. 2017\",\n            \"original_air_date\": \"2017-04-25\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.1\",\n            \"plot\": \"\\n    Story of trust, relationships and regrets, revolving around five people with different backgrounds and their faith and conviction. It highlights the concept of how the creator rewards the people who believe in hard work and patience.    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 915,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.2 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.2 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.734Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.728Z\",\n            \"updated\": \"2019-07-08T12:08:17.734Z\",\n            \"extra_data\": \"[('title', 'Episode #1.2'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 2), ('rating', 12345678910.0), ('original air date', '2 May 2017'), ('year', '2017'), ('plot', \\\"\\\\n    Nigar comes across Shahzeb once again and reveals to Chaman about her love for him. Rani comes across Nigar's mansions and is told about her fate which inspires her. Shahzeb and Nazneen get engaged which breaks down Nigar.    \\\"), ('canonical title', 'Episode #1.2'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.2 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.2 (2017)'), ('smart canonical title', 'Episode #1.2'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.2 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.2 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.2'), ('canonical episode title', 'Episode #1.2'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.2')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197650\",\n            \"season_number\": 1,\n            \"episode_number\": 2,\n            \"running_number\": 2,\n            \"original_air_date_from_source\": \"2 May 2017\",\n            \"original_air_date\": \"2017-05-02\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.2\",\n            \"plot\": \"\\n    Nigar comes across Shahzeb once again and reveals to Chaman about her love for him. Rani comes across Nigar's mansions and is told about her fate which inspires her. Shahzeb and Nazneen get engaged which breaks down Nigar.    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 916,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.3 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.3 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.743Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.739Z\",\n            \"updated\": \"2019-07-08T12:08:17.743Z\",\n            \"extra_data\": \"[('title', 'Episode #1.3'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 3), ('rating', 12345678910.0), ('original air date', '9 May 2017'), ('year', '2017'), ('plot', \\\"\\\\n    Shamu vows to earn with necessity, Shahzeb convinces Hashmat for letting Nazneen to study in city. Nigar visits Shahzeb and confronts her love, he insults her after which she curses him. Rani's father fixes her marriage for his fate.    \\\"), ('canonical title', 'Episode #1.3'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.3 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.3 (2017)'), ('smart canonical title', 'Episode #1.3'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.3 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.3 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.3'), ('canonical episode title', 'Episode #1.3'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.3')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197654\",\n            \"season_number\": 1,\n            \"episode_number\": 3,\n            \"running_number\": 3,\n            \"original_air_date_from_source\": \"9 May 2017\",\n            \"original_air_date\": \"2017-05-09\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.3\",\n            \"plot\": \"\\n    Shamu vows to earn with necessity, Shahzeb convinces Hashmat for letting Nazneen to study in city. Nigar visits Shahzeb and confronts her love, he insults her after which she curses him. Rani's father fixes her marriage for his fate.    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 917,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.4 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.4 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.752Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.748Z\",\n            \"updated\": \"2019-07-08T12:08:17.752Z\",\n            \"extra_data\": \"[('title', 'Episode #1.4'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 4), ('rating', 12345678910.0), ('original air date', '16 May 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.4'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.4 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.4 (2017)'), ('smart canonical title', 'Episode #1.4'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.4 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.4 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.4'), ('canonical episode title', 'Episode #1.4'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.4')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197656\",\n            \"season_number\": 1,\n            \"episode_number\": 4,\n            \"running_number\": 4,\n            \"original_air_date_from_source\": \"16 May 2017\",\n            \"original_air_date\": \"2017-05-16\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.4\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 918,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.5 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.5 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.760Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.756Z\",\n            \"updated\": \"2019-07-08T12:08:17.760Z\",\n            \"extra_data\": \"[('title', 'Episode #1.5'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 5), ('rating', 12345678910.0), ('original air date', '23 May 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.5'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.5 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.5 (2017)'), ('smart canonical title', 'Episode #1.5'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.5 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.5 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.5'), ('canonical episode title', 'Episode #1.5'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.5')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197660\",\n            \"season_number\": 1,\n            \"episode_number\": 5,\n            \"running_number\": 5,\n            \"original_air_date_from_source\": \"23 May 2017\",\n            \"original_air_date\": \"2017-05-23\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.5\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 919,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.6 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.6 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.770Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.766Z\",\n            \"updated\": \"2019-07-08T12:08:17.770Z\",\n            \"extra_data\": \"[('title', 'Episode #1.6'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 6), ('rating', 12345678910.0), ('original air date', '30 May 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.6'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.6 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.6 (2017)'), ('smart canonical title', 'Episode #1.6'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.6 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.6 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.6'), ('canonical episode title', 'Episode #1.6'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.6')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197664\",\n            \"season_number\": 1,\n            \"episode_number\": 6,\n            \"running_number\": 6,\n            \"original_air_date_from_source\": \"30 May 2017\",\n            \"original_air_date\": \"2017-05-30\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.6\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 920,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.7 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.7 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.778Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.774Z\",\n            \"updated\": \"2019-07-08T12:08:17.778Z\",\n            \"extra_data\": \"[('title', 'Episode #1.7'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 7), ('rating', 12345678910.0), ('original air date', '6 Jun. 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.7'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.7 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.7 (2017)'), ('smart canonical title', 'Episode #1.7'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.7 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.7 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.7'), ('canonical episode title', 'Episode #1.7'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.7')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197666\",\n            \"season_number\": 1,\n            \"episode_number\": 7,\n            \"running_number\": 7,\n            \"original_air_date_from_source\": \"6 Jun. 2017\",\n            \"original_air_date\": \"2017-06-06\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.7\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 921,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.8 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.8 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.785Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.782Z\",\n            \"updated\": \"2019-07-08T12:08:17.785Z\",\n            \"extra_data\": \"[('title', 'Episode #1.8'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 8), ('rating', 12345678910.0), ('original air date', '13 Jun. 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.8'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.8 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.8 (2017)'), ('smart canonical title', 'Episode #1.8'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.8 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.8 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.8'), ('canonical episode title', 'Episode #1.8'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.8')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197668\",\n            \"season_number\": 1,\n            \"episode_number\": 8,\n            \"running_number\": 8,\n            \"original_air_date_from_source\": \"13 Jun. 2017\",\n            \"original_air_date\": \"2017-06-13\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.8\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 922,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.9 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.9 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.793Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.789Z\",\n            \"updated\": \"2019-07-08T12:08:17.793Z\",\n            \"extra_data\": \"[('title', 'Episode #1.9'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 9), ('rating', 12345678910.0), ('original air date', '20 Jun. 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.9'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.9 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.9 (2017)'), ('smart canonical title', 'Episode #1.9'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.9 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.9 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.9'), ('canonical episode title', 'Episode #1.9'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.9')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197670\",\n            \"season_number\": 1,\n            \"episode_number\": 9,\n            \"running_number\": 9,\n            \"original_air_date_from_source\": \"20 Jun. 2017\",\n            \"original_air_date\": \"2017-06-20\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.9\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 923,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.10 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.10 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.801Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.797Z\",\n            \"updated\": \"2019-07-08T12:08:17.801Z\",\n            \"extra_data\": \"[('title', 'Episode #1.10'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 10), ('rating', 12345678910.0), ('original air date', '27 Jun. 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.10'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.10 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.10 (2017)'), ('smart canonical title', 'Episode #1.10'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.10 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.10 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.10'), ('canonical episode title', 'Episode #1.10'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.10')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197672\",\n            \"season_number\": 1,\n            \"episode_number\": 10,\n            \"running_number\": 10,\n            \"original_air_date_from_source\": \"27 Jun. 2017\",\n            \"original_air_date\": \"2017-06-27\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.10\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 924,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.11 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.11 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.808Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.805Z\",\n            \"updated\": \"2019-07-08T12:08:17.808Z\",\n            \"extra_data\": \"[('title', 'Episode #1.11'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 11), ('rating', 12345678910.0), ('original air date', '4 Jul. 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.11'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.11 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.11 (2017)'), ('smart canonical title', 'Episode #1.11'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.11 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.11 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.11'), ('canonical episode title', 'Episode #1.11'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.11')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197674\",\n            \"season_number\": 1,\n            \"episode_number\": 11,\n            \"running_number\": 11,\n            \"original_air_date_from_source\": \"4 Jul. 2017\",\n            \"original_air_date\": \"2017-07-04\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.11\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    },\n    {\n        \"model\": \"reference_data_app.showepisodereferenceinfo\",\n        \"pk\": 925,\n        \"fields\": {\n            \"name\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.12 (2017)\",\n            \"description\": \"\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.12 (2017)\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-08T12:08:17.820Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"admin\"\n            ],\n            \"created\": \"2019-07-08T12:08:17.812Z\",\n            \"updated\": \"2019-07-08T12:08:17.820Z\",\n            \"extra_data\": \"[('title', 'Episode #1.12'), ('kind', 'episode'), ('episode of', <Movie id:6904166[http] title:_\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" (None)_>), ('season', 1), ('episode', 12), ('rating', 12345678910.0), ('original air date', '11 Jul. 2017'), ('year', '2017'), ('plot', '\\\\n  Know what this is about?\\\\n Be the first one to add a plot.\\\\n    '), ('canonical title', 'Episode #1.12'), ('long imdb title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.12 (2017)'), ('long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.12 (2017)'), ('smart canonical title', 'Episode #1.12'), ('smart long imdb canonical title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.12 (2017)'), ('long imdb episode title', '\\\"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\\\" Episode #1.12 (2017)'), ('series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('episode title', 'Episode #1.12'), ('canonical episode title', 'Episode #1.12'), ('smart canonical series title', 'Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb'), ('smart canonical episode title', 'Episode #1.12')]\",\n            \"source_type\": 1,\n            \"show\": 46,\n            \"show_reference_info\": 2,\n            \"reference_key\": \"7197676\",\n            \"season_number\": 1,\n            \"episode_number\": 12,\n            \"running_number\": 12,\n            \"original_air_date_from_source\": \"11 Jul. 2017\",\n            \"original_air_date\": \"2017-07-11\",\n            \"year\": 2017,\n            \"series_title\": \"Alif Allah Aur Insaan (TV Series 2017\\u2013 ) - IMDb\",\n            \"episode_title\": \"Episode #1.12\",\n            \"plot\": \"\\n  Know what this is about?\\n Be the first one to add a plot.\\n    \"\n        }\n    }\n]\n":1hkST5:9Slpz8BOyHdWY-_EBBwOPxJIxs4