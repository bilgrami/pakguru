"[\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 94,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:11.831Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:11.451Z\",\n            \"updated\": \"2019-07-06T12:34:11.831Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 95,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:34.129Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:33.880Z\",\n            \"updated\": \"2019-07-06T12:34:34.129Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_uGSehYL.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 96,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:56.237Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:55.997Z\",\n            \"updated\": \"2019-07-06T12:34:56.237Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_euQl3LR.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 97,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:35:19.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:35:18.808Z\",\n            \"updated\": \"2019-07-06T12:35:19.410Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 98,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:35:39.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:35:39.668Z\",\n            \"updated\": \"2019-07-06T12:35:39.907Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 99,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:01.487Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:01.328Z\",\n            \"updated\": \"2019-07-06T12:36:01.487Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 100,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:23.644Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:23.448Z\",\n            \"updated\": \"2019-07-06T12:36:23.644Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 101,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:33.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:33.206Z\",\n            \"updated\": \"2019-07-06T12:36:33.410Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 102,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:55.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:54.778Z\",\n            \"updated\": \"2019-07-06T12:36:55.159Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 103,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:37:17.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:37:17.283Z\",\n            \"updated\": \"2019-07-06T12:37:17.465Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_8ZyT7rC.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 104,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:37:39.467Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:37:39.332Z\",\n            \"updated\": \"2019-07-06T12:37:39.467Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 105,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:01.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:01.329Z\",\n            \"updated\": \"2019-07-06T12:38:01.617Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 106,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:24.124Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:23.820Z\",\n            \"updated\": \"2019-07-06T12:38:24.124Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 107,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:45.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:45.284Z\",\n            \"updated\": \"2019-07-06T12:38:45.509Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 108,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:02.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:02.469Z\",\n            \"updated\": \"2019-07-06T12:39:02.639Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 109,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:23.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:23.685Z\",\n            \"updated\": \"2019-07-06T12:39:23.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 110,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:46.342Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:46.123Z\",\n            \"updated\": \"2019-07-06T12:39:46.342Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 111,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:08.540Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:08.406Z\",\n            \"updated\": \"2019-07-06T12:40:08.540Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 112,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:30.581Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:30.339Z\",\n            \"updated\": \"2019-07-06T12:40:30.581Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 113,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:52.418Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:52.203Z\",\n            \"updated\": \"2019-07-06T12:40:52.418Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 114,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:14.664Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:14.436Z\",\n            \"updated\": \"2019-07-06T12:41:14.664Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 115,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:37.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:37.215Z\",\n            \"updated\": \"2019-07-06T12:41:37.620Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 116,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:59.436Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:59.298Z\",\n            \"updated\": \"2019-07-06T12:41:59.436Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 117,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:42:21.431Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:42:21.311Z\",\n            \"updated\": \"2019-07-06T12:42:21.431Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 118,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:42:43.357Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:42:43.248Z\",\n            \"updated\": \"2019-07-06T12:42:43.357Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 119,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:05.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:05.648Z\",\n            \"updated\": \"2019-07-06T12:43:05.913Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 120,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:28.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:27.856Z\",\n            \"updated\": \"2019-07-06T12:43:28.007Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_Kqawosa.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 121,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:50.760Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:50.339Z\",\n            \"updated\": \"2019-07-06T12:43:50.760Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 122,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:12.114Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:11.889Z\",\n            \"updated\": \"2019-07-06T12:44:12.114Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 123,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:34.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:33.724Z\",\n            \"updated\": \"2019-07-06T12:44:34.164Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 124,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:56.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:56.209Z\",\n            \"updated\": \"2019-07-06T12:44:56.463Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 125,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:45:19.560Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:45:19.453Z\",\n            \"updated\": \"2019-07-06T12:45:19.560Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 126,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:45:40.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:45:40.817Z\",\n            \"updated\": \"2019-07-06T12:45:40.944Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 127,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:02.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:02.320Z\",\n            \"updated\": \"2019-07-06T12:46:02.571Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 128,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:24.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:24.720Z\",\n            \"updated\": \"2019-07-06T12:46:24.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 129,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:47.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:47.354Z\",\n            \"updated\": \"2019-07-06T12:46:47.584Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 130,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:18:05.691Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:47:09.285Z\",\n            \"updated\": \"2019-07-07T06:18:05.691Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-test-upload-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 131,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T05:36:38.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:47:21.773Z\",\n            \"updated\": \"2019-07-07T05:36:38.300Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 32,\n                \"td\": \"4068.48\",\n                \"te\": \"2019-07-06T05:47:32.781174\",\n                \"ts\": \"2019-07-06T05:47:28.712694\"\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-2019-07-06-1-admin-feed_id_44-dol-subah_l0OcfcZ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 132,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:55.287Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:00.381Z\",\n            \"updated\": \"2019-07-07T06:39:55.287Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2435.302\",\n                \"time_end\": \"2019-07-06T23:39:55.287530\",\n                \"time_start\": \"2019-07-06T23:39:52.852228\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_M3l7t89.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 133,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:58.698Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:23.099Z\",\n            \"updated\": \"2019-07-07T06:39:58.698Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3388.574\",\n                \"time_end\": \"2019-07-06T23:39:58.698288\",\n                \"time_start\": \"2019-07-06T23:39:55.309714\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_of678YI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 134,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:01.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:45.829Z\",\n            \"updated\": \"2019-07-07T06:40:01.493Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2691.391\",\n                \"time_end\": \"2019-07-06T23:40:01.493197\",\n                \"time_start\": \"2019-07-06T23:39:58.801806\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_yMnioON.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 135,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:07.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:07.953Z\",\n            \"updated\": \"2019-07-07T06:40:07.171Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"5659.352\",\n                \"time_end\": \"2019-07-06T23:40:07.170980\",\n                \"time_start\": \"2019-07-06T23:40:01.511628\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 136,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:25.454Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:31.066Z\",\n            \"updated\": \"2019-07-07T06:38:25.454Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3271.884\",\n                \"time_end\": \"2019-07-06T23:38:25.454162\",\n                \"time_start\": \"2019-07-06T23:38:22.182278\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_nw78EXa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 137,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:35.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:51.740Z\",\n            \"updated\": \"2019-07-07T06:38:35.884Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 36,\n                \"duration\": \"2258.127\",\n                \"time_end\": \"2019-07-06T23:38:35.884738\",\n                \"time_start\": \"2019-07-06T23:38:33.626611\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_9-unewstv-muqabil_geOGBKn.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 138,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:47.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:15.306Z\",\n            \"updated\": \"2019-07-07T06:38:47.944Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3394.361\",\n                \"time_end\": \"2019-07-06T23:38:47.943813\",\n                \"time_start\": \"2019-07-06T23:38:44.549452\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_10-unewstv-off-the-record_qDNjkCa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 139,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:57.937Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:37.648Z\",\n            \"updated\": \"2019-07-07T06:38:57.937Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4184.174\",\n                \"time_end\": \"2019-07-06T23:38:57.937239\",\n                \"time_start\": \"2019-07-06T23:38:53.753065\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_tpnA6Ue.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 140,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:05.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:46.671Z\",\n            \"updated\": \"2019-07-07T06:39:05.542Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 16,\n                \"duration\": \"1387.1\",\n                \"time_end\": \"2019-07-06T23:39:05.542333\",\n                \"time_start\": \"2019-07-06T23:39:04.155233\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_pLeTRse.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 141,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:10.425Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:09.427Z\",\n            \"updated\": \"2019-07-07T06:39:10.426Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2241.201\",\n                \"time_end\": \"2019-07-06T23:39:10.425809\",\n                \"time_start\": \"2019-07-06T23:39:08.184608\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_13-unewstv-the-reporters_O3ZoDvy.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 142,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:12.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:31.955Z\",\n            \"updated\": \"2019-07-07T06:39:12.901Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2444.441\",\n                \"time_end\": \"2019-07-06T23:39:12.901199\",\n                \"time_start\": \"2019-07-06T23:39:10.456758\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_WOiAuU5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 143,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:24.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:54.203Z\",\n            \"updated\": \"2019-07-07T06:39:24.865Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3457.403\",\n                \"time_end\": \"2019-07-06T23:39:24.865071\",\n                \"time_start\": \"2019-07-06T23:39:21.407668\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_15-unewstv-night-edition_dGcf9mH.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 144,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:33.841Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:25:19.834Z\",\n            \"updated\": \"2019-07-07T06:39:33.841Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3415.365\",\n                \"time_end\": \"2019-07-06T23:39:33.840950\",\n                \"time_start\": \"2019-07-06T23:39:30.425585\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_16-unewstv-jirga_bUHa5Ig.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 145,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:41.629Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:25:45.891Z\",\n            \"updated\": \"2019-07-07T06:39:41.629Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2345.836\",\n                \"time_end\": \"2019-07-06T23:39:41.629734\",\n                \"time_start\": \"2019-07-06T23:39:39.283898\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_17-unewstv-bebaak_OLJUoWq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 146,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:47.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:11.461Z\",\n            \"updated\": \"2019-07-07T06:39:47.986Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2964.283\",\n                \"time_end\": \"2019-07-06T23:39:47.986491\",\n                \"time_start\": \"2019-07-06T23:39:45.022208\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_18-unewstv-capital-talk_YzRFWuQ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 147,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:49.987Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:32.738Z\",\n            \"updated\": \"2019-07-07T06:39:49.987Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"1964.7259999999999\",\n                \"time_end\": \"2019-07-06T23:39:49.986797\",\n                \"time_start\": \"2019-07-06T23:39:48.022071\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_yf4YYqx.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 148,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:52.830Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:56.483Z\",\n            \"updated\": \"2019-07-07T06:39:52.830Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2758.5510000000004\",\n                \"time_end\": \"2019-07-06T23:39:52.830106\",\n                \"time_start\": \"2019-07-06T23:39:50.071555\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_20-unewstv-power-play_2P0l69M.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 149,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:22.058Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:27:25.822Z\",\n            \"updated\": \"2019-07-07T06:38:22.058Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2554.115\",\n                \"time_end\": \"2019-07-06T23:38:22.056485\",\n                \"time_start\": \"2019-07-06T23:38:19.502370\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_conpb7n.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 150,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:30.076Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:27:59.214Z\",\n            \"updated\": \"2019-07-07T06:38:30.076Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4535.584\",\n                \"time_end\": \"2019-07-06T23:38:30.076427\",\n                \"time_start\": \"2019-07-06T23:38:25.540843\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_22-unewstv-think-tank_JgKYIVq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 151,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:33.557Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:28:25.697Z\",\n            \"updated\": \"2019-07-07T06:38:33.557Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3450.127\",\n                \"time_end\": \"2019-07-06T23:38:33.557529\",\n                \"time_start\": \"2019-07-06T23:38:30.107402\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_afJoHm0.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 152,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:41.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:28:53.298Z\",\n            \"updated\": \"2019-07-07T06:38:41.378Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2341.404\",\n                \"time_end\": \"2019-07-06T23:38:41.378177\",\n                \"time_start\": \"2019-07-06T23:38:39.036773\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_24-unewstv-khara-sach_Z0heWRE.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 153,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:50.608Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:29:15.939Z\",\n            \"updated\": \"2019-07-07T06:38:50.608Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2632.447\",\n                \"time_end\": \"2019-07-06T23:38:50.608138\",\n                \"time_start\": \"2019-07-06T23:38:47.975691\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_25-unewstv-kal-tak_21Tx3En.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 154,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:53.667Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:29:40.159Z\",\n            \"updated\": \"2019-07-07T06:38:53.667Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3011.897\",\n                \"time_end\": \"2019-07-06T23:38:53.667483\",\n                \"time_start\": \"2019-07-06T23:38:50.655586\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_27-unewstv-to-the-point_vrVcv20.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 155,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:04.111Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:03.600Z\",\n            \"updated\": \"2019-07-07T06:39:04.111Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3032.241\",\n                \"time_end\": \"2019-07-06T23:39:04.111742\",\n                \"time_start\": \"2019-07-06T23:39:01.079501\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_28-unewstv-news-eye_d2BOKfa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 156,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:52.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:27.835Z\",\n            \"updated\": \"2019-07-07T06:47:52.410Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:156\",\n                \"job_id\": 156,\n                \"feed_id\": 29,\n                \"previous_extra_data\": {\n                    \"error\": \"Warning: Unknown show: G for Gharida, job:156\",\n                    \"job_id\": 156,\n                    \"feed_id\": 29,\n                    \"previous_extra_data\": null\n                }\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_29-unewstv-g-for-gharida_Eq0lnqK.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 157,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:19.473Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:51.559Z\",\n            \"updated\": \"2019-07-07T06:38:19.473Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"4214.553000000001\",\n                \"time_end\": \"2019-07-06T23:38:19.473417\",\n                \"time_start\": \"2019-07-06T23:38:15.258864\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_J3Pgz42.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 158,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:44.479Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:31:15.684Z\",\n            \"updated\": \"2019-07-07T06:38:44.479Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3077.57\",\n                \"time_end\": \"2019-07-06T23:38:44.479389\",\n                \"time_start\": \"2019-07-06T23:38:41.401819\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_AZslh43.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 159,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:08.130Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:31:39.542Z\",\n            \"updated\": \"2019-07-07T06:39:08.130Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2528.4680000000003\",\n                \"time_end\": \"2019-07-06T23:39:08.130081\",\n                \"time_start\": \"2019-07-06T23:39:05.601613\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_rIakHcd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 160,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:16.056Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:02.185Z\",\n            \"updated\": \"2019-07-07T06:39:16.056Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3068.722\",\n                \"time_end\": \"2019-07-06T23:39:16.056694\",\n                \"time_start\": \"2019-07-06T23:39:12.987972\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_YHVO4LP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 161,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:21.376Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:25.655Z\",\n            \"updated\": \"2019-07-07T06:39:21.376Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2345.785\",\n                \"time_end\": \"2019-07-06T23:39:21.376665\",\n                \"time_start\": \"2019-07-06T23:39:19.030880\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_34-unewstv-news-beat_G2igquq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 162,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:01.049Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:47.854Z\",\n            \"updated\": \"2019-07-07T06:39:01.049Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3042.503\",\n                \"time_end\": \"2019-07-06T23:39:01.048969\",\n                \"time_start\": \"2019-07-06T23:38:58.006466\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_gqWsvTY.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:18.921Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:10.517Z\",\n            \"updated\": \"2019-07-07T06:39:18.921Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2836.388\",\n                \"time_end\": \"2019-07-06T23:39:18.921702\",\n                \"time_start\": \"2019-07-06T23:39:16.085314\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_tMM3IXM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:38:39.004Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:33.536Z\",\n            \"updated\": \"2019-07-07T06:38:39.004Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3043.466\",\n                \"time_end\": \"2019-07-06T23:38:39.004668\",\n                \"time_start\": \"2019-07-06T23:38:35.961202\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_h6aqg4L.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:30.399Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:55.789Z\",\n            \"updated\": \"2019-07-07T06:39:30.399Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2487.2980000000002\",\n                \"time_end\": \"2019-07-06T23:39:30.399183\",\n                \"time_start\": \"2019-07-06T23:39:27.911885\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_PfJdSSz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:27.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:34:17.927Z\",\n            \"updated\": \"2019-07-07T06:39:27.882Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2957.381\",\n                \"time_end\": \"2019-07-06T23:39:27.882396\",\n                \"time_start\": \"2019-07-06T23:39:24.925015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_39-unewstv-on-the-front_pP6CeQA.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:36.420Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:34:40.180Z\",\n            \"updated\": \"2019-07-07T06:39:36.420Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2460.726\",\n                \"time_end\": \"2019-07-06T23:39:36.420289\",\n                \"time_start\": \"2019-07-06T23:39:33.959563\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_xHWFSPC.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:39.227Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:35:03.563Z\",\n            \"updated\": \"2019-07-07T06:39:39.227Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2767.868\",\n                \"time_end\": \"2019-07-06T23:39:39.227676\",\n                \"time_start\": \"2019-07-06T23:39:36.459808\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_41-unewstv-seedhi-baat_J0uvlWa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:39:44.942Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:35:25.890Z\",\n            \"updated\": \"2019-07-07T06:39:44.942Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3263.103\",\n                \"time_end\": \"2019-07-06T23:39:44.941964\",\n                \"time_start\": \"2019-07-06T23:39:41.678861\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_tc2rDod.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:10.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:36:20.062Z\",\n            \"updated\": \"2019-07-07T06:40:10.050Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2100.797\",\n                \"time_end\": \"2019-07-06T23:40:10.032733\",\n                \"time_start\": \"2019-07-06T23:40:07.931936\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_geQqRzM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:11.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:37:23.206Z\",\n            \"updated\": \"2019-07-07T06:40:11.392Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1167.9679999999998\",\n                \"time_end\": \"2019-07-06T23:40:11.392741\",\n                \"time_start\": \"2019-07-06T23:40:10.224773\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:13.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:07.786Z\",\n            \"updated\": \"2019-07-07T06:40:13.575Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 25,\n                \"duration\": \"2161.508\",\n                \"time_end\": \"2019-07-06T23:40:13.575786\",\n                \"time_start\": \"2019-07-06T23:40:11.414278\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:55.439Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:44:58.557Z\",\n            \"updated\": \"2019-07-07T06:47:55.439Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 10,\n                \"duration\": \"1434.745\",\n                \"time_end\": \"2019-07-06T23:47:55.439763\",\n                \"time_start\": \"2019-07-06T23:47:54.005018\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:55.850Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:45:53.849Z\",\n            \"updated\": \"2019-07-07T06:47:55.850Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"383.111\",\n                \"time_end\": \"2019-07-06T23:47:55.850836\",\n                \"time_start\": \"2019-07-06T23:47:55.467725\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_51-vpk-sawera_zxcbRMc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:56.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:46:37.199Z\",\n            \"updated\": \"2019-07-07T06:47:56.313Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"426.693\",\n                \"time_end\": \"2019-07-06T23:47:56.313038\",\n                \"time_start\": \"2019-07-06T23:47:55.886345\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_ZeYpvZR.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:47:58.178Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:28.411Z\",\n            \"updated\": \"2019-07-07T06:47:58.178Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1792.59\",\n                \"time_end\": \"2019-07-06T23:47:58.178455\",\n                \"time_start\": \"2019-07-06T23:47:56.385865\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 177,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:21:43.796Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:21:42.869Z\",\n            \"updated\": \"2019-07-08T06:21:43.796Z\",\n            \"extra_data\": null,\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 178,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:22:43.262Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:22:43.218Z\",\n            \"updated\": \"2019-07-08T06:22:43.263Z\",\n            \"extra_data\": null,\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 179,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:23:20.563Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:23:20.433Z\",\n            \"updated\": \"2019-07-08T06:23:20.563Z\",\n            \"extra_data\": null,\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_54-vpk-dil-e-majboor_TJgrtiT.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 180,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:23:38.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:23:38.309Z\",\n            \"updated\": \"2019-07-08T06:23:38.344Z\",\n            \"extra_data\": null,\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 181,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:24:39.883Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:24:39.715Z\",\n            \"updated\": \"2019-07-08T06:24:39.883Z\",\n            \"extra_data\": null,\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_51-vpk-sawera_AUxJyAE.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 182,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:24:57.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:24:57.652Z\",\n            \"updated\": \"2019-07-08T06:24:57.786Z\",\n            \"extra_data\": null,\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 183,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:25:38.817Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:25:38.193Z\",\n            \"updated\": \"2019-07-08T06:25:38.817Z\",\n            \"extra_data\": null,\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_dneGBNV.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 184,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:39.458Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:26:26.751Z\",\n            \"updated\": \"2019-07-08T06:43:39.458Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"329.60699999999997\",\n                \"time_end\": \"2019-07-07T23:43:39.458435\",\n                \"time_start\": \"2019-07-07T23:43:39.128828\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 185,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:26:47.382Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:26:47.234Z\",\n            \"updated\": \"2019-07-08T06:26:47.382Z\",\n            \"extra_data\": null,\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_53-vpk-bulbulay_WH5Ljnh.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 186,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:39.772Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:26:52.870Z\",\n            \"updated\": \"2019-07-08T06:43:39.772Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"299.373\",\n                \"time_end\": \"2019-07-07T23:43:39.772728\",\n                \"time_start\": \"2019-07-07T23:43:39.473355\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_mTwjH7b.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 187,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:23.759Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:27:19.716Z\",\n            \"updated\": \"2019-07-08T06:43:23.760Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"347.387\",\n                \"time_end\": \"2019-07-07T23:43:23.759816\",\n                \"time_start\": \"2019-07-07T23:43:23.412429\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 188,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:24.343Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:27:46.658Z\",\n            \"updated\": \"2019-07-08T06:43:24.343Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"550.5360000000001\",\n                \"time_end\": \"2019-07-07T23:43:24.342923\",\n                \"time_start\": \"2019-07-07T23:43:23.792387\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 189,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:24.897Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:28:09.183Z\",\n            \"updated\": \"2019-07-08T06:43:24.897Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"514.889\",\n                \"time_end\": \"2019-07-07T23:43:24.897385\",\n                \"time_start\": \"2019-07-07T23:43:24.382496\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 190,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:25.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:28:31.096Z\",\n            \"updated\": \"2019-07-08T06:43:25.716Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"420.935\",\n                \"time_end\": \"2019-07-07T23:43:25.716582\",\n                \"time_start\": \"2019-07-07T23:43:25.295647\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 191,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:26.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:28:50.615Z\",\n            \"updated\": \"2019-07-08T06:43:26.410Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"654.261\",\n                \"time_end\": \"2019-07-07T23:43:26.410301\",\n                \"time_start\": \"2019-07-07T23:43:25.756040\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 192,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:26.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:29:11.983Z\",\n            \"updated\": \"2019-07-08T06:43:26.763Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"327.699\",\n                \"time_end\": \"2019-07-07T23:43:26.763399\",\n                \"time_start\": \"2019-07-07T23:43:26.435700\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 193,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:27.606Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:29:34.757Z\",\n            \"updated\": \"2019-07-08T06:43:27.606Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"476.134\",\n                \"time_end\": \"2019-07-07T23:43:27.606621\",\n                \"time_start\": \"2019-07-07T23:43:27.130487\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 194,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:27.900Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:29:44.711Z\",\n            \"updated\": \"2019-07-08T06:43:27.900Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"252.72499999999997\",\n                \"time_end\": \"2019-07-07T23:43:27.900759\",\n                \"time_start\": \"2019-07-07T23:43:27.648034\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 195,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:28.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:30:07.108Z\",\n            \"updated\": \"2019-07-08T06:43:28.286Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"323.37399999999997\",\n                \"time_end\": \"2019-07-07T23:43:28.286340\",\n                \"time_start\": \"2019-07-07T23:43:27.962966\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 196,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:28.964Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:30:28.794Z\",\n            \"updated\": \"2019-07-08T06:43:28.964Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"234.146\",\n                \"time_end\": \"2019-07-07T23:43:28.964513\",\n                \"time_start\": \"2019-07-07T23:43:28.730367\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_pEBe7CB.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 197,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:29.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:30:50.258Z\",\n            \"updated\": \"2019-07-08T06:43:29.438Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"458.452\",\n                \"time_end\": \"2019-07-07T23:43:29.438609\",\n                \"time_start\": \"2019-07-07T23:43:28.980157\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 198,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:23.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:31:11.963Z\",\n            \"updated\": \"2019-07-08T06:43:23.392Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"3866.034\",\n                \"time_end\": \"2019-07-07T23:43:23.392530\",\n                \"time_start\": \"2019-07-07T23:43:19.526496\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 199,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:25.280Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:31:33.826Z\",\n            \"updated\": \"2019-07-08T06:43:25.280Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"366.496\",\n                \"time_end\": \"2019-07-07T23:43:25.280086\",\n                \"time_start\": \"2019-07-07T23:43:24.913590\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 200,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:27.110Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:31:55.180Z\",\n            \"updated\": \"2019-07-08T06:43:27.110Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"329.434\",\n                \"time_end\": \"2019-07-07T23:43:27.110650\",\n                \"time_start\": \"2019-07-07T23:43:26.781216\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 201,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:28.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:32:13.178Z\",\n            \"updated\": \"2019-07-08T06:43:28.711Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"279.717\",\n                \"time_end\": \"2019-07-07T23:43:28.583902\",\n                \"time_start\": \"2019-07-07T23:43:28.304185\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 202,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:29.942Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:32:34.756Z\",\n            \"updated\": \"2019-07-08T06:43:29.942Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"463.931\",\n                \"time_end\": \"2019-07-07T23:43:29.941914\",\n                \"time_start\": \"2019-07-07T23:43:29.477983\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 203,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:30.201Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:32:56.313Z\",\n            \"updated\": \"2019-07-08T06:43:30.201Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"240.25900000000001\",\n                \"time_end\": \"2019-07-07T23:43:30.201004\",\n                \"time_start\": \"2019-07-07T23:43:29.960745\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 204,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:30.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:33:17.589Z\",\n            \"updated\": \"2019-07-08T06:43:30.498Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"281.789\",\n                \"time_end\": \"2019-07-07T23:43:30.498181\",\n                \"time_start\": \"2019-07-07T23:43:30.216392\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 205,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:31.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:33:39.097Z\",\n            \"updated\": \"2019-07-08T06:43:31.526Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"688.425\",\n                \"time_end\": \"2019-07-07T23:43:31.526536\",\n                \"time_start\": \"2019-07-07T23:43:30.838111\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 206,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:30.821Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:34:01.582Z\",\n            \"updated\": \"2019-07-08T06:43:30.821Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"304.556\",\n                \"time_end\": \"2019-07-07T23:43:30.821667\",\n                \"time_start\": \"2019-07-07T23:43:30.517111\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 207,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.036Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:34:23.417Z\",\n            \"updated\": \"2019-07-08T06:43:32.036Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"451.623\",\n                \"time_end\": \"2019-07-07T23:43:32.036344\",\n                \"time_start\": \"2019-07-07T23:43:31.584721\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 208,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:34:45.096Z\",\n            \"updated\": \"2019-07-08T06:43:32.423Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"347.46\",\n                \"time_end\": \"2019-07-07T23:43:32.423833\",\n                \"time_start\": \"2019-07-07T23:43:32.076373\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 209,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.441Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:35:07.449Z\",\n            \"updated\": \"2019-07-08T06:43:32.441Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:209\",\n                \"job_id\": 209,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 210,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:32.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:35:29.119Z\",\n            \"updated\": \"2019-07-08T06:43:32.708Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"247.641\",\n                \"time_end\": \"2019-07-07T23:43:32.708220\",\n                \"time_start\": \"2019-07-07T23:43:32.460579\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 211,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:33.183Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:35:50.604Z\",\n            \"updated\": \"2019-07-08T06:43:33.183Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"458.762\",\n                \"time_end\": \"2019-07-07T23:43:33.183759\",\n                \"time_start\": \"2019-07-07T23:43:32.724997\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 212,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:33.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:36:12.271Z\",\n            \"updated\": \"2019-07-08T06:43:33.800Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"367.56\",\n                \"time_end\": \"2019-07-07T23:43:33.799917\",\n                \"time_start\": \"2019-07-07T23:43:33.432357\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_EnCFgx6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 213,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:34.103Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:36:34.110Z\",\n            \"updated\": \"2019-07-08T06:43:34.103Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"288.19800000000004\",\n                \"time_end\": \"2019-07-07T23:43:34.103528\",\n                \"time_start\": \"2019-07-07T23:43:33.815330\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 214,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:34.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:36:55.307Z\",\n            \"updated\": \"2019-07-08T06:43:34.414Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"290.607\",\n                \"time_end\": \"2019-07-07T23:43:34.414587\",\n                \"time_start\": \"2019-07-07T23:43:34.123980\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 215,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:34.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:37:16.657Z\",\n            \"updated\": \"2019-07-08T06:43:34.816Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"387.115\",\n                \"time_end\": \"2019-07-07T23:43:34.816130\",\n                \"time_start\": \"2019-07-07T23:43:34.429015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 216,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:35.427Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:37:38.021Z\",\n            \"updated\": \"2019-07-08T06:43:35.427Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"572.076\",\n                \"time_end\": \"2019-07-07T23:43:35.427026\",\n                \"time_start\": \"2019-07-07T23:43:34.854950\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 217,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:35.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:37:59.933Z\",\n            \"updated\": \"2019-07-08T06:43:35.697Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"241.124\",\n                \"time_end\": \"2019-07-07T23:43:35.697171\",\n                \"time_start\": \"2019-07-07T23:43:35.456047\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 218,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:36.020Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:38:21.299Z\",\n            \"updated\": \"2019-07-08T06:43:36.020Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"308.026\",\n                \"time_end\": \"2019-07-07T23:43:36.020422\",\n                \"time_start\": \"2019-07-07T23:43:35.712396\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 219,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:36.371Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:38:42.730Z\",\n            \"updated\": \"2019-07-08T06:43:36.372Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"311.49100000000004\",\n                \"time_end\": \"2019-07-07T23:43:36.371861\",\n                \"time_start\": \"2019-07-07T23:43:36.060370\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 220,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:36.894Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:39:03.978Z\",\n            \"updated\": \"2019-07-08T06:43:36.894Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"501.30300000000005\",\n                \"time_end\": \"2019-07-07T23:43:36.894341\",\n                \"time_start\": \"2019-07-07T23:43:36.393038\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 221,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:37.532Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:39:29.413Z\",\n            \"updated\": \"2019-07-08T06:43:37.532Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"597.3009999999999\",\n                \"time_end\": \"2019-07-07T23:43:37.532248\",\n                \"time_start\": \"2019-07-07T23:43:36.934947\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 222,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:37.792Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:39:50.797Z\",\n            \"updated\": \"2019-07-08T06:43:37.792Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"242.029\",\n                \"time_end\": \"2019-07-07T23:43:37.792370\",\n                \"time_start\": \"2019-07-07T23:43:37.550341\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 223,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:38.048Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:40:28.653Z\",\n            \"updated\": \"2019-07-08T06:43:38.048Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"238.701\",\n                \"time_end\": \"2019-07-07T23:43:38.048066\",\n                \"time_start\": \"2019-07-07T23:43:37.809365\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_StIiFIv.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 224,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:33.381Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:40:47.148Z\",\n            \"updated\": \"2019-07-08T06:43:33.381Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"148.414\",\n                \"time_end\": \"2019-07-07T23:43:33.381262\",\n                \"time_start\": \"2019-07-07T23:43:33.232848\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_54-vpk-dil-e-majboor_u3NG2R0.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 225,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:38.348Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:41:40.259Z\",\n            \"updated\": \"2019-07-08T06:43:38.348Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"284.646\",\n                \"time_end\": \"2019-07-07T23:43:38.348535\",\n                \"time_start\": \"2019-07-07T23:43:38.063889\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_51-vpk-sawera_ILl5a3A.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 226,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:39.096Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:42:26.409Z\",\n            \"updated\": \"2019-07-08T06:43:39.096Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"374.127\",\n                \"time_end\": \"2019-07-07T23:43:39.096464\",\n                \"time_start\": \"2019-07-07T23:43:38.722337\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_7jGc4mU.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 227,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T06:43:38.673Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T06:43:18.100Z\",\n            \"updated\": \"2019-07-08T06:43:38.673Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"308.606\",\n                \"time_end\": \"2019-07-07T23:43:38.672914\",\n                \"time_start\": \"2019-07-07T23:43:38.364308\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-07/2019-07-07-1-bilgrami-feed_id_53-vpk-bulbulay_Fkhdekb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 228,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:05.209Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:19:28.371Z\",\n            \"updated\": \"2019-07-08T07:36:05.209Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"306.62899999999996\",\n                \"time_end\": \"2019-07-08T00:36:05.209578\",\n                \"time_start\": \"2019-07-08T00:36:04.902949\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 229,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:06.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:19:49.732Z\",\n            \"updated\": \"2019-07-08T07:36:06.208Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"520.1940000000001\",\n                \"time_end\": \"2019-07-08T00:36:06.207901\",\n                \"time_start\": \"2019-07-08T00:36:05.687707\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_1EvOREa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 230,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:05.669Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:20:12.283Z\",\n            \"updated\": \"2019-07-08T07:36:05.669Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"438.44300000000004\",\n                \"time_end\": \"2019-07-08T00:36:05.668983\",\n                \"time_start\": \"2019-07-08T00:36:05.230540\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 231,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:04.887Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:20:33.380Z\",\n            \"updated\": \"2019-07-08T07:36:04.887Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"335.42499999999995\",\n                \"time_end\": \"2019-07-08T00:36:04.887624\",\n                \"time_start\": \"2019-07-08T00:36:04.552199\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 232,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:06.765Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:20:54.988Z\",\n            \"updated\": \"2019-07-08T07:36:06.765Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"446.702\",\n                \"time_end\": \"2019-07-08T00:36:06.765555\",\n                \"time_start\": \"2019-07-08T00:36:06.318853\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 233,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:07.241Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:21:16.439Z\",\n            \"updated\": \"2019-07-08T07:36:07.241Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"426.522\",\n                \"time_end\": \"2019-07-08T00:36:07.241657\",\n                \"time_start\": \"2019-07-08T00:36:06.815135\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 234,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:07.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:21:36.020Z\",\n            \"updated\": \"2019-07-08T07:36:07.763Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"501.68999999999994\",\n                \"time_end\": \"2019-07-08T00:36:07.762942\",\n                \"time_start\": \"2019-07-08T00:36:07.261252\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 235,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:08.426Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:21:57.805Z\",\n            \"updated\": \"2019-07-08T07:36:08.426Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"602.587\",\n                \"time_end\": \"2019-07-08T00:36:08.426678\",\n                \"time_start\": \"2019-07-08T00:36:07.824091\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 236,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:03.572Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:22:19.033Z\",\n            \"updated\": \"2019-07-08T07:36:03.572Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"324.416\",\n                \"time_end\": \"2019-07-08T00:36:03.572588\",\n                \"time_start\": \"2019-07-08T00:36:03.248172\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 237,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:03.748Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:22:27.907Z\",\n            \"updated\": \"2019-07-08T07:36:03.748Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"138.849\",\n                \"time_end\": \"2019-07-08T00:36:03.748311\",\n                \"time_start\": \"2019-07-08T00:36:03.609462\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 238,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:04.205Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:22:48.903Z\",\n            \"updated\": \"2019-07-08T07:36:04.205Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"442.827\",\n                \"time_end\": \"2019-07-08T00:36:04.205690\",\n                \"time_start\": \"2019-07-08T00:36:03.762863\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 239,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:08.704Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:23:10.320Z\",\n            \"updated\": \"2019-07-08T07:36:08.704Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"257.81100000000004\",\n                \"time_end\": \"2019-07-08T00:36:08.704321\",\n                \"time_start\": \"2019-07-08T00:36:08.446510\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_NWPdCye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 240,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:09.094Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:23:33.016Z\",\n            \"updated\": \"2019-07-08T07:36:09.094Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"371.121\",\n                \"time_end\": \"2019-07-08T00:36:09.094609\",\n                \"time_start\": \"2019-07-08T00:36:08.723488\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 241,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:09.547Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:23:54.012Z\",\n            \"updated\": \"2019-07-08T07:36:09.547Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"437.03799999999995\",\n                \"time_end\": \"2019-07-08T00:36:09.546834\",\n                \"time_start\": \"2019-07-08T00:36:09.109796\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 242,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:10.038Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:24:15.663Z\",\n            \"updated\": \"2019-07-08T07:36:10.039Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"452.197\",\n                \"time_end\": \"2019-07-08T00:36:10.038855\",\n                \"time_start\": \"2019-07-08T00:36:09.586658\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 243,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:10.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:24:36.842Z\",\n            \"updated\": \"2019-07-08T07:36:10.414Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"359.681\",\n                \"time_end\": \"2019-07-08T00:36:10.413884\",\n                \"time_start\": \"2019-07-08T00:36:10.054203\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 244,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:10.742Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:24:54.746Z\",\n            \"updated\": \"2019-07-08T07:36:10.742Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"313.11899999999997\",\n                \"time_end\": \"2019-07-08T00:36:10.742310\",\n                \"time_start\": \"2019-07-08T00:36:10.429191\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 245,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:11.152Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:25:16.690Z\",\n            \"updated\": \"2019-07-08T07:36:11.152Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"391.973\",\n                \"time_end\": \"2019-07-08T00:36:11.152292\",\n                \"time_start\": \"2019-07-08T00:36:10.760319\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 246,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:11.753Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:25:38.688Z\",\n            \"updated\": \"2019-07-08T07:36:11.753Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"561.174\",\n                \"time_end\": \"2019-07-08T00:36:11.753056\",\n                \"time_start\": \"2019-07-08T00:36:11.191882\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 247,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:12.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:25:59.807Z\",\n            \"updated\": \"2019-07-08T07:36:12.177Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"367.562\",\n                \"time_end\": \"2019-07-08T00:36:12.177509\",\n                \"time_start\": \"2019-07-08T00:36:11.809947\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 248,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:12.607Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:26:21.521Z\",\n            \"updated\": \"2019-07-08T07:36:12.607Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"410.29900000000004\",\n                \"time_end\": \"2019-07-08T00:36:12.607536\",\n                \"time_start\": \"2019-07-08T00:36:12.197237\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 249,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T12:36:54.852Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:26:42.932Z\",\n            \"updated\": \"2019-07-08T12:36:54.852Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"542.99\",\n                \"time_end\": \"2019-07-08T00:36:13.169532\",\n                \"time_start\": \"2019-07-08T00:36:12.626542\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-2019-07-04-1-bilgrami-feed_id_24-unewst_4tlvedR.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 250,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:54.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:27:04.803Z\",\n            \"updated\": \"2019-07-08T07:35:54.810Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"708.834\",\n                \"time_end\": \"2019-07-08T00:35:54.809859\",\n                \"time_start\": \"2019-07-08T00:35:54.101025\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 251,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:55.314Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:27:27.085Z\",\n            \"updated\": \"2019-07-08T07:35:55.314Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"487.046\",\n                \"time_end\": \"2019-07-08T00:35:55.314521\",\n                \"time_start\": \"2019-07-08T00:35:54.827475\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 252,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:55.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:27:48.811Z\",\n            \"updated\": \"2019-07-08T07:35:55.366Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:252\",\n                \"job_id\": 252,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 253,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:55.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:28:10.413Z\",\n            \"updated\": \"2019-07-08T07:35:55.929Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"522.569\",\n                \"time_end\": \"2019-07-08T00:35:55.929393\",\n                \"time_start\": \"2019-07-08T00:35:55.406824\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 254,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:56.359Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:28:32.164Z\",\n            \"updated\": \"2019-07-08T07:35:56.359Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"387.812\",\n                \"time_end\": \"2019-07-08T00:35:56.359462\",\n                \"time_start\": \"2019-07-08T00:35:55.971650\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 255,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:56.749Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:28:54.016Z\",\n            \"updated\": \"2019-07-08T07:35:56.749Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"375.137\",\n                \"time_end\": \"2019-07-08T00:35:56.749314\",\n                \"time_start\": \"2019-07-08T00:35:56.374177\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_xyl41Nk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 256,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:57.269Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:29:16.115Z\",\n            \"updated\": \"2019-07-08T07:35:57.269Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"471.537\",\n                \"time_end\": \"2019-07-08T00:35:57.269445\",\n                \"time_start\": \"2019-07-08T00:35:56.797908\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 257,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:57.785Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:29:37.828Z\",\n            \"updated\": \"2019-07-08T07:35:57.785Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"486.007\",\n                \"time_end\": \"2019-07-08T00:35:57.785241\",\n                \"time_start\": \"2019-07-08T00:35:57.299234\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 258,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:58.128Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:29:59.516Z\",\n            \"updated\": \"2019-07-08T07:35:58.128Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"312.687\",\n                \"time_end\": \"2019-07-08T00:35:58.128265\",\n                \"time_start\": \"2019-07-08T00:35:57.815578\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 259,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:58.437Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:30:22.698Z\",\n            \"updated\": \"2019-07-08T07:35:58.437Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"281.01599999999996\",\n                \"time_end\": \"2019-07-08T00:35:58.437176\",\n                \"time_start\": \"2019-07-08T00:35:58.156160\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 260,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:58.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:30:44.458Z\",\n            \"updated\": \"2019-07-08T07:35:58.865Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"410.157\",\n                \"time_end\": \"2019-07-08T00:35:58.864871\",\n                \"time_start\": \"2019-07-08T00:35:58.454714\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 261,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:59.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:31:06.244Z\",\n            \"updated\": \"2019-07-08T07:35:59.907Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"390.157\",\n                \"time_end\": \"2019-07-08T00:35:59.907654\",\n                \"time_start\": \"2019-07-08T00:35:59.517497\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 262,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:35:59.502Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:31:27.957Z\",\n            \"updated\": \"2019-07-08T07:35:59.502Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"598.631\",\n                \"time_end\": \"2019-07-08T00:35:59.501949\",\n                \"time_start\": \"2019-07-08T00:35:58.903318\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 263,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:00.368Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:31:49.643Z\",\n            \"updated\": \"2019-07-08T07:36:00.368Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"445.01800000000003\",\n                \"time_end\": \"2019-07-08T00:36:00.368475\",\n                \"time_start\": \"2019-07-08T00:35:59.923457\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 264,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:00.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:32:11.331Z\",\n            \"updated\": \"2019-07-08T07:36:00.800Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"415.242\",\n                \"time_end\": \"2019-07-08T00:36:00.800295\",\n                \"time_start\": \"2019-07-08T00:36:00.385053\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 265,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:01.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:32:32.959Z\",\n            \"updated\": \"2019-07-08T07:36:01.392Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"542.029\",\n                \"time_end\": \"2019-07-08T00:36:01.391969\",\n                \"time_start\": \"2019-07-08T00:36:00.849940\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 266,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:01.642Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:33:08.549Z\",\n            \"updated\": \"2019-07-08T07:36:01.642Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"235.191\",\n                \"time_end\": \"2019-07-08T00:36:01.642827\",\n                \"time_start\": \"2019-07-08T00:36:01.407636\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_PjFC3B5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 267,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:01.878Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:33:25.424Z\",\n            \"updated\": \"2019-07-08T07:36:01.878Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"174.19\",\n                \"time_end\": \"2019-07-08T00:36:01.878037\",\n                \"time_start\": \"2019-07-08T00:36:01.703847\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 268,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:02.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:34:17.053Z\",\n            \"updated\": \"2019-07-08T07:36:02.218Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"318.179\",\n                \"time_end\": \"2019-07-08T00:36:02.218045\",\n                \"time_start\": \"2019-07-08T00:36:01.899866\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 269,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:02.645Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:35:01.028Z\",\n            \"updated\": \"2019-07-08T07:36:02.645Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"385.987\",\n                \"time_end\": \"2019-07-08T00:36:02.645271\",\n                \"time_start\": \"2019-07-08T00:36:02.259284\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 270,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T07:36:03.232Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T07:35:53.380Z\",\n            \"updated\": \"2019-07-08T07:36:03.232Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"536.74\",\n                \"time_end\": \"2019-07-08T00:36:03.232332\",\n                \"time_start\": \"2019-07-08T00:36:02.695592\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 271,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:29.162Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:52:31.153Z\",\n            \"updated\": \"2019-07-08T13:09:29.162Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"322.396\",\n                \"time_end\": \"2019-07-08T06:09:29.162758\",\n                \"time_start\": \"2019-07-08T06:09:28.840362\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 272,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:29.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:52:52.825Z\",\n            \"updated\": \"2019-07-08T13:09:29.617Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"415.197\",\n                \"time_end\": \"2019-07-08T06:09:29.617094\",\n                \"time_start\": \"2019-07-08T06:09:29.201897\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_AfFSfhW.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 273,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:30.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:53:14.310Z\",\n            \"updated\": \"2019-07-08T13:09:30.231Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"544.213\",\n                \"time_end\": \"2019-07-08T06:09:30.231679\",\n                \"time_start\": \"2019-07-08T06:09:29.687466\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 274,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:30.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:53:35.652Z\",\n            \"updated\": \"2019-07-08T13:09:30.700Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"435.09999999999997\",\n                \"time_end\": \"2019-07-08T06:09:30.700061\",\n                \"time_start\": \"2019-07-08T06:09:30.264961\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 275,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:31.181Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:53:57.312Z\",\n            \"updated\": \"2019-07-08T13:09:31.181Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"433.624\",\n                \"time_end\": \"2019-07-08T06:09:31.181506\",\n                \"time_start\": \"2019-07-08T06:09:30.747882\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 276,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:31.793Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:54:19.010Z\",\n            \"updated\": \"2019-07-08T13:09:31.793Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"522.4499999999999\",\n                \"time_end\": \"2019-07-08T06:09:31.793221\",\n                \"time_start\": \"2019-07-08T06:09:31.270771\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 277,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:32.211Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:54:37.914Z\",\n            \"updated\": \"2019-07-08T13:09:32.211Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"383.308\",\n                \"time_end\": \"2019-07-08T06:09:32.211595\",\n                \"time_start\": \"2019-07-08T06:09:31.828287\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 278,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:32.618Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:54:58.495Z\",\n            \"updated\": \"2019-07-08T13:09:32.618Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"357.637\",\n                \"time_end\": \"2019-07-08T06:09:32.618414\",\n                \"time_start\": \"2019-07-08T06:09:32.260777\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 279,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:33.229Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:55:19.852Z\",\n            \"updated\": \"2019-07-08T13:09:33.229Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"577.85\",\n                \"time_end\": \"2019-07-08T06:09:33.229067\",\n                \"time_start\": \"2019-07-08T06:09:32.651217\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 280,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:33.804Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:55:28.797Z\",\n            \"updated\": \"2019-07-08T13:09:33.804Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"376.967\",\n                \"time_end\": \"2019-07-08T06:09:33.804480\",\n                \"time_start\": \"2019-07-08T06:09:33.427513\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 281,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:34.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:55:49.889Z\",\n            \"updated\": \"2019-07-08T13:09:34.208Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"358.30699999999996\",\n                \"time_end\": \"2019-07-08T06:09:34.208392\",\n                \"time_start\": \"2019-07-08T06:09:33.850085\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 282,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:34.680Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:56:11.053Z\",\n            \"updated\": \"2019-07-08T13:09:34.680Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"436.659\",\n                \"time_end\": \"2019-07-08T06:09:34.680406\",\n                \"time_start\": \"2019-07-08T06:09:34.243747\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_tEm4qa2.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 283,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:35.246Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:56:32.378Z\",\n            \"updated\": \"2019-07-08T13:09:35.246Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"509.826\",\n                \"time_end\": \"2019-07-08T06:09:35.246085\",\n                \"time_start\": \"2019-07-08T06:09:34.736259\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 284,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.067Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:56:54.527Z\",\n            \"updated\": \"2019-07-08T13:09:15.067Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"384.28299999999996\",\n                \"time_end\": \"2019-07-08T06:09:15.067084\",\n                \"time_start\": \"2019-07-08T06:09:14.682801\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 285,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.996Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:57:16.094Z\",\n            \"updated\": \"2019-07-08T13:09:15.996Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"379.29400000000004\",\n                \"time_end\": \"2019-07-08T06:09:15.996531\",\n                \"time_start\": \"2019-07-08T06:09:15.617237\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 286,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:17.216Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:57:37.028Z\",\n            \"updated\": \"2019-07-08T13:09:17.216Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"666.523\",\n                \"time_end\": \"2019-07-08T06:09:17.216364\",\n                \"time_start\": \"2019-07-08T06:09:16.549841\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 287,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:18.045Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:57:55.063Z\",\n            \"updated\": \"2019-07-08T13:09:18.045Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"370.685\",\n                \"time_end\": \"2019-07-08T06:09:18.045757\",\n                \"time_start\": \"2019-07-08T06:09:17.675072\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 288,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:19.888Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:58:16.300Z\",\n            \"updated\": \"2019-07-08T13:09:19.888Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"560.432\",\n                \"time_end\": \"2019-07-08T06:09:19.888770\",\n                \"time_start\": \"2019-07-08T06:09:19.328338\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 289,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.517Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:58:37.506Z\",\n            \"updated\": \"2019-07-08T13:09:15.517Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"429.605\",\n                \"time_end\": \"2019-07-08T06:09:15.517044\",\n                \"time_start\": \"2019-07-08T06:09:15.087439\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 290,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:16.504Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:58:58.922Z\",\n            \"updated\": \"2019-07-08T13:09:16.504Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"397.589\",\n                \"time_end\": \"2019-07-08T06:09:16.503841\",\n                \"time_start\": \"2019-07-08T06:09:16.106252\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 291,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:17.640Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:59:20.018Z\",\n            \"updated\": \"2019-07-08T13:09:17.640Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"364.73299999999995\",\n                \"time_end\": \"2019-07-08T06:09:17.640806\",\n                \"time_start\": \"2019-07-08T06:09:17.276073\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 292,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:18.787Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T12:59:41.066Z\",\n            \"updated\": \"2019-07-08T13:09:18.787Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"701.072\",\n                \"time_end\": \"2019-07-08T06:09:18.787300\",\n                \"time_start\": \"2019-07-08T06:09:18.086228\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 293,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:20.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:00:03.673Z\",\n            \"updated\": \"2019-07-08T13:09:20.549Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"600.693\",\n                \"time_end\": \"2019-07-08T06:09:20.549035\",\n                \"time_start\": \"2019-07-08T06:09:19.948342\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 294,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:20.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:00:25.244Z\",\n            \"updated\": \"2019-07-08T13:09:20.913Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"322.274\",\n                \"time_end\": \"2019-07-08T06:09:20.913366\",\n                \"time_start\": \"2019-07-08T06:09:20.591092\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 295,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:15.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:00:46.542Z\",\n            \"updated\": \"2019-07-08T13:09:15.575Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:295\",\n                \"job_id\": 295,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 296,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:19.279Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:01:08.201Z\",\n            \"updated\": \"2019-07-08T13:09:19.279Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"433.85200000000003\",\n                \"time_end\": \"2019-07-08T06:09:19.279691\",\n                \"time_start\": \"2019-07-08T06:09:18.845839\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 297,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:22.029Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:01:29.679Z\",\n            \"updated\": \"2019-07-08T13:09:22.029Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"583.52\",\n                \"time_end\": \"2019-07-08T06:09:22.028830\",\n                \"time_start\": \"2019-07-08T06:09:21.445310\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 298,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:14.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:01:51.353Z\",\n            \"updated\": \"2019-07-08T13:09:14.575Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"1233.1380000000001\",\n                \"time_end\": \"2019-07-08T06:09:14.574902\",\n                \"time_start\": \"2019-07-08T06:09:13.341764\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_CDgPYgp.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 299,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:22.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:02:12.642Z\",\n            \"updated\": \"2019-07-08T13:09:22.414Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"346.666\",\n                \"time_end\": \"2019-07-08T06:09:22.414453\",\n                \"time_start\": \"2019-07-08T06:09:22.067787\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 300,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:21.363Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:02:33.583Z\",\n            \"updated\": \"2019-07-08T13:09:21.363Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"397.12199999999996\",\n                \"time_end\": \"2019-07-08T06:09:21.363600\",\n                \"time_start\": \"2019-07-08T06:09:20.966478\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 301,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:22.863Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:02:54.489Z\",\n            \"updated\": \"2019-07-08T13:09:22.863Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"412.04400000000004\",\n                \"time_end\": \"2019-07-08T06:09:22.863404\",\n                \"time_start\": \"2019-07-08T06:09:22.451360\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 302,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:23.767Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:03:16.250Z\",\n            \"updated\": \"2019-07-08T13:09:23.767Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"869.248\",\n                \"time_end\": \"2019-07-08T06:09:23.767020\",\n                \"time_start\": \"2019-07-08T06:09:22.897772\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 303,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:24.110Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:03:37.308Z\",\n            \"updated\": \"2019-07-08T13:09:24.110Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"305.573\",\n                \"time_end\": \"2019-07-08T06:09:24.110189\",\n                \"time_start\": \"2019-07-08T06:09:23.804616\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 304,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:24.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:03:58.497Z\",\n            \"updated\": \"2019-07-08T13:09:24.684Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"520.2379999999999\",\n                \"time_end\": \"2019-07-08T06:09:24.684808\",\n                \"time_start\": \"2019-07-08T06:09:24.164570\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 305,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:25.297Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:04:19.796Z\",\n            \"updated\": \"2019-07-08T13:09:25.297Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"572.788\",\n                \"time_end\": \"2019-07-08T06:09:25.297431\",\n                \"time_start\": \"2019-07-08T06:09:24.724643\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 306,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:25.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:04:41.572Z\",\n            \"updated\": \"2019-07-08T13:09:25.780Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"436.89099999999996\",\n                \"time_end\": \"2019-07-08T06:09:25.780636\",\n                \"time_start\": \"2019-07-08T06:09:25.343745\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 307,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:26.148Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:05:03.478Z\",\n            \"updated\": \"2019-07-08T13:09:26.148Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"322.464\",\n                \"time_end\": \"2019-07-08T06:09:26.148037\",\n                \"time_start\": \"2019-07-08T06:09:25.825573\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 308,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:26.833Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:05:24.762Z\",\n            \"updated\": \"2019-07-08T13:09:26.833Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"636.976\",\n                \"time_end\": \"2019-07-08T06:09:26.833849\",\n                \"time_start\": \"2019-07-08T06:09:26.196873\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 309,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:27.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:06:10.974Z\",\n            \"updated\": \"2019-07-08T13:09:27.177Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"291.86\",\n                \"time_end\": \"2019-07-08T06:09:27.177604\",\n                \"time_start\": \"2019-07-08T06:09:26.885744\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_NZiYR0I.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 310,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:27.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:06:39.392Z\",\n            \"updated\": \"2019-07-08T13:09:27.329Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"109.906\",\n                \"time_end\": \"2019-07-08T06:09:27.329491\",\n                \"time_start\": \"2019-07-08T06:09:27.219585\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2010-01-21\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 311,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:27.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:07:30.748Z\",\n            \"updated\": \"2019-07-08T13:09:27.639Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"289.588\",\n                \"time_end\": \"2019-07-08T06:09:27.638997\",\n                \"time_start\": \"2019-07-08T06:09:27.349409\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2011-01-16\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 312,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:28.127Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:08:11.905Z\",\n            \"updated\": \"2019-07-08T13:09:28.127Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"450.232\",\n                \"time_end\": \"2019-07-08T06:09:28.127644\",\n                \"time_start\": \"2019-07-08T06:09:27.677412\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2010-01-15\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 313,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T13:09:28.803Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T13:09:05.173Z\",\n            \"updated\": \"2019-07-08T13:09:28.803Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"595.807\",\n                \"time_end\": \"2019-07-08T06:09:28.803210\",\n                \"time_start\": \"2019-07-08T06:09:28.207403\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2012-01-22\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 314,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:46.367Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:31:54.108Z\",\n            \"updated\": \"2019-07-08T23:49:46.367Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"502.791\",\n                \"time_end\": \"2019-07-08T16:49:46.367635\",\n                \"time_start\": \"2019-07-08T16:49:45.864844\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_LQ5jeN1.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 315,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:45.836Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:32:16.325Z\",\n            \"updated\": \"2019-07-08T23:49:45.836Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"414.803\",\n                \"time_end\": \"2019-07-08T16:49:45.836016\",\n                \"time_start\": \"2019-07-08T16:49:45.421213\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_4Xv1Enm.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 316,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:45.373Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:32:38.307Z\",\n            \"updated\": \"2019-07-08T23:49:45.373Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"737.6030000000001\",\n                \"time_end\": \"2019-07-08T16:49:45.373812\",\n                \"time_start\": \"2019-07-08T16:49:44.636209\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_gPXIl2Q.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 317,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:44.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:32:59.806Z\",\n            \"updated\": \"2019-07-08T23:49:44.575Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"480.012\",\n                \"time_end\": \"2019-07-08T16:49:44.575603\",\n                \"time_start\": \"2019-07-08T16:49:44.095591\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_gvYnwTC.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 318,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:44.052Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:33:21.845Z\",\n            \"updated\": \"2019-07-08T23:49:44.052Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"468.037\",\n                \"time_end\": \"2019-07-08T16:49:44.052082\",\n                \"time_start\": \"2019-07-08T16:49:43.584045\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_24-unewstv-khara-sach_sS9dBvv.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 319,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:43.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:33:43.783Z\",\n            \"updated\": \"2019-07-08T23:49:43.550Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"338.10200000000003\",\n                \"time_end\": \"2019-07-08T16:49:43.549798\",\n                \"time_start\": \"2019-07-08T16:49:43.211696\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_DX1bFiJ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 320,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:43.175Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:03.547Z\",\n            \"updated\": \"2019-07-08T23:49:43.175Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"653.313\",\n                \"time_end\": \"2019-07-08T16:49:43.175106\",\n                \"time_start\": \"2019-07-08T16:49:42.521793\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_9-unewstv-muqabil_j3rfL35.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 321,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:42.424Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:25.792Z\",\n            \"updated\": \"2019-07-08T23:49:42.424Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"541.2900000000001\",\n                \"time_end\": \"2019-07-08T16:49:42.424263\",\n                \"time_start\": \"2019-07-08T16:49:41.882973\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_10-unewstv-off-the-record_bUN9vWS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 322,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:41.846Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:47.837Z\",\n            \"updated\": \"2019-07-08T23:49:41.846Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"335.95399999999995\",\n                \"time_end\": \"2019-07-08T16:49:41.845974\",\n                \"time_start\": \"2019-07-08T16:49:41.510020\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_BWoMROD.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 323,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:41.456Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:34:57.380Z\",\n            \"updated\": \"2019-07-08T23:49:41.456Z\",\n            \"extra_data\": {\n                \"dupes\": 16,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"173.31099999999998\",\n                \"time_end\": \"2019-07-08T16:49:41.455845\",\n                \"time_start\": \"2019-07-08T16:49:41.282534\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_LNAPYOT.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 324,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:41.221Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:35:19.915Z\",\n            \"updated\": \"2019-07-08T23:49:41.221Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"594.576\",\n                \"time_end\": \"2019-07-08T16:49:41.220913\",\n                \"time_start\": \"2019-07-08T16:49:40.626337\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_13-unewstv-the-reporters_wXwuEQK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 325,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:40.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:35:41.892Z\",\n            \"updated\": \"2019-07-08T23:49:40.568Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"546.806\",\n                \"time_end\": \"2019-07-08T16:49:40.568490\",\n                \"time_start\": \"2019-07-08T16:49:40.021684\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_SsDjJ5z.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 326,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:39.971Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:36:04.218Z\",\n            \"updated\": \"2019-07-08T23:49:39.971Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"380.894\",\n                \"time_end\": \"2019-07-08T16:49:39.971736\",\n                \"time_start\": \"2019-07-08T16:49:39.590842\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_15-unewstv-night-edition_DEGm4yc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 327,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:39.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:36:25.458Z\",\n            \"updated\": \"2019-07-08T23:49:39.542Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"406.915\",\n                \"time_end\": \"2019-07-08T16:49:39.542093\",\n                \"time_start\": \"2019-07-08T16:49:39.135178\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_16-unewstv-jirga_88Trkvo.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 328,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:39.073Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:36:47.418Z\",\n            \"updated\": \"2019-07-08T23:49:39.073Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"692.87\",\n                \"time_end\": \"2019-07-08T16:49:39.073300\",\n                \"time_start\": \"2019-07-08T16:49:38.380430\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_17-unewstv-bebaak_UtPMJJw.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 329,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:38.331Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:37:08.635Z\",\n            \"updated\": \"2019-07-08T23:49:38.331Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"443.218\",\n                \"time_end\": \"2019-07-08T16:49:38.331193\",\n                \"time_start\": \"2019-07-08T16:49:37.887975\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_18-unewstv-capital-talk_KbZ76Pb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 330,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:37.853Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:37:27.469Z\",\n            \"updated\": \"2019-07-08T23:49:37.853Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"382.822\",\n                \"time_end\": \"2019-07-08T16:49:37.853615\",\n                \"time_start\": \"2019-07-08T16:49:37.470793\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_R0Lvhoi.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 331,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:37.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:37:49.627Z\",\n            \"updated\": \"2019-07-08T23:49:37.423Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"273.241\",\n                \"time_end\": \"2019-07-08T16:49:37.423814\",\n                \"time_start\": \"2019-07-08T16:49:37.150573\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_20-unewstv-power-play_ypRCkbj.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 332,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:37.113Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:38:12.462Z\",\n            \"updated\": \"2019-07-08T23:49:37.113Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"656.887\",\n                \"time_end\": \"2019-07-08T16:49:37.113453\",\n                \"time_start\": \"2019-07-08T16:49:36.456566\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_Q3b8iDa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 333,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:36.396Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:38:34.892Z\",\n            \"updated\": \"2019-07-08T23:49:36.397Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"425.281\",\n                \"time_end\": \"2019-07-08T16:49:36.396860\",\n                \"time_start\": \"2019-07-08T16:49:35.971579\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_22-unewstv-think-tank_rACXefr.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 334,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:35.940Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:38:56.942Z\",\n            \"updated\": \"2019-07-08T23:49:35.940Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"404.112\",\n                \"time_end\": \"2019-07-08T16:49:35.940290\",\n                \"time_start\": \"2019-07-08T16:49:35.536178\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_cyIOzCE.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 335,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:35.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:39:18.964Z\",\n            \"updated\": \"2019-07-08T23:49:35.493Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"305.969\",\n                \"time_end\": \"2019-07-08T16:49:35.493691\",\n                \"time_start\": \"2019-07-08T16:49:35.187722\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_25-unewstv-kal-tak_EuzwCUl.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 336,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:35.133Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:39:41.073Z\",\n            \"updated\": \"2019-07-08T23:49:35.133Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"843.067\",\n                \"time_end\": \"2019-07-08T16:49:35.133103\",\n                \"time_start\": \"2019-07-08T16:49:34.290036\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_27-unewstv-to-the-point_IVhVpJ5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 337,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:34.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:40:03.588Z\",\n            \"updated\": \"2019-07-08T23:49:34.219Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"462.524\",\n                \"time_end\": \"2019-07-08T16:49:34.219426\",\n                \"time_start\": \"2019-07-08T16:49:33.756902\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_28-unewstv-news-eye_W7OJIuw.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 338,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:33.720Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:40:26.592Z\",\n            \"updated\": \"2019-07-08T23:49:33.720Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:338\",\n                \"job_id\": 338,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_29-unewstv-g-for-gharida_XOesQDx.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 339,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:33.681Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:40:48.659Z\",\n            \"updated\": \"2019-07-08T23:49:33.681Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"400.81600000000003\",\n                \"time_end\": \"2019-07-08T16:49:33.681337\",\n                \"time_start\": \"2019-07-08T16:49:33.280521\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_IDW9YlU.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 340,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:33.194Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:41:10.693Z\",\n            \"updated\": \"2019-07-08T23:49:33.194Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"418.75800000000004\",\n                \"time_end\": \"2019-07-08T16:49:33.194611\",\n                \"time_start\": \"2019-07-08T16:49:32.775853\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_XCX4Vz1.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 341,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:32.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:41:33.213Z\",\n            \"updated\": \"2019-07-08T23:49:32.716Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"622.1320000000001\",\n                \"time_end\": \"2019-07-08T16:49:32.716124\",\n                \"time_start\": \"2019-07-08T16:49:32.093992\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_whovBCb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 342,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:31.964Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:41:55.128Z\",\n            \"updated\": \"2019-07-08T23:49:31.964Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"557.421\",\n                \"time_end\": \"2019-07-08T16:49:31.964595\",\n                \"time_start\": \"2019-07-08T16:49:31.407174\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_qgjpjUk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 343,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:31.362Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:42:16.502Z\",\n            \"updated\": \"2019-07-08T23:49:31.362Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"365.719\",\n                \"time_end\": \"2019-07-08T16:49:31.361995\",\n                \"time_start\": \"2019-07-08T16:49:30.996276\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_34-unewstv-news-beat_LiC0Vej.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 344,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:30.949Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:42:38.031Z\",\n            \"updated\": \"2019-07-08T23:49:30.949Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"632.4530000000001\",\n                \"time_end\": \"2019-07-08T16:49:30.948982\",\n                \"time_start\": \"2019-07-08T16:49:30.316529\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_8cY5GUP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 345,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:30.229Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:43:00.423Z\",\n            \"updated\": \"2019-07-08T23:49:30.229Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"672.082\",\n                \"time_end\": \"2019-07-08T16:49:30.229714\",\n                \"time_start\": \"2019-07-08T16:49:29.557632\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_J6iiGdM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 346,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:29.512Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:43:22.055Z\",\n            \"updated\": \"2019-07-08T23:49:29.512Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"397.521\",\n                \"time_end\": \"2019-07-08T16:49:29.512259\",\n                \"time_start\": \"2019-07-08T16:49:29.114738\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_lE6pmQt.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 347,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:29.083Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:43:44.070Z\",\n            \"updated\": \"2019-07-08T23:49:29.083Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"395.752\",\n                \"time_end\": \"2019-07-08T16:49:29.083707\",\n                \"time_start\": \"2019-07-08T16:49:28.687955\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_N9mpnQV.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 348,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:28.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:44:06.049Z\",\n            \"updated\": \"2019-07-08T23:49:28.639Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"799.828\",\n                \"time_end\": \"2019-07-08T16:49:28.639016\",\n                \"time_start\": \"2019-07-08T16:49:27.839188\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_39-unewstv-on-the-front_Nplvqem.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 349,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:27.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:44:28.191Z\",\n            \"updated\": \"2019-07-08T23:49:27.758Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"434.61100000000005\",\n                \"time_end\": \"2019-07-08T16:49:27.758506\",\n                \"time_start\": \"2019-07-08T16:49:27.323895\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_RpEBsS9.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 350,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:27.262Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:44:50.357Z\",\n            \"updated\": \"2019-07-08T23:49:27.262Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 1,\n                \"duration\": \"2752.891\",\n                \"time_end\": \"2019-07-08T16:49:27.261897\",\n                \"time_start\": \"2019-07-08T16:49:24.509006\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_41-unewstv-seedhi-baat_oXF2WiA.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 351,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:24.428Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:45:12.656Z\",\n            \"updated\": \"2019-07-08T23:49:24.428Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"503.393\",\n                \"time_end\": \"2019-07-08T16:49:24.428254\",\n                \"time_start\": \"2019-07-08T16:49:23.924861\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_SslyaV7.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 352,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:23.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:46:07.304Z\",\n            \"updated\": \"2019-07-08T23:49:23.884Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"293.874\",\n                \"time_end\": \"2019-07-08T16:49:23.884358\",\n                \"time_start\": \"2019-07-08T16:49:23.590484\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_R3Jz1sY.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 353,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:23.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:46:40.081Z\",\n            \"updated\": \"2019-07-08T23:49:23.568Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"105.88300000000001\",\n                \"time_end\": \"2019-07-08T16:49:23.568201\",\n                \"time_start\": \"2019-07-08T16:49:23.462318\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2010-01-21\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_54-vpk-dil-e-majboor_hrAk1JV.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 354,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:23.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:47:34.229Z\",\n            \"updated\": \"2019-07-08T23:49:23.416Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"473.785\",\n                \"time_end\": \"2019-07-08T16:49:23.415891\",\n                \"time_start\": \"2019-07-08T16:49:22.942106\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2011-01-16\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_51-vpk-sawera_pMrdLsq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 355,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:22.853Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:48:20.393Z\",\n            \"updated\": \"2019-07-08T23:49:22.853Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"459.462\",\n                \"time_end\": \"2019-07-08T16:49:22.853766\",\n                \"time_start\": \"2019-07-08T16:49:22.394304\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2010-01-15\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_jCv6beS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 356,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-08T23:49:22.336Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-08T23:49:12.297Z\",\n            \"updated\": \"2019-07-08T23:49:22.336Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"1665.883\",\n                \"time_end\": \"2019-07-08T16:49:22.336408\",\n                \"time_start\": \"2019-07-08T16:49:20.670525\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2012-01-22\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-08/2019-07-08-1-bilgrami-feed_id_53-vpk-bulbulay_ikgoYbW.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 357,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:39.295Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:24:15.902Z\",\n            \"updated\": \"2019-07-09T09:43:39.295Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2753.702\",\n                \"time_end\": \"2019-07-09T02:43:39.294991\",\n                \"time_start\": \"2019-07-09T02:43:36.541289\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 358,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:41.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:24:38.895Z\",\n            \"updated\": \"2019-07-09T09:43:41.786Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2458.5409999999997\",\n                \"time_end\": \"2019-07-09T02:43:41.786583\",\n                \"time_start\": \"2019-07-09T02:43:39.328042\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_mHYzbQI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 359,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:41:56.499Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:25:00.736Z\",\n            \"updated\": \"2019-07-09T09:41:56.499Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2445.266\",\n                \"time_end\": \"2019-07-09T02:41:56.499399\",\n                \"time_start\": \"2019-07-09T02:41:54.054133\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 360,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:00.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:25:23.556Z\",\n            \"updated\": \"2019-07-09T09:42:00.568Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2836.927\",\n                \"time_end\": \"2019-07-09T02:42:00.568412\",\n                \"time_start\": \"2019-07-09T02:41:57.731485\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 361,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:03.325Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:25:45.767Z\",\n            \"updated\": \"2019-07-09T09:42:03.325Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2668.866\",\n                \"time_end\": \"2019-07-09T02:42:03.325400\",\n                \"time_start\": \"2019-07-09T02:42:00.656534\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 362,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:08.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:26:07.948Z\",\n            \"updated\": \"2019-07-09T09:42:08.973Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3192.509\",\n                \"time_end\": \"2019-07-09T02:42:08.973481\",\n                \"time_start\": \"2019-07-09T02:42:05.780972\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 363,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:14.143Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:26:27.966Z\",\n            \"updated\": \"2019-07-09T09:42:14.143Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 36,\n                \"duration\": \"2740.9880000000003\",\n                \"time_end\": \"2019-07-09T02:42:14.143024\",\n                \"time_start\": \"2019-07-09T02:42:11.402036\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 364,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:16.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:26:50.016Z\",\n            \"updated\": \"2019-07-09T09:42:16.620Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2446.843\",\n                \"time_end\": \"2019-07-09T02:42:16.620227\",\n                \"time_start\": \"2019-07-09T02:42:14.173384\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 365,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:20.129Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:27:11.805Z\",\n            \"updated\": \"2019-07-09T09:42:20.129Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3427.259\",\n                \"time_end\": \"2019-07-09T02:42:20.129419\",\n                \"time_start\": \"2019-07-09T02:42:16.702160\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 366,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:41:57.634Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:27:21.857Z\",\n            \"updated\": \"2019-07-09T09:41:57.635Z\",\n            \"extra_data\": {\n                \"dupes\": 17,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 17,\n                \"duration\": \"1099.3790000000001\",\n                \"time_end\": \"2019-07-09T02:41:57.634791\",\n                \"time_start\": \"2019-07-09T02:41:56.535412\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 367,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:11.375Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:27:43.943Z\",\n            \"updated\": \"2019-07-09T09:42:11.375Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2243.861\",\n                \"time_end\": \"2019-07-09T02:42:11.375744\",\n                \"time_start\": \"2019-07-09T02:42:09.131883\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 368,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:22.642Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:28:06.863Z\",\n            \"updated\": \"2019-07-09T09:42:22.642Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2463.9449999999997\",\n                \"time_end\": \"2019-07-09T02:42:22.641993\",\n                \"time_start\": \"2019-07-09T02:42:20.178048\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_eeTEOO4.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 369,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:25.251Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:28:31.605Z\",\n            \"updated\": \"2019-07-09T09:42:25.251Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2571.435\",\n                \"time_end\": \"2019-07-09T02:42:25.251005\",\n                \"time_start\": \"2019-07-09T02:42:22.679570\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 370,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:05.714Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:28:55.047Z\",\n            \"updated\": \"2019-07-09T09:42:05.714Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2352.164\",\n                \"time_end\": \"2019-07-09T02:42:05.714410\",\n                \"time_start\": \"2019-07-09T02:42:03.362246\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 371,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:28.182Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:29:17.826Z\",\n            \"updated\": \"2019-07-09T09:42:28.182Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2885.5879999999997\",\n                \"time_end\": \"2019-07-09T02:42:28.182094\",\n                \"time_start\": \"2019-07-09T02:42:25.296506\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 372,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:41:53.985Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:29:39.339Z\",\n            \"updated\": \"2019-07-09T09:41:53.985Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"6587.82\",\n                \"time_end\": \"2019-07-09T02:41:53.985218\",\n                \"time_start\": \"2019-07-09T02:41:47.397398\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 373,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:30.768Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:29:58.373Z\",\n            \"updated\": \"2019-07-09T09:42:30.768Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 33,\n                \"duration\": \"2547.6519999999996\",\n                \"time_end\": \"2019-07-09T02:42:30.768280\",\n                \"time_start\": \"2019-07-09T02:42:28.220628\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 374,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:33.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:30:23.287Z\",\n            \"updated\": \"2019-07-09T09:42:33.700Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2866.058\",\n                \"time_end\": \"2019-07-09T02:42:33.700421\",\n                \"time_start\": \"2019-07-09T02:42:30.834363\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 375,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:36.513Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:30:45.328Z\",\n            \"updated\": \"2019-07-09T09:42:36.513Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2786.4610000000002\",\n                \"time_end\": \"2019-07-09T02:42:36.513304\",\n                \"time_start\": \"2019-07-09T02:42:33.726843\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 376,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:39.497Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:31:07.217Z\",\n            \"updated\": \"2019-07-09T09:42:39.498Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2948.721\",\n                \"time_end\": \"2019-07-09T02:42:39.497586\",\n                \"time_start\": \"2019-07-09T02:42:36.548865\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 377,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:42.063Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:31:31.646Z\",\n            \"updated\": \"2019-07-09T09:42:42.063Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2479.197\",\n                \"time_end\": \"2019-07-09T02:42:42.063066\",\n                \"time_start\": \"2019-07-09T02:42:39.583869\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 378,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:45.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:31:53.972Z\",\n            \"updated\": \"2019-07-09T09:42:45.231Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3092.05\",\n                \"time_end\": \"2019-07-09T02:42:45.231541\",\n                \"time_start\": \"2019-07-09T02:42:42.139491\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 379,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:48.156Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:32:16.515Z\",\n            \"updated\": \"2019-07-09T09:42:48.156Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2884.714\",\n                \"time_end\": \"2019-07-09T02:42:48.156601\",\n                \"time_start\": \"2019-07-09T02:42:45.271887\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 380,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:51.039Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:32:38.781Z\",\n            \"updated\": \"2019-07-09T09:42:51.039Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2802.3570000000004\",\n                \"time_end\": \"2019-07-09T02:42:51.039129\",\n                \"time_start\": \"2019-07-09T02:42:48.236772\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 381,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:51.087Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:33:01.734Z\",\n            \"updated\": \"2019-07-09T09:42:51.087Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:381\",\n                \"job_id\": 381,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 382,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:53.686Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:33:24.272Z\",\n            \"updated\": \"2019-07-09T09:42:53.687Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2574.529\",\n                \"time_end\": \"2019-07-09T02:42:53.686857\",\n                \"time_start\": \"2019-07-09T02:42:51.112328\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 383,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:56.355Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:33:46.136Z\",\n            \"updated\": \"2019-07-09T09:42:56.355Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2589.086\",\n                \"time_end\": \"2019-07-09T02:42:56.355793\",\n                \"time_start\": \"2019-07-09T02:42:53.766707\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 384,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:42:59.203Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:34:08.171Z\",\n            \"updated\": \"2019-07-09T09:42:59.203Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2810.636\",\n                \"time_end\": \"2019-07-09T02:42:59.203651\",\n                \"time_start\": \"2019-07-09T02:42:56.393015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_idJXmoG.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 385,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:01.532Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:34:30.113Z\",\n            \"updated\": \"2019-07-09T09:43:01.532Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2303.855\",\n                \"time_end\": \"2019-07-09T02:43:01.532798\",\n                \"time_start\": \"2019-07-09T02:42:59.228943\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 386,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:04.952Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:34:51.583Z\",\n            \"updated\": \"2019-07-09T09:43:04.952Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3349.531\",\n                \"time_end\": \"2019-07-09T02:43:04.951920\",\n                \"time_start\": \"2019-07-09T02:43:01.602389\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 387,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:10.236Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:35:14.509Z\",\n            \"updated\": \"2019-07-09T09:43:10.236Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2695.599\",\n                \"time_end\": \"2019-07-09T02:43:10.236340\",\n                \"time_start\": \"2019-07-09T02:43:07.540741\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 388,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:13.809Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:35:36.456Z\",\n            \"updated\": \"2019-07-09T09:43:13.809Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3432.868\",\n                \"time_end\": \"2019-07-09T02:43:13.809677\",\n                \"time_start\": \"2019-07-09T02:43:10.376809\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 389,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:18.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:35:58.691Z\",\n            \"updated\": \"2019-07-09T09:43:18.620Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2635.017\",\n                \"time_end\": \"2019-07-09T02:43:18.620485\",\n                \"time_start\": \"2019-07-09T02:43:15.985468\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 390,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:24.517Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:36:20.546Z\",\n            \"updated\": \"2019-07-09T09:43:24.517Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3399.96\",\n                \"time_end\": \"2019-07-09T02:43:24.517026\",\n                \"time_start\": \"2019-07-09T02:43:21.117066\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 391,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:07.453Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:36:42.093Z\",\n            \"updated\": \"2019-07-09T09:43:07.453Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2475.978\",\n                \"time_end\": \"2019-07-09T02:43:07.453501\",\n                \"time_start\": \"2019-07-09T02:43:04.977523\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 392,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:21.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:37:04.164Z\",\n            \"updated\": \"2019-07-09T09:43:21.091Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2439.288\",\n                \"time_end\": \"2019-07-09T02:43:21.091609\",\n                \"time_start\": \"2019-07-09T02:43:18.652321\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 393,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:26.818Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:37:26.887Z\",\n            \"updated\": \"2019-07-09T09:43:26.818Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2269.071\",\n                \"time_end\": \"2019-07-09T02:43:26.818366\",\n                \"time_start\": \"2019-07-09T02:43:24.549295\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 394,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:15.963Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:37:48.634Z\",\n            \"updated\": \"2019-07-09T09:43:15.963Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2125.712\",\n                \"time_end\": \"2019-07-09T02:43:15.963110\",\n                \"time_start\": \"2019-07-09T02:43:13.837398\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 395,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:29.597Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:38:39.952Z\",\n            \"updated\": \"2019-07-09T09:43:29.597Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2716.5699999999997\",\n                \"time_end\": \"2019-07-09T02:43:29.597200\",\n                \"time_start\": \"2019-07-09T02:43:26.880630\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_uaUsiiS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 396,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:30.319Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:39:07.047Z\",\n            \"updated\": \"2019-07-09T09:43:30.319Z\",\n            \"extra_data\": {\n                \"dupes\": 10,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 10,\n                \"duration\": \"660.664\",\n                \"time_end\": \"2019-07-09T02:43:30.318978\",\n                \"time_start\": \"2019-07-09T02:43:29.658314\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2017-09-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 397,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:32.005Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:39:58.071Z\",\n            \"updated\": \"2019-07-09T09:43:32.005Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1634.1699999999998\",\n                \"time_end\": \"2019-07-09T02:43:32.005323\",\n                \"time_start\": \"2019-07-09T02:43:30.371153\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2017-12-27\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 398,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:34.236Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:40:48.324Z\",\n            \"updated\": \"2019-07-09T09:43:34.236Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 25,\n                \"duration\": \"2203.073\",\n                \"time_end\": \"2019-07-09T02:43:34.236256\",\n                \"time_start\": \"2019-07-09T02:43:32.033183\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2017-11-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 399,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-09T09:43:36.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-09T09:41:39.532Z\",\n            \"updated\": \"2019-07-09T09:43:36.509Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"2236.936\",\n                \"time_end\": \"2019-07-09T02:43:36.509288\",\n                \"time_start\": \"2019-07-09T02:43:34.272352\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2012-01-22\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 400,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:06.818Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:28:49.257Z\",\n            \"updated\": \"2019-07-10T06:47:06.818Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3187.927\",\n                \"time_end\": \"2019-07-09T23:47:06.818300\",\n                \"time_start\": \"2019-07-09T23:47:03.630373\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_Pqm1Jp6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 401,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:09.113Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:29:10.647Z\",\n            \"updated\": \"2019-07-10T06:47:09.113Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2262.2870000000003\",\n                \"time_end\": \"2019-07-09T23:47:09.113695\",\n                \"time_start\": \"2019-07-09T23:47:06.851408\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_alcRATp.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 402,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:12.666Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:29:32.054Z\",\n            \"updated\": \"2019-07-10T06:47:12.666Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3520.465\",\n                \"time_end\": \"2019-07-09T23:47:12.666597\",\n                \"time_start\": \"2019-07-09T23:47:09.146132\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_hyrowR9.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 403,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:17.386Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:29:53.242Z\",\n            \"updated\": \"2019-07-10T06:47:17.386Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2772.218\",\n                \"time_end\": \"2019-07-09T23:47:17.385975\",\n                \"time_start\": \"2019-07-09T23:47:14.613757\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_N6km4Ji.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 404,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:23.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:30:15.142Z\",\n            \"updated\": \"2019-07-10T06:47:23.493Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3517.997\",\n                \"time_end\": \"2019-07-09T23:47:23.493520\",\n                \"time_start\": \"2019-07-09T23:47:19.975523\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_24-unewstv-khara-sach_oVq4ple.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 405,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:26.842Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:30:36.594Z\",\n            \"updated\": \"2019-07-10T06:47:26.842Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3323.726\",\n                \"time_end\": \"2019-07-09T23:47:26.842224\",\n                \"time_start\": \"2019-07-09T23:47:23.518498\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_62jB367.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 406,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:32.557Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:30:57.752Z\",\n            \"updated\": \"2019-07-10T06:47:32.557Z\",\n            \"extra_data\": {\n                \"dupes\": 36,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 38,\n                \"duration\": \"3037.531\",\n                \"time_end\": \"2019-07-09T23:47:32.556893\",\n                \"time_start\": \"2019-07-09T23:47:29.519362\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_9-unewstv-muqabil_pn1UEmf.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 407,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:35.139Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:31:19.713Z\",\n            \"updated\": \"2019-07-10T06:47:35.139Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2493.181\",\n                \"time_end\": \"2019-07-09T23:47:35.139542\",\n                \"time_start\": \"2019-07-09T23:47:32.646361\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_10-unewstv-off-the-record_9BGyIzc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 408,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:38.250Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:31:43.163Z\",\n            \"updated\": \"2019-07-10T06:47:38.250Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2928.737\",\n                \"time_end\": \"2019-07-09T23:47:38.250806\",\n                \"time_start\": \"2019-07-09T23:47:35.322069\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_BN1Al1d.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 409,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:14.591Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:31:53.214Z\",\n            \"updated\": \"2019-07-10T06:47:14.591Z\",\n            \"extra_data\": {\n                \"dupes\": 17,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 18,\n                \"duration\": \"1863.353\",\n                \"time_end\": \"2019-07-09T23:47:14.591332\",\n                \"time_start\": \"2019-07-09T23:47:12.727979\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_RXlTS1p.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 410,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:29.490Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:32:14.718Z\",\n            \"updated\": \"2019-07-10T06:47:29.490Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2559.8990000000003\",\n                \"time_end\": \"2019-07-09T23:47:29.490362\",\n                \"time_start\": \"2019-07-09T23:47:26.930463\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_13-unewstv-the-reporters_6hok54y.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 411,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:41.760Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:32:36.346Z\",\n            \"updated\": \"2019-07-10T06:47:41.760Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3482.514\",\n                \"time_end\": \"2019-07-09T23:47:41.760024\",\n                \"time_start\": \"2019-07-09T23:47:38.277510\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_klos1ti.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 412,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:44.167Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:32:58.137Z\",\n            \"updated\": \"2019-07-10T06:47:44.167Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2339.8500000000004\",\n                \"time_end\": \"2019-07-09T23:47:44.167623\",\n                \"time_start\": \"2019-07-09T23:47:41.827773\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_15-unewstv-night-edition_63nuPb6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 413,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:19.951Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:33:19.337Z\",\n            \"updated\": \"2019-07-10T06:47:19.951Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2495.469\",\n                \"time_end\": \"2019-07-09T23:47:19.951413\",\n                \"time_start\": \"2019-07-09T23:47:17.455944\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_16-unewstv-jirga_Bl7zUEA.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 414,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:47.606Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:33:40.891Z\",\n            \"updated\": \"2019-07-10T06:47:47.607Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3365.59\",\n                \"time_end\": \"2019-07-09T23:47:47.606865\",\n                \"time_start\": \"2019-07-09T23:47:44.241275\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_17-unewstv-bebaak_eEhAh9w.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 415,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:45:58.170Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:34:01.676Z\",\n            \"updated\": \"2019-07-10T06:45:58.170Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"5457.282\",\n                \"time_end\": \"2019-07-09T23:45:58.170327\",\n                \"time_start\": \"2019-07-09T23:45:52.713045\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_18-unewstv-capital-talk_fPLwvbX.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 416,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:00.997Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:34:20.821Z\",\n            \"updated\": \"2019-07-10T06:46:00.997Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 33,\n                \"duration\": \"2768.131\",\n                \"time_end\": \"2019-07-09T23:46:00.997175\",\n                \"time_start\": \"2019-07-09T23:45:58.229044\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_EEVvEcc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 417,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:03.614Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:34:41.886Z\",\n            \"updated\": \"2019-07-10T06:46:03.614Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2452.368\",\n                \"time_end\": \"2019-07-09T23:46:03.614237\",\n                \"time_start\": \"2019-07-09T23:46:01.161869\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_20-unewstv-power-play_9981nf9.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 418,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:09.020Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:35:03.553Z\",\n            \"updated\": \"2019-07-10T06:46:09.020Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2212.26\",\n                \"time_end\": \"2019-07-09T23:46:09.020240\",\n                \"time_start\": \"2019-07-09T23:46:06.807980\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_2PMGWcW.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 419,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:11.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:35:24.843Z\",\n            \"updated\": \"2019-07-10T06:46:11.845Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2793.6040000000003\",\n                \"time_end\": \"2019-07-09T23:46:11.845503\",\n                \"time_start\": \"2019-07-09T23:46:09.051899\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_22-unewstv-think-tank_kLl7HPo.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 420,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:15.499Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:35:46.239Z\",\n            \"updated\": \"2019-07-10T06:46:15.499Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3576.161\",\n                \"time_end\": \"2019-07-09T23:46:15.474115\",\n                \"time_start\": \"2019-07-09T23:46:11.897954\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_Unqi6JJ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 421,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:18.082Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:36:07.538Z\",\n            \"updated\": \"2019-07-10T06:46:18.082Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2492.266\",\n                \"time_end\": \"2019-07-09T23:46:18.082502\",\n                \"time_start\": \"2019-07-09T23:46:15.590236\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_25-unewstv-kal-tak_jfCMDYc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 422,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:23.087Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:36:29.697Z\",\n            \"updated\": \"2019-07-10T06:46:23.087Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2253.6130000000003\",\n                \"time_end\": \"2019-07-09T23:46:23.086943\",\n                \"time_start\": \"2019-07-09T23:46:20.833330\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_27-unewstv-to-the-point_bC7L1dl.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 423,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:06.779Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:36:51.653Z\",\n            \"updated\": \"2019-07-10T06:46:06.779Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3135.221\",\n                \"time_end\": \"2019-07-09T23:46:06.779029\",\n                \"time_start\": \"2019-07-09T23:46:03.643808\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_28-unewstv-news-eye_6JtfgcM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 424,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:15.538Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:37:13.705Z\",\n            \"updated\": \"2019-07-10T06:46:15.538Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:424\",\n                \"job_id\": 424,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_29-unewstv-g-for-gharida_htVUP7r.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 425,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:26.041Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:37:35.264Z\",\n            \"updated\": \"2019-07-10T06:46:26.041Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2931.469\",\n                \"time_end\": \"2019-07-09T23:46:26.040932\",\n                \"time_start\": \"2019-07-09T23:46:23.109463\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_phOK3Ln.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 426,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:28.738Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:37:56.652Z\",\n            \"updated\": \"2019-07-10T06:46:28.739Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2602.5879999999997\",\n                \"time_end\": \"2019-07-09T23:46:28.738850\",\n                \"time_start\": \"2019-07-09T23:46:26.136262\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_7ZfDzK6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 427,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:20.765Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:38:18.091Z\",\n            \"updated\": \"2019-07-10T06:46:20.765Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2658.534\",\n                \"time_end\": \"2019-07-09T23:46:20.765183\",\n                \"time_start\": \"2019-07-09T23:46:18.106649\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_1AyM6V5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 428,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:32.685Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:38:39.383Z\",\n            \"updated\": \"2019-07-10T06:46:32.685Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3848.42\",\n                \"time_end\": \"2019-07-09T23:46:32.685809\",\n                \"time_start\": \"2019-07-09T23:46:28.837389\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_f2nw1aH.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 429,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:35.472Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:39:00.549Z\",\n            \"updated\": \"2019-07-10T06:46:35.472Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2762.335\",\n                \"time_end\": \"2019-07-09T23:46:35.472041\",\n                \"time_start\": \"2019-07-09T23:46:32.709706\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_34-unewstv-news-beat_2KSc2t7.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 430,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:38.241Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:39:22.131Z\",\n            \"updated\": \"2019-07-10T06:46:38.241Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2655.248\",\n                \"time_end\": \"2019-07-09T23:46:38.241556\",\n                \"time_start\": \"2019-07-09T23:46:35.586308\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_axR6HRH.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 431,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:41.713Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:39:43.338Z\",\n            \"updated\": \"2019-07-10T06:46:41.713Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3434.64\",\n                \"time_end\": \"2019-07-09T23:46:41.713183\",\n                \"time_start\": \"2019-07-09T23:46:38.278543\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_ovc8MKH.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 432,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:44.573Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:40:05.243Z\",\n            \"updated\": \"2019-07-10T06:46:44.573Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2832.54\",\n                \"time_end\": \"2019-07-09T23:46:44.573768\",\n                \"time_start\": \"2019-07-09T23:46:41.741228\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_M2sqRk6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 433,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:47.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:40:26.629Z\",\n            \"updated\": \"2019-07-10T06:46:47.577Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2947.947\",\n                \"time_end\": \"2019-07-09T23:46:47.577794\",\n                \"time_start\": \"2019-07-09T23:46:44.629847\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_oT6MXXO.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 434,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:50.680Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:40:47.719Z\",\n            \"updated\": \"2019-07-10T06:47:50.680Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3016.786\",\n                \"time_end\": \"2019-07-09T23:47:50.680350\",\n                \"time_start\": \"2019-07-09T23:47:47.663564\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_39-unewstv-on-the-front_QYQMw9l.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 435,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:53.186Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:41:08.780Z\",\n            \"updated\": \"2019-07-10T06:47:53.186Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2396.946\",\n                \"time_end\": \"2019-07-09T23:47:53.186267\",\n                \"time_start\": \"2019-07-09T23:47:50.789321\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_ymGcVQ5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 436,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:56.699Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:41:30.219Z\",\n            \"updated\": \"2019-07-10T06:47:56.699Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3483.244\",\n                \"time_end\": \"2019-07-09T23:47:56.699844\",\n                \"time_start\": \"2019-07-09T23:47:53.216600\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_41-unewstv-seedhi-baat_c6IJVCl.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 437,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:59.223Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:41:51.723Z\",\n            \"updated\": \"2019-07-10T06:47:59.223Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2499.069\",\n                \"time_end\": \"2019-07-09T23:47:59.223151\",\n                \"time_start\": \"2019-07-09T23:47:56.724082\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_KVdeztP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 438,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:48:02.173Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:42:47.820Z\",\n            \"updated\": \"2019-07-10T06:48:02.173Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2893.158\",\n                \"time_end\": \"2019-07-09T23:48:02.172982\",\n                \"time_start\": \"2019-07-09T23:47:59.279824\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_TgJ5RSK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 439,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:48.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:43:19.227Z\",\n            \"updated\": \"2019-07-10T06:46:48.548Z\",\n            \"extra_data\": {\n                \"dupes\": 9,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 9,\n                \"duration\": \"948.3960000000001\",\n                \"time_end\": \"2019-07-09T23:46:48.547851\",\n                \"time_start\": \"2019-07-09T23:46:47.599455\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_54-vpk-dil-e-majboor_cYrGE9A.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 440,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:51.889Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:44:07.046Z\",\n            \"updated\": \"2019-07-10T06:46:51.889Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3293.0130000000004\",\n                \"time_end\": \"2019-07-09T23:46:51.888992\",\n                \"time_start\": \"2019-07-09T23:46:48.595979\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_51-vpk-sawera_yUTKeHT.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 441,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:46:56.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:44:48.311Z\",\n            \"updated\": \"2019-07-10T06:46:56.693Z\",\n            \"extra_data\": {\n                \"dupes\": 58,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 58,\n                \"duration\": \"4705.651\",\n                \"time_end\": \"2019-07-09T23:46:56.693506\",\n                \"time_start\": \"2019-07-09T23:46:51.987855\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_GKltdjg.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 442,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T06:47:03.579Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T06:45:38.759Z\",\n            \"updated\": \"2019-07-10T06:47:03.579Z\",\n            \"extra_data\": {\n                \"dupes\": 88,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 88,\n                \"duration\": \"6856.879\",\n                \"time_end\": \"2019-07-09T23:47:03.579186\",\n                \"time_start\": \"2019-07-09T23:46:56.722307\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-09/2019-07-09-1-bilgrami-feed_id_53-vpk-bulbulay_ta7yzJv.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 443,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:38:16.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:38:16.423Z\",\n            \"updated\": \"2019-07-10T14:38:16.758Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 444,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:38:38.160Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:38:38.002Z\",\n            \"updated\": \"2019-07-10T14:38:38.160Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_cC9OEh2.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 445,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:39:00.018Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:38:59.357Z\",\n            \"updated\": \"2019-07-10T14:39:00.018Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 446,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:39:21.691Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:39:21.585Z\",\n            \"updated\": \"2019-07-10T14:39:21.691Z\",\n            \"extra_data\": null,\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 447,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:39:43.735Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:39:43.578Z\",\n            \"updated\": \"2019-07-10T14:39:43.735Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 448,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:40:06.016Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:40:05.838Z\",\n            \"updated\": \"2019-07-10T14:40:06.016Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 449,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:40:26.738Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:40:26.576Z\",\n            \"updated\": \"2019-07-10T14:40:26.738Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 450,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:40:48.193Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:40:48.029Z\",\n            \"updated\": \"2019-07-10T14:40:48.193Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 451,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:41:10.114Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:41:09.976Z\",\n            \"updated\": \"2019-07-10T14:41:10.114Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 452,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:41:20.428Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:41:20.285Z\",\n            \"updated\": \"2019-07-10T14:41:20.428Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 453,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:41:42.326Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:41:42.115Z\",\n            \"updated\": \"2019-07-10T14:41:42.326Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 454,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:42:03.841Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:42:03.730Z\",\n            \"updated\": \"2019-07-10T14:42:03.841Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_Uu8tYB3.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 455,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:42:26.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:42:26.041Z\",\n            \"updated\": \"2019-07-10T14:42:26.219Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 456,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:42:47.447Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:42:47.290Z\",\n            \"updated\": \"2019-07-10T14:42:47.447Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 457,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:43:09.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:43:09.336Z\",\n            \"updated\": \"2019-07-10T14:43:09.480Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 458,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:43:30.997Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:43:30.810Z\",\n            \"updated\": \"2019-07-10T14:43:30.997Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 459,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:43:48.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:43:48.745Z\",\n            \"updated\": \"2019-07-10T14:43:48.873Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 460,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:44:10.400Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:44:10.290Z\",\n            \"updated\": \"2019-07-10T14:44:10.400Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 461,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:44:33.414Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:44:32.125Z\",\n            \"updated\": \"2019-07-10T14:44:33.414Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 462,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:44:54.877Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:44:54.692Z\",\n            \"updated\": \"2019-07-10T14:44:54.877Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 463,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:45:17.137Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:45:17.022Z\",\n            \"updated\": \"2019-07-10T14:45:17.137Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 464,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:45:39.060Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:45:38.945Z\",\n            \"updated\": \"2019-07-10T14:45:39.060Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 465,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:46:01.779Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:46:01.632Z\",\n            \"updated\": \"2019-07-10T14:46:01.779Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 466,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:46:23.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:46:23.129Z\",\n            \"updated\": \"2019-07-10T14:46:23.316Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-chaudhry.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 467,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:46:45.681Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:46:45.335Z\",\n            \"updated\": \"2019-07-10T14:46:45.681Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 468,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:47:07.904Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:47:07.513Z\",\n            \"updated\": \"2019-07-10T14:47:07.904Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 469,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:47:29.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:47:29.215Z\",\n            \"updated\": \"2019-07-10T14:47:29.463Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 470,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:47:51.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:47:51.502Z\",\n            \"updated\": \"2019-07-10T14:47:51.689Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_0jqPTvx.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 471,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:48:13.676Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:48:13.534Z\",\n            \"updated\": \"2019-07-10T14:48:13.676Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 472,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:48:35.117Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:48:34.860Z\",\n            \"updated\": \"2019-07-10T14:48:35.117Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 473,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:48:56.902Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:48:56.683Z\",\n            \"updated\": \"2019-07-10T14:48:56.902Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 474,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:49:18.836Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:49:18.683Z\",\n            \"updated\": \"2019-07-10T14:49:18.836Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 475,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:49:40.442Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:49:40.326Z\",\n            \"updated\": \"2019-07-10T14:49:40.442Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 476,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:50:02.965Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:50:02.740Z\",\n            \"updated\": \"2019-07-10T14:50:02.965Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 477,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:50:24.590Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:50:24.423Z\",\n            \"updated\": \"2019-07-10T14:50:24.590Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 478,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:50:46.456Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:50:46.311Z\",\n            \"updated\": \"2019-07-10T14:50:46.456Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 479,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:51:08.434Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:51:08.190Z\",\n            \"updated\": \"2019-07-10T14:51:08.434Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 480,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T14:51:30.022Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T14:51:29.909Z\",\n            \"updated\": \"2019-07-10T14:51:30.022Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 481,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:19:44.886Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:19:44.746Z\",\n            \"updated\": \"2019-07-10T15:19:44.886Z\",\n            \"extra_data\": null,\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 482,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:20:11.407Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:20:11.162Z\",\n            \"updated\": \"2019-07-10T15:20:11.407Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_ZSxM6BB.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 483,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:20:34.468Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:20:33.758Z\",\n            \"updated\": \"2019-07-10T15:20:34.468Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_LLxsTFd.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 484,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:20:56.101Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:20:55.906Z\",\n            \"updated\": \"2019-07-10T15:20:56.101Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_hpQ3D5A.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 485,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:21:17.382Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:21:17.109Z\",\n            \"updated\": \"2019-07-10T15:21:17.382Z\",\n            \"extra_data\": null,\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_7jhTeDJ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 486,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:21:38.496Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:21:38.375Z\",\n            \"updated\": \"2019-07-10T15:21:38.496Z\",\n            \"extra_data\": null,\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_57-unewstv-hasb-e-haal.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 487,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:22:00.196Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:22:00.038Z\",\n            \"updated\": \"2019-07-10T15:22:00.196Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_24-unewstv-khara-sach_WJSyZVH.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 488,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:22:22.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:22:22.443Z\",\n            \"updated\": \"2019-07-10T15:22:22.635Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_qMej26E.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 489,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:22:43.642Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:22:43.506Z\",\n            \"updated\": \"2019-07-10T15:22:43.642Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_9-unewstv-muqabil_SV8vxpP.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 490,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:23:05.348Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:23:05.182Z\",\n            \"updated\": \"2019-07-10T15:23:05.348Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_10-unewstv-off-the-record_STWzPEB.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 491,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:23:26.483Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:23:26.384Z\",\n            \"updated\": \"2019-07-10T15:23:26.483Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_iW2ErSw.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 492,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:23:36.403Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:23:36.229Z\",\n            \"updated\": \"2019-07-10T15:23:36.403Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_1ZxgQC6.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 493,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:23:58.307Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:23:58.078Z\",\n            \"updated\": \"2019-07-10T15:23:58.307Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_13-unewstv-the-reporters_D4T0m2k.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 494,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:24:19.994Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:24:19.703Z\",\n            \"updated\": \"2019-07-10T15:24:19.994Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_qZHuoPf.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 495,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:24:51.562Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:24:51.178Z\",\n            \"updated\": \"2019-07-10T15:24:51.562Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_15-unewstv-night-edition_YJoNrMu.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 496,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:25:26.556Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:25:26.025Z\",\n            \"updated\": \"2019-07-10T15:25:26.556Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_16-unewstv-jirga_liWYH1o.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 497,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:25:59.223Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:25:55.898Z\",\n            \"updated\": \"2019-07-10T15:25:59.224Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_17-unewstv-bebaak_Svk1hkU.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 498,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:26:34.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:26:33.118Z\",\n            \"updated\": \"2019-07-10T15:26:34.091Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_18-unewstv-capital-talk_PusVOOm.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 499,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:27:12.462Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:27:11.961Z\",\n            \"updated\": \"2019-07-10T15:27:12.462Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_pO9vjGZ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 500,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:27:44.053Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:27:43.736Z\",\n            \"updated\": \"2019-07-10T15:27:44.053Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_20-unewstv-power-play_N3zUPtt.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 501,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:47.615Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:31:34.898Z\",\n            \"updated\": \"2019-07-10T15:53:47.615Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2896.306\",\n                \"time_end\": \"2019-07-10T08:53:47.615144\",\n                \"time_start\": \"2019-07-10T08:53:44.718838\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_45-unewstv-naya-pakistan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 502,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:44.678Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:31:57.151Z\",\n            \"updated\": \"2019-07-10T15:53:44.678Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3417.371\",\n                \"time_end\": \"2019-07-10T08:53:44.677884\",\n                \"time_start\": \"2019-07-10T08:53:41.260513\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha_sbojZlR.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 503,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:41.217Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:32:19.443Z\",\n            \"updated\": \"2019-07-10T15:53:41.217Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3316.1710000000003\",\n                \"time_end\": \"2019-07-10T08:53:41.217419\",\n                \"time_start\": \"2019-07-10T08:53:37.901248\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_46-unewstv-report-card.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 504,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:37.804Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:32:41.622Z\",\n            \"updated\": \"2019-07-10T15:53:37.804Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2836.539\",\n                \"time_end\": \"2019-07-10T08:53:37.804069\",\n                \"time_start\": \"2019-07-10T08:53:34.967530\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_aUKSQL5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 505,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:34.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:33:03.533Z\",\n            \"updated\": \"2019-07-10T15:53:34.891Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3588.203\",\n                \"time_end\": \"2019-07-10T08:53:34.871673\",\n                \"time_start\": \"2019-07-10T08:53:31.283470\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_YtLAVUx.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 506,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:31.250Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:33:25.700Z\",\n            \"updated\": \"2019-07-10T15:53:31.250Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3074.5260000000003\",\n                \"time_end\": \"2019-07-10T08:53:31.250138\",\n                \"time_start\": \"2019-07-10T08:53:28.175612\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_78s4pgn.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 507,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:28.114Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:33:48.586Z\",\n            \"updated\": \"2019-07-10T15:53:28.114Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3317.5409999999997\",\n                \"time_end\": \"2019-07-10T08:53:28.114152\",\n                \"time_start\": \"2019-07-10T08:53:24.796611\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_ge9Qj5n.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 508,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:24.717Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:34:10.307Z\",\n            \"updated\": \"2019-07-10T15:53:24.717Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3334.61\",\n                \"time_end\": \"2019-07-10T08:53:24.716842\",\n                \"time_start\": \"2019-07-10T08:53:21.382232\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_57-unewstv-hasb-e-haal_MZERWqd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 509,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:20.562Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:34:32.263Z\",\n            \"updated\": \"2019-07-10T15:53:20.562Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4181.495\",\n                \"time_end\": \"2019-07-10T08:53:20.562304\",\n                \"time_start\": \"2019-07-10T08:53:16.380809\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_24-unewstv-khara-sach_8vA3bDo.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 510,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:16.306Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:34:53.455Z\",\n            \"updated\": \"2019-07-10T15:53:16.306Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"4344.5689999999995\",\n                \"time_end\": \"2019-07-10T08:53:16.306315\",\n                \"time_start\": \"2019-07-10T08:53:11.961746\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_58-unewstv-mazaaq-raat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 511,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:11.923Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:35:15.957Z\",\n            \"updated\": \"2019-07-10T15:53:11.923Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3387.7419999999997\",\n                \"time_end\": \"2019-07-10T08:53:11.923189\",\n                \"time_start\": \"2019-07-10T08:53:08.535447\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_7rGfShR.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 512,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:08.413Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:35:37.457Z\",\n            \"updated\": \"2019-07-10T15:53:08.413Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 38,\n                \"duration\": \"4260.218\",\n                \"time_end\": \"2019-07-10T08:53:08.407188\",\n                \"time_start\": \"2019-07-10T08:53:04.146970\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_9-unewstv-muqabil_5z1g9qf.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 513,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:04.047Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:35:58.909Z\",\n            \"updated\": \"2019-07-10T15:53:04.047Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3554.6549999999997\",\n                \"time_end\": \"2019-07-10T08:53:04.047310\",\n                \"time_start\": \"2019-07-10T08:53:00.492655\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_10-unewstv-off-the-record_7jHuzCO.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 514,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:53:00.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:36:20.489Z\",\n            \"updated\": \"2019-07-10T15:53:00.397Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3714.077\",\n                \"time_end\": \"2019-07-10T08:53:00.397765\",\n                \"time_start\": \"2019-07-10T08:52:56.683688\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_kPlGhZc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 515,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:56.593Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:36:30.574Z\",\n            \"updated\": \"2019-07-10T15:52:56.593Z\",\n            \"extra_data\": {\n                \"dupes\": 18,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 18,\n                \"duration\": \"2613.772\",\n                \"time_end\": \"2019-07-10T08:52:56.593360\",\n                \"time_start\": \"2019-07-10T08:52:53.979588\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_lmBCpY7.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 516,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:53.910Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:36:52.128Z\",\n            \"updated\": \"2019-07-10T15:52:53.910Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2874.386\",\n                \"time_end\": \"2019-07-10T08:52:53.910086\",\n                \"time_start\": \"2019-07-10T08:52:51.035700\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_13-unewstv-the-reporters_j1Ckwyu.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 517,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:50.995Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:37:13.701Z\",\n            \"updated\": \"2019-07-10T15:52:50.995Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4181.4349999999995\",\n                \"time_end\": \"2019-07-10T08:52:50.995501\",\n                \"time_start\": \"2019-07-10T08:52:46.814066\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_9hX55U7.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 518,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:46.793Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:37:35.090Z\",\n            \"updated\": \"2019-07-10T15:52:46.793Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3233.0480000000002\",\n                \"time_end\": \"2019-07-10T08:52:46.793601\",\n                \"time_start\": \"2019-07-10T08:52:43.560553\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_15-unewstv-night-edition_1ndO8ri.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 519,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:43.491Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:37:56.068Z\",\n            \"updated\": \"2019-07-10T15:52:43.491Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3681.722\",\n                \"time_end\": \"2019-07-10T08:52:43.491109\",\n                \"time_start\": \"2019-07-10T08:52:39.809387\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_16-unewstv-jirga_uws0tcg.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 520,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:39.750Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:38:19.747Z\",\n            \"updated\": \"2019-07-10T15:52:39.750Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3509.38\",\n                \"time_end\": \"2019-07-10T08:52:39.750136\",\n                \"time_start\": \"2019-07-10T08:52:36.240756\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_17-unewstv-bebaak_8aAV3Bp.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 521,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:36.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:38:41.152Z\",\n            \"updated\": \"2019-07-10T15:52:36.200Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3112.152\",\n                \"time_end\": \"2019-07-10T08:52:36.200020\",\n                \"time_start\": \"2019-07-10T08:52:33.087868\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_18-unewstv-capital-talk_V8XRgNV.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 522,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:32.979Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:38:59.295Z\",\n            \"updated\": \"2019-07-10T15:52:32.979Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 33,\n                \"duration\": \"2496.149\",\n                \"time_end\": \"2019-07-10T08:52:32.979744\",\n                \"time_start\": \"2019-07-10T08:52:30.483595\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_6VdppE6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 523,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:30.396Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:39:20.561Z\",\n            \"updated\": \"2019-07-10T15:52:30.396Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3756.6459999999997\",\n                \"time_end\": \"2019-07-10T08:52:30.396126\",\n                \"time_start\": \"2019-07-10T08:52:26.639480\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_20-unewstv-power-play_3Ed2097.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 524,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:26.540Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:39:42.601Z\",\n            \"updated\": \"2019-07-10T15:52:26.540Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2794.934\",\n                \"time_end\": \"2019-07-10T08:52:26.540240\",\n                \"time_start\": \"2019-07-10T08:52:23.745306\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_YSKpTVt.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 525,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:23.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:40:04.747Z\",\n            \"updated\": \"2019-07-10T15:52:23.708Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2978.572\",\n                \"time_end\": \"2019-07-10T08:52:23.708072\",\n                \"time_start\": \"2019-07-10T08:52:20.729500\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_22-unewstv-think-tank_o840eWd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 526,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:20.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:40:27.855Z\",\n            \"updated\": \"2019-07-10T15:52:20.697Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4150.362\",\n                \"time_end\": \"2019-07-10T08:52:20.697526\",\n                \"time_start\": \"2019-07-10T08:52:16.547164\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_wApGPvx.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 527,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:16.460Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:40:50.072Z\",\n            \"updated\": \"2019-07-10T15:52:16.460Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3586.75\",\n                \"time_end\": \"2019-07-10T08:52:16.459949\",\n                \"time_start\": \"2019-07-10T08:52:12.873199\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_27-unewstv-to-the-point_kXtRbM6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 528,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:12.815Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:41:12.640Z\",\n            \"updated\": \"2019-07-10T15:52:12.815Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3834.6710000000003\",\n                \"time_end\": \"2019-07-10T08:52:12.815580\",\n                \"time_start\": \"2019-07-10T08:52:08.980909\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_28-unewstv-news-eye_iFJtgH9.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 529,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:08.871Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:41:34.732Z\",\n            \"updated\": \"2019-07-10T15:52:08.871Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2996.676\",\n                \"time_end\": \"2019-07-10T08:52:08.870926\",\n                \"time_start\": \"2019-07-10T08:52:05.874250\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-c_L7URDrs.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 530,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:05.831Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:41:57.325Z\",\n            \"updated\": \"2019-07-10T15:52:05.831Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:530\",\n                \"job_id\": 530,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_29-unewstv-g-for-gharida_wi8S6bE.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 531,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:05.802Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:42:20.158Z\",\n            \"updated\": \"2019-07-10T15:52:05.802Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3497.5420000000004\",\n                \"time_end\": \"2019-07-10T08:52:05.801913\",\n                \"time_start\": \"2019-07-10T08:52:02.304371\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_NC1ofUU.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 532,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:52:02.202Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:42:41.936Z\",\n            \"updated\": \"2019-07-10T15:52:02.202Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3283.7909999999997\",\n                \"time_end\": \"2019-07-10T08:52:02.202559\",\n                \"time_start\": \"2019-07-10T08:51:58.918768\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_oIc0S5P.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 533,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:58.886Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:43:03.518Z\",\n            \"updated\": \"2019-07-10T15:51:58.886Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2899.453\",\n                \"time_end\": \"2019-07-10T08:51:58.885890\",\n                \"time_start\": \"2019-07-10T08:51:55.986437\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_w6MmPQj.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 534,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:55.949Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:43:25.238Z\",\n            \"updated\": \"2019-07-10T15:51:55.949Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3274.687\",\n                \"time_end\": \"2019-07-10T08:51:55.949205\",\n                \"time_start\": \"2019-07-10T08:51:52.674518\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_NRiAtmu.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 535,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:52.623Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:43:46.309Z\",\n            \"updated\": \"2019-07-10T15:51:52.623Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3177.4\",\n                \"time_end\": \"2019-07-10T08:51:52.623801\",\n                \"time_start\": \"2019-07-10T08:51:49.446401\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_34-unewstv-news-beat_g2rkT3v.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 536,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:49.389Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:44:07.746Z\",\n            \"updated\": \"2019-07-10T15:51:49.389Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3286.289\",\n                \"time_end\": \"2019-07-10T08:51:49.388937\",\n                \"time_start\": \"2019-07-10T08:51:46.102648\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_Ci6uA8I.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 537,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:46.051Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:44:29.776Z\",\n            \"updated\": \"2019-07-10T15:51:46.051Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3448.705\",\n                \"time_end\": \"2019-07-10T08:51:46.051149\",\n                \"time_start\": \"2019-07-10T08:51:42.602444\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_JkUpvpP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 538,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:42.560Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:44:51.522Z\",\n            \"updated\": \"2019-07-10T15:51:42.560Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3660.0009999999997\",\n                \"time_end\": \"2019-07-10T08:51:42.560231\",\n                \"time_start\": \"2019-07-10T08:51:38.900230\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_cwFn3fK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 539,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:38.871Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:45:13.369Z\",\n            \"updated\": \"2019-07-10T15:51:38.871Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2899.286\",\n                \"time_end\": \"2019-07-10T08:51:38.871306\",\n                \"time_start\": \"2019-07-10T08:51:35.972020\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_scUQAxC.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 540,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:35.942Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:45:36.029Z\",\n            \"updated\": \"2019-07-10T15:51:35.942Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4678.496\",\n                \"time_end\": \"2019-07-10T08:51:35.942312\",\n                \"time_start\": \"2019-07-10T08:51:31.263816\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_39-unewstv-on-the-front_SPF071i.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 541,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:31.201Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:45:58.250Z\",\n            \"updated\": \"2019-07-10T15:51:31.201Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"5249.900000000001\",\n                \"time_end\": \"2019-07-10T08:51:31.201554\",\n                \"time_start\": \"2019-07-10T08:51:25.951654\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_CFx8094.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 542,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:25.874Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:46:20.206Z\",\n            \"updated\": \"2019-07-10T15:51:25.874Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3441.3779999999997\",\n                \"time_end\": \"2019-07-10T08:51:25.874675\",\n                \"time_start\": \"2019-07-10T08:51:22.433297\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_41-unewstv-seedhi-baat_50K31Iz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 543,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:22.367Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:46:41.781Z\",\n            \"updated\": \"2019-07-10T15:51:22.367Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3569.194\",\n                \"time_end\": \"2019-07-10T08:51:22.366858\",\n                \"time_start\": \"2019-07-10T08:51:18.797664\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_viwX01I.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 544,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:18.691Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:47:39.948Z\",\n            \"updated\": \"2019-07-10T15:51:18.691Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2879.1730000000002\",\n                \"time_end\": \"2019-07-10T08:51:18.690907\",\n                \"time_start\": \"2019-07-10T08:51:15.811734\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_Hns5YKS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 545,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:15.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:48:14.556Z\",\n            \"updated\": \"2019-07-10T15:51:15.763Z\",\n            \"extra_data\": {\n                \"dupes\": 9,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 9,\n                \"duration\": \"1525.1\",\n                \"time_end\": \"2019-07-10T08:51:15.763107\",\n                \"time_start\": \"2019-07-10T08:51:14.238007\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 546,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:14.160Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:49:04.639Z\",\n            \"updated\": \"2019-07-10T15:51:14.160Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3474.522\",\n                \"time_end\": \"2019-07-10T08:51:14.160127\",\n                \"time_start\": \"2019-07-10T08:51:10.685605\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 547,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:10.567Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:49:48.873Z\",\n            \"updated\": \"2019-07-10T15:51:10.567Z\",\n            \"extra_data\": {\n                \"dupes\": 58,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 58,\n                \"duration\": \"6790.488\",\n                \"time_end\": \"2019-07-10T08:51:10.567452\",\n                \"time_start\": \"2019-07-10T08:51:03.776964\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 548,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T15:51:03.756Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T15:50:40.929Z\",\n            \"updated\": \"2019-07-10T15:51:03.756Z\",\n            \"extra_data\": {\n                \"dupes\": 88,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 88,\n                \"duration\": \"10688.124\",\n                \"time_end\": \"2019-07-10T08:51:03.756115\",\n                \"time_start\": \"2019-07-10T08:50:53.067991\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 549,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:26.688Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:53:31.495Z\",\n            \"updated\": \"2019-07-10T18:16:26.688Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2850.743\",\n                \"time_end\": \"2019-07-10T11:16:26.687955\",\n                \"time_start\": \"2019-07-10T11:16:23.837212\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_45-unewstv-naya-pakistan_0bY2Wlq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 550,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:30.117Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:53:53.709Z\",\n            \"updated\": \"2019-07-10T18:16:30.117Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3403.487\",\n                \"time_end\": \"2019-07-10T11:16:30.117036\",\n                \"time_start\": \"2019-07-10T11:16:26.713549\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha_NAkTkpU.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 551,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:34.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:54:15.056Z\",\n            \"updated\": \"2019-07-10T18:16:34.498Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4231.883\",\n                \"time_end\": \"2019-07-10T11:16:34.498391\",\n                \"time_start\": \"2019-07-10T11:16:30.266508\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_46-unewstv-report-card_dv4qkbQ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 552,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:37.775Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:54:37.150Z\",\n            \"updated\": \"2019-07-10T18:16:37.775Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3243.914\",\n                \"time_end\": \"2019-07-10T11:16:37.775404\",\n                \"time_start\": \"2019-07-10T11:16:34.531490\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_9cc2Enq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 553,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:41.185Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:54:58.590Z\",\n            \"updated\": \"2019-07-10T18:16:41.185Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3284.519\",\n                \"time_end\": \"2019-07-10T11:16:41.184975\",\n                \"time_start\": \"2019-07-10T11:16:37.900456\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_4g6LzZt.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 554,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:44.448Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:55:21.045Z\",\n            \"updated\": \"2019-07-10T18:16:44.448Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3231.447\",\n                \"time_end\": \"2019-07-10T11:16:44.447870\",\n                \"time_start\": \"2019-07-10T11:16:41.216423\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_VLHUGRM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 555,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:48.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:55:42.986Z\",\n            \"updated\": \"2019-07-10T18:16:48.689Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"4205.259\",\n                \"time_end\": \"2019-07-10T11:16:48.689321\",\n                \"time_start\": \"2019-07-10T11:16:44.484062\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_PxKUY6c.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 556,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:13:54.787Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:56:04.283Z\",\n            \"updated\": \"2019-07-10T18:13:54.787Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"8106.445000000001\",\n                \"time_end\": \"2019-07-10T11:13:54.787584\",\n                \"time_start\": \"2019-07-10T11:13:46.681139\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_57-unewstv-hasb-e-haal_tbxGePM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 557,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:13:58.681Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:56:27.138Z\",\n            \"updated\": \"2019-07-10T18:13:58.681Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3869.4519999999998\",\n                \"time_end\": \"2019-07-10T11:13:58.681291\",\n                \"time_start\": \"2019-07-10T11:13:54.811839\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_24-unewstv-khara-sach_plaUPzh.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 558,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:01.656Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:56:49.146Z\",\n            \"updated\": \"2019-07-10T18:14:01.656Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2864.979\",\n                \"time_end\": \"2019-07-10T11:14:01.656296\",\n                \"time_start\": \"2019-07-10T11:13:58.791317\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_58-unewstv-mazaaq-raat_A0GsnIB.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 559,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:09.359Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:57:11.207Z\",\n            \"updated\": \"2019-07-10T18:14:09.359Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3607.344\",\n                \"time_end\": \"2019-07-10T11:14:09.359542\",\n                \"time_start\": \"2019-07-10T11:14:05.752198\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_EYlct2n.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 560,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:12.640Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:57:33.016Z\",\n            \"updated\": \"2019-07-10T18:14:12.640Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3261.131\",\n                \"time_end\": \"2019-07-10T11:14:12.639890\",\n                \"time_start\": \"2019-07-10T11:14:09.378759\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 59,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_59-unewstv-syasi-theater.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 561,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:05.665Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:57:53.732Z\",\n            \"updated\": \"2019-07-10T18:14:05.665Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 38,\n                \"duration\": \"3676.4320000000002\",\n                \"time_end\": \"2019-07-10T11:14:05.665141\",\n                \"time_start\": \"2019-07-10T11:14:01.988709\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_9-unewstv-muqabil_yUc30bI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 562,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:16.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:58:15.056Z\",\n            \"updated\": \"2019-07-10T18:14:16.225Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3486.843\",\n                \"time_end\": \"2019-07-10T11:14:16.225524\",\n                \"time_start\": \"2019-07-10T11:14:12.738681\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_10-unewstv-off-the-record_VDEDrDW.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 563,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:19.302Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:58:38.276Z\",\n            \"updated\": \"2019-07-10T18:14:19.302Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3029.7000000000003\",\n                \"time_end\": \"2019-07-10T11:14:19.302615\",\n                \"time_start\": \"2019-07-10T11:14:16.272915\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_l01vD19.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 564,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:20.916Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:58:48.636Z\",\n            \"updated\": \"2019-07-10T18:14:20.916Z\",\n            \"extra_data\": {\n                \"dupes\": 18,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 18,\n                \"duration\": \"1568.006\",\n                \"time_end\": \"2019-07-10T11:14:20.916389\",\n                \"time_start\": \"2019-07-10T11:14:19.348383\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_XSGEBCd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 565,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:24.364Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:59:10.629Z\",\n            \"updated\": \"2019-07-10T18:14:24.364Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3388.726\",\n                \"time_end\": \"2019-07-10T11:14:24.364553\",\n                \"time_start\": \"2019-07-10T11:14:20.975827\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_13-unewstv-the-reporters_tVOJkUS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 566,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:27.812Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:59:32.096Z\",\n            \"updated\": \"2019-07-10T18:14:27.812Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3340.162\",\n                \"time_end\": \"2019-07-10T11:14:27.812328\",\n                \"time_start\": \"2019-07-10T11:14:24.472166\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_icRC9HZ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 567,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:31.017Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T17:59:53.704Z\",\n            \"updated\": \"2019-07-10T18:14:31.017Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3049.5640000000003\",\n                \"time_end\": \"2019-07-10T11:14:31.017408\",\n                \"time_start\": \"2019-07-10T11:14:27.967844\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_15-unewstv-night-edition_uh1Up7m.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 568,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:33.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:00:16.559Z\",\n            \"updated\": \"2019-07-10T18:14:33.929Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2873.607\",\n                \"time_end\": \"2019-07-10T11:14:33.929812\",\n                \"time_start\": \"2019-07-10T11:14:31.056205\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_16-unewstv-jirga_aWwTMFp.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 569,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:37.246Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:00:38.311Z\",\n            \"updated\": \"2019-07-10T18:14:37.246Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3277.27\",\n                \"time_end\": \"2019-07-10T11:14:37.246197\",\n                \"time_start\": \"2019-07-10T11:14:33.968927\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_17-unewstv-bebaak_ErIoszp.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 570,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:40.939Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:01:00.070Z\",\n            \"updated\": \"2019-07-10T18:14:40.939Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3527.0260000000003\",\n                \"time_end\": \"2019-07-10T11:14:40.939153\",\n                \"time_start\": \"2019-07-10T11:14:37.412127\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_18-unewstv-capital-talk_FOaZae7.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 571,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:43.801Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:01:18.393Z\",\n            \"updated\": \"2019-07-10T18:14:43.801Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 33,\n                \"duration\": \"2812.783\",\n                \"time_end\": \"2019-07-10T11:14:43.800960\",\n                \"time_start\": \"2019-07-10T11:14:40.988177\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_unm3b4l.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 572,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:46.966Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:01:39.782Z\",\n            \"updated\": \"2019-07-10T18:14:46.966Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3118.6639999999998\",\n                \"time_end\": \"2019-07-10T11:14:46.966143\",\n                \"time_start\": \"2019-07-10T11:14:43.847479\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_20-unewstv-power-play_c6LTph1.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 573,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:50.935Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:02:01.850Z\",\n            \"updated\": \"2019-07-10T18:14:50.935Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3829.5910000000003\",\n                \"time_end\": \"2019-07-10T11:14:50.935639\",\n                \"time_start\": \"2019-07-10T11:14:47.106048\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_MZA0NjJ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 574,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:54.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:02:23.733Z\",\n            \"updated\": \"2019-07-10T18:14:54.316Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3357.5910000000003\",\n                \"time_end\": \"2019-07-10T11:14:54.316443\",\n                \"time_start\": \"2019-07-10T11:14:50.958852\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_22-unewstv-think-tank_IH4ZwRB.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 575,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:14:57.628Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:02:45.304Z\",\n            \"updated\": \"2019-07-10T18:14:57.628Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3260.405\",\n                \"time_end\": \"2019-07-10T11:14:57.628448\",\n                \"time_start\": \"2019-07-10T11:14:54.368043\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_IqMWiNI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 576,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:01.274Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:03:07.358Z\",\n            \"updated\": \"2019-07-10T18:15:01.274Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3574.709\",\n                \"time_end\": \"2019-07-10T11:15:01.274107\",\n                \"time_start\": \"2019-07-10T11:14:57.699398\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_27-unewstv-to-the-point_zH0xvwK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 577,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:05.674Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:03:29.562Z\",\n            \"updated\": \"2019-07-10T18:15:05.674Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4346.597\",\n                \"time_end\": \"2019-07-10T11:15:05.674121\",\n                \"time_start\": \"2019-07-10T11:15:01.327524\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_28-unewstv-news-eye_QTHoDAd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 578,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:08.956Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:03:50.782Z\",\n            \"updated\": \"2019-07-10T18:15:08.956Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3259.31\",\n                \"time_end\": \"2019-07-10T11:15:08.956767\",\n                \"time_start\": \"2019-07-10T11:15:05.697457\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-c_XxheAzC.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 579,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:13.194Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:04:13.134Z\",\n            \"updated\": \"2019-07-10T18:15:13.194Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4161.092\",\n                \"time_end\": \"2019-07-10T11:15:13.194322\",\n                \"time_start\": \"2019-07-10T11:15:09.033230\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 60,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_60-unewstv-khabarnak.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 580,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:13.262Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:04:34.672Z\",\n            \"updated\": \"2019-07-10T18:15:13.262Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:580\",\n                \"job_id\": 580,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_29-unewstv-g-for-gharida_PCUgy8W.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 581,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:16.293Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:04:56.354Z\",\n            \"updated\": \"2019-07-10T18:15:16.293Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3001.745\",\n                \"time_end\": \"2019-07-10T11:15:16.293641\",\n                \"time_start\": \"2019-07-10T11:15:13.291896\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_FrSdJzZ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 582,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:20.405Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:05:18.655Z\",\n            \"updated\": \"2019-07-10T18:15:20.405Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4088.4349999999995\",\n                \"time_end\": \"2019-07-10T11:15:20.404639\",\n                \"time_start\": \"2019-07-10T11:15:16.316204\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_Q1nA6vO.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 583,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:23.534Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:05:41.352Z\",\n            \"updated\": \"2019-07-10T18:15:23.534Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3039.285\",\n                \"time_end\": \"2019-07-10T11:15:23.534250\",\n                \"time_start\": \"2019-07-10T11:15:20.494965\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_Oj1epnl.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 584,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:26.551Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:06:02.910Z\",\n            \"updated\": \"2019-07-10T18:15:26.551Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2984.2909999999997\",\n                \"time_end\": \"2019-07-10T11:15:26.550917\",\n                \"time_start\": \"2019-07-10T11:15:23.566626\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_epyAcIb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 585,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:29.761Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:06:24.582Z\",\n            \"updated\": \"2019-07-10T18:15:29.761Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3178.8720000000003\",\n                \"time_end\": \"2019-07-10T11:15:29.760854\",\n                \"time_start\": \"2019-07-10T11:15:26.581982\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_34-unewstv-news-beat_0rabihr.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 586,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:33.696Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:06:46.679Z\",\n            \"updated\": \"2019-07-10T18:15:33.696Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3836.613\",\n                \"time_end\": \"2019-07-10T11:15:33.695983\",\n                \"time_start\": \"2019-07-10T11:15:29.859370\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_BwrSIBf.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 587,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:36.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:07:08.627Z\",\n            \"updated\": \"2019-07-10T18:15:36.907Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3170.688\",\n                \"time_end\": \"2019-07-10T11:15:36.906842\",\n                \"time_start\": \"2019-07-10T11:15:33.736154\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_mjpkPNN.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 588,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:40.570Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:07:30.582Z\",\n            \"updated\": \"2019-07-10T18:15:40.570Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3535.909\",\n                \"time_end\": \"2019-07-10T11:15:40.570498\",\n                \"time_start\": \"2019-07-10T11:15:37.034589\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_wga1sV4.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 589,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:44.489Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:07:51.634Z\",\n            \"updated\": \"2019-07-10T18:15:44.489Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3819.12\",\n                \"time_end\": \"2019-07-10T11:15:44.489663\",\n                \"time_start\": \"2019-07-10T11:15:40.670543\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_JG1sfkK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 590,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:51.897Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:08:13.231Z\",\n            \"updated\": \"2019-07-10T18:15:51.897Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2840.17\",\n                \"time_end\": \"2019-07-10T11:15:51.897410\",\n                \"time_start\": \"2019-07-10T11:15:49.057240\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_39-unewstv-on-the-front_cCpdmwf.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 591,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:49.019Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:08:35.277Z\",\n            \"updated\": \"2019-07-10T18:15:49.019Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4502.170999999999\",\n                \"time_end\": \"2019-07-10T11:15:49.018802\",\n                \"time_start\": \"2019-07-10T11:15:44.516631\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_eqNJJtS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 592,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:55.787Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:08:56.786Z\",\n            \"updated\": \"2019-07-10T18:15:55.787Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3854.946\",\n                \"time_end\": \"2019-07-10T11:15:55.787046\",\n                \"time_start\": \"2019-07-10T11:15:51.932100\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_41-unewstv-seedhi-baat_ZQn0FqG.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 593,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:15:59.082Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:09:18.338Z\",\n            \"updated\": \"2019-07-10T18:15:59.083Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3233.408\",\n                \"time_end\": \"2019-07-10T11:15:59.082311\",\n                \"time_start\": \"2019-07-10T11:15:55.848903\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_VYPfKmG.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 594,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:02.709Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:09:40.302Z\",\n            \"updated\": \"2019-07-10T18:16:02.709Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3468.129\",\n                \"time_end\": \"2019-07-10T11:16:02.709520\",\n                \"time_start\": \"2019-07-10T11:15:59.241391\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 61,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_61-unewstv-khabardar.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 595,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:16:40.676Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:10:36.651Z\",\n            \"updated\": \"2019-07-11T08:16:40.676Z\",\n            \"extra_data\": {\n                \"dupes\": 32,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2790.259\",\n                \"time_end\": \"2019-07-10T11:16:05.569073\",\n                \"time_start\": \"2019-07-10T11:16:02.778814\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_ZXFV8zT.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 596,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:06.227Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:11:07.467Z\",\n            \"updated\": \"2019-07-10T18:16:06.227Z\",\n            \"extra_data\": {\n                \"dupes\": 9,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 9,\n                \"duration\": \"597.4159999999999\",\n                \"time_end\": \"2019-07-10T11:16:06.227398\",\n                \"time_start\": \"2019-07-10T11:16:05.629982\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_54-vpk-dil-e-majboor_tUQIjzP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 597,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:09.866Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:12:00.952Z\",\n            \"updated\": \"2019-07-10T18:16:09.866Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3581.3559999999998\",\n                \"time_end\": \"2019-07-10T11:16:09.866085\",\n                \"time_start\": \"2019-07-10T11:16:06.284729\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_51-vpk-sawera_klTflpO.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 598,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:15.686Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:12:44.319Z\",\n            \"updated\": \"2019-07-10T18:16:15.686Z\",\n            \"extra_data\": {\n                \"dupes\": 58,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 58,\n                \"duration\": \"5765.598\",\n                \"time_end\": \"2019-07-10T11:16:15.686716\",\n                \"time_start\": \"2019-07-10T11:16:09.921118\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_6Ag8Kql.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 599,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-10T18:16:23.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-10T18:13:35.869Z\",\n            \"updated\": \"2019-07-10T18:16:23.810Z\",\n            \"extra_data\": {\n                \"dupes\": 88,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 88,\n                \"duration\": \"8055.334\",\n                \"time_end\": \"2019-07-10T11:16:23.810333\",\n                \"time_start\": \"2019-07-10T11:16:15.754999\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_53-vpk-bulbulay_vflAbeK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 600,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:15:46.249Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:15:45.999Z\",\n            \"updated\": \"2019-07-11T02:15:46.249Z\",\n            \"extra_data\": null,\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_45-unewstv-naya-pakistan_2wGCMTm.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 601,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:16:10.158Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:16:09.889Z\",\n            \"updated\": \"2019-07-11T02:16:10.158Z\",\n            \"extra_data\": null,\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha_VtZw9YW.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 602,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:16:33.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:16:32.707Z\",\n            \"updated\": \"2019-07-11T02:16:33.008Z\",\n            \"extra_data\": null,\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_46-unewstv-report-card_wJecMQ5.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 603,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:16:56.026Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:16:55.875Z\",\n            \"updated\": \"2019-07-11T02:16:56.026Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_oiwxYue.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 604,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:17:18.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:17:17.943Z\",\n            \"updated\": \"2019-07-11T02:17:18.218Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_7BSftOB.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 605,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:17:40.695Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:17:40.493Z\",\n            \"updated\": \"2019-07-11T02:17:40.695Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_pvMt2Yj.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 606,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:18:02.935Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:18:02.605Z\",\n            \"updated\": \"2019-07-11T02:18:02.935Z\",\n            \"extra_data\": null,\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_G2ir7c3.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 607,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:18:25.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:18:24.728Z\",\n            \"updated\": \"2019-07-11T02:18:25.050Z\",\n            \"extra_data\": null,\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_57-unewstv-hasb-e-haal_5mXuae6.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 608,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:18:47.725Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:18:47.313Z\",\n            \"updated\": \"2019-07-11T02:18:47.725Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_24-unewstv-khara-sach_sHxnNDE.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 609,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:19:10.281Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:19:10.000Z\",\n            \"updated\": \"2019-07-11T02:19:10.281Z\",\n            \"extra_data\": null,\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_58-unewstv-mazaaq-raat_I7XLbxQ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 610,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:19:33.012Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:19:32.620Z\",\n            \"updated\": \"2019-07-11T02:19:33.012Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_vvdmwDA.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 611,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:19:55.452Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:19:55.114Z\",\n            \"updated\": \"2019-07-11T02:19:55.452Z\",\n            \"extra_data\": null,\n            \"show_feed\": 59,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_59-unewstv-syasi-theater_MmrC5Tx.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 612,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:20:18.934Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:20:18.394Z\",\n            \"updated\": \"2019-07-11T02:20:18.934Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_9-unewstv-muqabil_aqqEwkG.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 613,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:20:41.337Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:20:41.119Z\",\n            \"updated\": \"2019-07-11T02:20:41.337Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_10-unewstv-off-the-record_XBjkwez.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 614,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:21:04.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:21:03.790Z\",\n            \"updated\": \"2019-07-11T02:21:04.098Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_HojziBu.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 615,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:21:15.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:21:15.163Z\",\n            \"updated\": \"2019-07-11T02:21:15.397Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_fi77np0.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 616,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:21:37.729Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:21:37.286Z\",\n            \"updated\": \"2019-07-11T02:21:37.729Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_13-unewstv-the-reporters_0GkYy51.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 617,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:22:00.232Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:21:59.852Z\",\n            \"updated\": \"2019-07-11T02:22:00.232Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_amqQoqx.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 618,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:22:22.773Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:22:22.586Z\",\n            \"updated\": \"2019-07-11T02:22:22.773Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_15-unewstv-night-edition_q1xS2gq.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 619,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:22:45.115Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:22:44.832Z\",\n            \"updated\": \"2019-07-11T02:22:45.115Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_16-unewstv-jirga_t1yahhK.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 620,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:23:09.197Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:23:07.819Z\",\n            \"updated\": \"2019-07-11T02:23:09.197Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_17-unewstv-bebaak_B90Tz4N.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 621,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:23:31.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:23:31.273Z\",\n            \"updated\": \"2019-07-11T02:23:31.498Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_18-unewstv-capital-talk_UNHg7EP.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 622,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:23:50.649Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:23:50.401Z\",\n            \"updated\": \"2019-07-11T02:23:50.649Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_s7FebvK.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 623,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:24:13.027Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:24:12.770Z\",\n            \"updated\": \"2019-07-11T02:24:13.027Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_20-unewstv-power-play_bkxPWlz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 624,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:24:35.600Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:24:35.383Z\",\n            \"updated\": \"2019-07-11T02:24:35.600Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_j90AIPb.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 625,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:24:57.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:24:57.672Z\",\n            \"updated\": \"2019-07-11T02:24:57.876Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_22-unewstv-think-tank_Xn0ywRQ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 626,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:25:21.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:25:21.703Z\",\n            \"updated\": \"2019-07-11T02:25:21.946Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_6AC56R4.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 627,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:25:44.358Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:25:44.032Z\",\n            \"updated\": \"2019-07-11T02:25:44.358Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_27-unewstv-to-the-point_pHRwgum.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 628,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:26:07.259Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:26:06.932Z\",\n            \"updated\": \"2019-07-11T02:26:07.259Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_28-unewstv-news-eye_0Ez5Ogb.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 629,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:26:29.861Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:26:29.521Z\",\n            \"updated\": \"2019-07-11T02:26:29.861Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-c_rYXFxn0.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 630,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:26:52.348Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:26:52.064Z\",\n            \"updated\": \"2019-07-11T02:26:52.348Z\",\n            \"extra_data\": null,\n            \"show_feed\": 60,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_60-unewstv-khabarnak_dQ1gpog.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 631,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:27:14.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:27:14.787Z\",\n            \"updated\": \"2019-07-11T02:27:14.973Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_29-unewstv-g-for-gharida_ED26CwB.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 632,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:27:37.460Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:27:37.197Z\",\n            \"updated\": \"2019-07-11T02:27:37.460Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_NjHsrWg.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 633,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:27:59.794Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:27:59.650Z\",\n            \"updated\": \"2019-07-11T02:27:59.794Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_I9EGXtU.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 634,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:28:22.355Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:28:22.046Z\",\n            \"updated\": \"2019-07-11T02:28:22.355Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_NRjnkma.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 635,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:28:44.773Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:28:44.594Z\",\n            \"updated\": \"2019-07-11T02:28:44.773Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_0S3chuO.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 636,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:29:07.230Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:29:07.004Z\",\n            \"updated\": \"2019-07-11T02:29:07.230Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_34-unewstv-news-beat_Ft1pmnT.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 637,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:29:29.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:29:29.436Z\",\n            \"updated\": \"2019-07-11T02:29:29.612Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_T3NPENu.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 638,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:29:52.193Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:29:51.910Z\",\n            \"updated\": \"2019-07-11T02:29:52.193Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_WBstW2H.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 639,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:30:15.302Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:30:15.151Z\",\n            \"updated\": \"2019-07-11T02:30:15.302Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_8a2ccT9.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 640,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:30:37.778Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:30:37.591Z\",\n            \"updated\": \"2019-07-11T02:30:37.778Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_ZMtABF4.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 641,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:31:00.354Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:31:00.037Z\",\n            \"updated\": \"2019-07-11T02:31:00.354Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_39-unewstv-on-the-front_LIj2vPd.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 642,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:31:22.677Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:31:22.464Z\",\n            \"updated\": \"2019-07-11T02:31:22.677Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_jvj6PO3.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 643,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:31:45.419Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:31:45.139Z\",\n            \"updated\": \"2019-07-11T02:31:45.419Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_41-unewstv-seedhi-baat_TcJBoZS.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 644,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:32:07.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:32:07.266Z\",\n            \"updated\": \"2019-07-11T02:32:07.575Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_wvg54Om.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 645,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T02:32:30.368Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T02:32:30.041Z\",\n            \"updated\": \"2019-07-11T02:32:30.368Z\",\n            \"extra_data\": null,\n            \"show_feed\": 61,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_61-unewstv-khabardar_Oo0Ovkx.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 646,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:25:42.590Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:25:42.263Z\",\n            \"updated\": \"2019-07-11T03:25:42.590Z\",\n            \"extra_data\": null,\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_45-unewstv-naya-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 647,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:26:03.943Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:26:03.913Z\",\n            \"updated\": \"2019-07-11T03:26:03.943Z\",\n            \"extra_data\": null,\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 648,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:26:25.468Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:26:25.424Z\",\n            \"updated\": \"2019-07-11T03:26:25.468Z\",\n            \"extra_data\": null,\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_46-unewstv-report-card.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 649,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:26:47.488Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:26:47.451Z\",\n            \"updated\": \"2019-07-11T03:26:47.488Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 650,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:27:09.531Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:27:09.362Z\",\n            \"updated\": \"2019-07-11T03:27:09.531Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_ClC2yyj.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 651,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:27:30.784Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:27:30.755Z\",\n            \"updated\": \"2019-07-11T03:27:30.784Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 652,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:27:52.100Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:27:52.062Z\",\n            \"updated\": \"2019-07-11T03:27:52.100Z\",\n            \"extra_data\": null,\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 653,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:28:13.349Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:28:13.312Z\",\n            \"updated\": \"2019-07-11T03:28:13.349Z\",\n            \"extra_data\": null,\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_57-unewstv-hasb-e-haal.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 654,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:28:34.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:28:34.804Z\",\n            \"updated\": \"2019-07-11T03:28:34.880Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 655,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:28:56.437Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:28:56.253Z\",\n            \"updated\": \"2019-07-11T03:28:56.437Z\",\n            \"extra_data\": null,\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_58-unewstv-mazaaq-raat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 656,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:29:18.138Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:29:18.012Z\",\n            \"updated\": \"2019-07-11T03:29:18.138Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 657,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:29:39.356Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:29:39.264Z\",\n            \"updated\": \"2019-07-11T03:29:39.356Z\",\n            \"extra_data\": null,\n            \"show_feed\": 59,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_59-unewstv-syasi-theater.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 658,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:30:00.154Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:30:00.115Z\",\n            \"updated\": \"2019-07-11T03:30:00.154Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 659,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:30:21.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:30:21.835Z\",\n            \"updated\": \"2019-07-11T03:30:21.884Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 660,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:30:42.830Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:30:42.745Z\",\n            \"updated\": \"2019-07-11T03:30:42.830Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 661,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:30:53.514Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:30:53.446Z\",\n            \"updated\": \"2019-07-11T03:30:53.514Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 662,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:31:14.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:31:14.845Z\",\n            \"updated\": \"2019-07-11T03:31:14.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 663,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:31:37.823Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:31:37.746Z\",\n            \"updated\": \"2019-07-11T03:31:37.823Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_akarQvh.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 664,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:31:59.449Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:31:59.383Z\",\n            \"updated\": \"2019-07-11T03:31:59.449Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 665,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:32:21.413Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:32:21.165Z\",\n            \"updated\": \"2019-07-11T03:32:21.413Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 666,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:32:42.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:32:42.811Z\",\n            \"updated\": \"2019-07-11T03:32:42.845Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 667,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:33:04.176Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:33:04.132Z\",\n            \"updated\": \"2019-07-11T03:33:04.176Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 668,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:33:22.261Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:33:22.231Z\",\n            \"updated\": \"2019-07-11T03:33:22.261Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 669,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:33:43.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:33:43.311Z\",\n            \"updated\": \"2019-07-11T03:33:43.397Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 670,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:34:05.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:34:05.381Z\",\n            \"updated\": \"2019-07-11T03:34:05.416Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 671,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:34:26.749Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:34:26.683Z\",\n            \"updated\": \"2019-07-11T03:34:26.749Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 672,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:34:49.304Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:34:49.222Z\",\n            \"updated\": \"2019-07-11T03:34:49.304Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 673,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:35:11.183Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:35:11.153Z\",\n            \"updated\": \"2019-07-11T03:35:11.183Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 674,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:35:32.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:35:32.602Z\",\n            \"updated\": \"2019-07-11T03:35:32.635Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 675,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:35:54.230Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:35:54.186Z\",\n            \"updated\": \"2019-07-11T03:35:54.230Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-chaudhry.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 676,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:36:16.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:36:16.532Z\",\n            \"updated\": \"2019-07-11T03:36:16.620Z\",\n            \"extra_data\": null,\n            \"show_feed\": 60,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_60-unewstv-khabarnak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 677,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:36:38.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:36:37.912Z\",\n            \"updated\": \"2019-07-11T03:36:38.028Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 678,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:36:59.441Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:36:59.364Z\",\n            \"updated\": \"2019-07-11T03:36:59.441Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 679,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:37:21.338Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:37:21.176Z\",\n            \"updated\": \"2019-07-11T03:37:21.338Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 680,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:37:42.829Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:37:42.793Z\",\n            \"updated\": \"2019-07-11T03:37:42.829Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_GaJ41Na.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 681,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:38:04.169Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:38:04.115Z\",\n            \"updated\": \"2019-07-11T03:38:04.169Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 682,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:38:25.328Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:38:25.255Z\",\n            \"updated\": \"2019-07-11T03:38:25.328Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 683,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:38:46.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:38:46.832Z\",\n            \"updated\": \"2019-07-11T03:38:46.918Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 684,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:39:09.227Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:39:08.136Z\",\n            \"updated\": \"2019-07-11T03:39:09.227Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 685,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:39:30.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:39:30.351Z\",\n            \"updated\": \"2019-07-11T03:39:30.438Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 686,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:39:51.791Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:39:51.677Z\",\n            \"updated\": \"2019-07-11T03:39:51.791Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 687,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:40:13.408Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:40:13.331Z\",\n            \"updated\": \"2019-07-11T03:40:13.408Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 688,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:40:34.905Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:40:34.788Z\",\n            \"updated\": \"2019-07-11T03:40:34.905Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 689,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:40:56.803Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:40:56.682Z\",\n            \"updated\": \"2019-07-11T03:40:56.803Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 690,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:41:18.456Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:41:18.041Z\",\n            \"updated\": \"2019-07-11T03:41:18.456Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 691,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:41:40.123Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:41:40.024Z\",\n            \"updated\": \"2019-07-11T03:41:40.123Z\",\n            \"extra_data\": null,\n            \"show_feed\": 61,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_61-unewstv-khabardar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 692,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:42:17.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:42:17.637Z\",\n            \"updated\": \"2019-07-11T03:42:17.684Z\",\n            \"extra_data\": null,\n            \"show_feed\": 62,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_62-dol-khan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 693,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:42:47.872Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:42:47.767Z\",\n            \"updated\": \"2019-07-11T03:42:47.872Z\",\n            \"extra_data\": null,\n            \"show_feed\": 55,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_55-dol-mah-e-tamaam.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 694,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T03:43:18.531Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T03:43:18.499Z\",\n            \"updated\": \"2019-07-11T03:43:18.531Z\",\n            \"extra_data\": null,\n            \"show_feed\": 63,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_63-dol-udaari.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 695,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:15:51.107Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:15:50.380Z\",\n            \"updated\": \"2019-07-11T05:15:51.107Z\",\n            \"extra_data\": null,\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_45-unewstv-naya-pakistan_b3cYfFN.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 696,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:16:12.821Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:16:12.776Z\",\n            \"updated\": \"2019-07-11T05:16:12.821Z\",\n            \"extra_data\": null,\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha_sJWIzNM.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 697,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:16:33.928Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:16:33.829Z\",\n            \"updated\": \"2019-07-11T05:16:33.928Z\",\n            \"extra_data\": null,\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_46-unewstv-report-card_PUxERzn.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 698,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:16:55.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:16:54.900Z\",\n            \"updated\": \"2019-07-11T05:16:55.007Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_igSCJWk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 699,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:17:16.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:17:16.595Z\",\n            \"updated\": \"2019-07-11T05:17:16.639Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_0PreU9D.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 700,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:17:37.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:17:37.263Z\",\n            \"updated\": \"2019-07-11T05:17:37.380Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_C9eeHJ6.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 701,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:17:58.353Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:17:58.239Z\",\n            \"updated\": \"2019-07-11T05:17:58.353Z\",\n            \"extra_data\": null,\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_g0TCSwV.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 702,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:18:19.391Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:18:19.321Z\",\n            \"updated\": \"2019-07-11T05:18:19.391Z\",\n            \"extra_data\": null,\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_57-unewstv-hasb-e-haal_liOERVq.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 703,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:18:40.742Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:18:40.656Z\",\n            \"updated\": \"2019-07-11T05:18:40.742Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_24-unewstv-khara-sach_UJHvg8p.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 704,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:19:01.861Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:19:01.818Z\",\n            \"updated\": \"2019-07-11T05:19:01.861Z\",\n            \"extra_data\": null,\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_58-unewstv-mazaaq-raat_XBuzgcf.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 705,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:19:23.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:19:23.830Z\",\n            \"updated\": \"2019-07-11T05:19:23.891Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_mRBBJph.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 706,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:19:47.738Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:19:47.135Z\",\n            \"updated\": \"2019-07-11T05:19:47.738Z\",\n            \"extra_data\": null,\n            \"show_feed\": 59,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_59-unewstv-syasi-theater_1umplNJ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 707,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:20:09.691Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:20:09.607Z\",\n            \"updated\": \"2019-07-11T05:20:09.691Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_9-unewstv-muqabil_XhM62gY.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 708,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:20:31.058Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:20:30.929Z\",\n            \"updated\": \"2019-07-11T05:20:31.058Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_10-unewstv-off-the-record_fn8i9qf.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 709,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:20:51.974Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:20:51.930Z\",\n            \"updated\": \"2019-07-11T05:20:51.974Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_tEr18UN.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 710,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:21:02.367Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:21:02.326Z\",\n            \"updated\": \"2019-07-11T05:21:02.367Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_j8nWtVn.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 711,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:21:23.401Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:21:23.355Z\",\n            \"updated\": \"2019-07-11T05:21:23.401Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_13-unewstv-the-reporters_oIn9s11.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 712,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:21:44.583Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:21:44.357Z\",\n            \"updated\": \"2019-07-11T05:21:44.583Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_i38PQ2d.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 713,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:22:05.537Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:22:05.500Z\",\n            \"updated\": \"2019-07-11T05:22:05.537Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_15-unewstv-night-edition_TgjMNAH.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 714,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:22:26.561Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:22:26.504Z\",\n            \"updated\": \"2019-07-11T05:22:26.561Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_16-unewstv-jirga_YfsvUJZ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 715,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:22:47.426Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:22:47.387Z\",\n            \"updated\": \"2019-07-11T05:22:47.426Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_17-unewstv-bebaak_YQQOaw7.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 716,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:23:08.401Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:23:08.300Z\",\n            \"updated\": \"2019-07-11T05:23:08.401Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_18-unewstv-capital-talk_gyLQ84g.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 717,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:23:26.092Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:23:26.045Z\",\n            \"updated\": \"2019-07-11T05:23:26.092Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_xqMMGLf.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 718,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:23:46.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:23:46.863Z\",\n            \"updated\": \"2019-07-11T05:23:46.906Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_20-unewstv-power-play_RWqwvcz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 719,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:24:07.824Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:24:07.769Z\",\n            \"updated\": \"2019-07-11T05:24:07.824Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_cO2fNcl.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 720,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:24:28.609Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:24:28.542Z\",\n            \"updated\": \"2019-07-11T05:24:28.609Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_22-unewstv-think-tank_2zdvsBC.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 721,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:24:49.675Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:24:49.599Z\",\n            \"updated\": \"2019-07-11T05:24:49.675Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_vXg5OLR.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 722,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:25:12.534Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:25:12.445Z\",\n            \"updated\": \"2019-07-11T05:25:12.534Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_27-unewstv-to-the-point_4aO4Pvc.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 723,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:25:33.725Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:25:33.687Z\",\n            \"updated\": \"2019-07-11T05:25:33.725Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_28-unewstv-news-eye_2osPapi.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 724,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:25:54.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:25:54.323Z\",\n            \"updated\": \"2019-07-11T05:25:54.366Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-c_pG4zWrZ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 725,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:26:15.851Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:26:15.723Z\",\n            \"updated\": \"2019-07-11T05:26:15.851Z\",\n            \"extra_data\": null,\n            \"show_feed\": 60,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_60-unewstv-khabarnak_Ue9es9W.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 726,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:26:37.389Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:26:37.282Z\",\n            \"updated\": \"2019-07-11T05:26:37.389Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_29-unewstv-g-for-gharida_e8qnssx.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 727,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:27:01.018Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:27:00.929Z\",\n            \"updated\": \"2019-07-11T05:27:01.018Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_WjVe3Dz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 728,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:27:22.059Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:27:22.008Z\",\n            \"updated\": \"2019-07-11T05:27:22.059Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_0EHiHO4.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 729,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:27:42.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:27:42.527Z\",\n            \"updated\": \"2019-07-11T05:27:42.582Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_lP9WFsF.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 730,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:28:03.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:28:03.601Z\",\n            \"updated\": \"2019-07-11T05:28:03.716Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_eDG8ImD.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 731,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:28:24.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:28:24.500Z\",\n            \"updated\": \"2019-07-11T05:28:24.577Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_34-unewstv-news-beat_t7pOpY2.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 732,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:28:45.654Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:28:45.582Z\",\n            \"updated\": \"2019-07-11T05:28:45.654Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_G5VM2tW.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 733,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:29:07.275Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:29:07.205Z\",\n            \"updated\": \"2019-07-11T05:29:07.275Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_6AA14di.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 734,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:29:28.704Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:29:28.648Z\",\n            \"updated\": \"2019-07-11T05:29:28.704Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_mkZixqs.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 735,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:29:49.668Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:29:49.601Z\",\n            \"updated\": \"2019-07-11T05:29:49.668Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_aXW5vTc.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 736,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:30:11.093Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:30:11.038Z\",\n            \"updated\": \"2019-07-11T05:30:11.093Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_39-unewstv-on-the-front_78dhijh.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 737,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:30:32.119Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:30:32.060Z\",\n            \"updated\": \"2019-07-11T05:30:32.119Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_uk21A4O.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 738,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:30:53.499Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:30:53.422Z\",\n            \"updated\": \"2019-07-11T05:30:53.499Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_41-unewstv-seedhi-baat_0iqV6hZ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 739,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:31:14.450Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:31:14.406Z\",\n            \"updated\": \"2019-07-11T05:31:14.450Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_xGnsAsf.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 740,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:31:36.331Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:31:36.274Z\",\n            \"updated\": \"2019-07-11T05:31:36.331Z\",\n            \"extra_data\": null,\n            \"show_feed\": 61,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_61-unewstv-khabardar_wXa4Swf.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 741,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:32:28.417Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:32:28.150Z\",\n            \"updated\": \"2019-07-11T05:32:28.417Z\",\n            \"extra_data\": null,\n            \"show_feed\": 62,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_62-dol-khan_vAP0MgV.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 742,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:32:57.811Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:32:57.760Z\",\n            \"updated\": \"2019-07-11T05:32:57.811Z\",\n            \"extra_data\": null,\n            \"show_feed\": 55,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_55-dol-mah-e-tamaam_JeIKNh2.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 743,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T05:33:27.900Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T05:33:27.814Z\",\n            \"updated\": \"2019-07-11T05:33:27.900Z\",\n            \"extra_data\": null,\n            \"show_feed\": 63,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-10/2019-07-10-1-bilgrami-feed_id_63-dol-udaari_ghfIeF0.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 744,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:37:02.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:37:01.476Z\",\n            \"updated\": \"2019-07-11T07:37:02.191Z\",\n            \"extra_data\": null,\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_45-unewstv-naya-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 745,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:37:24.326Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:37:24.274Z\",\n            \"updated\": \"2019-07-11T07:37:24.327Z\",\n            \"extra_data\": null,\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 746,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:37:45.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:37:45.847Z\",\n            \"updated\": \"2019-07-11T07:37:45.880Z\",\n            \"extra_data\": null,\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_46-unewstv-report-card.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 747,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:38:08.343Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:38:08.226Z\",\n            \"updated\": \"2019-07-11T07:38:08.343Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 748,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:38:30.195Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:38:29.973Z\",\n            \"updated\": \"2019-07-11T07:38:30.195Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_pCsRhaR.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 749,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:38:52.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:38:52.108Z\",\n            \"updated\": \"2019-07-11T07:38:52.177Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 750,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:39:14.095Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:39:14.028Z\",\n            \"updated\": \"2019-07-11T07:39:14.095Z\",\n            \"extra_data\": null,\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 751,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:39:35.875Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:39:35.816Z\",\n            \"updated\": \"2019-07-11T07:39:35.875Z\",\n            \"extra_data\": null,\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_57-unewstv-hasb-e-haal.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 752,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:39:58.315Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:39:58.209Z\",\n            \"updated\": \"2019-07-11T07:39:58.315Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 753,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:40:20.749Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:40:20.696Z\",\n            \"updated\": \"2019-07-11T07:40:20.749Z\",\n            \"extra_data\": null,\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_58-unewstv-mazaaq-raat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 754,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:40:43.202Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:40:43.105Z\",\n            \"updated\": \"2019-07-11T07:40:43.202Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 755,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:41:05.117Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:41:05.018Z\",\n            \"updated\": \"2019-07-11T07:41:05.117Z\",\n            \"extra_data\": null,\n            \"show_feed\": 59,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_59-unewstv-syasi-theater.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 756,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:41:26.670Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:41:26.537Z\",\n            \"updated\": \"2019-07-11T07:41:26.670Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 757,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:41:48.484Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:41:48.394Z\",\n            \"updated\": \"2019-07-11T07:41:48.484Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 758,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:42:10.751Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:42:10.674Z\",\n            \"updated\": \"2019-07-11T07:42:10.751Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 759,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:42:21.861Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:42:21.773Z\",\n            \"updated\": \"2019-07-11T07:42:21.861Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 760,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:42:43.618Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:42:43.574Z\",\n            \"updated\": \"2019-07-11T07:42:43.618Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 761,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:43:05.729Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:43:05.652Z\",\n            \"updated\": \"2019-07-11T07:43:05.729Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_AlM1Jg6.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 762,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:43:27.811Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:43:27.763Z\",\n            \"updated\": \"2019-07-11T07:43:27.811Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 763,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:43:49.983Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:43:49.785Z\",\n            \"updated\": \"2019-07-11T07:43:49.983Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 764,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:44:12.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:44:12.271Z\",\n            \"updated\": \"2019-07-11T07:44:12.378Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 765,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:44:34.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:44:34.316Z\",\n            \"updated\": \"2019-07-11T07:44:34.423Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 766,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:44:52.926Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:44:52.836Z\",\n            \"updated\": \"2019-07-11T07:44:52.926Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 767,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:45:15.352Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:45:15.290Z\",\n            \"updated\": \"2019-07-11T07:45:15.352Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 768,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:45:38.427Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:45:37.329Z\",\n            \"updated\": \"2019-07-11T07:45:38.427Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 769,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:46:00.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:46:00.560Z\",\n            \"updated\": \"2019-07-11T07:46:00.639Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 770,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:46:23.570Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:46:23.444Z\",\n            \"updated\": \"2019-07-11T07:46:23.570Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 771,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:46:46.358Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:46:46.239Z\",\n            \"updated\": \"2019-07-11T07:46:46.358Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 772,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:47:08.858Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:47:08.812Z\",\n            \"updated\": \"2019-07-11T07:47:08.858Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 773,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:47:30.894Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:47:30.816Z\",\n            \"updated\": \"2019-07-11T07:47:30.894Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-chaudhry.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 774,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:47:52.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:47:52.405Z\",\n            \"updated\": \"2019-07-11T07:47:52.498Z\",\n            \"extra_data\": null,\n            \"show_feed\": 60,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_60-unewstv-khabarnak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 775,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:48:15.232Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:48:14.977Z\",\n            \"updated\": \"2019-07-11T07:48:15.232Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 776,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:48:37.056Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:48:36.981Z\",\n            \"updated\": \"2019-07-11T07:48:37.057Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 777,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:48:59.055Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:48:58.957Z\",\n            \"updated\": \"2019-07-11T07:48:59.055Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 778,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:49:21.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:49:21.338Z\",\n            \"updated\": \"2019-07-11T07:49:21.416Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_UknpG3y.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 779,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:49:43.663Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:49:43.601Z\",\n            \"updated\": \"2019-07-11T07:49:43.663Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 780,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:50:06.052Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:50:05.930Z\",\n            \"updated\": \"2019-07-11T07:50:06.052Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 781,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:50:27.521Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:50:27.449Z\",\n            \"updated\": \"2019-07-11T07:50:27.521Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 782,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:50:49.453Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:50:49.351Z\",\n            \"updated\": \"2019-07-11T07:50:49.453Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 783,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:51:11.852Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:51:11.768Z\",\n            \"updated\": \"2019-07-11T07:51:11.852Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 784,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:51:33.867Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:51:33.767Z\",\n            \"updated\": \"2019-07-11T07:51:33.867Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 785,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:51:57.396Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:51:56.886Z\",\n            \"updated\": \"2019-07-11T07:51:57.396Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 786,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:52:20.048Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:52:19.948Z\",\n            \"updated\": \"2019-07-11T07:52:20.048Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 787,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:52:42.390Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:52:42.348Z\",\n            \"updated\": \"2019-07-11T07:52:42.390Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 788,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:53:04.139Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:53:04.088Z\",\n            \"updated\": \"2019-07-11T07:53:04.139Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 789,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:53:26.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:53:26.837Z\",\n            \"updated\": \"2019-07-11T07:53:26.906Z\",\n            \"extra_data\": null,\n            \"show_feed\": 61,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_61-unewstv-khabardar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 790,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:54:34.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:54:34.215Z\",\n            \"updated\": \"2019-07-11T07:54:34.584Z\",\n            \"extra_data\": null,\n            \"show_feed\": 62,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_62-dol-khan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 791,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:55:07.384Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:55:07.319Z\",\n            \"updated\": \"2019-07-11T07:55:07.384Z\",\n            \"extra_data\": null,\n            \"show_feed\": 55,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_55-dol-mah-e-tamaam.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 792,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T07:55:37.997Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T07:55:37.936Z\",\n            \"updated\": \"2019-07-11T07:55:37.998Z\",\n            \"extra_data\": null,\n            \"show_feed\": 63,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_63-dol-udaari.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 793,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:08:18.005Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:08:17.572Z\",\n            \"updated\": \"2019-07-11T08:08:18.005Z\",\n            \"extra_data\": null,\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 794,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:09:06.631Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:09:06.497Z\",\n            \"updated\": \"2019-07-11T08:09:06.631Z\",\n            \"extra_data\": null,\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 795,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:09:48.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:09:48.914Z\",\n            \"updated\": \"2019-07-11T08:09:48.973Z\",\n            \"extra_data\": null,\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 796,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:10:40.788Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:10:40.620Z\",\n            \"updated\": \"2019-07-11T08:10:40.788Z\",\n            \"extra_data\": null,\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 797,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:20:08.975Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:20:08.405Z\",\n            \"updated\": \"2019-07-11T08:20:08.975Z\",\n            \"extra_data\": null,\n            \"show_feed\": 62,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_62-dol-khan_BdkVyHt.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 798,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:20:41.177Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:20:41.128Z\",\n            \"updated\": \"2019-07-11T08:20:41.177Z\",\n            \"extra_data\": null,\n            \"show_feed\": 55,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_55-dol-mah-e-tamaam_oucdvz4.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 799,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:21:12.156Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:21:12.010Z\",\n            \"updated\": \"2019-07-11T08:21:12.156Z\",\n            \"extra_data\": null,\n            \"show_feed\": 63,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_63-dol-udaari_v4KZuwc.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 800,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:53:46.334Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:53:45.458Z\",\n            \"updated\": \"2019-07-11T08:53:46.334Z\",\n            \"extra_data\": null,\n            \"show_feed\": 62,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_62-dol-khan_skqPfrB.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 801,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:54:17.502Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:54:17.377Z\",\n            \"updated\": \"2019-07-11T08:54:17.502Z\",\n            \"extra_data\": null,\n            \"show_feed\": 55,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_55-dol-mah-e-tamaam_ScmCGai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 802,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T08:54:47.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T08:54:47.436Z\",\n            \"updated\": \"2019-07-11T08:54:47.584Z\",\n            \"extra_data\": null,\n            \"show_feed\": 63,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_63-dol-udaari_sOvLn9g.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 803,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T09:01:49.150Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:01:48.233Z\",\n            \"updated\": \"2019-07-11T09:01:49.150Z\",\n            \"extra_data\": null,\n            \"show_feed\": 62,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_62-dol-khan_UIJiVW6.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 804,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T09:02:20.427Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:02:19.939Z\",\n            \"updated\": \"2019-07-11T09:02:20.427Z\",\n            \"extra_data\": null,\n            \"show_feed\": 55,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_55-dol-mah-e-tamaam_b359cfK.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 805,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T09:02:51.101Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:02:50.973Z\",\n            \"updated\": \"2019-07-11T09:02:51.101Z\",\n            \"extra_data\": null,\n            \"show_feed\": 63,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_63-dol-udaari_wEF4Lun.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 806,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T09:03:27.710Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:03:27.651Z\",\n            \"updated\": \"2019-07-11T09:03:27.710Z\",\n            \"extra_data\": null,\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_4pLEr3q.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 807,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-11T19:01:54.130Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:06:19.428Z\",\n            \"updated\": \"2019-07-11T19:01:54.130Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: Naseebon Jali, job:807\",\n                \"job_id\": 807,\n                \"feed_id\": 43,\n                \"previous_extra_data\": {\n                    \"error\": \"Warning: Unknown show: Naseebon Jali, job:807\",\n                    \"job_id\": 807,\n                    \"feed_id\": 43,\n                    \"previous_extra_data\": {\n                        \"error\": \"Warning: Unknown show: Naseebon Jali, job:807\",\n                        \"job_id\": 807,\n                        \"feed_id\": 43,\n                        \"previous_extra_data\": null\n                    }\n                }\n            },\n            \"show_feed\": 43,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_43-dol-naseebon-jali.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 808,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-11T09:12:54.400Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:08:53.459Z\",\n            \"updated\": \"2019-07-11T09:12:54.400Z\",\n            \"extra_data\": {\n                \"dupes\": 9,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 9,\n                \"duration\": \"859.768\",\n                \"time_end\": \"2019-07-11T02:12:54.400812\",\n                \"time_start\": \"2019-07-11T02:12:53.541044\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_54-vpk-dil-e-majboor_XLOysIT.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 809,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-11T09:12:53.489Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:09:43.430Z\",\n            \"updated\": \"2019-07-11T09:12:53.490Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3814.4170000000004\",\n                \"time_end\": \"2019-07-11T02:12:53.489838\",\n                \"time_start\": \"2019-07-11T02:12:49.675421\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_51-vpk-sawera_qeqjHTP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 810,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-11T09:12:49.608Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:10:28.716Z\",\n            \"updated\": \"2019-07-11T09:12:49.608Z\",\n            \"extra_data\": {\n                \"dupes\": 58,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 58,\n                \"duration\": \"5924.1669999999995\",\n                \"time_end\": \"2019-07-11T02:12:49.608179\",\n                \"time_start\": \"2019-07-11T02:12:43.684012\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_FrFSZiT.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 811,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-11T09:12:43.591Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-11T09:11:19.899Z\",\n            \"updated\": \"2019-07-11T09:12:43.591Z\",\n            \"extra_data\": {\n                \"dupes\": 88,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 88,\n                \"duration\": \"10046.633\",\n                \"time_end\": \"2019-07-11T02:12:43.571114\",\n                \"time_start\": \"2019-07-11T02:12:33.524481\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"2017-08-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_53-vpk-bulbulay_iLqcL1x.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 812,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:44.960Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:26:33.107Z\",\n            \"updated\": \"2019-07-12T02:08:44.960Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3051.834\",\n                \"time_end\": \"2019-07-11T19:08:44.960580\",\n                \"time_start\": \"2019-07-11T19:08:41.908746\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_45-unewstv-naya-pakistan_nxsXzXT.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 813,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:41.885Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:26:57.743Z\",\n            \"updated\": \"2019-07-12T02:08:41.885Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2414.168\",\n                \"time_end\": \"2019-07-11T19:08:41.885629\",\n                \"time_start\": \"2019-07-11T19:08:39.471461\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha_D3MDa5s.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 814,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:39.442Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:27:21.182Z\",\n            \"updated\": \"2019-07-12T02:08:39.442Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3083.724\",\n                \"time_end\": \"2019-07-11T19:08:39.442707\",\n                \"time_start\": \"2019-07-11T19:08:36.358983\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_46-unewstv-report-card_szx2zov.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 815,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:36.317Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:27:43.394Z\",\n            \"updated\": \"2019-07-12T02:08:36.317Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2128.551\",\n                \"time_end\": \"2019-07-11T19:08:36.317172\",\n                \"time_start\": \"2019-07-11T19:08:34.188621\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_USukeHG.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 816,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:34.163Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:28:05.236Z\",\n            \"updated\": \"2019-07-12T02:08:34.163Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2950.4429999999998\",\n                \"time_end\": \"2019-07-11T19:08:34.163379\",\n                \"time_start\": \"2019-07-11T19:08:31.212936\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_ATja8Jg.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 817,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:31.175Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:28:26.973Z\",\n            \"updated\": \"2019-07-12T02:08:31.175Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2620.6459999999997\",\n                \"time_end\": \"2019-07-11T19:08:31.175301\",\n                \"time_start\": \"2019-07-11T19:08:28.554655\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_SPXZJHm.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 818,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:28.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:28:48.821Z\",\n            \"updated\": \"2019-07-12T02:08:28.493Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3335.058\",\n                \"time_end\": \"2019-07-11T19:08:28.493260\",\n                \"time_start\": \"2019-07-11T19:08:25.158202\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat_XFCSMWl.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 819,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:25.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:29:10.880Z\",\n            \"updated\": \"2019-07-12T02:08:25.091Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3342.4049999999997\",\n                \"time_end\": \"2019-07-11T19:08:25.090780\",\n                \"time_start\": \"2019-07-11T19:08:21.748375\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_57-unewstv-hasb-e-haal_Fe0Xl6q.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 820,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:21.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:29:33.235Z\",\n            \"updated\": \"2019-07-12T02:08:21.689Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2495.653\",\n                \"time_end\": \"2019-07-11T19:08:21.689462\",\n                \"time_start\": \"2019-07-11T19:08:19.193809\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_24-unewstv-khara-sach_6IHenRi.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 821,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:19.152Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:29:54.727Z\",\n            \"updated\": \"2019-07-12T02:08:19.152Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2913.058\",\n                \"time_end\": \"2019-07-11T19:08:19.152191\",\n                \"time_start\": \"2019-07-11T19:08:16.239133\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_58-unewstv-mazaaq-raat_ygRlYAn.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 822,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:16.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:30:17.755Z\",\n            \"updated\": \"2019-07-12T02:08:16.218Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2198.754\",\n                \"time_end\": \"2019-07-11T19:08:16.218293\",\n                \"time_start\": \"2019-07-11T19:08:14.019539\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_EJ4mqL9.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 823,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:13.995Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:30:39.572Z\",\n            \"updated\": \"2019-07-12T02:08:13.995Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"2710.111\",\n                \"time_end\": \"2019-07-11T19:08:13.994867\",\n                \"time_start\": \"2019-07-11T19:08:11.284756\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 59,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_59-unewstv-syasi-theater_7wJcsJb.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 824,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:11.261Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:31:02.026Z\",\n            \"updated\": \"2019-07-12T02:08:11.261Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2116.4390000000003\",\n                \"time_end\": \"2019-07-11T19:08:11.261611\",\n                \"time_start\": \"2019-07-11T19:08:09.145172\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_9-unewstv-muqabil_svl4djf.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 825,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:09.125Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:31:23.928Z\",\n            \"updated\": \"2019-07-12T02:08:09.125Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2928.381\",\n                \"time_end\": \"2019-07-11T19:08:09.125500\",\n                \"time_start\": \"2019-07-11T19:08:06.197119\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_10-unewstv-off-the-record_QTAdKuW.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 826,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:06.140Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:31:47.418Z\",\n            \"updated\": \"2019-07-12T02:08:06.140Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2353.041\",\n                \"time_end\": \"2019-07-11T19:08:06.140526\",\n                \"time_start\": \"2019-07-11T19:08:03.787485\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_kPnBUu7.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 827,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:03.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:31:58.474Z\",\n            \"updated\": \"2019-07-12T02:08:03.700Z\",\n            \"extra_data\": {\n                \"dupes\": 18,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 20,\n                \"duration\": \"2201.9069999999997\",\n                \"time_end\": \"2019-07-11T19:08:03.699947\",\n                \"time_start\": \"2019-07-11T19:08:01.498040\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_iCW9UGj.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 828,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:08:01.425Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:32:20.214Z\",\n            \"updated\": \"2019-07-12T02:08:01.425Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2478.719\",\n                \"time_end\": \"2019-07-11T19:08:01.424887\",\n                \"time_start\": \"2019-07-11T19:07:58.946168\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_13-unewstv-the-reporters_Y8xhspS.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 829,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:58.924Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:32:42.110Z\",\n            \"updated\": \"2019-07-12T02:07:58.924Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2763.793\",\n                \"time_end\": \"2019-07-11T19:07:58.924018\",\n                \"time_start\": \"2019-07-11T19:07:56.160225\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-09\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_3yepjii.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 830,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:56.127Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:33:04.208Z\",\n            \"updated\": \"2019-07-12T02:07:56.127Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2115.306\",\n                \"time_end\": \"2019-07-11T19:07:56.127808\",\n                \"time_start\": \"2019-07-11T19:07:54.012502\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_15-unewstv-night-edition_nR1QmwM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 831,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:53.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:33:26.265Z\",\n            \"updated\": \"2019-07-12T02:07:53.981Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2856.491\",\n                \"time_end\": \"2019-07-11T19:07:53.981440\",\n                \"time_start\": \"2019-07-11T19:07:51.124949\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_16-unewstv-jirga_ImhURRX.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 832,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:51.062Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:33:48.560Z\",\n            \"updated\": \"2019-07-12T02:07:51.062Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2273.247\",\n                \"time_end\": \"2019-07-11T19:07:51.061874\",\n                \"time_start\": \"2019-07-11T19:07:48.788627\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_17-unewstv-bebaak_pO8Ezqe.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 833,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:48.707Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:34:09.907Z\",\n            \"updated\": \"2019-07-12T02:07:48.707Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3266.404\",\n                \"time_end\": \"2019-07-11T19:07:48.691913\",\n                \"time_start\": \"2019-07-11T19:07:45.425509\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_18-unewstv-capital-talk_5GJM5xv.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 834,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:45.399Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:34:28.072Z\",\n            \"updated\": \"2019-07-12T02:07:45.399Z\",\n            \"extra_data\": {\n                \"dupes\": 33,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 33,\n                \"duration\": \"2552.785\",\n                \"time_end\": \"2019-07-11T19:07:45.399110\",\n                \"time_start\": \"2019-07-11T19:07:42.846325\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_6Q6W4Qy.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 835,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:42.817Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:34:49.700Z\",\n            \"updated\": \"2019-07-12T02:07:42.817Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2372.074\",\n                \"time_end\": \"2019-07-11T19:07:42.816670\",\n                \"time_start\": \"2019-07-11T19:07:40.444596\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_20-unewstv-power-play_aou4EcA.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 836,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:40.422Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:35:12.523Z\",\n            \"updated\": \"2019-07-12T02:07:40.422Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2826.631\",\n                \"time_end\": \"2019-07-11T19:07:40.421938\",\n                \"time_start\": \"2019-07-11T19:07:37.595307\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_9DSwqYK.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 837,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:37.020Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:35:34.238Z\",\n            \"updated\": \"2019-07-12T02:07:37.020Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2299.441\",\n                \"time_end\": \"2019-07-11T19:07:37.020680\",\n                \"time_start\": \"2019-07-11T19:07:34.721239\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_22-unewstv-think-tank_eMUzhEq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 838,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:34.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:35:56.324Z\",\n            \"updated\": \"2019-07-12T02:07:34.684Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2645.1859999999997\",\n                \"time_end\": \"2019-07-11T19:07:34.684519\",\n                \"time_start\": \"2019-07-11T19:07:32.039333\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_8JZLtuq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 839,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:32.009Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:36:18.837Z\",\n            \"updated\": \"2019-07-12T02:07:32.009Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2216.143\",\n                \"time_end\": \"2019-07-11T19:07:32.009592\",\n                \"time_start\": \"2019-07-11T19:07:29.793449\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_27-unewstv-to-the-point_tDpWM5Z.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 840,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:29.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:36:40.994Z\",\n            \"updated\": \"2019-07-12T02:07:29.763Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4374.867\",\n                \"time_end\": \"2019-07-11T19:07:29.763116\",\n                \"time_start\": \"2019-07-11T19:07:25.388249\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_28-unewstv-news-eye_gnf0j0U.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 841,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:24.385Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:37:02.589Z\",\n            \"updated\": \"2019-07-12T02:07:24.385Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2957.022\",\n                \"time_end\": \"2019-07-11T19:07:24.385223\",\n                \"time_start\": \"2019-07-11T19:07:21.428201\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-c_5oYOdkh.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 842,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:21.395Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:37:27.400Z\",\n            \"updated\": \"2019-07-12T02:07:21.395Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2506.268\",\n                \"time_end\": \"2019-07-11T19:07:21.395796\",\n                \"time_start\": \"2019-07-11T19:07:18.889528\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 60,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_60-unewstv-khabarnak_u3f1pLD.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 843,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:18.822Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:38:01.710Z\",\n            \"updated\": \"2019-07-12T02:07:18.822Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:843\",\n                \"job_id\": 843,\n                \"feed_id\": 29,\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_29-unewstv-g-for-gharida_VWVedkJ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 844,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:18.756Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:38:23.726Z\",\n            \"updated\": \"2019-07-12T02:07:18.756Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"3084.954\",\n                \"time_end\": \"2019-07-11T19:07:18.755824\",\n                \"time_start\": \"2019-07-11T19:07:15.670870\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_hLQqGyn.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 845,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:15.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:38:45.745Z\",\n            \"updated\": \"2019-07-12T02:07:15.620Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2317.3810000000003\",\n                \"time_end\": \"2019-07-11T19:07:15.620447\",\n                \"time_start\": \"2019-07-11T19:07:13.303066\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_BoTLFI2.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 846,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:13.213Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:39:07.941Z\",\n            \"updated\": \"2019-07-12T02:07:13.213Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2655.252\",\n                \"time_end\": \"2019-07-11T19:07:13.212985\",\n                \"time_start\": \"2019-07-11T19:07:10.557733\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_w987FG6.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 847,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:10.533Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:39:29.800Z\",\n            \"updated\": \"2019-07-12T02:07:10.533Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2860.6150000000002\",\n                \"time_end\": \"2019-07-11T19:07:10.533020\",\n                \"time_start\": \"2019-07-11T19:07:07.672405\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_ZHcikCI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 848,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:07.597Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:39:51.586Z\",\n            \"updated\": \"2019-07-12T02:07:07.597Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2698.187\",\n                \"time_end\": \"2019-07-11T19:07:07.596940\",\n                \"time_start\": \"2019-07-11T19:07:04.898753\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_34-unewstv-news-beat_pBhRNgP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 849,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:04.849Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:40:13.879Z\",\n            \"updated\": \"2019-07-12T02:07:04.849Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2277.864\",\n                \"time_end\": \"2019-07-11T19:07:04.849239\",\n                \"time_start\": \"2019-07-11T19:07:02.571375\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_QqLsFM1.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 850,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:02.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:40:36.213Z\",\n            \"updated\": \"2019-07-12T02:07:02.522Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2458.7940000000003\",\n                \"time_end\": \"2019-07-11T19:07:02.522480\",\n                \"time_start\": \"2019-07-11T19:07:00.063686\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_JfpGuMf.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 851,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:07:00.014Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:40:57.925Z\",\n            \"updated\": \"2019-07-12T02:07:00.014Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3133.521\",\n                \"time_end\": \"2019-07-11T19:07:00.014342\",\n                \"time_start\": \"2019-07-11T19:06:56.880821\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_SNMIW6e.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 852,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:06:56.853Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:41:19.925Z\",\n            \"updated\": \"2019-07-12T02:06:56.853Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2389.349\",\n                \"time_end\": \"2019-07-11T19:06:56.853640\",\n                \"time_start\": \"2019-07-11T19:06:54.464291\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_gxzk14D.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 853,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:06:54.418Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:41:41.667Z\",\n            \"updated\": \"2019-07-12T02:06:54.418Z\",\n            \"extra_data\": {\n                \"dupes\": 38,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3204.891\",\n                \"time_end\": \"2019-07-11T19:06:54.418348\",\n                \"time_start\": \"2019-07-11T19:06:51.213457\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_39-unewstv-on-the-front_JoygL3e.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 854,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:06:51.143Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:42:03.462Z\",\n            \"updated\": \"2019-07-12T02:06:51.144Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2819.029\",\n                \"time_end\": \"2019-07-11T19:06:51.143840\",\n                \"time_start\": \"2019-07-11T19:06:48.324811\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_N6vE8sg.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 855,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:06:48.234Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:42:26.037Z\",\n            \"updated\": \"2019-07-12T02:06:48.234Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3290.639\",\n                \"time_end\": \"2019-07-11T19:06:48.217654\",\n                \"time_start\": \"2019-07-11T19:06:44.927015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_41-unewstv-seedhi-baat_Pau4Nji.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 856,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:06:44.889Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:42:47.847Z\",\n            \"updated\": \"2019-07-12T02:06:44.889Z\",\n            \"extra_data\": {\n                \"dupes\": 40,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2673.4939999999997\",\n                \"time_end\": \"2019-07-11T19:06:44.889707\",\n                \"time_start\": \"2019-07-11T19:06:42.216213\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_9XQCyVd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 857,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-12T02:06:42.143Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T00:43:09.936Z\",\n            \"updated\": \"2019-07-12T02:06:42.143Z\",\n            \"extra_data\": {\n                \"dupes\": 39,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"6535.882\",\n                \"time_end\": \"2019-07-11T19:06:42.143640\",\n                \"time_start\": \"2019-07-11T19:06:35.607758\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 61,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-11/2019-07-11-1-bilgrami-feed_id_61-unewstv-khabardar_nilLE1X.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 858,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:18:25.979Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:18:25.894Z\",\n            \"updated\": \"2019-07-12T09:18:25.979Z\",\n            \"extra_data\": null,\n            \"show_feed\": 45,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_45-unewstv-naya-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 859,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:18:48.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:18:48.233Z\",\n            \"updated\": \"2019-07-12T09:18:48.313Z\",\n            \"extra_data\": null,\n            \"show_feed\": 56,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_56-unewstv-tonight-with-fareeha.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 860,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:19:10.335Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:19:10.226Z\",\n            \"updated\": \"2019-07-12T09:19:10.335Z\",\n            \"extra_data\": null,\n            \"show_feed\": 46,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_46-unewstv-report-card.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 861,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:19:32.477Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:19:32.427Z\",\n            \"updated\": \"2019-07-12T09:19:32.477Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 862,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:19:54.534Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:19:54.458Z\",\n            \"updated\": \"2019-07-12T09:19:54.534Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_KCBPQMZ.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 863,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:20:17.766Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:20:17.718Z\",\n            \"updated\": \"2019-07-12T09:20:17.766Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-masood.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 864,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:20:40.823Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:20:39.675Z\",\n            \"updated\": \"2019-07-12T09:20:40.824Z\",\n            \"extra_data\": null,\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 865,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:21:02.634Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:21:02.588Z\",\n            \"updated\": \"2019-07-12T09:21:02.635Z\",\n            \"extra_data\": null,\n            \"show_feed\": 57,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_57-unewstv-hasb-e-haal.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 866,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:21:25.616Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:21:25.498Z\",\n            \"updated\": \"2019-07-12T09:21:25.616Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 867,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:21:48.547Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:21:47.486Z\",\n            \"updated\": \"2019-07-12T09:21:48.547Z\",\n            \"extra_data\": null,\n            \"show_feed\": 58,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_58-unewstv-mazaaq-raat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 868,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:22:11.135Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:22:11.067Z\",\n            \"updated\": \"2019-07-12T09:22:11.135Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 869,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:22:32.740Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:22:32.604Z\",\n            \"updated\": \"2019-07-12T09:22:32.740Z\",\n            \"extra_data\": null,\n            \"show_feed\": 59,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_59-unewstv-syasi-theater.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 870,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:22:55.564Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:22:55.448Z\",\n            \"updated\": \"2019-07-12T09:22:55.564Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 871,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:23:17.551Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:23:17.498Z\",\n            \"updated\": \"2019-07-12T09:23:17.551Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 872,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:23:39.412Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:23:39.345Z\",\n            \"updated\": \"2019-07-12T09:23:39.412Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 873,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:23:50.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:23:50.820Z\",\n            \"updated\": \"2019-07-12T09:23:50.866Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 874,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:24:12.624Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:24:12.572Z\",\n            \"updated\": \"2019-07-12T09:24:12.624Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 875,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:24:35.589Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:24:35.502Z\",\n            \"updated\": \"2019-07-12T09:24:35.589Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_HuFcG1l.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 876,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:24:58.487Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:24:58.381Z\",\n            \"updated\": \"2019-07-12T09:24:58.487Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 877,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:25:22.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:25:22.621Z\",\n            \"updated\": \"2019-07-12T09:25:22.689Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 878,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:25:45.059Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:25:44.946Z\",\n            \"updated\": \"2019-07-12T09:25:45.059Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 879,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:26:07.411Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:26:07.288Z\",\n            \"updated\": \"2019-07-12T09:26:07.411Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 880,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:26:26.139Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:26:26.082Z\",\n            \"updated\": \"2019-07-12T09:26:26.139Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 881,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:26:47.838Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:26:47.759Z\",\n            \"updated\": \"2019-07-12T09:26:47.838Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 882,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:27:09.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:27:09.919Z\",\n            \"updated\": \"2019-07-12T09:27:09.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-10\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 883,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:27:32.210Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:27:32.133Z\",\n            \"updated\": \"2019-07-12T09:27:32.210Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 884,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:27:54.852Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:27:54.805Z\",\n            \"updated\": \"2019-07-12T09:27:54.852Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 885,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:28:17.400Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:28:17.329Z\",\n            \"updated\": \"2019-07-12T09:28:17.400Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 886,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:28:41.777Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:28:41.711Z\",\n            \"updated\": \"2019-07-12T09:28:41.777Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 887,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:29:06.122Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:29:06.077Z\",\n            \"updated\": \"2019-07-12T09:29:06.122Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_25-unewstv-kal-tak-with-javed-chaudhry.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 888,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:29:28.867Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:29:28.727Z\",\n            \"updated\": \"2019-07-12T09:29:28.867Z\",\n            \"extra_data\": null,\n            \"show_feed\": 60,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_60-unewstv-khabarnak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 889,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:29:51.496Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:29:51.437Z\",\n            \"updated\": \"2019-07-12T09:29:51.496Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 890,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:30:15.651Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:30:15.369Z\",\n            \"updated\": \"2019-07-12T09:30:15.651Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 891,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:30:39.179Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:30:39.097Z\",\n            \"updated\": \"2019-07-12T09:30:39.179Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 892,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:31:02.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:31:02.247Z\",\n            \"updated\": \"2019-07-12T09:31:02.329Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_wGMp4Eo.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 893,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:31:25.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:31:25.141Z\",\n            \"updated\": \"2019-07-12T09:31:25.208Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 894,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:31:47.250Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:31:46.835Z\",\n            \"updated\": \"2019-07-12T09:31:47.250Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 895,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:32:08.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:32:08.815Z\",\n            \"updated\": \"2019-07-12T09:32:08.911Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 896,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:32:31.556Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:32:31.469Z\",\n            \"updated\": \"2019-07-12T09:32:31.556Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 897,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:32:54.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:32:54.122Z\",\n            \"updated\": \"2019-07-12T09:32:54.200Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 898,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:33:16.559Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:33:16.497Z\",\n            \"updated\": \"2019-07-12T09:33:16.559Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 899,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:33:38.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:33:38.418Z\",\n            \"updated\": \"2019-07-12T09:33:38.480Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 900,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:34:00.178Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:34:00.133Z\",\n            \"updated\": \"2019-07-12T09:34:00.178Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 901,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:34:23.011Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:34:22.953Z\",\n            \"updated\": \"2019-07-12T09:34:23.011Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-11\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 902,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:34:45.248Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:34:45.152Z\",\n            \"updated\": \"2019-07-12T09:34:45.248Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 903,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-12T09:35:08.379Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-12T09:35:08.225Z\",\n            \"updated\": \"2019-07-12T09:35:08.379Z\",\n            \"extra_data\": null,\n            \"show_feed\": 61,\n            \"latest_feed_date\": \"2019-07-07\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-12/2019-07-12-1-bilgrami-feed_id_61-unewstv-khabardar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    }\n]\n":1hlsys:UZ3vEoqRqjIcXT26wbrkJRmXpyg