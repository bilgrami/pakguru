IltcbiAgICB7XG4gICAgICAgIFwibW9kZWxcIjogXCJwYWtndXJ1X2FwcC5wb3N0XCIsXG4gICAgICAgIFwicGtcIjogMSxcbiAgICAgICAgXCJmaWVsZHNcIjoge1xuICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlphcmEgSGF0IEtheSAoQW5kaGVyZSBNYWluIFVqYWxhKSAtIDI5dGggSnVuZSAyMDE5XCIsXG4gICAgICAgICAgICBcInNsdWdcIjogXCJ6YXJhLWhhdC1rYXktMjl0aC1KdW5lLTIwMTlcIixcbiAgICAgICAgICAgIFwicHVibGlzaF9kYXRlXCI6IFwiMjAxOS0wNy0wMVQwMTo0NjoxNVpcIixcbiAgICAgICAgICAgIFwidGFyZ2V0X2RhdGVcIjogXCIyMDE5LTA2LTI5XCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCJOb25lXCIsXG4gICAgICAgICAgICBcInBvc3RfYXV0aG9yXCI6IFwiTm9uZVwiLFxuICAgICAgICAgICAgXCJzb3VyY2VcIjogXCJodHRwOi8vd3d3LnVuZXdzdHYuY29tLzE1MzE4Ni96YXJhLWh1dC1rYXktYW5kaGVyZS1tYWluLXVqYWxhLTI5dGgtanVuZS0yMDE5XCIsXG4gICAgICAgICAgICBcInNvdXJjZV9kZXRhaWxcIjogXCJOb25lXCIsXG4gICAgICAgICAgICBcImNhdGVnb3J5XCI6IDEsXG4gICAgICAgICAgICBcIm1lZGlhX3R5cGVcIjogXCJlbWJlZGRlZCB2aWRlb1wiLFxuICAgICAgICAgICAgXCJ3ZWVrZGF5X25hbWVcIjogXCJTYXRcIixcbiAgICAgICAgICAgIFwibG9jYWxlXCI6IDIsXG4gICAgICAgICAgICBcInNob3dcIjogMixcbiAgICAgICAgICAgIFwidGFnc1wiOiBcIltcXFwiemFyYSBoYXQga2F5XFxcIiwgXFxcImRhd24gbmV3c1xcXCIsIFxcXCJuZXdzIHRhbGsgc2hvd3NcXFwiXVwiLFxuICAgICAgICAgICAgXCJhZGRlZF9ieVwiOiBbXG4gICAgICAgICAgICAgICAgXCJhZG1pblwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJpc19hY3RpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZmxhZ2dlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiZmxhZ2dlZF9kYXRhXCI6IFwiXCIsXG4gICAgICAgICAgICBcImV4dHJhX2RhdGFcIjogbnVsbCxcbiAgICAgICAgICAgIFwiY3JlYXRlZF9vblwiOiBcIjIwMTktMDctMDFUMDE6NTE6MTYuMDQwWlwiLFxuICAgICAgICAgICAgXCJ1cGRhdGVkXCI6IFwiMjAxOS0wNy0wMVQwMjo0MDo0Ny44NTVaXCIsXG4gICAgICAgICAgICBcImlzX1Nob3dcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaXNfSm9rZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaXNfUXVvdGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlzX1BvbGl0aWNzXCI6IHRydWUsXG4gICAgICAgICAgICBcImNvdW50cnlcIjogW1xuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm1vZGVsXCI6IFwicGFrZ3VydV9hcHAucG9zdFwiLFxuICAgICAgICBcInBrXCI6IDIsXG4gICAgICAgIFwiZmllbGRzXCI6IHtcbiAgICAgICAgICAgIFwidGl0bGVcIjogXCJNZXJheSBNdXRhYmlxIFdpdGggSGFzc2FuIE5pc2FyIChBbW5lc3R5IFNjaGVtZSwgT3RoZXIgSXNzdWVzKSAtIDMwdGggSnVuZSAyMDE5XCIsXG4gICAgICAgICAgICBcInNsdWdcIjogXCJtZXJheS1tdXRhYmlxLXdpdGgtaGFzc2FuLW5pc2FyLWFtbmVzdHktc2NoZW1lLW90aFwiLFxuICAgICAgICAgICAgXCJwdWJsaXNoX2RhdGVcIjogXCIyMDE5LTA3LTAxVDA2OjAwOjUzLjA5M1pcIixcbiAgICAgICAgICAgIFwidGFyZ2V0X2RhdGVcIjogXCIyMDE5LTA2LTMwXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCJcIixcbiAgICAgICAgICAgIFwicG9zdF9hdXRob3JcIjogbnVsbCxcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwiaHR0cHM6Ly95b3V0dS5iZS9rNVVTUEFJZWxYY1wiLFxuICAgICAgICAgICAgXCJzb3VyY2VfZGV0YWlsXCI6IFwiXCIsXG4gICAgICAgICAgICBcImNhdGVnb3J5XCI6IDEsXG4gICAgICAgICAgICBcIm1lZGlhX3R5cGVcIjogXCJlbWJlZGRlZCB2aWRlb1wiLFxuICAgICAgICAgICAgXCJ3ZWVrZGF5X25hbWVcIjogXCJTdW5cIixcbiAgICAgICAgICAgIFwibG9jYWxlXCI6IDIsXG4gICAgICAgICAgICBcInNob3dcIjogMyxcbiAgICAgICAgICAgIFwidGFnc1wiOiBcIltcXFwibWVyYXkgbXV0YWJpcVxcXCIsIFxcXCJoYXNzYW4gbmlzYXJcXFwiLCBcXFwidGFsayBzaG93c1xcXCJdXCIsXG4gICAgICAgICAgICBcImFkZGVkX2J5XCI6IFtcbiAgICAgICAgICAgICAgICBcImFkbWluXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImlzX2FjdGl2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJmbGFnZ2VkXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJmbGFnZ2VkX2RhdGFcIjogXCJcIixcbiAgICAgICAgICAgIFwiZXh0cmFfZGF0YVwiOiBudWxsLFxuICAgICAgICAgICAgXCJjcmVhdGVkX29uXCI6IFwiMjAxOS0wNy0wMVQwNjowMDo1My4wOTNaXCIsXG4gICAgICAgICAgICBcInVwZGF0ZWRcIjogXCIyMDE5LTA3LTAxVDA2OjAwOjUzLjA5M1pcIixcbiAgICAgICAgICAgIFwiaXNfU2hvd1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJpc19Kb2tlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpc19RdW90ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaXNfUG9saXRpY3NcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiY291bnRyeVwiOiBbXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfVxuXVxuIg:1hi45R:mME6Hy0NXz2e2GQn1AVZ5-bt220