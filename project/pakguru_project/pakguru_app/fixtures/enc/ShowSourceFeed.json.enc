"[\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 1,\n        \"fields\": {\n            \"name\": \"YouTube - 60 Minutes\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T09:41:43.125Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:15:13.753Z\",\n            \"updated\": \"2019-07-06T09:41:43.125Z\",\n            \"extra_data\": null,\n            \"show_name\": \"60 Minutes\",\n            \"channel\": 1,\n            \"playlist_link\": \"https://www.youtube.com/user/60minutes/playlists?view=1&sort=dd&flow=grid\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?v=UNvdyKiNP_A\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"1080p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                2\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 2,\n        \"fields\": {\n            \"name\": \"YouTube - Zara Hat Kay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T09:41:28.583Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:36:31.821Z\",\n            \"updated\": \"2019-07-06T09:41:28.583Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=odMfq4uvawg&list=PLqvJuaAfjXbQZEZrIYkNHyd5JYW4peIwE\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?time_continue=2&v=bsc23Rabj0w\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 3,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                2\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 3,\n        \"fields\": {\n            \"name\": \"unewstv - Zara Hat Kay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T02:09:02.888Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:42:27.916Z\",\n            \"updated\": \"2019-07-03T02:09:02.889Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153186/zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"title_example\": \"Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019 Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019\",\n            \"title_search_pattern\": \"{show name} ({episode title}) \\u2013 {date: DDth MMM YYYY}\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 4,\n        \"fields\": {\n            \"name\": \"Talk Shows Central - Zara Hat Kay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T09:42:59.041Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T02:48:30.906Z\",\n            \"updated\": \"2019-07-06T09:42:59.041Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/playlist?list=PL3kMf0Q991MNBSj9EmVLH-lkOIQ07e3xu\",\n            \"latest_show_link\": \"https://youtu.be/5Hs3PpRgw1U?list=PL3kMf0Q991MNBSj9EmVLH-lkOIQ07e3xu\",\n            \"title_example\": \"Another Huge Success of PM Imran Khan | Zara Hat Kay | 28 June 2019 | Dawn News\",\n            \"title_search_pattern\": \"{Episode Name} | {Show name} | {date:DD MMM YYYY} | {Channel Name}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 5,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 5,\n        \"fields\": {\n            \"name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:28:36.458Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:55:27.463Z\",\n            \"updated\": \"2019-07-03T06:28:36.458Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"latest_show_link\": \"http://www.unewstv.com/153242/meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"title_example\": \"Meray Mutabiq With Hassan Nisar (Amnesty Scheme, Other Issues) - 30th June 2019\",\n            \"title_search_pattern\": \"{show name} ({episode title}) \\u2013 {date: DDth MMM YYYY}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 6,\n        \"fields\": {\n            \"name\": \"unewstv - Live with Dr. Shahid Masood\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:13:18.027Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T08:55:53.055Z\",\n            \"updated\": \"2019-07-03T06:13:18.027Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Live with Dr. Shahid Masood\",\n            \"channel\": 5,\n            \"playlist_link\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"latest_show_link\": \"http://www.unewstv.com/153227/live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"title_example\": \"Live with Dr. Shahid Masood (Imran Khan Aur Loti Hui Daulat) - 30th June 2019\",\n            \"title_search_pattern\": \"Live with Dr. Shahid Masood (Muashi Dehshatgardi Ka Bharpoor Waar) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"720p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 7,\n        \"fields\": {\n            \"name\": \"Geo News - Score with Yahya Hussaini\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T09:42:44.830Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:07:08.136Z\",\n            \"updated\": \"2019-07-06T09:42:44.830Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Score with Yahya Hussaini\",\n            \"channel\": 4,\n            \"playlist_link\": \"https://www.geo.tv/shows/score\",\n            \"latest_show_link\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"title_example\": \"Score - 28-June-2019\",\n            \"title_search_pattern\": \"Score - 27-June-2019\",\n            \"search_api_url\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"search_api_pattern\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"feed_source_type\": 7,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 8,\n        \"fields\": {\n            \"name\": \"HUM TV - Deewar e Shab\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T09:41:13.364Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:52:37.901Z\",\n            \"updated\": \"2019-07-06T09:41:13.364Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Deewar e Shab\",\n            \"channel\": 6,\n            \"playlist_link\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"latest_show_link\": \"https://www.hum.tv/deewar-e-shab-episode-04/\",\n            \"title_example\": \"Deewar e Shab Episode #04 HUM TV Drama 29 June 2019\",\n            \"title_search_pattern\": \"Deewar e Shab Episode #03 HUM TV Drama 22 June 2019\",\n            \"search_api_url\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"search_api_pattern\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"feed_source_type\": 6,\n            \"feed_quality\": \"1080p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 9,\n        \"fields\": {\n            \"name\": \"unewstv - Muqabil\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:15:37.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:01:55.446Z\",\n            \"updated\": \"2019-07-03T06:15:37.632Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Muqabil\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153314/muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"title_example\": \"Muqabil (Is PM Helpless In Front of Corruption Mafia) \\u2013 1st July 2019\",\n            \"title_search_pattern\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi) \\u2013 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 10,\n        \"fields\": {\n            \"name\": \"unewstv - Off The Record\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T06:15:16.180Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:28:47.497Z\",\n            \"updated\": \"2019-07-03T06:15:16.180Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Off The Record\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"latest_show_link\": \"http://www.unewstv.com/153037/off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"title_example\": \"Off The Record (All Parties Conference, Inflation) - 27th June 2019\",\n            \"title_search_pattern\": \"Off The Record (APC Ne Kia Hasil Kia?) \\u2013 26th June 2019 June 26, 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 11,\n        \"fields\": {\n            \"name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T04:15:01.447Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-03T04:15:01.447Z\",\n            \"updated\": \"2019-07-03T04:15:01.447Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"latest_show_link\": \"http://www.unewstv.com/153395/dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"title_example\": \"Dunya Kamran Khan Kay Sath (Mehngai Ka Tofan) - 2nd July 2019 Dunya Kamran Khan Kay Sath (Mehngai Ka Tofan) - 2nd July 2019\",\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 12,\n        \"fields\": {\n            \"name\": \"unewstv - Aap Kay Muqabil\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T07:53:27.275Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T07:53:27.275Z\",\n            \"updated\": \"2019-07-03T07:53:27.276Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Aap Kay Muqabil\",\n            \"channel\": 9,\n            \"playlist_link\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"latest_show_link\": \"http://www.unewstv.com/153388/aap-kay-muqabil-rana-sanaullah-s-arrest-other-issues-2nd-july-2019\",\n            \"title_example\": \"Aap Kay Muqabil (Rana Sanaullah's Arrest, Other Issues) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Aap Kay Muqabil (PM Imran Khan's Interview About Amnesty & Taxes) \\u2013 1st July 2019 July 01, 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 13,\n        \"fields\": {\n            \"name\": \"unewstv - The Reporters\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:07:28.898Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:07:28.898Z\",\n            \"updated\": \"2019-07-03T08:07:28.898Z\",\n            \"extra_data\": null,\n            \"show_name\": \"The Reporters\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153376/the-reporters-pm-imran-khan-s-offer-to-nawaz-zardari-2nd-july-2019\",\n            \"title_example\": \"The Reporters (PM Imran Khan's Offer to Nawaz & Zardari) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"The Reporters (Opposition's All Parties Conference Failed) - 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 14,\n        \"fields\": {\n            \"name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:25:07.063Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:25:07.063Z\",\n            \"updated\": \"2019-07-03T08:25:07.063Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"latest_show_link\": \"http://www.unewstv.com/153325/aaj-shahzeb-khanzada-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"title_example\": \"Aaj Shahzeb Khanzada Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"title_search_pattern\": \"Aaj Shahzaib Khanzada Ke Saath (Army Chief's Statement About Economy) \\u2013 28th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 15,\n        \"fields\": {\n            \"name\": \"unewstv - Night Edition\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:37:06.514Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:37:06.514Z\",\n            \"updated\": \"2019-07-03T08:37:06.514Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Night Edition\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153244/night-edition-big-shock-for-pmln-30th-june-2019\",\n            \"title_example\": \"Night Edition (Big Shock For PMLN?) \\u2013 30th June 2019\",\n            \"title_search_pattern\": \"Night Edition (Budget Approved, Opposition Failed?) \\u2013 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 16,\n        \"fields\": {\n            \"name\": \"unewstv - Jirga\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:48:42.453Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:48:42.453Z\",\n            \"updated\": \"2019-07-03T08:48:42.453Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Jirga\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"latest_show_link\": \"http://www.unewstv.com/153255/jirga-with-saleem-safi-ashraf-ghani-special-interview-30th-june-2019\",\n            \"title_example\": \"Jirga With Saleem Safi (Ashraf Ghani Special Interview) - 30th June 2019\",\n            \"title_search_pattern\": \"Jirga with Saleem Safi (Qamar Zaman Kaira Exclusive) - 22nd June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 17,\n        \"fields\": {\n            \"name\": \"unewstv - Bebaak\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T08:56:47.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T08:56:47.316Z\",\n            \"updated\": \"2019-07-03T08:56:47.316Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Bebaak\",\n            \"channel\": 5,\n            \"playlist_link\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153396/bebaak-production-orders-arrests-economy-2nd-july-2019\",\n            \"title_example\": \"Bebaak (Production Orders, Arrests, Economy) - 2nd July 2019\",\n            \"title_search_pattern\": \"Bebaak (Rana Sanaullah Arrested, Shahbaz Maryam Meeting) - 1st July 2019 July 01, 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 18,\n        \"fields\": {\n            \"name\": \"unewstv - Capital Talk\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:10:26.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:10:26.810Z\",\n            \"updated\": \"2019-07-03T09:10:26.810Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Capital Talk\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"latest_show_link\": \"http://www.unewstv.com/153400/capital-talk-fazal-ur-rehman-exclusive-interview-2nd-july-2019\",\n            \"title_example\": \"Capital Talk (Fazal ur Rehman Exclusive Interview) - 2nd July 2019\",\n            \"title_search_pattern\": \"Capital Talk (Cricket Se Siasat Tak) \\u2013 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 19,\n        \"fields\": {\n            \"name\": \"unewstv - Hard Talk Pakistan\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:17:40.682Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:17:40.682Z\",\n            \"updated\": \"2019-07-03T09:17:40.682Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Hard Talk Pakistan\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"latest_show_link\": \"http://www.unewstv.com/153236/hard-talk-pakistan-with-moeed-pirzada-cracks-in-pmln-30th-june-2019\",\n            \"title_example\": \"Hard Talk Pakistan With Moeed Pirzada (Cracks in PMLN) - 30th June 2019\",\n            \"title_search_pattern\": \"Hard Talk Pakistan With Moeed Pirzada (Mid Term Elections Ka Mutalba) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 20,\n        \"fields\": {\n            \"name\": \"unewstv - Power Play\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:27:35.039Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:27:35.039Z\",\n            \"updated\": \"2019-07-03T09:27:35.039Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Power Play\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153405/power-play-chairman-fbr-shabbar-zaidi-exclusive-interview-2nd-july-2019\",\n            \"title_example\": \"Power Play (Chairman FBR Shabbar Zaidi Exclusive Interview) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Power Play (Beqabu Dollar Aur Maeeshat) \\u2013 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 21,\n        \"fields\": {\n            \"name\": \"unewstv - Najam Sethi Show\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T09:45:08.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:45:08.610Z\",\n            \"updated\": \"2019-07-03T09:45:08.610Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Najam Sethi Show\",\n            \"channel\": 10,\n            \"playlist_link\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"latest_show_link\": \"http://www.unewstv.com/153386/najam-sethi-show-more-arrests-asif-zardari-s-interview-2nd-july-2019\",\n            \"title_example\": \"Najam Sethi Show (More Arrests, Asif Zardari's Interview) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Najam Sethi Show (PM Imran Khan's Speech) \\u2013 1st July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 22,\n        \"fields\": {\n            \"name\": \"unewstv - Think Tank\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:04:23.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:04:23.845Z\",\n            \"updated\": \"2019-07-03T18:04:23.845Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Think Tank\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153231/think-tank-pmln-in-trouble-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"title_example\": \"Think Tank (PMLN In Trouble, PMLN Members Meet Imran Khan) - 30th June 2019\",\n            \"title_search_pattern\": \"Think Tank (Attitude of Govt And Opposition) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 23,\n        \"fields\": {\n            \"name\": \"unewstv - Harf e Raaz\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T18:21:12.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:21:12.286Z\",\n            \"updated\": \"2019-07-03T18:21:12.286Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Harf e Raaz\",\n            \"channel\": 11,\n            \"playlist_link\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"latest_show_link\": \"http://www.unewstv.com/153437/harf-e-raaz-why-america-now-favours-pakistan-3rd-july-2019\",\n            \"title_example\": \"Harf e Raaz (Why America Now Favours Pakistan?) - 3rd July 2019\",\n            \"title_search_pattern\": \"Harf e Raaz With Orya Maqbool Jan (Anti Opposition Drive) - 2nd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 24,\n        \"fields\": {\n            \"name\": \"unewstv - Khara Sach\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:28:16.051Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:33:41.023Z\",\n            \"updated\": \"2019-07-07T06:28:16.052Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Khara Sach\",\n            \"channel\": 10,\n            \"playlist_link\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"latest_show_link\": \"http://www.unewstv.com/153404/khara-sach-with-mubashir-lucman-production-orders-issue-2nd-july-2019\",\n            \"title_example\": \"Khara Sach With Mubashir Lucman (Production Orders Issue) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Khara Sach With Mubashir Lucman (Sheikh Rasheed Exclusive Interview) \\u2013 1st July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 25,\n        \"fields\": {\n            \"name\": \"unewstv - Kal Tak with Javed Chaudhry\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T14:32:26.643Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:45:37.770Z\",\n            \"updated\": \"2019-07-10T14:32:26.643Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Kal tak with Javed Chaudhry\",\n            \"channel\": 12,\n            \"playlist_link\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"latest_show_link\": \"http://www.unewstv.com/153391/kal-tak-with-javed-chaudhry-imran-khan-s-big-announcement-2nd-july-2019\",\n            \"title_example\": \"Kal Tak with Javed Chaudhry (Imran Khan's Big Announcement) \\u2013 2nd July 2019\",\n            \"title_search_pattern\": \"Kal tak with Javed Chaudhry (PMLN Mein Cracks) \\u2013 1st July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 26,\n        \"fields\": {\n            \"name\": \"unewstv - Faisla Aap Ka\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T19:06:23.531Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:06:23.537Z\",\n            \"updated\": \"2019-07-03T19:06:23.538Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Faisla Aap Ka\",\n            \"channel\": 13,\n            \"playlist_link\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"latest_show_link\": \"http://www.unewstv.com/153433/faisla-aap-ka-cases-on-opposition-leaders-3rd-july-2019\",\n            \"title_example\": \"Faisla Aap Ka (Cases on Opposition Leaders) \\u2013 3rd July 2019\",\n            \"title_search_pattern\": \"Faisla Aap Ka (Production Order Ke Qanoon Mein Tarmeem Ka Faisla) \\u2013 2nd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 27,\n        \"fields\": {\n            \"name\": \"unewstv - To The Point\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T19:19:35.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:19:35.884Z\",\n            \"updated\": \"2019-07-03T19:19:35.884Z\",\n            \"extra_data\": null,\n            \"show_name\": \"To The Point\",\n            \"channel\": 12,\n            \"playlist_link\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"latest_show_link\": \"http://www.unewstv.com/153251/to-the-point-cracks-in-pmln-30th-june-2019\",\n            \"title_example\": \"To The Point (Cracks in PMLN) \\u2013 30th June 2019\",\n            \"title_search_pattern\": \"To The Point (Opposition Failed To Reject Budget) \\u2013 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 28,\n        \"fields\": {\n            \"name\": \"unewstv - News Eye\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T18:00:37.964Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T18:00:37.332Z\",\n            \"updated\": \"2019-07-04T18:00:37.964Z\",\n            \"extra_data\": null,\n            \"show_name\": \"News Eye\",\n            \"channel\": 2,\n            \"playlist_link\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"latest_show_link\": \"http://www.unewstv.com/153458/news-eye-with-meher-abbasi-rana-sanaullah-s-arrest-3rd-july-2019\",\n            \"title_example\": \"News Eye with Meher Abbasi (Rana Sanaullah's Arrest) \\u2013 3rd July 2019\",\n            \"title_search_pattern\": \"News Eye with Meher Abbasi (Imran Khan's Clear Message) \\u2013 2nd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 29,\n        \"fields\": {\n            \"name\": \"unewstv - G For Gharida\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T18:18:55.852Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T18:18:55.202Z\",\n            \"updated\": \"2019-07-04T18:18:55.852Z\",\n            \"extra_data\": null,\n            \"show_name\": \"G for Gharida\",\n            \"channel\": 13,\n            \"playlist_link\": \"http://www.unewstv.com/category/G+For+Gharida+Farooqi+\",\n            \"latest_show_link\": \"http://www.unewstv.com/153175/g-for-gharida-discussion-on-current-issues-29th-june-2019\",\n            \"title_example\": \"G For Gharida (Discussion on Current Issues) \\u2013 29th June 2019\",\n            \"title_search_pattern\": \"G For Gharida (Federal Budget Approved) \\u2013 28th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/G+For+Gharida+Farooqi+\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/G+For+Gharida+Farooqi+\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 30,\n        \"fields\": {\n            \"name\": \"unewstv - Nasim Zehra @ 8:00\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T18:33:20.251Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T18:33:18.948Z\",\n            \"updated\": \"2019-07-04T18:33:20.251Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Nasim Zehra @ 8:00\",\n            \"channel\": 10,\n            \"playlist_link\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"latest_show_link\": \"http://www.unewstv.com/153246/nasim-zehra-8-00-dollar-ki-parwaz-30th-june-2019\",\n            \"title_example\": \"Nasim Zehra @ 8:00 (Dollar Ki Parwaz) \\u2013 30th June 2019\",\n            \"title_search_pattern\": \"Nasim Zehra @ 8:00 (Cricket World Cup 2019) \\u2013 23rd June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 31,\n        \"fields\": {\n            \"name\": \"unewstv - Breaking Point with Malick\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T18:54:24.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T18:52:14.662Z\",\n            \"updated\": \"2019-07-04T18:54:24.944Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Breaking Point with Malick\",\n            \"channel\": 6,\n            \"playlist_link\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"latest_show_link\": \"http://www.unewstv.com/153224/breaking-point-with-malick-consultancy-contract-mein-arbon-ka-izafa-30th-june-2019\",\n            \"title_example\": \"Breaking Point with Malick (Consultancy Contract Mein Arbon Ka Izafa) - 30th June 2019\",\n            \"title_search_pattern\": \"Breaking Point with Malick (APC Se Kia Nikla?) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 32,\n        \"fields\": {\n            \"name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T19:18:45.289Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T19:18:43.852Z\",\n            \"updated\": \"2019-07-04T19:18:45.289Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n            \"channel\": 5,\n            \"playlist_link\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"latest_show_link\": \"http://www.unewstv.com/153229/face-to-face-with-ayesha-bakhsh-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"title_example\": \"Face to Face with Ayesha Bakhsh (PMLN Members Meet Imran Khan) \\u2013 30th June 2019\",\n            \"title_search_pattern\": \"Face To Face with Ayesha Bakhsh (PM Imran Khan's Speech) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 33,\n        \"fields\": {\n            \"name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T20:16:22.954Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T19:34:02.474Z\",\n            \"updated\": \"2019-07-04T20:16:22.954Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n            \"channel\": 14,\n            \"playlist_link\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"latest_show_link\": \"http://www.unewstv.com/153434/tajzia-sami-ibrahim-kay-sath-fbr-in-action-3rd-july-2019\",\n            \"title_example\": \"Tajzia Sami Ibrahim Kay Sath (FBR In Action) \\u2013 3rd July 2019\",\n            \"title_search_pattern\": \"Tajzia Sami Ibrahim Kay Sath (Rana Sanaullah Arrest) \\u2013 2nd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 34,\n        \"fields\": {\n            \"name\": \"unewstv - News Beat\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T20:00:25.131Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T20:00:24.644Z\",\n            \"updated\": \"2019-07-04T20:00:25.131Z\",\n            \"extra_data\": null,\n            \"show_name\": \"News Beat\",\n            \"channel\": 15,\n            \"playlist_link\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153257/news-beat-opposition-abhi-se-bikharne-lagi-30th-june-2019\",\n            \"title_example\": \"News Beat (Opposition Abhi Se Bikharne Lagi?) - 30th June 2019\",\n            \"title_search_pattern\": \"News Beat (PTI Hakumat Ka Pehla Budget Manzoor) - 28th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 35,\n        \"fields\": {\n            \"name\": \"unewstv - Nadeem Malik Live\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T20:05:38.615Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T20:05:36.560Z\",\n            \"updated\": \"2019-07-05T20:05:38.615Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Nadeem Malik Live\",\n            \"channel\": 15,\n            \"playlist_link\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153509/nadeem-malik-live-fbr-action-against-benami-assets-4th-july-2019\",\n            \"title_example\": \"Nadeem Malik Live (FBR Action Against Benami Assets) - 4th July 2019\",\n            \"title_search_pattern\": \"Nadeem Malik Live (Kisi Ko NRO Nahi Mile Ga - Imran Khan) - 3rd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 36,\n        \"fields\": {\n            \"name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T20:42:21.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T20:42:21.124Z\",\n            \"updated\": \"2019-07-05T20:42:21.873Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n            \"channel\": 13,\n            \"playlist_link\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"latest_show_link\": \"http://www.unewstv.com/153575/aaj-rana-mubashir-kay-saath-who-is-funding-ptm-5th-july-2019\",\n            \"title_example\": \"Aaj Rana Mubashir Kay Saath (Who Is Funding PTM?) \\u2013 5th July 2019\",\n            \"title_search_pattern\": \"Aaj Rana Mubashir Kay Saath (Debt Inquiry Commission Ka Kia Huwa) \\u2013 30th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 37,\n        \"fields\": {\n            \"name\": \"unewstv - Ho Kya Raha Hai\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T20:53:42.248Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T20:53:41.406Z\",\n            \"updated\": \"2019-07-05T20:53:42.248Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Ho Kya Raha Hai\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"latest_show_link\": \"http://www.unewstv.com/153518/ho-kya-raha-hai-how-govt-will-control-inflation-4th-july-2019\",\n            \"title_example\": \"Ho Kya Raha Hai (How Govt Will Control Inflation) - 4th July 2019\",\n            \"title_search_pattern\": \"Ho Kya Raha Hai (Firing At Lahore Airport) \\u2013 3rd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 38,\n        \"fields\": {\n            \"name\": \"unewstv - Nuqta e Nazar\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T21:01:58.773Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:01:56.373Z\",\n            \"updated\": \"2019-07-05T21:01:58.773Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Nuqta e Nazar\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"latest_show_link\": \"http://www.unewstv.com/153507/nuqta-e-nazar-rana-sanaullah-ki-giraftari-4th-july-2019\",\n            \"title_example\": \"Nuqta e Nazar (Rana Sanaullah Ki Giraftari) - 4th July 2019\",\n            \"title_search_pattern\": \"Nuqta e Nazar (Ahtasab Aur Maeeshat) - 3rd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 39,\n        \"fields\": {\n            \"name\": \"unewstv - On The Front\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T21:13:59.857Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:13:58.205Z\",\n            \"updated\": \"2019-07-05T21:13:59.857Z\",\n            \"extra_data\": null,\n            \"show_name\": \"On The Front\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"latest_show_link\": \"http://www.unewstv.com/153523/on-the-front-with-kamran-shahid-case-against-rana-sanaullah-4th-july-2019\",\n            \"title_example\": \"On The Front with Kamran Shahid (Case Against Rana Sanaullah) - 4th July 2019\",\n            \"title_search_pattern\": \"On The Front (Hakumat Aur Opposition Aamne Samne) - 3rd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 40,\n        \"fields\": {\n            \"name\": \"unewstv - Ikhtilafi Note\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T21:30:29.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:30:28.548Z\",\n            \"updated\": \"2019-07-05T21:30:29.635Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Ikhtilafi Note\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153578/ikhtilafi-note-chairman-senate-issue-amnesty-scheme-5th-july-2019\",\n            \"title_example\": \"Ikhtilafi Note (Chairman Senate Issue, Amnesty Scheme) - 5th July 2019\",\n            \"title_search_pattern\": \"Ikhtilafi Note (Cracks in PMLN's Ranks) - 30th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 41,\n        \"fields\": {\n            \"name\": \"unewstv - Seedhi Baat\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-05T21:41:58.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:41:56.802Z\",\n            \"updated\": \"2019-07-05T21:41:58.367Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Seedhi Baat\",\n            \"channel\": 11,\n            \"playlist_link\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"latest_show_link\": \"http://www.unewstv.com/153521/seedhi-baat-charges-on-rana-sanaullah-4th-july-2019\",\n            \"title_example\": \"Seedhi Baat (Charges on Rana Sanaullah) \\u2013 4th July 2019\",\n            \"title_search_pattern\": \"Seedhi Baat (Rana Sanaullah Ki Giraftari) \\u2013 3rd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 42,\n        \"fields\": {\n            \"name\": \"unewstv - Sawal Yeh Hai\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T09:31:18.593Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-05T21:50:07.907Z\",\n            \"updated\": \"2019-07-06T09:31:18.593Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Sawal Yeh Hai\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"latest_show_link\": \"http://www.unewstv.com/153608/sawal-yeh-hai-opposition-ki-rahbar-committee-ka-ijlas-5th-july-2019\",\n            \"title_example\": \"Sawal Yeh Hai (Opposition Ki Rahbar Committee Ka Ijlas) - 5th July 2019\",\n            \"title_search_pattern\": \"Sawal Yeh Hai (Jahangir Tareen Exclusive Interview) \\u2013 30th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 44,\n        \"fields\": {\n            \"name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T10:26:11.809Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T10:26:11.744Z\",\n            \"updated\": \"2019-07-06T10:26:11.809Z\",\n            \"extra_data\": {\n                \"channel\": \"Geo TV\",\n                \"Show Short Name\": \"Subah Pakistan\",\n                \"additional_feed_url\": \"http://dramaonline.pk/contents/load-more-dramas.php\",\n                \"show_name_from_feed\": \"Geo Subah Pakistan With Shahista Lodhi\"\n            },\n            \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n            \"channel\": 16,\n            \"playlist_link\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"latest_show_link\": \"http://dramaonline.pk/geo-subah-pakistan-8-may-2018/\",\n            \"title_example\": \"Geo Subah Pakistan 8 May 2018\",\n            \"title_search_pattern\": \"{Channel Code} {Show Short Name} {Date}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": \"720p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 45,\n        \"fields\": {\n            \"name\": \"unewstv - Naya Pakistan\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T15:23:11.351Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-06T11:44:26.586Z\",\n            \"updated\": \"2019-07-10T15:23:11.351Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Naya Pakistan\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Naya+Pakistan+on+Geo+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153612/naya-pakistan-who-will-be-new-chairman-senate-5th-july-2019\",\n            \"title_example\": \"Naya Pakistan (Who Will Be New Chairman Senate) \\u2013 5th July 2019\",\n            \"title_search_pattern\": \"Naya Pakistan (Imran Khan Ne Bhi Changa Manga Ki Siasat Shuru Ker Di) - 30th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Naya+Pakistan+on+Geo+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Naya+Pakistan+on+Geo+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 46,\n        \"fields\": {\n            \"name\": \"unewstv - Report Card\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T15:22:54.903Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-06T11:47:25.018Z\",\n            \"updated\": \"2019-07-10T15:22:54.903Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Report Card\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Report+Card+On+Geo+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153530/report-card-kaun-imran-khan-se-nro-maang-raha-hai-4th-july-2019\",\n            \"title_example\": \"Report Card (Kaun Imran Khan Se NRO Maang Raha Hai) \\u2013 4th July 2019\",\n            \"title_search_pattern\": \"Report Card (Lahore Airport Per Qatal) \\u2013 3rd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Report+Card+On+Geo+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Report+Card+On+Geo+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 47,\n        \"fields\": {\n            \"name\": \"unewstv - Aapas Ki Baat\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T16:26:49.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-06T16:26:48.814Z\",\n            \"updated\": \"2019-07-06T16:26:49.986Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Aapas Ki Baat\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"latest_show_link\": \"http://www.unewstv.com/153472/apas-ki-baat-imran-khan-s-clear-stance-about-nro-3rd-july-2019\",\n            \"title_example\": \"Apas ki Baat (Imran Khan's Clear Stance About NRO) \\u2013 3rd July 2019\",\n            \"title_search_pattern\": \"Aapas Ki Baat (Rana Sanaullah Ki Giraftari) - 2nd July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 51,\n        \"fields\": {\n            \"name\": \"VPK - Sawera\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:29:58.133Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:29:58.062Z\",\n            \"updated\": \"2019-07-07T06:29:58.133Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Sawera\",\n            \"channel\": 16,\n            \"playlist_link\": \"http://vidpk.com/tag/sawera/\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 4,\n            \"feed_quality\": \"720p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 52,\n        \"fields\": {\n            \"name\": \"DOL - Alif Allah Aur Insaan\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-02-17T17:47:20.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-07T06:33:08.964Z\",\n            \"updated\": \"2020-02-17T17:47:20.944Z\",\n            \"extra_data\": {\n                \"channel\": \"Hum TV\",\n                \"feed_url\": \"http://dramaonline.pk/hum-tv-dramas/alif-allah-aur-insaan/\",\n                \"additional_feed_url\": \"http://dramaonline.pk/contents/load-more-dramas.php\",\n                \"show_name_from_feed\": \"Alif Allah Aur Insaan\"\n            },\n            \"show_name\": \"Alif Allah Aur Insaan\",\n            \"channel\": 6,\n            \"playlist_link\": \"http://dramaonline.pk/hum-tv-dramas/alif-allah-aur-insaan/\",\n            \"latest_show_link\": \"http://dramaonline.pk/alif-allah-aur-insaan-last-episode-43-in-hd/\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": \"720p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 53,\n        \"fields\": {\n            \"name\": \"VPK - Bulbulay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:42:00.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:36:41.321Z\",\n            \"updated\": \"2019-07-07T06:42:00.700Z\",\n            \"extra_data\": {\n                \"is_Joke\": 1,\n                \"is_Show\": 0,\n                \"is_Quote\": 0,\n                \"is_Politics\": 0\n            },\n            \"show_name\": \"Bulbulay\",\n            \"channel\": 17,\n            \"playlist_link\": \"http://vidpk.com/tag/bulbulay/\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 4,\n            \"feed_quality\": \"720p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 54,\n        \"fields\": {\n            \"name\": \"VPK - Dil e Majboor\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:42:46.079Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:42:45.755Z\",\n            \"updated\": \"2019-07-07T06:42:46.079Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Dil e Majboor\",\n            \"channel\": 18,\n            \"playlist_link\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 4,\n            \"feed_quality\": \"720p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 56,\n        \"fields\": {\n            \"name\": \"unewstv - Tonight With Fareeha\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T14:52:03.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T14:52:03.450Z\",\n            \"updated\": \"2019-07-10T14:52:03.845Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Tonight With Fareeha\",\n            \"channel\": 19,\n            \"playlist_link\": \"http://www.unewstv.com/category/Tonight+With+Fareeha+Idrees\",\n            \"latest_show_link\": \"http://www.unewstv.com/153864/tonight-with-fareeha-fake-trust-deed-maryam-in-trouble-9th-july-2019\",\n            \"title_example\": \"Tonight With Fareeha (Fake Trust Deed, Maryam in Trouble) \\u2013 9th July 2019\",\n            \"title_search_pattern\": \"Tonight With Fareeha (Leaked Video of Judge Arshad Malik) \\u2013 8th July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Tonight+With+Fareeha+Idrees\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Tonight+With+Fareeha+Idrees\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 57,\n        \"fields\": {\n            \"name\": \"unewstv - Hasb e Haal\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T15:13:55.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:13:55.251Z\",\n            \"updated\": \"2019-07-10T15:13:55.548Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Hasb e Haal\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Hasb+e+Haal+on+Dunya+Tv\",\n            \"latest_show_link\": \"http://www.unewstv.com/153740/hasb-e-haal-azizi-as-ustad-sureelay-khan-7th-july-2019\",\n            \"title_example\": \"Hasb e Haal (Azizi as Ustad Sureelay Khan) - 7th July 2019\",\n            \"title_search_pattern\": \"Hasb e Haal (Facebook Vs Heer Ranjha ) - 6th July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Hasb+e+Haal+on+Dunya+Tv\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Hasb+e+Haal+on+Dunya+Tv\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 58,\n        \"fields\": {\n            \"name\": \"unewstv - Mazaaq Raat\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T15:27:14.710Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:27:12.839Z\",\n            \"updated\": \"2019-07-10T15:27:14.746Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Mazaaq Raat\",\n            \"channel\": 3,\n            \"playlist_link\": \"http://www.unewstv.com/category/Mazaaq+Raat+on+Dunya+Tv\",\n            \"latest_show_link\": \"http://www.unewstv.com/153893/mazaaq-raat-khalil-tahir-sandhu-dua-bhutto-9-july-2019\",\n            \"title_example\": \"Mazaaq Raat (Khalil Tahir Sandhu & Dua Bhutto) - 9 July 2019\",\n            \"title_search_pattern\": \"Mazaaq Raat (Haleem Adil Sheikh & Meerab Awan) - 8th July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Mazaaq+Raat+on+Dunya+Tv\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Mazaaq+Raat+on+Dunya+Tv\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 59,\n        \"fields\": {\n            \"name\": \"unewstv - Syasi Theater\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T15:37:58.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:37:58.683Z\",\n            \"updated\": \"2019-07-10T15:37:58.929Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Syasi Theater\",\n            \"channel\": 12,\n            \"playlist_link\": \"http://www.unewstv.com/category/Syasi+Theater+on+Express+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153888/syasi-theater-comedy-show-9th-july-2019\",\n            \"title_example\": \"Syasi Theater (Comedy Show) \\u2013 9th July 2019\",\n            \"title_search_pattern\": \"Syasi Theater (Comedy Show) \\u2013 8th July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Syasi+Theater+on+Express+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Syasi+Theater+on+Express+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 60,\n        \"fields\": {\n            \"name\": \"unewstv - Khabarnak\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T15:53:00.456Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T15:52:59.164Z\",\n            \"updated\": \"2019-07-10T15:53:00.456Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Khabarnak\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Khabarnaak+on+Geo+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153737/khabarnak-comedy-show-7th-july-2019\",\n            \"title_example\": \"Khabarnak (Comedy Show) \\u2013 7th July 2019\",\n            \"title_search_pattern\": \"Khabarnaak (Comedy Show) - 6th July 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Khabarnaak+on+Geo+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Khabarnaak+on+Geo+News\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 61,\n        \"fields\": {\n            \"name\": \"unewstv - Khabardar\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T16:09:19.270Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T16:09:18.040Z\",\n            \"updated\": \"2019-07-10T16:09:19.270Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Khabardar\",\n            \"channel\": 12,\n            \"playlist_link\": \"http://www.unewstv.com/category/Khabardar+with+Aftab+Iqbal\",\n            \"latest_show_link\": \"http://www.unewstv.com/153739/khabardar-with-aftab-iqbal-comedy-show-7th-july-2019\",\n            \"title_example\": \"Khabardar With Aftab Iqbal (Comedy Show) \\u2013 7th July 2019\",\n            \"title_search_pattern\": \"Khabardar Aftab Iqbal (Comedy Show) \\u2013 30th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Khabardar+with+Aftab+Iqbal\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Khabardar+with+Aftab+Iqbal\",\n            \"feed_source_type\": 2,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 62,\n        \"fields\": {\n            \"name\": \"DOL - Khan\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-01-23T06:17:57.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T18:52:05.529Z\",\n            \"updated\": \"2020-01-23T06:17:57.873Z\",\n            \"extra_data\": {\n                \"channel\": \"Geo TV\",\n                \"feed_url\": \"http://dramaonline.pk/geo-tv-dramas/khan/\",\n                \"Show Short Name\": \"Khan\",\n                \"additional_feed_url\": \"http://dramaonline.pk/contents/load-more-dramas.php\",\n                \"show_name_from_feed\": \"Khan\"\n            },\n            \"show_name\": \"Khan\",\n            \"channel\": 16,\n            \"playlist_link\": \"http://dramaonline.pk/geo-tv-dramas/khan/\",\n            \"latest_show_link\": \"http://dramaonline.pk/khan-last-episode-30-in-hd/\",\n            \"title_example\": \"Khan Last Episode 30\",\n            \"title_search_pattern\": \"{Show name} Episode {Episode Number}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": \"1080p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 65,\n        \"fields\": {\n            \"name\": \"DOL - Aangan\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-02-17T17:46:30.622Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-12T18:48:58.766Z\",\n            \"updated\": \"2020-02-17T17:46:30.622Z\",\n            \"extra_data\": {\n                \"channel\": \"Hum TV\",\n                \"feed_url\": \"http://dramaonline.pk/hum-tv-dramas/aangan/\",\n                \"additional_feed_url\": \"http://dramaonline.pk/contents/load-more-dramas.php\",\n                \"show_name_from_feed\": \"Aangan\"\n            },\n            \"show_name\": \"Aangan\",\n            \"channel\": 6,\n            \"playlist_link\": \"http://dramaonline.pk/hum-tv-dramas/aangan/\",\n            \"latest_show_link\": \"http://dramaonline.pk/aangan-episode-28/\",\n            \"title_example\": \"Aangan Episode 28\",\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": \"720p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 66,\n        \"fields\": {\n            \"name\": \"YT - On The Front\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-16T12:13:25.539Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-16T12:13:25.033Z\",\n            \"updated\": \"2019-07-16T12:13:25.539Z\",\n            \"extra_data\": null,\n            \"show_name\": \"On The Front\",\n            \"channel\": 3,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=IBCNu8CewbM&list=PL3kMf0Q991MMdVaSDmi6rNoZK5NOczext\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 67,\n        \"fields\": {\n            \"name\": \"YT - Dunya Kamran Khan Kay Sath\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T04:59:41.511Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:18:14.706Z\",\n            \"updated\": \"2019-08-19T04:59:41.511Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n            \"channel\": 3,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=yOhd3SjBPrw&list=PL3kMf0Q991MNOICH9Y7IY61iWOulEwTFg\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 68,\n        \"fields\": {\n            \"name\": \"YT - Think Tank\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T05:00:06.766Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:22:42.660Z\",\n            \"updated\": \"2019-08-19T05:00:06.766Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Think Tank\",\n            \"channel\": 3,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=YIeDkmfZjrU&list=PL3kMf0Q991MNEnm28W5ngmJxAQwZS-M8i\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 69,\n        \"fields\": {\n            \"name\": \"YT - Sawal Say Agay\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T05:00:49.071Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:30:17.619Z\",\n            \"updated\": \"2019-08-19T05:00:49.071Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Sawal Say Agay\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=CIq110I85xo&list=PL3kMf0Q991MPkn9lsKDSaaCkZQ6ALbOr_\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 70,\n        \"fields\": {\n            \"name\": \"YT - Grift\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T05:01:32.598Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-20T08:32:57.661Z\",\n            \"updated\": \"2019-08-19T05:01:32.598Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Grift\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=7ITm7SEyHHQ&list=PL3kMf0Q991MOz8Ux5OFncqOtjdE_BxjwE\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 71,\n        \"fields\": {\n            \"name\": \"YT-Pinjra\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-12-30T07:02:13.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-05T06:17:19.270Z\",\n            \"updated\": \"2019-12-30T07:02:13.882Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Pinjra\",\n            \"channel\": 20,\n            \"playlist_link\": \"https://www.youtube.com/playlist?list=PLI1u6sZ1_Fp6VLZ1lNiUg2D2gwshCalCh\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?v=smBZSAUte9A&list=PLI1u6sZ1_Fp6VLZ1lNiUg2D2gwshCalCh\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 72,\n        \"fields\": {\n            \"name\": \"YT-Kal Tak\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T05:01:59.103Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:11:55.054Z\",\n            \"updated\": \"2019-08-19T05:01:59.103Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Kal Tak\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=U-WbyBOVWrc&list=PL3kMf0Q991MODXzEGvoEzx2XLu8RNt4E5\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 73,\n        \"fields\": {\n            \"name\": \"YT-Takrar\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T04:55:06.360Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:17:34.184Z\",\n            \"updated\": \"2019-08-19T04:55:06.360Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Takrar\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=8XmmmYgmmus&list=PL3kMf0Q991MPbDvSEQInhmpaiHykgF1TG\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 74,\n        \"fields\": {\n            \"name\": \"YT-Spot Light\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T05:02:16.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:23:50.543Z\",\n            \"updated\": \"2019-08-19T05:02:16.800Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Spot Light\",\n            \"channel\": 13,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=ept3WtK_zw0&list=PL3kMf0Q991MMFL_OYxkYxpoRJxIu139KM\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 75,\n        \"fields\": {\n            \"name\": \"YT-News Eye\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-19T05:02:33.779Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-08-06T04:35:07.429Z\",\n            \"updated\": \"2019-08-19T05:02:33.779Z\",\n            \"extra_data\": null,\n            \"show_name\": \"News Eye\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=wqUMSXpgs8U&list=PL3kMf0Q991MO8cRHSYS8TNR-0FsUrMqtv\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 76,\n        \"fields\": {\n            \"name\": \"YT - Express Special\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T06:29:21.627Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-02T08:22:15.558Z\",\n            \"updated\": \"2019-09-03T06:29:21.627Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Express Special\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=zw6yRdD7arI&list=PL3kMf0Q991MNWHrph66mgNomNa-l5sTOIhttps://www.youtube.com/playlist?list=PL3kMf0Q991MNWHrph66mgNomNa-l5sTOI\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 77,\n        \"fields\": {\n            \"name\": \"YT - Faisla Aap Ka\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T06:29:03.347Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T06:19:55.836Z\",\n            \"updated\": \"2019-09-03T06:29:03.347Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Faisla Aap Ka\",\n            \"channel\": 13,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=8h-3F0WKJl0&list=PL3kMf0Q991MO0-GwM1je510HYepB8bY2q\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 78,\n        \"fields\": {\n            \"name\": \"YT - Do Raaye\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T06:28:28.736Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T06:24:51.458Z\",\n            \"updated\": \"2019-09-03T06:28:28.736Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Do Raaye\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=8NHoPI1dIcU&list=PL3kMf0Q991MOMh4GT1SapneSsvNgFhWKB\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 79,\n        \"fields\": {\n            \"name\": \"YT - Ikhtalafi Note\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T06:50:13.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T06:50:13.217Z\",\n            \"updated\": \"2019-09-03T06:50:13.786Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Ikhtalafi Note\",\n            \"channel\": 3,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=OOCBlZ6K3t0&list=PL3kMf0Q991MNj6_lSKC6kFlrEGWnmx5Qm\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 80,\n        \"fields\": {\n            \"name\": \"Talk Shows Central - Center Stage\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-11-14T07:04:06.343Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T06:52:04.574Z\",\n            \"updated\": \"2019-11-14T07:04:06.343Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Center Stage\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=UAWsE1piIR4&list=PL3kMf0Q991MMGYVJpwy9taQEP6Gxm6iQ_\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 5,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 81,\n        \"fields\": {\n            \"name\": \"YT- News Wise\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T06:55:06.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T06:55:03.911Z\",\n            \"updated\": \"2019-09-03T06:55:06.225Z\",\n            \"extra_data\": null,\n            \"show_name\": \"News Wise\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=c_fijVoHXPI&list=PL3kMf0Q991MO1dbBS-BFL27W-O-i6T3Bk\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 82,\n        \"fields\": {\n            \"name\": \"YT - Benaqaab\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T06:58:40.213Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T06:58:39.683Z\",\n            \"updated\": \"2019-09-03T06:58:40.213Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Benaqaab\",\n            \"channel\": 19,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=7B7_l0k1_30&list=PL3kMf0Q991MMb3LNd8TRyRNN9dTgcACIg\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 83,\n        \"fields\": {\n            \"name\": \"YT - Tonight with Fereeha\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-03T07:00:56.529Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-03T07:00:55.516Z\",\n            \"updated\": \"2019-09-03T07:00:56.529Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Tonight with Fereeha\",\n            \"channel\": 19,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=JHPj5xUSxss&list=PL3kMf0Q991MO4TVm91TtYC-kOjbaul0l-\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 84,\n        \"fields\": {\n            \"name\": \"YT - Mazaaq Raat\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-12T05:21:31.841Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-12T05:21:30.095Z\",\n            \"updated\": \"2019-09-12T05:21:31.841Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Mazaaq Raat\",\n            \"channel\": 3,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=Yt6ficVkVi0&list=PL3kMf0Q991MNZ4HudwzKhlqCp7O5T6IfY\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 85,\n        \"fields\": {\n            \"name\": \"YT - Hasb e Haal\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-12T05:24:34.302Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-12T05:24:33.153Z\",\n            \"updated\": \"2019-09-12T05:24:34.302Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Hasb e Haal\",\n            \"channel\": 3,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=vufqp26RMq4&list=PL3kMf0Q991MNgG6fvZKQsnmtqAtu_62mS\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 86,\n        \"fields\": {\n            \"name\": \"YT - Khabardar\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-12T05:27:38.998Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-12T05:27:38.216Z\",\n            \"updated\": \"2019-09-12T05:27:38.998Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Khabardar\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=iAegkDzh9ow&list=PL3kMf0Q991MO-SBgr7BSPnGEqNtX5CeV_\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 87,\n        \"fields\": {\n            \"name\": \"YT - Syasi Theater\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-16T08:00:22.172Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-16T08:00:20.815Z\",\n            \"updated\": \"2019-09-16T08:00:22.172Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Syasi Theater\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=6eFzFBJwmJg&list=PL3kMf0Q991MPZsRdStE6C7lPYC_o0MG8x\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"720p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 88,\n        \"fields\": {\n            \"name\": \"YT - Ikhtalafi Note\",\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-09-16T08:05:05.669Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-16T08:05:04.909Z\",\n            \"updated\": \"2019-09-16T08:05:05.669Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Ikhtalafi Note\",\n            \"channel\": 3,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=AmDEK1Y5l5s&list=PL3kMf0Q991MNj6_lSKC6kFlrEGWnmx5Qm\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 89,\n        \"fields\": {\n            \"name\": \"YT - To The Point\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-12-30T07:03:47.399Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-09-16T08:09:53.901Z\",\n            \"updated\": \"2019-12-30T07:03:47.399Z\",\n            \"extra_data\": null,\n            \"show_name\": \"To The Point\",\n            \"channel\": 12,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=jE0Jy923Row&list=PL3kMf0Q991MPpN2sRVf9Qzn2QFsvN-mV-\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ON_DEMAND\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 90,\n        \"fields\": {\n            \"name\": \"YT - Ghar Jamai\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-12-30T07:02:30.407Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-10-11T07:07:23.461Z\",\n            \"updated\": \"2019-12-30T07:02:30.407Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Ghar Jamai\",\n            \"channel\": 17,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=wepuWE2ZuDc&list=PLHWkZlkvcf_fNzKo_Di2DMLjTZMKTvjca\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 91,\n        \"fields\": {\n            \"name\": \"DOL - Mohabbat Tumse Nafrat Hai\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-01-24T14:50:50.524Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-12-22T09:04:25.220Z\",\n            \"updated\": \"2020-01-24T14:50:50.524Z\",\n            \"extra_data\": {\n                \"channel\": \"Geo TV\",\n                \"feed_url\": \"http://dramaonline.pk/geo-tv-dramas/mohabbat-tumse-nafrat-hai/\",\n                \"additional_feed_url\": \"http://dramaonline.pk/contents/load-more-dramas.php\",\n                \"show_name_from_feed\": \"Mohabbat Tumse Nafrat Hai\"\n            },\n            \"show_name\": \"Mohabbat Tumse Nafrat Hai\",\n            \"channel\": 16,\n            \"playlist_link\": \"http://dramaonline.pk/geo-tv-dramas/mohabbat-tumse-nafrat-hai/\",\n            \"latest_show_link\": \"http://dramaonline.pk/mohabbat-tumse-nafrat-hai-last-episode-29-in-hd/\",\n            \"title_example\": \"Mohabbat Tumse Nafrat Hai Last Episode 29\",\n            \"title_search_pattern\": \"{Show name} Episode {Episode Number}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": \"1080p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 93,\n        \"fields\": {\n            \"name\": \"YT - Mohabbat Tum Se Nafrat Hai\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-02-06T18:42:34.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-12-26T08:32:20.156Z\",\n            \"updated\": \"2020-02-06T18:42:34.159Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Mohabbat Tum Se Nafrat Hai\",\n            \"channel\": 16,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=T4DYBziNgdQ&list=PLaA8Tc_xcK87iNpVsTxQN4m0tinIi109H\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?v=T4DYBziNgdQ&list=PLaA8Tc_xcK87iNpVsTxQN4m0tinIi109H&index=1\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 1,\n            \"feed_quality\": \"1080p\",\n            \"priority\": 2,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 94,\n        \"fields\": {\n            \"name\": \"DOL - Ab Dekh Khuda Kya Karta Hai\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-02-06T18:41:58.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-12-27T17:51:32.576Z\",\n            \"updated\": \"2020-02-06T18:41:58.944Z\",\n            \"extra_data\": {\n                \"channel\": \"Geo TV\",\n                \"feed_url\": \"http://dramaonline.pk/geo-tv-dramas/ab-dekh-khuda-kiya-karta-hai/\",\n                \"additional_feed_url\": \"http://dramaonline.pk/contents/load-more-dramas.php\",\n                \"show_name_from_feed\": \"Ab Dekh Khuda Kiya Karta Hai\"\n            },\n            \"show_name\": \"Ab Dekh Khuda Kya Karta Hai\",\n            \"channel\": 16,\n            \"playlist_link\": \"http://dramaonline.pk/geo-tv-dramas/ab-dekh-khuda-kiya-karta-hai/\",\n            \"latest_show_link\": \"http://dramaonline.pk/ab-dekh-khuda-kya-karta-hai-last-episode-24/\",\n            \"title_example\": \"Ab Dekh Khuda Kya Karta Hai Last Episode 24\",\n            \"title_search_pattern\": \"{Show name} Episode {Episode Number}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": \"1080p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 95,\n        \"fields\": {\n            \"name\": \"DOL - Nazr e Bad\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-02-06T18:41:24.411Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2020-01-27T05:52:25.264Z\",\n            \"updated\": \"2020-02-06T18:41:24.411Z\",\n            \"extra_data\": {\n                \"channel\": \"HUM TV\",\n                \"feed_url\": \"http://dramaonline.pk/hum-tv-dramas/nazr-e-bad/\",\n                \"additional_feed_url\": \"http://dramaonline.pk/contents/load-more-dramas.php\",\n                \"show_name_from_feed\": \"Nazr e Bad\"\n            },\n            \"show_name\": \"Nazr e Bad\",\n            \"channel\": 6,\n            \"playlist_link\": \"http://dramaonline.pk/hum-tv-dramas/nazr-e-bad/\",\n            \"latest_show_link\": \"http://dramaonline.pk/nazr-e-bad-episode-40-in-hd-last-episode/\",\n            \"title_example\": \"Nazr e Bad Episode 40 in HD last episode\",\n            \"title_search_pattern\": \"{Show name} Episode {Episode Number}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": \"720p\",\n            \"priority\": 1,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 98,\n        \"fields\": {\n            \"name\": \"Dummy Feed\",\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2020-02-15T18:06:29.436Z\",\n            \"expiration_date\": null,\n            \"added_by\": null,\n            \"created\": \"2020-02-15T18:06:12.503Z\",\n            \"updated\": \"2020-02-15T18:06:29.436Z\",\n            \"extra_data\": null,\n            \"show_name\": \"Dummy show\",\n            \"channel\": 6,\n            \"playlist_link\": \"http://example.com/dummyplaylistlink\",\n            \"latest_show_link\": null,\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"feed_source_type\": 3,\n            \"feed_quality\": null,\n            \"priority\": 0,\n            \"feed_frequency\": \"ONE_TIME\",\n            \"country\": []\n        }\n    }\n]\n":1jwgvu:4Dm4df0jdH7FtJChAQ6AgyrOAQI