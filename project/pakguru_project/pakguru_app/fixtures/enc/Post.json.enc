"[\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2569,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:15.672Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:15.671Z\",\n            \"updated\": \"2019-07-07T06:38:15.672Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Pakistan's Economy) \\u2013 5th July 2019\",\n            \"slug\": \"nasim-zehra-800-pakistans-economy-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:15.672Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/II9WHZtAonA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/153600/nasim-zehra-8-00-pakistan-s-economy-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2570,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.381Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.380Z\",\n            \"updated\": \"2019-07-07T06:38:16.381Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Dollar Ki Parwaz) \\u2013 30th June 2019\",\n            \"slug\": \"nasim-zehra-800-dollar-ki-parwaz-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.381Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/FhSJw0GuElc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/153246/nasim-zehra-8-00-dollar-ki-parwaz-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2571,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.489Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.489Z\",\n            \"updated\": \"2019-07-07T06:38:16.489Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Cricket World Cup 2019) \\u2013 23rd June 2019\",\n            \"slug\": \"nasim-zehra-800-cricket-world-cup-2019-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.489Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/km0ZijNJKjQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152785/nasim-zehra-8-00-cricket-world-cup-2019-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2572,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.548Z\",\n            \"updated\": \"2019-07-07T06:38:16.548Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Opposition's Policy Against Govt) \\u2013 22nd June 2019\",\n            \"slug\": \"nasim-zehra-800-oppositions-policy-against-govt-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.548Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/DoGfCcmpkh0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152732/nasim-zehra-8-00-opposition-s-policy-against-govt-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2573,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.630Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.630Z\",\n            \"updated\": \"2019-07-07T06:38:16.630Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Abdul Razak Dawood Exclusive Interview) \\u2013 21st June 2019\",\n            \"slug\": \"nasim-zehra-800-abdul-razak-dawood-exclusive-interview-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.630Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/-3yg7d2PmAU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152658/nasim-zehra-8-00-abdul-razak-dawood-exclusive-interview-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2574,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.736Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.734Z\",\n            \"updated\": \"2019-07-07T06:38:16.736Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Dollar Rate Increasing) \\u2013 15th June 2019\",\n            \"slug\": \"nasim-zehra-800-dollar-rate-increasing-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.736Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/WodKzhzyjDc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152306/nasim-zehra-8-00-dollar-rate-increasing-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2575,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.815Z\",\n            \"updated\": \"2019-07-07T06:38:16.816Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Lawyers Movement?) \\u2013 14th June 2019\",\n            \"slug\": \"nasim-zehra-800-lawyers-movement-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.816Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/gLvIfSSk4T4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/152254/nasim-zehra-8-00-lawyers-movement-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2576,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.914Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.913Z\",\n            \"updated\": \"2019-07-07T06:38:16.914Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Budget Kaisa Hoga?) \\u2013 9th June 2019\",\n            \"slug\": \"nasim-zehra-800-budget-kaisa-hoga-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.914Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/rS0JobfbLKY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151944/nasim-zehra-8-00-budget-kaisa-hoga-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2577,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:16.947Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:16.947Z\",\n            \"updated\": \"2019-07-07T06:38:16.947Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Eid Special With Shireen Mazari) \\u2013 7th June 2019\",\n            \"slug\": \"nasim-zehra-800-eid-special-with-shireen-mazari-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:16.947Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/wf44DB2lrJc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151843/nasim-zehra-8-00-eid-special-with-shireen-mazari-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2578,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.033Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.033Z\",\n            \"updated\": \"2019-07-07T06:38:17.034Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Ramzan Ki Barkatein) \\u2013 2nd June 2019\",\n            \"slug\": \"nasim-zehra-800-ramzan-ki-barkatein-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.034Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/wpXhhKln56Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151653/nasim-zehra-8-00-ramzan-ki-barkatein-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2579,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.083Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.074Z\",\n            \"updated\": \"2019-07-07T06:38:17.083Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (PTM Attack on Army Check Post) \\u2013 26th May 2019\",\n            \"slug\": \"nasim-zehra-800-ptm-attack-on-army-check-post-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.083Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/QJkg-XOqa64\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151301/nasim-zehra-8-00-ptm-attack-on-army-check-post-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2580,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.200Z\",\n            \"updated\": \"2019-07-07T06:38:17.200Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Will Opposition Bring Public on Roads) \\u2013 25th May 2019\",\n            \"slug\": \"nasim-zehra-800-will-opposition-bring-public-on-roads-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.201Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/I5N6VdtWaIQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151237/nasim-zehra-8-00-will-opposition-bring-public-on-roads-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2581,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.321Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.320Z\",\n            \"updated\": \"2019-07-07T06:38:17.321Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Kia Qarzon Ka Bojh Kam Hoga) \\u2013 24th May 2019\",\n            \"slug\": \"nasim-zehra-800-kia-qarzon-ka-bojh-kam-hoga-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.321Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/fd8GTiw_cNQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/151196/nasim-zehra-8-00-kia-qarzon-ka-bojh-kam-hoga-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2582,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.438Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.437Z\",\n            \"updated\": \"2019-07-07T06:38:17.438Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Bilawal Aur Maryam Aik Sath?) \\u2013 18th May 2019\",\n            \"slug\": \"nasim-zehra-800-bilawal-aur-maryam-aik-sath-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.438Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/yEDPI29_QRI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150871/nasim-zehra-8-00-bilawal-aur-maryam-aik-sath-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2583,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.659Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.642Z\",\n            \"updated\": \"2019-07-07T06:38:17.659Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Muashi Bohran) \\u2013 17th May 2019\",\n            \"slug\": \"nasim-zehra-800-muashi-bohran-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.659Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/Kd62vaHju4Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150799/nasim-zehra-8-00-muashi-bohran-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2584,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.705Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.705Z\",\n            \"updated\": \"2019-07-07T06:38:17.705Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (IMF Deal Done?) \\u2013 12th May 2019\",\n            \"slug\": \"nasim-zehra-800-imf-deal-done-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.705Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/9nn0ENQteZY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150502/nasim-zehra-8-00-imf-deal-done-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2585,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.734Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.733Z\",\n            \"updated\": \"2019-07-07T06:38:17.734Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (IMF Package) \\u2013 11th May 2019\",\n            \"slug\": \"nasim-zehra-800-imf-package-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.734Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/CWPmiFpzopc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150441/nasim-zehra-8-00-imf-package-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2586,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.787Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.786Z\",\n            \"updated\": \"2019-07-07T06:38:17.787Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Hakumat Ki Muashi Policy) \\u2013 5th May 2019\",\n            \"slug\": \"nasim-zehra-800-hakumat-ki-muashi-policy-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.787Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/EOhbGiUv8mk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/150046/nasim-zehra-8-00-hakumat-ki-muashi-policy-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2587,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.818Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.817Z\",\n            \"updated\": \"2019-07-07T06:38:17.818Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Bureaucracy Mein Tabdeeliyan) \\u2013 4th May 2019\",\n            \"slug\": \"nasim-zehra-800-bureaucracy-mein-tabdeeliyan-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.818Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/pbLwYtZmOaU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149988/nasim-zehra-8-00-bureaucracy-mein-tabdeeliyan-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2588,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.861Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.861Z\",\n            \"updated\": \"2019-07-07T06:38:17.862Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Nawaz Sharif's Bail Plea Rejected) \\u2013 3rd May 2019\",\n            \"slug\": \"nasim-zehra-800-nawaz-sharifs-bail-plea-rejected-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.862Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/0-rHieguxXA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149922/nasim-zehra-8-00-nawaz-sharif-s-bail-plea-rejected-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2589,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.901Z\",\n            \"updated\": \"2019-07-07T06:38:17.901Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Shahid Khaqan Abbasi Exclusive) \\u2013 27th April 2019\",\n            \"slug\": \"nasim-zehra-800-shahid-khaqan-abbasi-exclusive-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.901Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/30Mcoc2osls\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149578/nasim-zehra-8-00-shahid-khaqan-abbasi-exclusive-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2590,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:17.968Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:17.968Z\",\n            \"updated\": \"2019-07-07T06:38:17.968Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Firdous Ashiq Awan Exclusive) \\u2013 26th April 2019\",\n            \"slug\": \"nasim-zehra-800-firdous-ashiq-awan-exclusive-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:17.968Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/1JOupLT0PfQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149484/nasim-zehra-8-00-firdous-ashiq-awan-exclusive-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2591,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.046Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.045Z\",\n            \"updated\": \"2019-07-07T06:38:18.046Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Is Iran Involved in Terrorism) \\u2013 20th April 2019\",\n            \"slug\": \"nasim-zehra-800-is-iran-involved-in-terrorism-20th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.046Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"https://www.youtube.com/watch/NueSNu325DU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149137/nasim-zehra-8-00-is-iran-involved-in-terrorism-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2592,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.171Z\",\n            \"updated\": \"2019-07-07T06:38:18.172Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Changes in PTI Cabinet) \\u2013 19th April 2019\",\n            \"slug\": \"nasim-zehra-800-changes-in-pti-cabinet-19th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.172Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"https://www.youtube.com/watch/UJ0JPVzk84I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/149077/nasim-zehra-8-00-changes-in-pti-cabinet-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2593,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.229Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.229Z\",\n            \"updated\": \"2019-07-07T06:38:18.229Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Shahbaz Sharif's Family in Trouble) \\u2013 14th April 2019\",\n            \"slug\": \"nasim-zehra-800-shahbaz-sharifs-family-in-trouble-14th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.229Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/_-bo5gHRANM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148780/nasim-zehra-8-00-shahbaz-sharif-s-family-in-trouble-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2594,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.307Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.307Z\",\n            \"updated\": \"2019-07-07T06:38:18.307Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Opposition NAB Se Tang) \\u2013 13th April 2019\",\n            \"slug\": \"nasim-zehra-800-opposition-nab-se-tang-13th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.307Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"https://www.youtube.com/watch/h64yfRpsp9g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148736/nasim-zehra-8-00-opposition-nab-se-tang-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2595,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.408Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.407Z\",\n            \"updated\": \"2019-07-07T06:38:18.408Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Pakistan's Economy in Danger) \\u2013 7th April 2019\",\n            \"slug\": \"nasim-zehra-800-pakistans-economy-in-danger-7th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.408Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"https://www.youtube.com/watch/50oruY1vkwk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148415/nasim-zehra-8-00-pakistan-s-economy-in-danger-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2596,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.515Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.514Z\",\n            \"updated\": \"2019-07-07T06:38:18.515Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Hamza Shahbaz Vs NAB) \\u2013 6th April 2019\",\n            \"slug\": \"nasim-zehra-800-hamza-shahbaz-vs-nab-6th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.515Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"https://www.youtube.com/watch/t-OgDxhHNYw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148383/nasim-zehra-8-00-hamza-shahbaz-vs-nab-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2597,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.593Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.593Z\",\n            \"updated\": \"2019-07-07T06:38:18.593Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Dollar Ki Parwaz Kaise Ruke Gi?) \\u2013 5th April 2019\",\n            \"slug\": \"nasim-zehra-800-dollar-ki-parwaz-kaise-ruke-gi-5th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.593Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"https://www.youtube.com/watch/dbgCFZMjEM8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148311/nasim-zehra-8-00-dollar-ki-parwaz-kaise-ruke-gi-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2598,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.737Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.736Z\",\n            \"updated\": \"2019-07-07T06:38:18.737Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Shahid Khaqan Abbasi Exclusive) \\u2013 31st March 2019\",\n            \"slug\": \"nasim-zehra-800-shahid-khaqan-abbasi-exclusive-31st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.737Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"https://www.youtube.com/watch/QZmS3A46n2s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/148050/nasim-zehra-8-00-shahid-khaqan-abbasi-exclusive-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2599,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:18.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:18.815Z\",\n            \"updated\": \"2019-07-07T06:38:18.816Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Another Amnesty Scheme) \\u2013 30th March 2019\",\n            \"slug\": \"nasim-zehra-800-another-amnesty-scheme-30th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:18.816Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"https://www.youtube.com/watch/s1zm7XMwNZU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147998/nasim-zehra-8-00-another-amnesty-scheme-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2600,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.012Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.012Z\",\n            \"updated\": \"2019-07-07T06:38:19.012Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (NAB Ka Bara Case) \\u2013 29th March 2019\",\n            \"slug\": \"nasim-zehra-800-nab-ka-bara-case-29th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.012Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"https://www.youtube.com/watch/OpA6ARpXAik\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147944/nasim-zehra-8-00-nab-ka-bara-case-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2601,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.110Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.108Z\",\n            \"updated\": \"2019-07-07T06:38:19.110Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Pakistan Day Special) \\u2013 23rd March 2019\",\n            \"slug\": \"nasim-zehra-800-pakistan-day-special-23rd-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.110Z\",\n            \"target_date\": \"2019-03-23\",\n            \"text\": \"https://www.youtube.com/watch/902eJYhHq9s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147566/nasim-zehra-8-00-pakistan-day-special-23rd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2602,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.190Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.184Z\",\n            \"updated\": \"2019-07-07T06:38:19.191Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Changes in NAB Law?) \\u2013 22nd March 2019\",\n            \"slug\": \"nasim-zehra-800-changes-in-nab-law-22nd-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.191Z\",\n            \"target_date\": \"2019-03-22\",\n            \"text\": \"https://www.youtube.com/watch/17ZgP6amWgQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147518/nasim-zehra-8-00-changes-in-nab-law-22nd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2603,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.241Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.241Z\",\n            \"updated\": \"2019-07-07T06:38:19.241Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Fake Bank Accounts Case) \\u2013 15th March 2019\",\n            \"slug\": \"nasim-zehra-800-fake-bank-accounts-case-15th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.241Z\",\n            \"target_date\": \"2019-03-15\",\n            \"text\": \"https://www.youtube.com/watch/ZN2CvXjzu-4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/147147/nasim-zehra-8-00-fake-bank-accounts-case-15th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2604,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.284Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.284Z\",\n            \"updated\": \"2019-07-07T06:38:19.284Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (PSL Mein Pakistan Ki Kamyabian) \\u2013 9th March 2019\",\n            \"slug\": \"nasim-zehra-800-psl-mein-pakistan-ki-kamyabian-9th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.284Z\",\n            \"target_date\": \"2019-03-10\",\n            \"text\": \"https://www.youtube.com/watch/uRZOXhbjicM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146811/nasim-zehra-8-00-psl-mein-pakistan-ki-kamyabian-9th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2605,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.313Z\",\n            \"updated\": \"2019-07-07T06:38:19.313Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (Action Against Banned Outfits) \\u2013 8th March 2019\",\n            \"slug\": \"nasim-zehra-800-action-against-banned-outfits-8th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.313Z\",\n            \"target_date\": \"2019-03-08\",\n            \"text\": \"https://www.youtube.com/watch/-bAKT_0PY2c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146765/nasim-zehra-8-00-action-against-banned-outfits-8th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2606,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.359Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.358Z\",\n            \"updated\": \"2019-07-07T06:38:19.359Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8:00 (OIC Boycott, Was It Correct Decision?) \\u2013 2nd March 2019\",\n            \"slug\": \"nasim-zehra-800-oic-boycott-was-it-correct-decision-2nd-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.359Z\",\n            \"target_date\": \"2019-03-02\",\n            \"text\": \"https://www.youtube.com/watch/6HRPi_ZmeCY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146431/nasim-zehra-8-00-oic-boycott-was-it-correct-decision-2nd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2607,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.433Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.433Z\",\n            \"updated\": \"2019-07-07T06:38:19.434Z\",\n            \"extra_data\": {\n                \"host\": \"Nasim Zehra\",\n                \"job_id\": 157,\n                \"feed_id\": 30,\n                \"feed_name\": \"unewstv - Nasim Zehra @ 8:00\",\n                \"show_name\": \"Nasim Zehra @ 8:00\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nasim Zehra @ 8 (Shah Mehmood Qureshi Exclusive Interview) - 1st March 2019\",\n            \"slug\": \"nasim-zehra-8-shah-mehmood-qureshi-exclusive-interview-1st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.434Z\",\n            \"target_date\": \"2019-03-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x73aa2b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nasim+Zehra+%40+8%3A00\",\n            \"source_detail\": \"http://www.unewstv.com/146387/nasim-zehra-8-shah-mehmood-qureshi-exclusive-interview-1st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 28,\n            \"tags\": \"[\\\"Nasim Zehra\\\", \\\"Nasim Zehra @ 8:00\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2608,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.645Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.645Z\",\n            \"updated\": \"2019-07-07T06:38:19.645Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PTI Govt's Economic Policies) \\u2013 4th July 2019\",\n            \"slug\": \"najam-sethi-show-pti-govts-economic-policies-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.645Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/0vm-xonwpg4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153525/najam-sethi-show-pti-govt-s-economic-policies-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2609,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.693Z\",\n            \"updated\": \"2019-07-07T06:38:19.693Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Amnesty Scheme Ka Waqt Khatam) \\u2013 3rd July 2019\",\n            \"slug\": \"najam-sethi-show-amnesty-scheme-ka-waqt-khatam-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.693Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/hA2q6MLZjfQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153450/najam-sethi-show-amnesty-scheme-ka-waqt-khatam-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2610,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.722Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.722Z\",\n            \"updated\": \"2019-07-07T06:38:19.722Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (More Arrests, Asif Zardari's Interview) \\u2013 2nd July 2019\",\n            \"slug\": \"najam-sethi-show-more-arrests-asif-zardaris-interview-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.722Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/iwec7L0RPA4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153386/najam-sethi-show-more-arrests-asif-zardari-s-interview-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2611,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.789Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.789Z\",\n            \"updated\": \"2019-07-07T06:38:19.789Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PM Imran Khan's Speech) \\u2013 1st July 2019\",\n            \"slug\": \"najam-sethi-show-pm-imran-khans-speech-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.789Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/Uh62G_31Ej4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153308/najam-sethi-show-pm-imran-khan-s-speech-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2612,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.817Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.816Z\",\n            \"updated\": \"2019-07-07T06:38:19.817Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Opposition Ki All Parties Conference) - 27th June 2019\",\n            \"slug\": \"najam-sethi-show-opposition-ki-all-parties-conference-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.817Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/Zlgym-mnHtA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/153046/najam-sethi-show-opposition-ki-all-parties-conference-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2613,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.879Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.878Z\",\n            \"updated\": \"2019-07-07T06:38:19.879Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (What Is The Agenda of APC?) \\u2013 26th June 2019\",\n            \"slug\": \"najam-sethi-show-what-is-the-agenda-of-apc-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.879Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/n58KeFrkE3k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152971/najam-sethi-show-what-is-the-agenda-of-apc-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2614,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.915Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.914Z\",\n            \"updated\": \"2019-07-07T06:38:19.915Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Ban on Word \\\"Selected PM\\\" in Parliament) - 25th June 2019\",\n            \"slug\": \"najam-sethi-show-ban-on-word-selected-pm-in-parliament-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.915Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/O6zk4T3qcRw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152896/najam-sethi-show-ban-on-word-selected-pm-in-parliament-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2615,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:19.985Z\",\n            \"updated\": \"2019-07-07T06:38:19.986Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Maryam Nawaz Ka Bayan) \\u2013 24th June 2019\",\n            \"slug\": \"najam-sethi-show-maryam-nawaz-ka-bayan-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:19.986Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/IZRL84ZJX1c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152828/najam-sethi-show-maryam-nawaz-ka-bayan-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2616,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.035Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.035Z\",\n            \"updated\": \"2019-07-07T06:38:20.035Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Commission Aur Taqat Ke Liye Joor Toor) \\u2013 19th June 2019\",\n            \"slug\": \"najam-sethi-show-commission-aur-taqat-ke-liye-joor-toor-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.035Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/OAuFMrwE9kc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152518/najam-sethi-show-commission-aur-taqat-ke-liye-joor-toor-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2617,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.086Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.085Z\",\n            \"updated\": \"2019-07-07T06:38:20.086Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Hakumat Ke Liye Khatre Ki Ghanti) \\u2013 18th June 2019\",\n            \"slug\": \"najam-sethi-show-hakumat-ke-liye-khatre-ki-ghanti-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.086Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/Fo82ntTWWtM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152453/najam-sethi-show-hakumat-ke-liye-khatre-ki-ghanti-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2618,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.194Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.194Z\",\n            \"updated\": \"2019-07-07T06:38:20.194Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Who Destroyed Cricket) \\u2013 17th June 2019\",\n            \"slug\": \"najam-sethi-show-who-destroyed-cricket-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.194Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/b8Rna4OrhII\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152404/najam-sethi-show-who-destroyed-cricket-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2619,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.271Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.255Z\",\n            \"updated\": \"2019-07-07T06:38:20.271Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Awami Ya Hungami Budget) \\u2013 12th June 2019\",\n            \"slug\": \"najam-sethi-show-awami-ya-hungami-budget-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.271Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/ify1d6DfnPk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152122/najam-sethi-show-awami-ya-hungami-budget-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2620,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.379Z\",\n            \"updated\": \"2019-07-07T06:38:20.380Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Giraftaryion Ka Mausam) \\u2013 11th June 2019\",\n            \"slug\": \"najam-sethi-show-giraftaryion-ka-mausam-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.380Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/PtG3sZEUxZo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/152063/najam-sethi-show-giraftaryion-ka-mausam-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2621,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.450Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.450Z\",\n            \"updated\": \"2019-07-07T06:38:20.451Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Who Is Next After Asif Zardari) \\u2013 10th June 2019\",\n            \"slug\": \"najam-sethi-show-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.451Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/24KfCWlcSVQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151998/najam-sethi-show-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2622,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.527Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.527Z\",\n            \"updated\": \"2019-07-07T06:38:20.527Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Nuskha Brai Bemar Maeeshat) \\u2013 3rd June 2019\",\n            \"slug\": \"najam-sethi-show-nuskha-brai-bemar-maeeshat-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.527Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/dGCMfuWCni0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151688/najam-sethi-show-nuskha-brai-bemar-maeeshat-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2623,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.576Z\",\n            \"updated\": \"2019-07-07T06:38:20.577Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Why Reference Against Justice Qazi Faez Esa) \\u2013 30th May 2019\",\n            \"slug\": \"najam-sethi-show-why-reference-against-justice-qazi-faez-esa-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.577Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/eRfVHwqX4o8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151498/najam-sethi-show-why-reference-against-justice-qazi-faez-esa-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2624,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.653Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.618Z\",\n            \"updated\": \"2019-07-07T06:38:20.655Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Will Modi Invite Imran, Other Issues) \\u2013 29th May 2019\",\n            \"slug\": \"najam-sethi-show-will-modi-invite-imran-other-issues-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.655Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/J58Mg3iVhS4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151437/najam-sethi-show-will-modi-invite-imran-other-issues-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2625,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.729Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.729Z\",\n            \"updated\": \"2019-07-07T06:38:20.730Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pakistan's Nuclear Conflict With India) \\u2013 28th May 2019\",\n            \"slug\": \"najam-sethi-show-pakistans-nuclear-conflict-with-india-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.730Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/LWsv038YS3c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151391/najam-sethi-show-pakistan-s-nuclear-conflict-with-india-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2626,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.813Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.813Z\",\n            \"updated\": \"2019-07-07T06:38:20.813Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PTM Issue) \\u2013 27th May 2019\",\n            \"slug\": \"najam-sethi-show-ptm-issue-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.813Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/q2BAS26ojIs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151364/najam-sethi-show-ptm-issue-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2627,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:20.947Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:20.947Z\",\n            \"updated\": \"2019-07-07T06:38:20.947Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pak-India Future After Narendra Modi Election Victory) - 23rd May 2019\",\n            \"slug\": \"najam-sethi-show-pak-india-future-after-narendra-modi-election-victory-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:20.947Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/a8Vqns8xmhk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151104/najam-sethi-show-pak-india-future-after-narendra-modi-election-victory-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2628,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.066Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.066Z\",\n            \"updated\": \"2019-07-07T06:38:21.066Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Insaf Siasat Ki Nazar) - 22nd May 2019\",\n            \"slug\": \"najam-sethi-show-insaf-siasat-ki-nazar-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.066Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/Jh9lNqCSeIE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151056/najam-sethi-show-insaf-siasat-ki-nazar-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2629,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.152Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.138Z\",\n            \"updated\": \"2019-07-07T06:38:21.152Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Will PMLN Come on Roads?) \\u2013 21st May 2019\",\n            \"slug\": \"najam-sethi-show-will-pmln-come-on-roads-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.152Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/B9bH_1eC0sc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/151000/najam-sethi-show-will-pmln-come-on-roads-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2630,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.211Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.211Z\",\n            \"updated\": \"2019-07-07T06:38:21.211Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Maryam Bilawal Iftar Dinner) \\u2013 20th May 2019\",\n            \"slug\": \"najam-sethi-show-maryam-bilawal-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.211Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/eN-Vt6P2tD4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150949/najam-sethi-show-maryam-bilawal-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2631,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.260Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.259Z\",\n            \"updated\": \"2019-07-07T06:38:21.260Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Dollar Ki Onchi Uraan) \\u2013 16th May 2019\",\n            \"slug\": \"najam-sethi-show-dollar-ki-onchi-uraan-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.260Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/KcnLRzjwFQ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150737/najam-sethi-show-dollar-ki-onchi-uraan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2632,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.301Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.301Z\",\n            \"updated\": \"2019-07-07T06:38:21.301Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (What Is New in This Amnesty Scheme) - 15th May 2019\",\n            \"slug\": \"najam-sethi-show-what-is-new-in-this-amnesty-scheme-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.301Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/rCxzPtfgqmg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150672/najam-sethi-show-what-is-new-in-this-amnesty-scheme-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2633,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.342Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.342Z\",\n            \"updated\": \"2019-07-07T06:38:21.342Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (IMF Package, Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"najam-sethi-show-imf-package-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.342Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/iCFAb136u7s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150592/najam-sethi-show-imf-package-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2634,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.387Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.387Z\",\n            \"updated\": \"2019-07-07T06:38:21.395Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Impact of IMF Package on General Public) \\u2013 13th May 2019\",\n            \"slug\": \"najam-sethi-show-impact-of-imf-package-on-general-public-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.395Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/hIqeWSmXTHQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150550/najam-sethi-show-impact-of-imf-package-on-general-public-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2635,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.425Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.425Z\",\n            \"updated\": \"2019-07-07T06:38:21.425Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pakistan in IMF's Trap?) \\u2013 9th May 2019\",\n            \"slug\": \"najam-sethi-show-pakistan-in-imfs-trap-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.425Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/QIYK9jmRbtM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150316/najam-sethi-show-pakistan-in-imf-s-trap-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2636,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.485Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.484Z\",\n            \"updated\": \"2019-07-07T06:38:21.485Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Nawaz Sharif Phir Jail Mein) \\u2013 8th May 2019\",\n            \"slug\": \"najam-sethi-show-nawaz-sharif-phir-jail-mein-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.486Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/yDxFY3-Oj-Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150234/najam-sethi-show-nawaz-sharif-phir-jail-mein-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2637,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.517Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.517Z\",\n            \"updated\": \"2019-07-07T06:38:21.517Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Maryam Nawaz Leading PMLN) \\u2013 7th May 2019\",\n            \"slug\": \"najam-sethi-show-maryam-nawaz-leading-pmln-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.517Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/KvpGiJKi2Z8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150167/najam-sethi-show-maryam-nawaz-leading-pmln-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2638,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.567Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.563Z\",\n            \"updated\": \"2019-07-07T06:38:21.567Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Can Maryam Nawaz Keep Party Position) \\u2013 6th May 2019\",\n            \"slug\": \"najam-sethi-show-can-maryam-nawaz-keep-party-position-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.567Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/QiSg2T8anRs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/150119/najam-sethi-show-can-maryam-nawaz-keep-party-position-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2639,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.597Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.597Z\",\n            \"updated\": \"2019-07-07T06:38:21.598Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Will Shahbaz Sharif Return Pakistan) \\u2013 2nd May 2019\",\n            \"slug\": \"najam-sethi-show-will-shahbaz-sharif-return-pakistan-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.598Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/o0qEesCKrwU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149867/najam-sethi-show-will-shahbaz-sharif-return-pakistan-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2640,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.626Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.625Z\",\n            \"updated\": \"2019-07-07T06:38:21.626Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Pakistan Vs India Tension) \\u2013 1st May 2019\",\n            \"slug\": \"najam-sethi-show-pakistan-vs-india-tension-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.626Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/hir1DsmR7N0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149785/najam-sethi-show-pakistan-vs-india-tension-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2641,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.666Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.666Z\",\n            \"updated\": \"2019-07-07T06:38:21.666Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (National Action Plan?) \\u2013 30th April 2019\",\n            \"slug\": \"najam-sethi-show-national-action-plan-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.666Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/NhMHo9v-48Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149713/najam-sethi-show-national-action-plan-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2642,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.723Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.723Z\",\n            \"updated\": \"2019-07-07T06:38:21.723Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Grouping in PTI) \\u2013 29th April 2019\",\n            \"slug\": \"najam-sethi-show-grouping-in-pti-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.723Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/i74sqNxBmBA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149643/najam-sethi-show-grouping-in-pti-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2643,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.771Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.771Z\",\n            \"updated\": \"2019-07-07T06:38:21.771Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Does System Need To Be Changed?) \\u2013 25th April 2019\",\n            \"slug\": \"najam-sethi-show-does-system-need-to-be-changed-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.771Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/H9O2GwAWryI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149407/najam-sethi-show-does-system-need-to-be-changed-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2644,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.840Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.840Z\",\n            \"updated\": \"2019-07-07T06:38:21.840Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Aik Nahi 3 Punjab?) \\u2013 24 April 2019\",\n            \"slug\": \"najam-sethi-show-aik-nahi-3-punjab-24-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.840Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/ZLMp1JWxe3Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149347/najam-sethi-show-aik-nahi-3-punjab-24-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2645,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.917Z\",\n            \"updated\": \"2019-07-07T06:38:21.918Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Hakumat Ka Ahtasab Kaun Karega?) \\u2013 23rd April 2019\",\n            \"slug\": \"najam-sethi-show-hakumat-ka-ahtasab-kaun-karega-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.918Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"https://www.youtube.com/watch/CUZiXJw0oaw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149314/najam-sethi-show-hakumat-ka-ahtasab-kaun-karega-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2646,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:21.963Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.963Z\",\n            \"updated\": \"2019-07-07T06:38:21.963Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (PTI Govt's New Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"najam-sethi-show-pti-govts-new-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:21.963Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"https://www.youtube.com/watch/_oV_pdFh5ow\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/149234/najam-sethi-show-pti-govt-s-new-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2647,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:22Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:21.999Z\",\n            \"updated\": \"2019-07-07T06:38:22Z\",\n            \"extra_data\": {\n                \"host\": \"Najam Sethi\",\n                \"job_id\": 149,\n                \"feed_id\": 21,\n                \"feed_name\": \"unewstv - Najam Sethi Show\",\n                \"show_name\": \"Najam Sethi Show\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Najam Sethi Show (Baghawat Ki Kahani, Najam Sethi Ki Zubani) \\u2013 17th April 2019\",\n            \"slug\": \"najam-sethi-show-baghawat-ki-kahani-najam-sethi-ki-zubani-17th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:22Z\",\n            \"target_date\": \"2019-04-17\",\n            \"text\": \"https://www.youtube.com/watch/VaELDkxSM9U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Najam+Sethi+Show\",\n            \"source_detail\": \"http://www.unewstv.com/148963/najam-sethi-show-baghawat-ki-kahani-najam-sethi-ki-zubani-17th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 19,\n            \"tags\": \"[\\\"Najam Sethi\\\", \\\"Najam Sethi Show\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2648,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:22.784Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:22.784Z\",\n            \"updated\": \"2019-07-07T06:38:22.784Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Rana Sanaullah's Wife Exclusive Interview) \\u2013 4th July 2019\",\n            \"slug\": \"faisla-aap-ka-rana-sanaullahs-wife-exclusive-interview-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:22.784Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cihms\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153513/faisla-aap-ka-rana-sanaullah-s-wife-exclusive-interview-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2649,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:22.881Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:22.880Z\",\n            \"updated\": \"2019-07-07T06:38:22.881Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Cases on Opposition Leaders) \\u2013 3rd July 2019\",\n            \"slug\": \"faisla-aap-ka-cases-on-opposition-leaders-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:22.881Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfqho\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153433/faisla-aap-ka-cases-on-opposition-leaders-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2650,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:22.950Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:22.950Z\",\n            \"updated\": \"2019-07-07T06:38:22.950Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Production Order Ke Qanoon Mein Tarmeem Ka Faisla) \\u2013 2nd July 2019\",\n            \"slug\": \"faisla-aap-ka-production-order-ke-qanoon-mein-tarmeem-ka-faisla-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:22.950Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd25m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153366/faisla-aap-ka-production-order-ke-qanoon-mein-tarmeem-ka-faisla-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2651,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.050Z\",\n            \"updated\": \"2019-07-07T06:38:23.050Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition Aur Hakumat Mein Mahaz Arai) \\u2013 1st July 2019\",\n            \"slug\": \"faisla-aap-ka-opposition-aur-hakumat-mein-mahaz-arai-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.050Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cadmd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153293/faisla-aap-ka-opposition-aur-hakumat-mein-mahaz-arai-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2652,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.145Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.120Z\",\n            \"updated\": \"2019-07-07T06:38:23.145Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Finally Federal Budget Approved) \\u2013 27th June 2019\",\n            \"slug\": \"faisla-aap-ka-finally-federal-budget-approved-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.145Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0nl0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/153027/faisla-aap-ka-finally-federal-budget-approved-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2653,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.251Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.250Z\",\n            \"updated\": \"2019-07-07T06:38:23.251Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Kia Opposition Ki APC Nakam Ho Gai?) \\u2013 26th June 2019\",\n            \"slug\": \"faisla-aap-ka-kia-opposition-ki-apc-nakam-ho-gai-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.251Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxu5t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152955/faisla-aap-ka-kia-opposition-ki-apc-nakam-ho-gai-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2654,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.357Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.357Z\",\n            \"updated\": \"2019-07-07T06:38:23.357Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Kal All Parties Conference Hogi) \\u2013 25th June 2019\",\n            \"slug\": \"faisla-aap-ka-kal-all-parties-conference-hogi-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.357Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bv85l\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152885/faisla-aap-ka-kal-all-parties-conference-hogi-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2655,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.429Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.429Z\",\n            \"updated\": \"2019-07-07T06:38:23.429Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Loan Inquiry Commission) \\u2013 24th June 2019\",\n            \"slug\": \"faisla-aap-ka-loan-inquiry-commission-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.429Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bswjm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152817/faisla-aap-ka-loan-inquiry-commission-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2656,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.528Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.527Z\",\n            \"updated\": \"2019-07-07T06:38:23.528Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Fazal ur Rehman Ki Hakumat Ko Dhamki) \\u2013 20th June 2019\",\n            \"slug\": \"faisla-aap-ka-fazal-ur-rehman-ki-hakumat-ko-dhamki-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.528Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl8mt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152565/faisla-aap-ka-fazal-ur-rehman-ki-hakumat-ko-dhamki-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2657,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.627Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.626Z\",\n            \"updated\": \"2019-07-07T06:38:23.627Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Kis Ne NRO Manga, Saboot Dein - Shahbaz Sharif) \\u2013 19th June 2019\",\n            \"slug\": \"faisla-aap-ka-kis-ne-nro-manga-saboot-dein-shahbaz-sharif-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.627Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjjt9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152498/faisla-aap-ka-kis-ne-nro-manga-saboot-dein-shahbaz-sharif-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2658,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.684Z\",\n            \"updated\": \"2019-07-07T06:38:23.684Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Imran Khan Meets Chairman Senate) \\u2013 18th June 2019\",\n            \"slug\": \"faisla-aap-ka-imran-khan-meets-chairman-senate-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.684Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhtrc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152442/faisla-aap-ka-imran-khan-meets-chairman-senate-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2659,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.772Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.772Z\",\n            \"updated\": \"2019-07-07T06:38:23.772Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition Getting United Against Govt) \\u2013 17th June 2019\",\n            \"slug\": \"faisla-aap-ka-opposition-getting-united-against-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.772Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgede\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152382/faisla-aap-ka-opposition-getting-united-against-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2660,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.879Z\",\n            \"updated\": \"2019-07-07T06:38:23.880Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Inquiry Commission To Probe Debt) \\u2013 13th June 2019\",\n            \"slug\": \"faisla-aap-ka-inquiry-commission-to-probe-debt-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.880Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b29z6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152163/faisla-aap-ka-inquiry-commission-to-probe-debt-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2661,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:23.957Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:23.957Z\",\n            \"updated\": \"2019-07-07T06:38:23.957Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Budget Awam Dost Ya Awam Dushman?) \\u2013 12th June 2019\",\n            \"slug\": \"faisla-aap-ka-budget-awam-dost-ya-awam-dushman-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:23.957Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay415\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/152107/faisla-aap-ka-budget-awam-dost-ya-awam-dushman-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2662,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.017Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.010Z\",\n            \"updated\": \"2019-07-07T06:38:24.017Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Why Faryal Talpur Not Arrested?) \\u2013 10th June 2019\",\n            \"slug\": \"faisla-aap-ka-why-faryal-talpur-not-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.017Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqmwo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151983/faisla-aap-ka-why-faryal-talpur-not-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2663,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.079Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.079Z\",\n            \"updated\": \"2019-07-07T06:38:24.079Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (1st Day Eid Special) \\u2013 5th June 2019\",\n            \"slug\": \"faisla-aap-ka-1st-day-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.079Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ac9af\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151756/faisla-aap-ka-1st-day-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2664,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.148Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.146Z\",\n            \"updated\": \"2019-07-07T06:38:24.148Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Fawad Chaudhry Exclusive Interview) \\u2013 4th June 2019\",\n            \"slug\": \"faisla-aap-ka-fawad-chaudhry-exclusive-interview-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.148Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a981c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151717/faisla-aap-ka-fawad-chaudhry-exclusive-interview-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2665,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.192Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.192Z\",\n            \"updated\": \"2019-07-07T06:38:24.192Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PTI Mein Sab Kuch Theek Nahi?) \\u2013 3rd June 2019\",\n            \"slug\": \"faisla-aap-ka-pti-mein-sab-kuch-theek-nahi-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.192Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a66fe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151681/faisla-aap-ka-pti-mein-sab-kuch-theek-nahi-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2666,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.236Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.236Z\",\n            \"updated\": \"2019-07-07T06:38:24.236Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Eid Ke Baad Hakumat Ke Khilaf Tehreek) \\u2013 30th May 2019\",\n            \"slug\": \"faisla-aap-ka-eid-ke-baad-hakumat-ke-khilaf-tehreek-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.236Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tck4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151486/faisla-aap-ka-eid-ke-baad-hakumat-ke-khilaf-tehreek-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2667,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.271Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.271Z\",\n            \"updated\": \"2019-07-07T06:38:24.271Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Govt File Reference Against 3 SC Judges) \\u2013 29th May 2019\",\n            \"slug\": \"faisla-aap-ka-govt-file-reference-against-3-sc-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.271Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79pyhz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151425/faisla-aap-ka-govt-file-reference-against-3-sc-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2668,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.309Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.309Z\",\n            \"updated\": \"2019-07-07T06:38:24.309Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PMLN Resumed Its Narrative?) \\u2013 28th May 2019\",\n            \"slug\": \"faisla-aap-ka-pmln-resumed-its-narrative-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.309Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79m9kj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151375/faisla-aap-ka-pmln-resumed-its-narrative-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2669,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.359Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.359Z\",\n            \"updated\": \"2019-07-07T06:38:24.359Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Khawaja Asif Exclusive Interview) \\u2013 27th May 2019\",\n            \"slug\": \"faisla-aap-ka-khawaja-asif-exclusive-interview-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.360Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79i9fy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151329/faisla-aap-ka-khawaja-asif-exclusive-interview-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2670,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.387Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.387Z\",\n            \"updated\": \"2019-07-07T06:38:24.387Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (NAB Chairman Interview, Other Issues) \\u2013 23rd May 2019\",\n            \"slug\": \"faisla-aap-ka-nab-chairman-interview-other-issues-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.387Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7958pi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151101/faisla-aap-ka-nab-chairman-interview-other-issues-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2671,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.416Z\",\n            \"updated\": \"2019-07-07T06:38:24.416Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Maryam Speaks, Chairman NAB Interview) - 22nd May 2019\",\n            \"slug\": \"faisla-aap-ka-maryam-speaks-chairman-nab-interview-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.416Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/1XSR6OalwtE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/151060/faisla-aap-ka-maryam-speaks-chairman-nab-interview-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2672,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.463Z\",\n            \"updated\": \"2019-07-07T06:38:24.463Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Special Talk With Shahid Khaqan Abbasi) \\u2013 21st May 2019\",\n            \"slug\": \"faisla-aap-ka-special-talk-with-shahid-khaqan-abbasi-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.463Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y65q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150983/faisla-aap-ka-special-talk-with-shahid-khaqan-abbasi-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2673,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.492Z\",\n            \"updated\": \"2019-07-07T06:38:24.493Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition's Iftar Dinner, Govt Worried) \\u2013 20th May 2019\",\n            \"slug\": \"faisla-aap-ka-oppositions-iftar-dinner-govt-worried-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.493Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uj6e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150938/faisla-aap-ka-opposition-s-iftar-dinner-govt-worried-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2674,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.524Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.524Z\",\n            \"updated\": \"2019-07-07T06:38:24.524Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Opposition Ready To Start Movement) \\u2013 16th May 2019\",\n            \"slug\": \"faisla-aap-ka-opposition-ready-to-start-movement-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.524Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hlgc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150725/faisla-aap-ka-opposition-ready-to-start-movement-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2675,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.591Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.590Z\",\n            \"updated\": \"2019-07-07T06:38:24.591Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PPP To Run Movement After Eid) \\u2013 15th May 2019\",\n            \"slug\": \"faisla-aap-ka-ppp-to-run-movement-after-eid-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.591Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78eike\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150650/faisla-aap-ka-ppp-to-run-movement-after-eid-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2676,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.653Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.653Z\",\n            \"updated\": \"2019-07-07T06:38:24.653Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Will Amnesty Scheme Improve Economy) \\u2013 14th May 2019\",\n            \"slug\": \"faisla-aap-ka-will-amnesty-scheme-improve-economy-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.653Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78b7z7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150583/faisla-aap-ka-will-amnesty-scheme-improve-economy-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2677,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.684Z\",\n            \"updated\": \"2019-07-07T06:38:24.684Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Stock Market Kyun Giri?) \\u2013 13th May 2019\",\n            \"slug\": \"faisla-aap-ka-stock-market-kyun-giri-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.684Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787qvb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150539/faisla-aap-ka-stock-market-kyun-giri-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2678,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.734Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.734Z\",\n            \"updated\": \"2019-07-07T06:38:24.735Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (More Challenges For PTI Govt) \\u2013 9th May 2019\",\n            \"slug\": \"faisla-aap-ka-more-challenges-for-pti-govt-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.735Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77v2hk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150289/faisla-aap-ka-more-challenges-for-pti-govt-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2679,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.789Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.789Z\",\n            \"updated\": \"2019-07-07T06:38:24.789Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Shahid Khaqan Abbasi Exclusive Interview) \\u2013 8th May 2019\",\n            \"slug\": \"faisla-aap-ka-shahid-khaqan-abbasi-exclusive-interview-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.789Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77revl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150219/faisla-aap-ka-shahid-khaqan-abbasi-exclusive-interview-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2680,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.853Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.852Z\",\n            \"updated\": \"2019-07-07T06:38:24.859Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (PMLN Ka Power Show Kaisa Raha) \\u2013 7th May 2019\",\n            \"slug\": \"faisla-aap-ka-pmln-ka-power-show-kaisa-raha-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.859Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77ob9c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150155/faisla-aap-ka-pmln-ka-power-show-kaisa-raha-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2681,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:24.940Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:24.940Z\",\n            \"updated\": \"2019-07-07T06:38:24.940Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Shahbaz Sharif in London, Nawaz Sharif in Jail) \\u2013 6th May 2019\",\n            \"slug\": \"faisla-aap-ka-shahbaz-sharif-in-london-nawaz-sharif-in-jail-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:24.940Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kk5p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/150082/faisla-aap-ka-shahbaz-sharif-in-london-nawaz-sharif-in-jail-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2682,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.038Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.037Z\",\n            \"updated\": \"2019-07-07T06:38:25.038Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Political Future of PMLN) \\u2013 2nd May 2019\",\n            \"slug\": \"faisla-aap-ka-political-future-of-pmln-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.038Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x777x4g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149834/faisla-aap-ka-political-future-of-pmln-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2683,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.098Z\",\n            \"updated\": \"2019-07-07T06:38:25.098Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Fazal Ur Rehman Exclusive Interview) \\u2013 1st May 2019\",\n            \"slug\": \"faisla-aap-ka-fazal-ur-rehman-exclusive-interview-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.098Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774rn3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149769/faisla-aap-ka-fazal-ur-rehman-exclusive-interview-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2684,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.174Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.174Z\",\n            \"updated\": \"2019-07-07T06:38:25.174Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Difficulties Increasing For PTI Govt) \\u2013 30th April 2019\",\n            \"slug\": \"faisla-aap-ka-difficulties-increasing-for-pti-govt-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.174Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771ptd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149699/faisla-aap-ka-difficulties-increasing-for-pti-govt-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2685,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.246Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.245Z\",\n            \"updated\": \"2019-07-07T06:38:25.246Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (DG ISPR Questions From PTM) \\u2013 29th April 2019\",\n            \"slug\": \"faisla-aap-ka-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.246Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xvtf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149622/faisla-aap-ka-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2686,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.312Z\",\n            \"updated\": \"2019-07-07T06:38:25.313Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Will PTI Be Succeeded in Approving Budget) \\u2013 25th April 2019\",\n            \"slug\": \"faisla-aap-ka-will-pti-be-succeeded-in-approving-budget-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.313Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l8qf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149395/faisla-aap-ka-will-pti-be-succeeded-in-approving-budget-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2687,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.413Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.412Z\",\n            \"updated\": \"2019-07-07T06:38:25.413Z\",\n            \"extra_data\": {\n                \"host\": \"Asma Sherazi\",\n                \"job_id\": 136,\n                \"feed_id\": 26,\n                \"feed_name\": \"unewstv - Faisla Aap Ka\",\n                \"show_name\": \"Faisla Aap Ka\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Faisla Aap Ka (Punjab Mein Tabdeeli Ka Imkan) \\u2013 24th April 2019\",\n            \"slug\": \"faisla-aap-ka-punjab-mein-tabdeeli-ka-imkan-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.413Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76i34o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Faisla+Aap+Ka\",\n            \"source_detail\": \"http://www.unewstv.com/149334/faisla-aap-ka-punjab-mein-tabdeeli-ka-imkan-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 24,\n            \"tags\": \"[\\\"Asma Sherazi\\\", \\\"Faisla Aap Ka\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2688,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.728Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.727Z\",\n            \"updated\": \"2019-07-07T06:38:25.728Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Leaked Video Ki Ahmiyat?) - 6th July 2019\",\n            \"slug\": \"think-tank-leaked-video-ki-ahmiyat-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.728Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/0Hx4t5URjvw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153651/think-tank-leaked-video-ki-ahmiyat-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2689,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.804Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.804Z\",\n            \"updated\": \"2019-07-07T06:38:25.804Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Govt Pressure on Opposition) - 5th July 2019\",\n            \"slug\": \"think-tank-govt-pressure-on-opposition-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.804Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/OgvzQ_rZn_M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153591/think-tank-govt-pressure-on-opposition-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2690,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.943Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:25.942Z\",\n            \"updated\": \"2019-07-07T06:38:25.943Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (PMLN In Trouble, PMLN Members Meet Imran Khan) - 30th June 2019\",\n            \"slug\": \"think-tank-pmln-in-trouble-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:25.943Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/3tb4a8-xJKc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153231/think-tank-pmln-in-trouble-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2691,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.081Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.081Z\",\n            \"updated\": \"2019-07-07T06:38:26.081Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Attitude of Govt And Opposition) - 29th June 2019\",\n            \"slug\": \"think-tank-attitude-of-govt-and-opposition-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.081Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/NGaXLIlpJ1w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153177/think-tank-attitude-of-govt-and-opposition-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2692,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.130Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.130Z\",\n            \"updated\": \"2019-07-07T06:38:26.130Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Mulk Ki Muashi Sorat e Haal) - 28th June 2019\",\n            \"slug\": \"think-tank-mulk-ki-muashi-sorat-e-haal-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.130Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/P26uoEXW87E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153104/think-tank-mulk-ki-muashi-sorat-e-haal-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2693,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.234Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.233Z\",\n            \"updated\": \"2019-07-07T06:38:26.234Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ke Bas Mein Kia Hai Aur Kia Nahi?) - 23rd June 2019\",\n            \"slug\": \"think-tank-opposition-ke-bas-mein-kia-hai-aur-kia-nahi-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.234Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/SbXbIdodMVc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152778/think-tank-opposition-ke-bas-mein-kia-hai-aur-kia-nahi-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2694,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.310Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.310Z\",\n            \"updated\": \"2019-07-07T06:38:26.310Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Maryam Nawaz Press Conference) - 22nd June 2019\",\n            \"slug\": \"think-tank-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.310Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/S37SUa2ygvE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152707/think-tank-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2695,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.397Z\",\n            \"updated\": \"2019-07-07T06:38:26.397Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Want to Topple Govt?) - 21st June 2019\",\n            \"slug\": \"think-tank-opposition-want-to-topple-govt-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.397Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/ZRrC4nw11i0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152642/think-tank-opposition-want-to-topple-govt-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2696,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.486Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.486Z\",\n            \"updated\": \"2019-07-07T06:38:26.487Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Bilawal Maryam Mulaqat, Cricket Match) - 16th June 2019\",\n            \"slug\": \"think-tank-bilawal-maryam-mulaqat-cricket-match-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.487Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/jyvLxeTb1jc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152351/think-tank-bilawal-maryam-mulaqat-cricket-match-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2697,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.577Z\",\n            \"updated\": \"2019-07-07T06:38:26.578Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ki Giraftariyan) - 15th June 2019\",\n            \"slug\": \"think-tank-opposition-ki-giraftariyan-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.578Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/JzuNOoP0OfM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152286/think-tank-opposition-ki-giraftariyan-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2698,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.625Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.625Z\",\n            \"updated\": \"2019-07-07T06:38:26.625Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With Syeda Ayesha Naaz (Opposition Leaders Ki Giraftariyan) - 14th June 2019\",\n            \"slug\": \"think-tank-with-syeda-ayesha-naaz-opposition-leaders-ki-giraftariyan-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.625Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/VohmBJxVspw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152244/think-tank-with-syeda-ayesha-naaz-opposition-leaders-ki-giraftariyan-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2699,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.685Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.685Z\",\n            \"updated\": \"2019-07-07T06:38:26.685Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ki Tehreek Ka Anjaam Kia Hoga) - 9th June 2019\",\n            \"slug\": \"think-tank-opposition-ki-tehreek-ka-anjaam-kia-hoga-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.685Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/3KCz9KXY_O0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151936/think-tank-opposition-ki-tehreek-ka-anjaam-kia-hoga-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2700,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.716Z\",\n            \"updated\": \"2019-07-07T06:38:26.716Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With Syeda Ayesha Naaz (PTM & Other Issues) - 8th June 2019\",\n            \"slug\": \"think-tank-with-syeda-ayesha-naaz-ptm-other-issues-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.716Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/bQBlddr5-kY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151880/think-tank-with-syeda-ayesha-naaz-ptm-other-issues-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2701,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.819Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.818Z\",\n            \"updated\": \"2019-07-07T06:38:26.822Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Eid Ke Baad Siasi Manzarnama) - 7th June 2019\",\n            \"slug\": \"think-tank-eid-ke-baad-siasi-manzarnama-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.822Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/DswGAmtJcDg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151841/think-tank-eid-ke-baad-siasi-manzarnama-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2702,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.878Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.878Z\",\n            \"updated\": \"2019-07-07T06:38:26.878Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Plan After Eid) - 2nd June 2019\",\n            \"slug\": \"think-tank-opposition-plan-after-eid-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.878Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/nVEJ2d6jwTs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151651/think-tank-opposition-plan-after-eid-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2703,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.910Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.910Z\",\n            \"updated\": \"2019-07-07T06:38:26.910Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ki Hakumat Ke Khilaf Tehreek) - 1st June 2019\",\n            \"slug\": \"think-tank-opposition-ki-hakumat-ke-khilaf-tehreek-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.910Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/qjARy5qHP60\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151603/think-tank-opposition-ki-hakumat-ke-khilaf-tehreek-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2704,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:26.968Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:26.968Z\",\n            \"updated\": \"2019-07-07T06:38:26.968Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nawaz Sharif Ka Adlia Bachao Tehreek Ka Elan) - 31st May 2019\",\n            \"slug\": \"think-tank-nawaz-sharif-ka-adlia-bachao-tehreek-ka-elan-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:26.968Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/cIe9ykMOXHA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151555/think-tank-nawaz-sharif-ka-adlia-bachao-tehreek-ka-elan-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2705,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:27.078Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:27.078Z\",\n            \"updated\": \"2019-07-07T06:38:27.078Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Bharat Mein Modi Ki Jeet) - 26th May 2019\",\n            \"slug\": \"think-tank-bharat-mein-modi-ki-jeet-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:27.078Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ENuvGDyR_zI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151286/think-tank-bharat-mein-modi-ki-jeet-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2706,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:27.292Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:27.292Z\",\n            \"updated\": \"2019-07-07T06:38:27.292Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Chairman NAB Se Resignation Ki Demand) - 25th May 2019\",\n            \"slug\": \"think-tank-chairman-nab-se-resignation-ki-demand-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:27.292Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/uIJRIV_eFEU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151233/think-tank-chairman-nab-se-resignation-ki-demand-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2707,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:27.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:27.498Z\",\n            \"updated\": \"2019-07-07T06:38:27.498Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With (Impact of Modi's Victory on Region) - 24th May 2019\",\n            \"slug\": \"think-tank-with-impact-of-modis-victory-on-region-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:27.498Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/iAKwoz3VrVI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151177/think-tank-with-impact-of-modi-s-victory-on-region-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2708,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:27.755Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:27.755Z\",\n            \"updated\": \"2019-07-07T06:38:27.755Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Opposition Ka Iftaar Dinner) - 19th May 2019\",\n            \"slug\": \"think-tank-opposition-ka-iftaar-dinner-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:27.755Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/feI5eyKqVIw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150906/think-tank-opposition-ka-iftaar-dinner-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2709,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:27.904Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:27.904Z\",\n            \"updated\": \"2019-07-07T06:38:27.904Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Kia Opposition Tehreek Chalaye Gi) - 18th May 2019\",\n            \"slug\": \"think-tank-kia-opposition-tehreek-chalaye-gi-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:27.904Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/lJ2719wXM9E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150854/think-tank-kia-opposition-tehreek-chalaye-gi-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2710,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.129Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.129Z\",\n            \"updated\": \"2019-07-07T06:38:28.130Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Ghair Yaqeeni Sorat e Haal) - 17th May 2019\",\n            \"slug\": \"think-tank-ghair-yaqeeni-sorat-e-haal-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.130Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/cgrtA-mugWo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150797/think-tank-ghair-yaqeeni-sorat-e-haal-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2711,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.248Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.247Z\",\n            \"updated\": \"2019-07-07T06:38:28.248Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Terrorism, National Action Plan?) - 12th May 2019\",\n            \"slug\": \"think-tank-terrorism-national-action-plan-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.248Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/6Ff19kFisxg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150482/think-tank-terrorism-national-action-plan-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2712,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.335Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.335Z\",\n            \"updated\": \"2019-07-07T06:38:28.336Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Jhoot Ki Siasat, Akhlaqiyat Ka Khatima) - 11th May 2019\",\n            \"slug\": \"think-tank-jhoot-ki-siasat-akhlaqiyat-ka-khatima-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.336Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/8qB2k2SZYD8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150426/think-tank-jhoot-ki-siasat-akhlaqiyat-ka-khatima-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2713,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.412Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.412Z\",\n            \"updated\": \"2019-07-07T06:38:28.412Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (IMF Package And Future of Pakistan) - 10th May 2019\",\n            \"slug\": \"think-tank-imf-package-and-future-of-pakistan-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.412Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/WHq4DTcqiao\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150364/think-tank-imf-package-and-future-of-pakistan-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2714,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.560Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.534Z\",\n            \"updated\": \"2019-07-07T06:38:28.561Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank  (New Local Body System, Other Issues) - 5th May 2019\",\n            \"slug\": \"think-tank-new-local-body-system-other-issues-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.561Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/h1QgVez3NmI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150039/think-tank-new-local-body-system-other-issues-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2715,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.633Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.632Z\",\n            \"updated\": \"2019-07-07T06:38:28.633Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Petrol Ki Qeemat Mein Izafa) - 4th May 2019\",\n            \"slug\": \"think-tank-petrol-ki-qeemat-mein-izafa-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.633Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/pju-SRcbk4M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149972/think-tank-petrol-ki-qeemat-mein-izafa-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2716,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.712Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.710Z\",\n            \"updated\": \"2019-07-07T06:38:28.712Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nawaz Sharif's Bail Extension Plea Rejected) - 3rd May 2019\",\n            \"slug\": \"think-tank-nawaz-sharifs-bail-extension-plea-rejected-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.712Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/wPd9PI725h0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149913/think-tank-nawaz-sharif-s-bail-extension-plea-rejected-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2717,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.806Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.806Z\",\n            \"updated\": \"2019-07-07T06:38:28.806Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (MQM Ne Naya Naara Laga Dia) - 28th April 2019\",\n            \"slug\": \"think-tank-mqm-ne-naya-naara-laga-dia-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.806Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/oJ0OhRCXWys\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149579/think-tank-mqm-ne-naya-naara-laga-dia-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2718,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:28.917Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:28.917Z\",\n            \"updated\": \"2019-07-07T06:38:28.917Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nizam Zarori Ya Kaam?) - 27th April 2019\",\n            \"slug\": \"think-tank-nizam-zarori-ya-kaam-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:28.917Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149525/think-tank-nizam-zarori-ya-kaam-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2719,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.066Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.063Z\",\n            \"updated\": \"2019-07-07T06:38:29.066Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Nawaz Sharif London Jaane Ke Liye Baitab) - 26th April 2019\",\n            \"slug\": \"think-tank-nawaz-sharif-london-jaane-ke-liye-baitab-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:29.066Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149480/think-tank-nawaz-sharif-london-jaane-ke-liye-baitab-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2720,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.156Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.155Z\",\n            \"updated\": \"2019-07-07T06:38:29.156Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Can Chaudhry Nisar Be CM Punjab?) - 21st April 2019\",\n            \"slug\": \"think-tank-can-chaudhry-nisar-be-cm-punjab-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:29.203Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149171/think-tank-can-chaudhry-nisar-be-cm-punjab-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2721,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.293Z\",\n            \"updated\": \"2019-07-07T06:38:29.329Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Meeting in Bani Gala, PTI Policies) - 20th April 2019\",\n            \"slug\": \"think-tank-meeting-in-bani-gala-pti-policies-20th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:29.329Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149121/think-tank-meeting-in-bani-gala-pti-policies-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2722,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.421Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.420Z\",\n            \"updated\": \"2019-07-07T06:38:29.421Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank With Syeda Ayesha Naaz (Changes in PTI Cabinet) - 19 April 2019\",\n            \"slug\": \"think-tank-with-syeda-ayesha-naaz-changes-in-pti-cabinet-19-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:29.421Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149065/think-tank-with-syeda-ayesha-naaz-changes-in-pti-cabinet-19-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2723,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.497Z\",\n            \"updated\": \"2019-07-07T06:38:29.498Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Trump Is Worried Because of Me, American Think Tanks Are Translating My Speeches - Khadim Rizvi\",\n            \"slug\": \"trump-is-worried-because-of-me-american-think-tanks-are-translating-my-speeches-khadim-rizvi\",\n            \"publish_date\": \"2019-07-07T06:38:29.498Z\",\n            \"target_date\": \"2018-03-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6gh88f\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/125191/trump-is-worried-because-of-me-american-think-tanks-are-translating-my-speeches-khadim-rizvi\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2724,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.605Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.599Z\",\n            \"updated\": \"2019-07-07T06:38:29.605Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Why Electables Joining PTI) - 18th June 2017\",\n            \"slug\": \"think-tank-why-electables-joining-pti-18th-june-2017\",\n            \"publish_date\": \"2019-07-07T06:38:29.605Z\",\n            \"target_date\": \"2017-06-19\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5r3hip\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107853/think-tank-why-electables-joining-pti-18th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2725,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.696Z\",\n            \"updated\": \"2019-07-07T06:38:29.697Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Panama JIT Mein Shahbaz Sharif Ki Paishi) - 17th June 2017\",\n            \"slug\": \"think-tank-panama-jit-mein-shahbaz-sharif-ki-paishi-17th-june-2017\",\n            \"publish_date\": \"2019-07-07T06:38:29.697Z\",\n            \"target_date\": \"2017-06-17\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5qzbp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107800/think-tank-panama-jit-mein-shahbaz-sharif-ki-paishi-17th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2726,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:29.925Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:29.924Z\",\n            \"updated\": \"2019-07-07T06:38:29.925Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (JIT Mein Wazir e Azam Ki Paishi) - 16th June 2017\",\n            \"slug\": \"think-tank-jit-mein-wazir-e-azam-ki-paishi-16th-june-2017\",\n            \"publish_date\": \"2019-07-07T06:38:29.925Z\",\n            \"target_date\": \"2017-06-16\",\n            \"text\": \"//www.dailymotion.com/watch/video/x5qsvwf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107737/think-tank-jit-mein-wazir-e-azam-ki-paishi-16th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2727,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.028Z\",\n            \"updated\": \"2019-07-07T06:38:30.028Z\",\n            \"extra_data\": {\n                \"host\": \"Syeda Ayesha Naz\",\n                \"job_id\": 150,\n                \"feed_id\": 22,\n                \"feed_name\": \"unewstv - Think Tank\",\n                \"show_name\": \"Think Tank\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Think Tank (Alami Ittehad Aur Pakistan) - 11th June 2017\",\n            \"slug\": \"think-tank-alami-ittehad-aur-pakistan-11th-june-2017\",\n            \"publish_date\": \"2019-07-07T06:38:30.028Z\",\n            \"target_date\": \"2017-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x5q1q7k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Think+Tank+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/107474/think-tank-alami-ittehad-aur-pakistan-11th-june-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 20,\n            \"tags\": \"[\\\"Syeda Ayesha Naz\\\", \\\"Think Tank\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2728,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.269Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.269Z\",\n            \"updated\": \"2019-07-07T06:38:30.269Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Party Loyalties, Positive or Negative) - 4th July 2019\",\n            \"slug\": \"harf-e-raaz-party-loyalties-positive-or-negative-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.269Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/ruR89Vgx6-E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153519/harf-e-raaz-party-loyalties-positive-or-negative-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2729,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.315Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.315Z\",\n            \"updated\": \"2019-07-07T06:38:30.315Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Why America Now Favours Pakistan?) - 3rd July 2019\",\n            \"slug\": \"harf-e-raaz-why-america-now-favours-pakistan-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.315Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/Fb9DA3v6CSI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153437/harf-e-raaz-why-america-now-favours-pakistan-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2730,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.379Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.379Z\",\n            \"updated\": \"2019-07-07T06:38:30.379Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz With Orya Maqbool Jan (Anti Opposition Drive) - 2nd July 2019\",\n            \"slug\": \"harf-e-raaz-with-orya-maqbool-jan-anti-opposition-drive-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.379Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/nToy0607bxs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153368/harf-e-raaz-with-orya-maqbool-jan-anti-opposition-drive-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2731,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.410Z\",\n            \"updated\": \"2019-07-07T06:38:30.410Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Why Modi Is Coming Pakistan?) \\u2013 1st July 2019\",\n            \"slug\": \"harf-e-raaz-why-modi-is-coming-pakistan-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.410Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/DCLQveEQi9g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153307/harf-e-raaz-why-modi-is-coming-pakistan-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2732,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.457Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.456Z\",\n            \"updated\": \"2019-07-07T06:38:30.457Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Pakistani Maeeshat Kaise Behtar Ho) \\u2013 27th June 2019\",\n            \"slug\": \"harf-e-raz-pakistani-maeeshat-kaise-behtar-ho-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.457Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/W9scz4AQ0Qo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153039/harf-e-raz-pakistani-maeeshat-kaise-behtar-ho-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2733,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.490Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.490Z\",\n            \"updated\": \"2019-07-07T06:38:30.490Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz With Orya Maqboo (APC Ka Kia Result Raha) - 26th June 2019\",\n            \"slug\": \"harf-e-raaz-with-orya-maqboo-apc-ka-kia-result-raha-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.490Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/IpHS_SfvPIw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152965/harf-e-raaz-with-orya-maqboo-apc-ka-kia-result-raha-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2734,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.519Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.519Z\",\n            \"updated\": \"2019-07-07T06:38:30.519Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (NRO Via Qatar Diplomacy) \\u2013 25th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-nro-via-qatar-diplomacy-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.519Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/KNFMU-RVuYY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152890/harf-e-raz-with-orya-maqbol-jan-nro-via-qatar-diplomacy-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2735,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.571Z\",\n            \"updated\": \"2019-07-07T06:38:30.571Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Fall of Istanbul, What It Will Lead To) - 24th June 2019\",\n            \"slug\": \"harf-e-raaz-fall-of-istanbul-what-it-will-lead-to-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.571Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/TBLGPX2r34g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152820/harf-e-raaz-fall-of-istanbul-what-it-will-lead-to-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2736,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.633Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.625Z\",\n            \"updated\": \"2019-07-07T06:38:30.633Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (India Ka Pakistani Offer Per Jawab) \\u2013 20th June 2019\",\n            \"slug\": \"harf-e-raz-india-ka-pakistani-offer-per-jawab-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.633Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/orhh2j2Q028\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152579/harf-e-raz-india-ka-pakistani-offer-per-jawab-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2737,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.678Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.678Z\",\n            \"updated\": \"2019-07-07T06:38:30.679Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (India's Conspiracy Against Pakistan) \\u2013 19th June 2019\",\n            \"slug\": \"harf-e-raz-indias-conspiracy-against-pakistan-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.679Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/IVQ2CTKU7EA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152520/harf-e-raz-india-s-conspiracy-against-pakistan-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2738,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.708Z\",\n            \"updated\": \"2019-07-07T06:38:30.708Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Morsi Shaheed) \\u2013 18th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-morsi-shaheed-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.708Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/wb8xGhoM8BI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152456/harf-e-raz-with-orya-maqbol-jan-morsi-shaheed-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2739,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.761Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.761Z\",\n            \"updated\": \"2019-07-07T06:38:30.761Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Siasi Bohran) \\u2013 17th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-siasi-bohran-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.761Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/v-TSI8IR7dM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152391/harf-e-raz-with-orya-maqbol-jan-siasi-bohran-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2740,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.796Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.796Z\",\n            \"updated\": \"2019-07-07T06:38:30.796Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Changing Power Centers of World) - 13th June 2019\",\n            \"slug\": \"harf-e-raaz-changing-power-centers-of-world-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.796Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/M_rVst_W1ys\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152185/harf-e-raaz-changing-power-centers-of-world-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2741,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.823Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.823Z\",\n            \"updated\": \"2019-07-07T06:38:30.823Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz With Orya Maqbool Jan (Commission To Probe Debt) - 12th June 2019\",\n            \"slug\": \"harf-e-raaz-with-orya-maqbool-jan-commission-to-probe-debt-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.823Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/JMbG7r0KzbA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152115/harf-e-raaz-with-orya-maqbool-jan-commission-to-probe-debt-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2742,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.950Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:30.950Z\",\n            \"updated\": \"2019-07-07T06:38:30.951Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Budget 2019-20) \\u2013 11th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-budget-2019-20-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:30.951Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/_PRc7QfNR6M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152070/harf-e-raz-with-orya-maqbol-jan-budget-2019-20-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2743,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.022Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.022Z\",\n            \"updated\": \"2019-07-07T06:38:31.039Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.039Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/TSjWdJ0ogCE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151993/harf-e-raz-with-orya-maqbol-jan-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2744,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.152Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.152Z\",\n            \"updated\": \"2019-07-07T06:38:31.153Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Eid Special) \\u2013 5th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.153Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/poqDEy9Ev1M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151772/harf-e-raz-with-orya-maqbol-jan-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2745,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.211Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.210Z\",\n            \"updated\": \"2019-07-07T06:38:31.211Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (The Night Of Repentance) \\u2013 4th June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-the-night-of-repentance-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.211Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/AOKOFFVEX3I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151722/harf-e-raz-with-orya-maqbol-jan-the-night-of-repentance-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2746,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.340Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.314Z\",\n            \"updated\": \"2019-07-07T06:38:31.340Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Imran Khan Address at OIC) \\u2013 3rd June 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-imran-khan-address-at-oic-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.340Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/SUyPAPzs88w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151696/harf-e-raz-with-orya-maqbol-jan-imran-khan-address-at-oic-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2747,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.416Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.398Z\",\n            \"updated\": \"2019-07-07T06:38:31.416Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (China Ka America Ke Khilaf Elan e Jang) \\u2013 30th May 2019\",\n            \"slug\": \"harf-e-raz-china-ka-america-ke-khilaf-elan-e-jang-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.416Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/tlGrltZzhG4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151494/harf-e-raz-china-ka-america-ke-khilaf-elan-e-jang-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2748,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.524Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.524Z\",\n            \"updated\": \"2019-07-07T06:38:31.524Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Moon Sighting, Scientific Or Religious Issue) - 29th May 2019\",\n            \"slug\": \"harf-e-raaz-moon-sighting-scientific-or-religious-issue-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.524Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/OmjoAgnABTw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151431/harf-e-raaz-moon-sighting-scientific-or-religious-issue-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2749,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.673Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.672Z\",\n            \"updated\": \"2019-07-07T06:38:31.673Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (From Atomic Power To Atomic Flash Point) \\u2013 28th May 2019\",\n            \"slug\": \"harf-e-raz-from-atomic-power-to-atomic-flash-point-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.673Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/gB_ZS0nE20c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151384/harf-e-raz-from-atomic-power-to-atomic-flash-point-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2750,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.820Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.820Z\",\n            \"updated\": \"2019-07-07T06:38:31.820Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Pakistan's Enemies Attacking Pakistan) \\u2013 27th May 2019\",\n            \"slug\": \"harf-e-raz-pakistans-enemies-attacking-pakistan-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.820Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/x8-J0CmjrlQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151345/harf-e-raz-pakistan-s-enemies-attacking-pakistan-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2751,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.926Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.899Z\",\n            \"updated\": \"2019-07-07T06:38:31.926Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (Modi's Victory, A Threat to Region's Peace) - 23rd May 2019\",\n            \"slug\": \"harf-e-raaz-modis-victory-a-threat-to-regions-peace-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.926Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/HRxCz9psnGM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151105/harf-e-raaz-modi-s-victory-a-threat-to-region-s-peace-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2752,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:31.975Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:31.975Z\",\n            \"updated\": \"2019-07-07T06:38:31.975Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raaz (US War Ships in Arabian Sea) - 22nd May 2019\",\n            \"slug\": \"harf-e-raaz-us-war-ships-in-arabian-sea-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:31.975Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/Z2mH5HFQqpQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151055/harf-e-raaz-us-war-ships-in-arabian-sea-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2753,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.084Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.083Z\",\n            \"updated\": \"2019-07-07T06:38:32.084Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Dollar Rise, A Currency War) \\u2013 21st May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-dollar-rise-a-currency-war-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.084Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/dWjVjPlieic\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150989/harf-e-raz-with-orya-maqbol-jan-dollar-rise-a-currency-war-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2754,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.163Z\",\n            \"updated\": \"2019-07-07T06:38:32.164Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Opposition Iftar Dinner) \\u2013 20th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-opposition-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.164Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/yClEZhOJzsE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150955/harf-e-raz-with-orya-maqbol-jan-opposition-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2755,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.403Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.348Z\",\n            \"updated\": \"2019-07-07T06:38:32.403Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Discussion on Current Issues) \\u2013 16th May 2019\",\n            \"slug\": \"harf-e-raz-discussion-on-current-issues-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.403Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/vQkJ-q3Bjfg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150733/harf-e-raz-discussion-on-current-issues-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2756,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.492Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.492Z\",\n            \"updated\": \"2019-07-07T06:38:32.492Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Pak America Relations) \\u2013 15th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-pak-america-relations-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.492Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/Oca9k46xF3o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150665/harf-e-raz-with-orya-maqbol-jan-pak-america-relations-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2757,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.600Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.600Z\",\n            \"updated\": \"2019-07-07T06:38:32.600Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (Tax Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.600Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/aApsGRr6ONg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150594/harf-e-raz-with-orya-maqbol-jan-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2758,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.759Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.759Z\",\n            \"updated\": \"2019-07-07T06:38:32.759Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Imran Khan Ki Riasat e Madina) \\u2013 13th May 2019\",\n            \"slug\": \"harf-e-raz-imran-khan-ki-riasat-e-madina-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.760Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/pqPw3zphW_w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150554/harf-e-raz-imran-khan-ki-riasat-e-madina-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2759,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.816Z\",\n            \"updated\": \"2019-07-07T06:38:32.816Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (New FBR Chairman, Other Issues) \\u2013 9th May 2019\",\n            \"slug\": \"harf-e-raz-new-fbr-chairman-other-issues-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.816Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/-MqZpSRG2Wo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150298/harf-e-raz-new-fbr-chairman-other-issues-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2760,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.873Z\",\n            \"updated\": \"2019-07-07T06:38:32.874Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz with Orya Maqbol Jan (America & Iran Face To Face) \\u2013 8th May 2019\",\n            \"slug\": \"harf-e-raz-with-orya-maqbol-jan-america-iran-face-to-face-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.874Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/4KrkN1oxU30\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150237/harf-e-raz-with-orya-maqbol-jan-america-iran-face-to-face-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2761,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.909Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.909Z\",\n            \"updated\": \"2019-07-07T06:38:32.909Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Nawaz Sharif Ki Wapsi, Changes in PMLN) \\u2013 7th May 2019\",\n            \"slug\": \"harf-e-raz-nawaz-sharif-ki-wapsi-changes-in-pmln-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.910Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/g4Ymik9NU-s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150163/harf-e-raz-nawaz-sharif-ki-wapsi-changes-in-pmln-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2762,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:32.980Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:32.980Z\",\n            \"updated\": \"2019-07-07T06:38:32.980Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (IMF Ka Pakistan Per Qabza) \\u2013 6th May 2019\",\n            \"slug\": \"harf-e-raz-imf-ka-pakistan-per-qabza-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:32.980Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/DYVHJVFkZ0Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150093/harf-e-raz-imf-ka-pakistan-per-qabza-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2763,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:33.040Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:33.040Z\",\n            \"updated\": \"2019-07-07T06:38:33.057Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Will Nawaz Sharif Go Abroad?) \\u2013 2nd May 2019\",\n            \"slug\": \"harf-e-raz-will-nawaz-sharif-go-abroad-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:33.057Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/CWbyANai1gY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149852/harf-e-raz-will-nawaz-sharif-go-abroad-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2764,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:33.136Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:33.135Z\",\n            \"updated\": \"2019-07-07T06:38:33.136Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Afghanistan Se Pakistan Per Hamla) \\u2013 1st April 2019\",\n            \"slug\": \"harf-e-raz-afghanistan-se-pakistan-per-hamla-1st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:33.136Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/xBwezyGEtJQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149783/harf-e-raz-afghanistan-se-pakistan-per-hamla-1st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2765,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:33.235Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:33.217Z\",\n            \"updated\": \"2019-07-07T06:38:33.235Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Mobile App About Islam) \\u2013 30th April 2019\",\n            \"slug\": \"harf-e-raz-mobile-app-about-islam-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:33.235Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/ebnu2rb0sVU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149708/harf-e-raz-mobile-app-about-islam-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2766,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:33.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:33.344Z\",\n            \"updated\": \"2019-07-07T06:38:33.344Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (DG ISPR Wants Madrassa Reforms) \\u2013 29th April 2019\",\n            \"slug\": \"harf-e-raz-dg-ispr-wants-madrassa-reforms-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:33.345Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/zruiYH-qPno\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149642/harf-e-raz-dg-ispr-wants-madrassa-reforms-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2767,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:33.459Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:33.458Z\",\n            \"updated\": \"2019-07-07T06:38:33.459Z\",\n            \"extra_data\": {\n                \"host\": \"Orya Maqbool Jan\",\n                \"job_id\": 151,\n                \"feed_id\": 23,\n                \"feed_name\": \"unewstv - Harf e Raaz\",\n                \"show_name\": \"Harf e Raaz\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Harf e Raz (Polio Teams, Nawaz Sharif Going Abroad?) \\u2013 25th April 2019\",\n            \"slug\": \"harf-e-raz-polio-teams-nawaz-sharif-going-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:33.459Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/iqk_ITO7GTw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Harf-e-Raz+on+Neo+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149413/harf-e-raz-polio-teams-nawaz-sharif-going-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 21,\n            \"tags\": \"[\\\"Orya Maqbool Jan\\\", \\\"Harf e Raaz\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2768,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:33.807Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:33.807Z\",\n            \"updated\": \"2019-07-07T06:38:33.807Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Awam Tax Dene Ke Liye Tayyar Hain?) \\u2013 4th July 2019\",\n            \"slug\": \"muqabil-kia-awam-tax-dene-ke-liye-tayyar-hain-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:33.807Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ciunv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153538/muqabil-kia-awam-tax-dene-ke-liye-tayyar-hain-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2769,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.030Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.030Z\",\n            \"updated\": \"2019-07-07T06:38:34.030Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Action Against Benami Assets, Political Issues) \\u2013 3rd July 2019\",\n            \"slug\": \"muqabil-action-against-benami-assets-political-issues-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.030Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfzg0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153457/muqabil-action-against-benami-assets-political-issues-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2770,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.102Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.101Z\",\n            \"updated\": \"2019-07-07T06:38:34.102Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Who Is Behind Rana Sanaullah's Arrest?) \\u2013 2nd July 2019\",\n            \"slug\": \"muqabil-who-is-behind-rana-sanaullahs-arrest-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.102Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdbo5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153387/muqabil-who-is-behind-rana-sanaullah-s-arrest-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2771,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.188Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.188Z\",\n            \"updated\": \"2019-07-07T06:38:34.188Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Is PM Helpless In Front of Corruption Mafia) \\u2013 1st July 2019\",\n            \"slug\": \"muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.189Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7camu6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153314/muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2772,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.218Z\",\n            \"updated\": \"2019-07-07T06:38:34.218Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi) \\u2013 27th June 2019\",\n            \"slug\": \"muqabil-kia-opposition-tehreek-chalaye-gi-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.218Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0v66\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153054/muqabil-kia-opposition-tehreek-chalaye-gi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2773,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.261Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.259Z\",\n            \"updated\": \"2019-07-07T06:38:34.261Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (How To Control Dollar Rate) \\u2013 26th June 2019\",\n            \"slug\": \"muqabil-how-to-control-dollar-rate-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.261Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by4xs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152974/muqabil-how-to-control-dollar-rate-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2774,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.289Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.289Z\",\n            \"updated\": \"2019-07-07T06:38:34.289Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Politics And Economy, Big Challenges) \\u2013 25th June 2019\",\n            \"slug\": \"muqabil-politics-and-economy-big-challenges-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.289Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvgfl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152906/muqabil-politics-and-economy-big-challenges-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2775,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.318Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.318Z\",\n            \"updated\": \"2019-07-07T06:38:34.318Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Govt's Good News For Businessmen) \\u2013 24th June 2019\",\n            \"slug\": \"muqabil-govts-good-news-for-businessmen-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.318Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt3dn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152840/muqabil-govt-s-good-news-for-businessmen-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2776,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.371Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.371Z\",\n            \"updated\": \"2019-07-07T06:38:34.371Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Train Accident, Other Issues) \\u2013 20th June 2019\",\n            \"slug\": \"muqabil-train-accident-other-issues-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.371Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7blfxz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152590/muqabil-train-accident-other-issues-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2777,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.399Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.399Z\",\n            \"updated\": \"2019-07-07T06:38:34.399Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Ziddi Pan Aur Siasi Tanao Ka Anjam Kia Hoga) \\u2013 19th June 2019\",\n            \"slug\": \"muqabil-ziddi-pan-aur-siasi-tanao-ka-anjam-kia-hoga-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.399Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjooq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152521/muqabil-ziddi-pan-aur-siasi-tanao-ka-anjam-kia-hoga-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2778,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.432Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.430Z\",\n            \"updated\": \"2019-07-07T06:38:34.432Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Govt Policies And Opposition) \\u2013 18th June 2019\",\n            \"slug\": \"muqabil-govt-policies-and-opposition-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.432Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bi0bz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152465/muqabil-govt-policies-and-opposition-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2779,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.492Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.484Z\",\n            \"updated\": \"2019-07-07T06:38:34.492Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Pakistan Ki Muashi Aur Siasi Sorat e Haal) \\u2013 17th June 2019\",\n            \"slug\": \"muqabil-pakistan-ki-muashi-aur-siasi-sorat-e-haal-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.492Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgkbx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152406/muqabil-pakistan-ki-muashi-aur-siasi-sorat-e-haal-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2780,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.523Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.523Z\",\n            \"updated\": \"2019-07-07T06:38:34.523Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Discussion on Different Issues) \\u2013 13th June 2019\",\n            \"slug\": \"muqabil-discussion-on-different-issues-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.523Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/UM2nU7HE8rI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152195/muqabil-discussion-on-different-issues-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2781,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.582Z\",\n            \"updated\": \"2019-07-07T06:38:34.582Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Opposition's Strategy After Big Arrests) \\u2013 12th June 2019\",\n            \"slug\": \"muqabil-oppositions-strategy-after-big-arrests-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.582Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayhyn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152131/muqabil-opposition-s-strategy-after-big-arrests-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2782,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.610Z\",\n            \"updated\": \"2019-07-07T06:38:34.611Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Altaf Hussain Ki Giraftari) \\u2013 11th June 2019\",\n            \"slug\": \"muqabil-altaf-hussain-ki-giraftari-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.611Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aui2n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152080/muqabil-altaf-hussain-ki-giraftari-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2783,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.662Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.661Z\",\n            \"updated\": \"2019-07-07T06:38:34.662Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Asif Zardari's Arrest & Other Issues) \\u2013 10th June 2019\",\n            \"slug\": \"muqabil-asif-zardaris-arrest-other-issues-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.662Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqxod\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152004/muqabil-asif-zardari-s-arrest-other-issues-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2784,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.692Z\",\n            \"updated\": \"2019-07-07T06:38:34.693Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Eid Akhlas o Eisaar Ka Naam Hai) \\u2013 4th June 2019\",\n            \"slug\": \"muqabil-eid-akhlas-o-eisaar-ka-naam-hai-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.693Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a9irs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151726/muqabil-eid-akhlas-o-eisaar-ka-naam-hai-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2785,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.721Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.721Z\",\n            \"updated\": \"2019-07-07T06:38:34.721Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Zartaj Gul Ki Wazarat Khatre Mein) \\u2013 3rd June 2019\",\n            \"slug\": \"muqabil-zartaj-gul-ki-wazarat-khatre-mein-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.721Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/caTT9YdTCwg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151702/muqabil-zartaj-gul-ki-wazarat-khatre-mein-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2786,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.791Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.790Z\",\n            \"updated\": \"2019-07-07T06:38:34.791Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Big Decision of Army Chief) \\u2013 30th May 2019\",\n            \"slug\": \"muqabil-big-decision-of-army-chief-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.791Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tpzn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151505/muqabil-big-decision-of-army-chief-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2787,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.824Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.824Z\",\n            \"updated\": \"2019-07-07T06:38:34.824Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (PTI Govt Files Reference Against Judges) \\u2013 29th May 2019\",\n            \"slug\": \"muqabil-pti-govt-files-reference-against-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.824Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79qcwz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151433/muqabil-pti-govt-files-reference-against-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2788,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.876Z\",\n            \"updated\": \"2019-07-07T06:38:34.877Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Are PMLN, PPP United Against PTI Govt?) \\u2013 28th May 2019\",\n            \"slug\": \"muqabil-are-pmln-ppp-united-against-pti-govt-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.877Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mkq8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151390/muqabil-are-pmln-ppp-united-against-pti-govt-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2789,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.912Z\",\n            \"updated\": \"2019-07-07T06:38:34.913Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Pakistan Army Ki Check Post Per Hamla) \\u2013 27th May 2019\",\n            \"slug\": \"muqabil-pakistan-army-ki-check-post-per-hamla-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.913Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79imca\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151348/muqabil-pakistan-army-ki-check-post-per-hamla-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2790,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:34.961Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:34.961Z\",\n            \"updated\": \"2019-07-07T06:38:34.961Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Modi Won Once Again in India) \\u2013 23rd May 2019\",\n            \"slug\": \"muqabil-modi-won-once-again-in-india-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:34.961Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795kpp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151124/muqabil-modi-won-once-again-in-india-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2791,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.002Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.002Z\",\n            \"updated\": \"2019-07-07T06:38:35.002Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi?) \\u2013 22nd May 2019\",\n            \"slug\": \"muqabil-kia-opposition-tehreek-chalaye-gi-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.002Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/dvUb6j3sM7Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151066/muqabil-kia-opposition-tehreek-chalaye-gi-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2792,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.032Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.031Z\",\n            \"updated\": \"2019-07-07T06:38:35.032Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (NAB Chairman Interview Issue) \\u2013 21st May 2019\",\n            \"slug\": \"muqabil-nab-chairman-interview-issue-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.032Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78yizg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151008/muqabil-nab-chairman-interview-issue-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2793,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.080Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.080Z\",\n            \"updated\": \"2019-07-07T06:38:35.080Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Govt Performance & Opposition's Plan) \\u2013 20th May 2019\",\n            \"slug\": \"muqabil-govt-performance-oppositions-plan-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.080Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uw75\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150951/muqabil-govt-performance-opposition-s-plan-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2794,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.112Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.111Z\",\n            \"updated\": \"2019-07-07T06:38:35.112Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Economy, Amnesty, Iran America Issue) \\u2013 14th May 2019\",\n            \"slug\": \"muqabil-economy-amnesty-iran-america-issue-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.112Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78eqxl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150674/muqabil-economy-amnesty-iran-america-issue-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2795,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.170Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.170Z\",\n            \"updated\": \"2019-07-07T06:38:35.170Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (PTI's Amnesty Scheme, IMF, Economy) - 14th May 2019\",\n            \"slug\": \"muqabil-ptis-amnesty-scheme-imf-economy-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.170Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bo40\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150607/muqabil-pti-s-amnesty-scheme-imf-economy-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2796,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.227Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.227Z\",\n            \"updated\": \"2019-07-07T06:38:35.227Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (IMF Deal, Awam Ke Liye Kaisa?) \\u2013 13th May 2019\",\n            \"slug\": \"muqabil-imf-deal-awam-ke-liye-kaisa-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.227Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/i-LBkAfsqJo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150568/muqabil-imf-deal-awam-ke-liye-kaisa-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2797,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.288Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.288Z\",\n            \"updated\": \"2019-07-07T06:38:35.288Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Opposition Ki Hungama Arai) \\u2013 9th May 2019\",\n            \"slug\": \"muqabil-opposition-ki-hungama-arai-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.288Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77vei0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150302/muqabil-opposition-ki-hungama-arai-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2798,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.386Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.386Z\",\n            \"updated\": \"2019-07-07T06:38:35.386Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Nawaz Sharif Wapis Jail Mein) \\u2013 8th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-wapis-jail-mein-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.386Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rrc6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150239/muqabil-nawaz-sharif-wapis-jail-mein-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2799,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.445Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.444Z\",\n            \"updated\": \"2019-07-07T06:38:35.445Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Nawaz Sharif Again in Kot Lakhpat Jail) \\u2013 7th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-again-in-kot-lakhpat-jail-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.445Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77ol2m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150173/muqabil-nawaz-sharif-again-in-kot-lakhpat-jail-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2800,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.530Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.530Z\",\n            \"updated\": \"2019-07-07T06:38:35.530Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Nawaz Sharif Back To Prison, Other Issues) - 6th May 2019\",\n            \"slug\": \"muqabil-nawaz-sharif-back-to-prison-other-issues-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.530Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kww5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150103/muqabil-nawaz-sharif-back-to-prison-other-issues-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2801,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.618Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.617Z\",\n            \"updated\": \"2019-07-07T06:38:35.618Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Kia Imran Khan Pakistan Ko Theek Kar Payein Ge) \\u2013 2nd May 2019\",\n            \"slug\": \"muqabil-kia-imran-khan-pakistan-ko-theek-kar-payein-ge-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.618Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77892e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149853/muqabil-kia-imran-khan-pakistan-ko-theek-kar-payein-ge-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2802,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.719Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.718Z\",\n            \"updated\": \"2019-07-07T06:38:35.725Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (PM Imran Khan Speech on PTI Foundation Day) \\u2013 1st May 2019\",\n            \"slug\": \"muqabil-pm-imran-khan-speech-on-pti-foundation-day-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.725Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x775111\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149791/muqabil-pm-imran-khan-speech-on-pti-foundation-day-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2803,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.806Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:35.806Z\",\n            \"updated\": \"2019-07-07T06:38:35.806Z\",\n            \"extra_data\": {\n                \"host\": \"Haroon ur Rasheed, Zafar Hilaly\",\n                \"job_id\": 137,\n                \"feed_id\": 9,\n                \"feed_name\": \"unewstv - Muqabil\",\n                \"show_name\": \"Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Muqabil (Discussion on Multiple Issues) \\u2013 30th April 2019\",\n            \"slug\": \"muqabil-discussion-on-multiple-issues-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:35.806Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7720nv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149716/muqabil-discussion-on-multiple-issues-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 7,\n            \"tags\": \"[\\\"Haroon ur Rasheed, Zafar Hilaly\\\", \\\"Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2804,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.161Z\",\n            \"updated\": \"2019-07-07T06:38:36.161Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (How Govt Will Control Inflation) - 4th July 2019\",\n            \"slug\": \"ho-kya-raha-hai-how-govt-will-control-inflation-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.161Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/GEE434B1eUk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/153518/ho-kya-raha-hai-how-govt-will-control-inflation-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2805,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.208Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.208Z\",\n            \"updated\": \"2019-07-07T06:38:36.208Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Firing At Lahore Airport) \\u2013 3rd July 2019\",\n            \"slug\": \"ho-kya-raha-hai-firing-at-lahore-airport-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.208Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfrxa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/153444/ho-kya-raha-hai-firing-at-lahore-airport-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2806,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.268Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.268Z\",\n            \"updated\": \"2019-07-07T06:38:36.268Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Accountability And Economy Issues) \\u2013 2nd July 2019\",\n            \"slug\": \"ho-kya-raha-hai-accountability-and-economy-issues-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.268Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd42z\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/153370/ho-kya-raha-hai-accountability-and-economy-issues-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2807,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.299Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.299Z\",\n            \"updated\": \"2019-07-07T06:38:36.299Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Rana Sanaullah Ki Giraftari) - 1st July 2019\",\n            \"slug\": \"ho-kya-raha-hai-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.299Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/B2Sk9KyYN4g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/153299/ho-kya-raha-hai-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2808,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.357Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.357Z\",\n            \"updated\": \"2019-07-07T06:38:36.357Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Opposition's APC, How Much Successful?) \\u2013 27th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-oppositions-apc-how-much-successful-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.357Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0lbz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/153021/ho-kya-raha-hai-opposition-s-apc-how-much-successful-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2809,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.388Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.388Z\",\n            \"updated\": \"2019-07-07T06:38:36.389Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (PMLN Mein Androni Ikhtalafat) \\u2013 26th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-pmln-mein-androni-ikhtalafat-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.389Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxweg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152962/ho-kya-raha-hai-pmln-mein-androni-ikhtalafat-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2810,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.419Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.418Z\",\n            \"updated\": \"2019-07-07T06:38:36.419Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (All Parties Conference Tomorrow) \\u2013 25th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-all-parties-conference-tomorrow-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.419Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bv8zu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152887/ho-kya-raha-hai-all-parties-conference-tomorrow-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2811,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.480Z\",\n            \"updated\": \"2019-07-07T06:38:36.480Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Maryam Nawaz Vs Other PMLN Leaders) \\u2013 24th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-maryam-nawaz-vs-other-pmln-leaders-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.480Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/9qdODaw2pb0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152827/ho-kya-raha-hai-maryam-nawaz-vs-other-pmln-leaders-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2812,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.510Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.510Z\",\n            \"updated\": \"2019-07-07T06:38:36.510Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (PM Imran Khan's Letter to Modi) \\u2013 20th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-pm-imran-khans-letter-to-modi-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.510Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl8j3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152564/ho-kya-raha-hai-pm-imran-khan-s-letter-to-modi-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2813,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.549Z\",\n            \"updated\": \"2019-07-07T06:38:36.549Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Maryam Nawaz Active Against Govt) \\u2013 19th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-maryam-nawaz-active-against-govt-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.549Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjjx7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152495/ho-kya-raha-hai-maryam-nawaz-active-against-govt-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2814,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.583Z\",\n            \"updated\": \"2019-07-07T06:38:36.584Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Hakumat Aur Opposition Mein Garma Garmi) \\u2013 18th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-hakumat-aur-opposition-mein-garma-garmi-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.584Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhvxd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152451/ho-kya-raha-hai-hakumat-aur-opposition-mein-garma-garmi-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2815,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.613Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.613Z\",\n            \"updated\": \"2019-07-07T06:38:36.614Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Qaumi Assembly Ka Ijlas) \\u2013 17th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.614Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgfs2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152396/ho-kya-raha-hai-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2816,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.669Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.669Z\",\n            \"updated\": \"2019-07-07T06:38:36.669Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Imran Khan's Address To Nation) \\u2013 13th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-imran-khans-address-to-nation-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.669Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2blu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152168/ho-kya-raha-hai-imran-khan-s-address-to-nation-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2817,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.698Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.697Z\",\n            \"updated\": \"2019-07-07T06:38:36.698Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Altaf Hussain Arrested, Then Released) \\u2013 12th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-altaf-hussain-arrested-then-released-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.698Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay88u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152118/ho-kya-raha-hai-altaf-hussain-arrested-then-released-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2818,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.783Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.783Z\",\n            \"updated\": \"2019-07-07T06:38:36.783Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Budget Paish Kar Dia Gaya) \\u2013 11th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-budget-paish-kar-dia-gaya-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.783Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7atwby\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/152052/ho-kya-raha-hai-budget-paish-kar-dia-gaya-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2819,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.813Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.812Z\",\n            \"updated\": \"2019-07-07T06:38:36.813Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Asif Zardari Ki Giraftari Ke Asraat) \\u2013 10th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-asif-zardari-ki-giraftari-ke-asraat-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.813Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqold\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151986/ho-kya-raha-hai-asif-zardari-ki-giraftari-ke-asraat-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2820,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.869Z\",\n            \"updated\": \"2019-07-07T06:38:36.873Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Mulk Mein Phir 2 Eidein) - 4th June 2019\",\n            \"slug\": \"ho-kya-raha-hai-mulk-mein-phir-2-eidein-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.873Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/eO8XsjPN8-0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151719/ho-kya-raha-hai-mulk-mein-phir-2-eidein-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2821,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.904Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.903Z\",\n            \"updated\": \"2019-07-07T06:38:36.904Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Kia Ahtasab Aur Maeeshat Sath Chal Sakti Hai) \\u2013 3rd June 2019\",\n            \"slug\": \"ho-kya-raha-hai-kia-ahtasab-aur-maeeshat-sath-chal-sakti-hai-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.904Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a6ae6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151695/ho-kya-raha-hai-kia-ahtasab-aur-maeeshat-sath-chal-sakti-hai-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2822,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:36.941Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:36.941Z\",\n            \"updated\": \"2019-07-07T06:38:36.941Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Can Imran Khan & Modi Meet) - 30th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-can-imran-khan-modi-meet-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:36.941Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/TfkbQWs1mAQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151488/ho-kya-raha-hai-can-imran-khan-modi-meet-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2823,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:37.036Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:37.017Z\",\n            \"updated\": \"2019-07-07T06:38:37.036Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (How Govt Will Get Budget Approved) \\u2013 29th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-how-govt-will-get-budget-approved-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:37.036Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79q0ve\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151430/ho-kya-raha-hai-how-govt-will-get-budget-approved-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2824,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:37.089Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:37.089Z\",\n            \"updated\": \"2019-07-07T06:38:37.089Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Atom Bomb Ka Credit Kis Ka) - 28th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-atom-bomb-ka-credit-kis-ka-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:37.089Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/djqlqFcHvWg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151377/ho-kya-raha-hai-atom-bomb-ka-credit-kis-ka-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2825,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:37.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:37.163Z\",\n            \"updated\": \"2019-07-07T06:38:37.164Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (PMLN Divided on NAB Chairman) - 27th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-pmln-divided-on-nab-chairman-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:37.164Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/9I0Dc4ASbEM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151327/ho-kya-raha-hai-pmln-divided-on-nab-chairman-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2826,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:37.350Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:37.350Z\",\n            \"updated\": \"2019-07-07T06:38:37.350Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (NAB Ilzamat Ki Zad Mein) \\u2013 23rd May 2019\",\n            \"slug\": \"ho-kya-raha-hai-nab-ilzamat-ki-zad-mein-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:37.350Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795axw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151108/ho-kya-raha-hai-nab-ilzamat-ki-zad-mein-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2827,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:37.537Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:37.536Z\",\n            \"updated\": \"2019-07-07T06:38:37.537Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Maryam Nawaz Press Conference) - 22nd May 2019\",\n            \"slug\": \"ho-kya-raha-hai-maryam-nawaz-press-conference-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:37.537Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/PLSs_M_oXFU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/151051/ho-kya-raha-hai-maryam-nawaz-press-conference-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2828,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:37.772Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:37.772Z\",\n            \"updated\": \"2019-07-07T06:38:37.772Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (NAB On The Target of Opposition) \\u2013 21st May 2019\",\n            \"slug\": \"ho-kya-raha-hai-nab-on-the-target-of-opposition-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:37.772Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y85n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150988/ho-kya-raha-hai-nab-on-the-target-of-opposition-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2829,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:37.881Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:37.881Z\",\n            \"updated\": \"2019-07-07T06:38:37.881Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Maryam Bilawal Iftar Dinner) \\u2013 20th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-maryam-bilawal-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:37.909Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ul6w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150943/ho-kya-raha-hai-maryam-bilawal-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2830,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.026Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.025Z\",\n            \"updated\": \"2019-07-07T06:38:38.026Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (President Dr. Arif Alvi Exclusive Interview) \\u2013 16th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-president-dr-arif-alvi-exclusive-interview-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.026Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/YiUndQNNnYA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150720/ho-kya-raha-hai-president-dr-arif-alvi-exclusive-interview-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2831,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.109Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.109Z\",\n            \"updated\": \"2019-07-07T06:38:38.110Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Maryam Nawaz Next Leader of PMLN?) \\u2013 15th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-maryam-nawaz-next-leader-of-pmln-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.110Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78elhp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150658/ho-kya-raha-hai-maryam-nawaz-next-leader-of-pmln-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2832,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.196Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.195Z\",\n            \"updated\": \"2019-07-07T06:38:38.196Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Opposition Criticism on IMF Deal) \\u2013 14th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-opposition-criticism-on-imf-deal-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.196Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78b945\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150586/ho-kya-raha-hai-opposition-criticism-on-imf-deal-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2833,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.248Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.248Z\",\n            \"updated\": \"2019-07-07T06:38:38.248Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (IMF Deal, Success or Failure of Pakistan) \\u2013 13th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-imf-deal-success-or-failure-of-pakistan-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.248Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787olr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150535/ho-kya-raha-hai-imf-deal-success-or-failure-of-pakistan-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2834,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.326Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.325Z\",\n            \"updated\": \"2019-07-07T06:38:38.326Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Conditions of IMF Project) \\u2013 9th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-conditions-of-imf-project-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.326Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77v3gc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150291/ho-kya-raha-hai-conditions-of-imf-project-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2835,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.395Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.376Z\",\n            \"updated\": \"2019-07-07T06:38:38.395Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Nawaz Sharif Back in Jail) \\u2013 8th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-nawaz-sharif-back-in-jail-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.395Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77redl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150220/ho-kya-raha-hai-nawaz-sharif-back-in-jail-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2836,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.521Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.521Z\",\n            \"updated\": \"2019-07-07T06:38:38.521Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Maryam Nawaz New Role in PMLN) \\u2013 7th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-maryam-nawaz-new-role-in-pmln-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.521Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77oczj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150160/ho-kya-raha-hai-maryam-nawaz-new-role-in-pmln-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2837,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.598Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.598Z\",\n            \"updated\": \"2019-07-07T06:38:38.599Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Narrative of PMLN, Workers Worried) \\u2013 6th May 2019\",\n            \"slug\": \"ho-kya-raha-hai-narrative-of-pmln-workers-worried-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.599Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kgsr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/150080/ho-kya-raha-hai-narrative-of-pmln-workers-worried-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2838,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.659Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.659Z\",\n            \"updated\": \"2019-07-07T06:38:38.659Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Shahid Khaqan Abbasi's Name on ECL) \\u2013 1st May 2019\",\n            \"slug\": \"ho-kya-raha-hai-shahid-khaqan-abbasis-name-on-ecl-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.659Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774psw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/149768/ho-kya-raha-hai-shahid-khaqan-abbasi-s-name-on-ecl-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2839,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.695Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.695Z\",\n            \"updated\": \"2019-07-07T06:38:38.695Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Challenges For PTI Govt) \\u2013 30th April 2019\",\n            \"slug\": \"ho-kya-raha-hai-challenges-for-pti-govt-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.695Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771ngc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/149691/ho-kya-raha-hai-challenges-for-pti-govt-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2840,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.770Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.769Z\",\n            \"updated\": \"2019-07-07T06:38:38.770Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (DG ISPR Presser, Other Issues) \\u2013 29th April 2019\",\n            \"slug\": \"ho-kya-raha-hai-dg-ispr-presser-other-issues-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.770Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xt1e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/149620/ho-kya-raha-hai-dg-ispr-presser-other-issues-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2841,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.800Z\",\n            \"updated\": \"2019-07-07T06:38:38.800Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Discussion on Multiple Issues) \\u2013 25th April 2019\",\n            \"slug\": \"ho-kya-raha-hai-discussion-on-multiple-issues-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.800Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l7d7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/149392/ho-kya-raha-hai-discussion-on-multiple-issues-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2842,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.839Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.839Z\",\n            \"updated\": \"2019-07-07T06:38:38.839Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Hakumat Aur PPP Mein Tanao) \\u2013 24th April 2019\",\n            \"slug\": \"ho-kya-raha-hai-hakumat-aur-ppp-mein-tanao-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.839Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76i1f3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/149339/ho-kya-raha-hai-hakumat-aur-ppp-mein-tanao-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2843,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:38.938Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:38.937Z\",\n            \"updated\": \"2019-07-07T06:38:38.938Z\",\n            \"extra_data\": {\n                \"host\": \"Arif Nizami, Asad Ullah Khan\",\n                \"job_id\": 164,\n                \"feed_id\": 37,\n                \"feed_name\": \"unewstv - Ho Kya Raha Hai\",\n                \"show_name\": \"Ho Kya Raha Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ho Kya Raha Hai (Imran Khan's Statement in Iran) \\u2013 23rd April 2019\",\n            \"slug\": \"ho-kya-raha-hai-imran-khans-statement-in-iran-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:38.938Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76f7xc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ho+Kya+Raha+Hai+on+92+News+HD\",\n            \"source_detail\": \"http://www.unewstv.com/149315/ho-kya-raha-hai-imran-khan-s-statement-in-iran-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 35,\n            \"tags\": \"[\\\"Arif Nizami, Asad Ullah Khan\\\", \\\"Ho Kya Raha Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2844,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.146Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.145Z\",\n            \"updated\": \"2019-07-07T06:38:39.146Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Kaun Kaun Pakra Jaye Ga) - 3rd July 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-kaun-kaun-pakra-jaye-ga-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.146Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/_KDVX0qTZaQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153478/khara-sach-with-mubashir-lucman-kaun-kaun-pakra-jaye-ga-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2845,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.184Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.184Z\",\n            \"updated\": \"2019-07-07T06:38:39.184Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Production Orders Issue) \\u2013 2nd July 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-production-orders-issue-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.184Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/nKuwoGvou3g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153404/khara-sach-with-mubashir-lucman-production-orders-issue-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2846,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.215Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.215Z\",\n            \"updated\": \"2019-07-07T06:38:39.215Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Sheikh Rasheed Exclusive Interview) \\u2013 1st July 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-sheikh-rasheed-exclusive-interview-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.215Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/eKenpQJojzo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153323/khara-sach-with-mubashir-lucman-sheikh-rasheed-exclusive-interview-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2847,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.265Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.265Z\",\n            \"updated\": \"2019-07-07T06:38:39.265Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach (Kia Pakistan Mein Kuch Acha Nahi Ho Raha?) \\u2013 28th June 2019\",\n            \"slug\": \"khara-sach-kia-pakistan-mein-kuch-acha-nahi-ho-raha-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.265Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/6eJe6Ds3Adg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153125/khara-sach-kia-pakistan-mein-kuch-acha-nahi-ho-raha-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2848,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.327Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.327Z\",\n            \"updated\": \"2019-07-07T06:38:39.327Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Dollar Uncontrolled) \\u2013 27th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-dollar-uncontrolled-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.327Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/oBwHM_4Ar1I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/153065/khara-sach-with-mubashir-lucman-dollar-uncontrolled-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2849,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.376Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.375Z\",\n            \"updated\": \"2019-07-07T06:38:39.376Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Who Will Be New Chairman Senate) \\u2013 26th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-who-will-be-new-chairman-senate-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.390Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/xN1e9G3lh9M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152999/khara-sach-with-mubashir-lucman-who-will-be-new-chairman-senate-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2850,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.418Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.418Z\",\n            \"updated\": \"2019-07-07T06:38:39.418Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Berozgari Mein Izafa) \\u2013 25th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-berozgari-mein-izafa-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.418Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/6q1jaJYQatY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152914/khara-sach-with-mubashir-lucman-berozgari-mein-izafa-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2851,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.474Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.474Z\",\n            \"updated\": \"2019-07-07T06:38:39.474Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (FBR's Online System Security) \\u2013 24th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-fbrs-online-system-security-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.474Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/f8C5VfJFfms\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152858/khara-sach-with-mubashir-lucman-fbr-s-online-system-security-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2852,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.503Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.503Z\",\n            \"updated\": \"2019-07-07T06:38:39.503Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Is Deal Being Done? \\u2013 21st June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-is-deal-being-done-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.503Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/EdPZs87TAYQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152666/khara-sach-with-mubashir-lucman-is-deal-being-done-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2853,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.549Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.548Z\",\n            \"updated\": \"2019-07-07T06:38:39.549Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Hakumat Khatre Mein) \\u2013 19th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-hakumat-khatre-mein-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.549Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/Q4nb1kBB8Rk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152532/khara-sach-with-mubashir-lucman-hakumat-khatre-mein-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2854,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.581Z\",\n            \"updated\": \"2019-07-07T06:38:39.582Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Budget Kaise Pass Hoga?) \\u2013 18th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-budget-kaise-pass-hoga-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.582Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/SlAY_FhSdfU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152458/khara-sach-with-mubashir-lucman-budget-kaise-pass-hoga-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2855,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.651Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.651Z\",\n            \"updated\": \"2019-07-07T06:38:39.651Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (What Is Democracy?) \\u2013 17th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-what-is-democracy-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.651Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/h2nkSS2P9is\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152423/khara-sach-with-mubashir-lucman-what-is-democracy-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2856,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.720Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.719Z\",\n            \"updated\": \"2019-07-07T06:38:39.720Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Dora Qanoon) \\u2013 14th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-dora-qanoon-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.720Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/zVXXEZPRZVo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152260/khara-sach-with-mubashir-lucman-dora-qanoon-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2857,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.857Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.856Z\",\n            \"updated\": \"2019-07-07T06:38:39.857Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.857Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/5W0KGKTQLEQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/152017/khara-sach-with-mubashir-lucman-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2858,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.917Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:39.916Z\",\n            \"updated\": \"2019-07-07T06:38:39.917Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Automobile Mafia) \\u2013 7th June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-automobile-mafia-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:39.917Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/UId80gg9D6A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151855/khara-sach-with-mubashir-lucman-automobile-mafia-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2859,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.095Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.076Z\",\n            \"updated\": \"2019-07-07T06:38:40.095Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Naya Pakistan Vs Purana Pakistan) \\u2013 3rd June 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-naya-pakistan-vs-purana-pakistan-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.095Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/sWu9K3Ai5Gw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151694/khara-sach-with-mubashir-lucman-naya-pakistan-vs-purana-pakistan-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2860,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.192Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.192Z\",\n            \"updated\": \"2019-07-07T06:38:40.192Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Education, A Business) \\u2013 31st May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-education-a-business-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.192Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/3wpT6Vy4Tp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151568/khara-sach-with-mubashir-lucman-education-a-business-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2861,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.271Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.271Z\",\n            \"updated\": \"2019-07-07T06:38:40.271Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Is NAB Above The Law) \\u2013 30th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-is-nab-above-the-law-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.272Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/rWkBJLyiaGk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151522/khara-sach-with-mubashir-lucman-is-nab-above-the-law-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2862,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.342Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.341Z\",\n            \"updated\": \"2019-07-07T06:38:40.342Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Siasi Mahool Garm) \\u2013 29th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-siasi-mahool-garm-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.342Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/SdMjdg6EmEw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151441/khara-sach-with-mubashir-lucman-siasi-mahool-garm-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2863,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.439Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.438Z\",\n            \"updated\": \"2019-07-07T06:38:40.439Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Eid Ka Masla) \\u2013 28th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-eid-ka-masla-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.439Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/1ODr8cZrX9E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151400/khara-sach-with-mubashir-lucman-eid-ka-masla-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2864,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.535Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.535Z\",\n            \"updated\": \"2019-07-07T06:38:40.535Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Interest Against Islam) \\u2013 24th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-interest-against-islam-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.535Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/Jn7ZDvd6Qpw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151182/khara-sach-with-mubashir-lucman-interest-against-islam-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2865,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.612Z\",\n            \"updated\": \"2019-07-07T06:38:40.612Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Ghazwa e Badr Ki Ahmiyat) \\u2013 23rd May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-ghazwa-e-badr-ki-ahmiyat-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.612Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/eDfJz-bdMq8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151137/khara-sach-with-mubashir-lucman-ghazwa-e-badr-ki-ahmiyat-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2866,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.652Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.651Z\",\n            \"updated\": \"2019-07-07T06:38:40.652Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Dollar Speed) \\u2013 21st May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-dollar-speed-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.652Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/ICM0enanIMI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/151014/khara-sach-with-mubashir-lucman-dollar-speed-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2867,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.696Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.695Z\",\n            \"updated\": \"2019-07-07T06:38:40.696Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Automobile  Mafia) \\u2013 17th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-automobile-mafia-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.696Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/hpbWvCt9BZs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150822/khara-sach-with-mubashir-lucman-automobile-mafia-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2868,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.725Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.725Z\",\n            \"updated\": \"2019-07-07T06:38:40.725Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Bureaucracy Ruling Pakistan) \\u2013 16th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-bureaucracy-ruling-pakistan-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.725Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/oo4E2iIroLM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150764/khara-sach-with-mubashir-lucman-bureaucracy-ruling-pakistan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2869,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.772Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.772Z\",\n            \"updated\": \"2019-07-07T06:38:40.772Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Increasing Aids in Sindh) \\u2013 15th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-increasing-aids-in-sindh-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.772Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/kKb_V_f_MUU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150695/khara-sach-with-mubashir-lucman-increasing-aids-in-sindh-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2870,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.814Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.814Z\",\n            \"updated\": \"2019-07-07T06:38:40.814Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Tax System) \\u2013 14th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-tax-system-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.814Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/YfC_cSjC79E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150613/khara-sach-with-mubashir-lucman-tax-system-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2871,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.854Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.853Z\",\n            \"updated\": \"2019-07-07T06:38:40.854Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Interest According to Islam) \\u2013 13th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-interest-according-to-islam-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.854Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/Jn7ZDvd6Qpw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150563/khara-sach-with-mubashir-lucman-interest-according-to-islam-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2872,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.885Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.885Z\",\n            \"updated\": \"2019-07-07T06:38:40.885Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Mehngai Mein Izafa) \\u2013 10th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-mehngai-mein-izafa-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.885Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/LDCIPyG9LoU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150410/khara-sach-with-mubashir-lucman-mehngai-mein-izafa-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2873,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.916Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.916Z\",\n            \"updated\": \"2019-07-07T06:38:40.916Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Mehngai Mein Izafa) \\u2013 9th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-mehngai-mein-izafa-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.916Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/nrahxgu0Z_M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150319/khara-sach-with-mubashir-lucman-mehngai-mein-izafa-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2874,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:40.980Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:40.979Z\",\n            \"updated\": \"2019-07-07T06:38:40.980Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (National Action Plan Failed?) \\u2013 8th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-national-action-plan-failed-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:40.980Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/DH7zyNjRoWs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150256/khara-sach-with-mubashir-lucman-national-action-plan-failed-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2875,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.017Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.016Z\",\n            \"updated\": \"2019-07-07T06:38:41.017Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Nawaz Sharif Ki Jail Wapsi) \\u2013 7th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.017Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/fKuhdhEpEXg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150192/khara-sach-with-mubashir-lucman-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2876,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.063Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.062Z\",\n            \"updated\": \"2019-07-07T06:38:41.063Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (New Local Body System) \\u2013 6th May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-new-local-body-system-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.063Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/W2dMTtvmo1w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/150126/khara-sach-with-mubashir-lucman-new-local-body-system-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2877,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.097Z\",\n            \"updated\": \"2019-07-07T06:38:41.098Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Kia Deal Ho Gai) \\u2013 2nd May 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-kia-deal-ho-gai-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.098Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/6lkopnkVtKQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149872/khara-sach-with-mubashir-lucman-kia-deal-ho-gai-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2878,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.138Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.131Z\",\n            \"updated\": \"2019-07-07T06:38:41.138Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Where Is PTI Youth) \\u2013 1st April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-where-is-pti-youth-1st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.138Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/QrGJ-Bekz6k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149811/khara-sach-with-mubashir-lucman-where-is-pti-youth-1st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2879,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.181Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.181Z\",\n            \"updated\": \"2019-07-07T06:38:41.181Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Mehngi Bijli) \\u2013 30th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-mehngi-bijli-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.181Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/AJeyUaGTeBk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149729/khara-sach-with-mubashir-lucman-mehngi-bijli-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2880,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.213Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.213Z\",\n            \"updated\": \"2019-07-07T06:38:41.213Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Ali Zafar In Trouble?) \\u2013 29th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-ali-zafar-in-trouble-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.213Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/0K8NG4pYL3s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149658/khara-sach-with-mubashir-lucman-ali-zafar-in-trouble-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2881,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.279Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.279Z\",\n            \"updated\": \"2019-07-07T06:38:41.279Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Khalid Maqbool Siddiqui Exclusive) \\u2013 26th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-khalid-maqbool-siddiqui-exclusive-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.279Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/YvIxxEnUz9A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149488/khara-sach-with-mubashir-lucman-khalid-maqbool-siddiqui-exclusive-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2882,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.307Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.306Z\",\n            \"updated\": \"2019-07-07T06:38:41.307Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Taqdeer Kia Hai) REPEAT \\u2013 25th April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-taqdeer-kia-hai-repeat-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.307Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/6Y_hHqJ2F0I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149414/khara-sach-with-mubashir-lucman-taqdeer-kia-hai-repeat-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2883,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.341Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.341Z\",\n            \"updated\": \"2019-07-07T06:38:41.341Z\",\n            \"extra_data\": {\n                \"host\": \"Mubashir Lucman\",\n                \"job_id\": 152,\n                \"feed_id\": 24,\n                \"feed_name\": \"unewstv - Khara Sach\",\n                \"show_name\": \"Khara Sach\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Khara Sach With Mubashir Lucman (Why Ch. Sarwar Unhappy) \\u2013 24 April 2019\",\n            \"slug\": \"khara-sach-with-mubashir-lucman-why-ch-sarwar-unhappy-24-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.341Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/v0eW3bZT7i8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Khara+Sach+with+Mubasher+Luqman\",\n            \"source_detail\": \"http://www.unewstv.com/149356/khara-sach-with-mubashir-lucman-why-ch-sarwar-unhappy-24-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 22,\n            \"tags\": \"[\\\"Mubashir Lucman\\\", \\\"Khara Sach\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": true,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2884,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.523Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.520Z\",\n            \"updated\": \"2019-07-07T06:38:41.523Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Maryam Nawaz Press Conference) - 6th July 2019\",\n            \"slug\": \"breaking-point-with-malick-maryam-nawaz-press-conference-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.523Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/gdhpKmJoiN4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153643/breaking-point-with-malick-maryam-nawaz-press-conference-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2885,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.548Z\",\n            \"updated\": \"2019-07-07T06:38:41.548Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (What After Amnesty Scheme?) - 5th July 2019\",\n            \"slug\": \"breaking-point-with-malick-what-after-amnesty-scheme-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.548Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/i0mwKqQW0mU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153579/breaking-point-with-malick-what-after-amnesty-scheme-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2886,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.595Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.595Z\",\n            \"updated\": \"2019-07-07T06:38:41.595Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Consultancy Contract Mein Arbon Ka Izafa) - 30th June 2019\",\n            \"slug\": \"breaking-point-with-malick-consultancy-contract-mein-arbon-ka-izafa-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.595Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/q2XkQnjO9yU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153224/breaking-point-with-malick-consultancy-contract-mein-arbon-ka-izafa-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2887,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.663Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.663Z\",\n            \"updated\": \"2019-07-07T06:38:41.663Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (APC Se Kia Nikla?) - 29th June 2019\",\n            \"slug\": \"breaking-point-with-malick-apc-se-kia-nikla-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.663Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/kJeRZ0Hq1mk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153163/breaking-point-with-malick-apc-se-kia-nikla-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2888,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.734Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.733Z\",\n            \"updated\": \"2019-07-07T06:38:41.734Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Army's Seminar on Economy) - 28th June 2019\",\n            \"slug\": \"breaking-point-with-malick-armys-seminar-on-economy-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.734Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/rDG8alK4fOQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/153098/breaking-point-with-malick-army-s-seminar-on-economy-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2889,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.801Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.800Z\",\n            \"updated\": \"2019-07-07T06:38:41.801Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Asad Umar Exclusive) [REPEAT] - 23rd June 2019\",\n            \"slug\": \"breaking-point-with-malick-asad-umar-exclusive-repeat-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.801Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/OMioAstuvfk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152760/breaking-point-with-malick-asad-umar-exclusive-repeat-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2890,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.891Z\",\n            \"updated\": \"2019-07-07T06:38:41.892Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Maryam Nawaz Ki Nayi Tone) - 22nd June 2019\",\n            \"slug\": \"breaking-point-with-malick-maryam-nawaz-ki-nayi-tone-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:41.892Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/mHUKPYl2ns8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152702/breaking-point-with-malick-maryam-nawaz-ki-nayi-tone-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2891,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.989Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:41.989Z\",\n            \"updated\": \"2019-07-07T06:38:42.009Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Asad Umar Exclusive Interview) - 21st June 2019\",\n            \"slug\": \"breaking-point-with-malick-asad-umar-exclusive-interview-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:42.010Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/Qp3CBST_wwI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152631/breaking-point-with-malick-asad-umar-exclusive-interview-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2892,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:42.176Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:42.176Z\",\n            \"updated\": \"2019-07-07T06:38:42.176Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (Pakistan's Economic Condition) - 16th June 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economic-condition-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:42.176Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/jjkSpLCnSNQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152330/breaking-point-with-malick-pakistan-s-economic-condition-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2893,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:42.527Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:42.422Z\",\n            \"updated\": \"2019-07-07T06:38:42.527Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (PTI Hakumat Ki Policies) - 15th June 2019\",\n            \"slug\": \"breaking-point-with-malick-pti-hakumat-ki-policies-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:42.527Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/Uc9TGiwttNY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152282/breaking-point-with-malick-pti-hakumat-ki-policies-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2894,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:42.732Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:42.732Z\",\n            \"updated\": \"2019-07-07T06:38:42.732Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (What Is Going On With Govt) - 14th June 2019\",\n            \"slug\": \"breaking-point-with-malick-what-is-going-on-with-govt-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:42.732Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/3juSYyDH3hQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/152224/breaking-point-with-malick-what-is-going-on-with-govt-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2895,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:42.828Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:42.828Z\",\n            \"updated\": \"2019-07-07T06:38:42.828Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Challenges For Govt) - 9th June 2019\",\n            \"slug\": \"breaking-point-with-malick-challenges-for-govt-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:42.828Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/mj8MRZCEIjQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151927/breaking-point-with-malick-challenges-for-govt-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2896,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:42.976Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:42.976Z\",\n            \"updated\": \"2019-07-07T06:38:42.976Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Kia Judges Muqadas Gaye Hain) - 8th June 2019\",\n            \"slug\": \"breaking-point-with-malick-kia-judges-muqadas-gaye-hain-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:42.976Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/ru9VWigC7TU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151874/breaking-point-with-malick-kia-judges-muqadas-gaye-hain-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2897,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.102Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.101Z\",\n            \"updated\": \"2019-07-07T06:38:43.102Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (How Economy Can Be Improved) - 7th June 2019\",\n            \"slug\": \"breaking-point-with-malick-how-economy-can-be-improved-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.102Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/O3y-XEuEJBc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151829/breaking-point-with-malick-how-economy-can-be-improved-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2898,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.169Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.168Z\",\n            \"updated\": \"2019-07-07T06:38:43.169Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Reference Against Judges) - 2nd June 2019\",\n            \"slug\": \"breaking-point-with-malick-reference-against-judges-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.169Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/GrmMTGOsD-E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151645/breaking-point-with-malick-reference-against-judges-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2899,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.217Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.217Z\",\n            \"updated\": \"2019-07-07T06:38:43.217Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Reference Against Judges) \\u2013 1st June 2019\",\n            \"slug\": \"breaking-point-with-malick-reference-against-judges-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.217Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/rFdF805Q0JA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151601/breaking-point-with-malick-reference-against-judges-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2900,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.279Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.279Z\",\n            \"updated\": \"2019-07-07T06:38:43.279Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Kia Hakumat Chal Paye Gi) - 31st May 2019\",\n            \"slug\": \"breaking-point-with-malick-kia-hakumat-chal-paye-gi-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.279Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/KCLmHbOVG28\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151546/breaking-point-with-malick-kia-hakumat-chal-paye-gi-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2901,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.306Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.306Z\",\n            \"updated\": \"2019-07-07T06:38:43.306Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan's Economic Situation) - 26th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economic-situation-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.306Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/P8oDt_s8rL8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151280/breaking-point-with-malick-pakistan-s-economic-situation-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2902,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.339Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.339Z\",\n            \"updated\": \"2019-07-07T06:38:43.339Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan's Economic Situation) - 25th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economic-situation-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.339Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/PO0SMUeOjwc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151227/breaking-point-with-malick-pakistan-s-economic-situation-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2903,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.376Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.376Z\",\n            \"updated\": \"2019-07-07T06:38:43.376Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Chairman NAB Scandal) - 24th May 2019\",\n            \"slug\": \"breaking-point-with-malick-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.376Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/2qoO0jNpDsk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/151168/breaking-point-with-malick-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2904,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.413Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.413Z\",\n            \"updated\": \"2019-07-07T06:38:43.413Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Bilawal Maryam Iftar Dinner) - 19th May 2019\",\n            \"slug\": \"breaking-point-with-malick-bilawal-maryam-iftar-dinner-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.413Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/O0_51hUVLPM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150902/breaking-point-with-malick-bilawal-maryam-iftar-dinner-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2905,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.482Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.482Z\",\n            \"updated\": \"2019-07-07T06:38:43.482Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Economy, Inflation, FBR) - 18th May 2019\",\n            \"slug\": \"breaking-point-with-malick-economy-inflation-fbr-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.483Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/bu2xHQJ7NZA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150848/breaking-point-with-malick-economy-inflation-fbr-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2906,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.513Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.513Z\",\n            \"updated\": \"2019-07-07T06:38:43.513Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Will Govt Complete Its Tenure?) - 17th May 2019\",\n            \"slug\": \"breaking-point-with-malick-will-govt-complete-its-tenure-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.513Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/GtlvDclZA4Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150792/breaking-point-with-malick-will-govt-complete-its-tenure-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2907,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.553Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.553Z\",\n            \"updated\": \"2019-07-07T06:38:43.553Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (Additional Payments to IPPs) - 12th May 2019\",\n            \"slug\": \"breaking-point-with-malick-additional-payments-to-ipps-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.553Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/-XmQZlpG-1c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150474/breaking-point-with-malick-additional-payments-to-ipps-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2908,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.583Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.583Z\",\n            \"updated\": \"2019-07-07T06:38:43.584Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan's Economy, Other Issues) - 11th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistans-economy-other-issues-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.584Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/P_MqNsOo-1g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150419/breaking-point-with-malick-pakistan-s-economy-other-issues-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2909,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.612Z\",\n            \"updated\": \"2019-07-07T06:38:43.612Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (IMF, Economy, Taxes, Other Issues) - 10th May 2019\",\n            \"slug\": \"breaking-point-with-malick-imf-economy-taxes-other-issues-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.612Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/Vl8LGKqSYbM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150374/breaking-point-with-malick-imf-economy-taxes-other-issues-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2910,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.660Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.660Z\",\n            \"updated\": \"2019-07-07T06:38:43.660Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan Mein Ho Kia Raha Hai) - 5th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistan-mein-ho-kia-raha-hai-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.661Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/C83K2ncKvwE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/150032/breaking-point-with-malick-pakistan-mein-ho-kia-raha-hai-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2911,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.688Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.688Z\",\n            \"updated\": \"2019-07-07T06:38:43.688Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Pakistan Ka Muashi Bohran) - 4th May 2019\",\n            \"slug\": \"breaking-point-with-malick-pakistan-ka-muashi-bohran-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.688Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/Ph3eMLmu0IY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149966/breaking-point-with-malick-pakistan-ka-muashi-bohran-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2912,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.729Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.722Z\",\n            \"updated\": \"2019-07-07T06:38:43.729Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Sharif Family's Future) - 3rd May 2019\",\n            \"slug\": \"breaking-point-with-malick-sharif-familys-future-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.729Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/Ptc6acGHTLY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149912/breaking-point-with-malick-sharif-family-s-future-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2913,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.775Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.774Z\",\n            \"updated\": \"2019-07-07T06:38:43.775Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (MQM Demands Two Provinces) - 28th April 2019\",\n            \"slug\": \"breaking-point-with-malick-mqm-demands-two-provinces-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.775Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/BZMxEVrTkK8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149575/breaking-point-with-malick-mqm-demands-two-provinces-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2914,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.805Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.805Z\",\n            \"updated\": \"2019-07-07T06:38:43.805Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Corruption Ki Jang Kaun Jeete Ga) - 27th April 2019\",\n            \"slug\": \"breaking-point-with-malick-corruption-ki-jang-kaun-jeete-ga-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.805Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"https://www.youtube.com/watch/SN26wZMKobo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149517/breaking-point-with-malick-corruption-ki-jang-kaun-jeete-ga-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2915,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.844Z\",\n            \"updated\": \"2019-07-07T06:38:43.845Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Nawaz Sharif, Zardari, Other Issues) - 26th April 2019\",\n            \"slug\": \"breaking-point-with-malick-nawaz-sharif-zardari-other-issues-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.845Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/8Rzhw2mmXz4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149482/breaking-point-with-malick-nawaz-sharif-zardari-other-issues-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2916,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:43.936Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:43.936Z\",\n            \"updated\": \"2019-07-07T06:38:43.936Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (Wukla Gardi Phir Urooj Per) - 21st April 2019\",\n            \"slug\": \"breaking-point-with-malick-wukla-gardi-phir-urooj-per-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:43.936Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"https://www.youtube.com/watch/2bbcVunswOA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149167/breaking-point-with-malick-wukla-gardi-phir-urooj-per-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2917,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.006Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.004Z\",\n            \"updated\": \"2019-07-07T06:38:44.006Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Will New Finance Minister Improve Economy) - 20th April 2019\",\n            \"slug\": \"breaking-point-with-malick-will-new-finance-minister-improve-economy-20th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.006Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"https://www.youtube.com/watch/VNzugmb2HYs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149118/breaking-point-with-malick-will-new-finance-minister-improve-economy-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2918,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.064Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.064Z\",\n            \"updated\": \"2019-07-07T06:38:44.064Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Big Changes in PTI Govt) \\u2013 19th April 2019\",\n            \"slug\": \"breaking-point-with-malick-big-changes-in-pti-govt-19th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.064Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"https://www.youtube.com/watch/u8mNrEQRc8E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/149059/breaking-point-with-malick-big-changes-in-pti-govt-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2919,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.095Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.094Z\",\n            \"updated\": \"2019-07-07T06:38:44.095Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Is Supreme Court Making Law?) - 14th April 2019\",\n            \"slug\": \"breaking-point-with-malick-is-supreme-court-making-law-14th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.095Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/UfCoEJ8iGRA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148775/breaking-point-with-malick-is-supreme-court-making-law-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2920,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.125Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.125Z\",\n            \"updated\": \"2019-07-07T06:38:44.125Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Shahbaz Sharif's Family Summoned By NAB) - 13th April 2019\",\n            \"slug\": \"breaking-point-with-malick-shahbaz-sharifs-family-summoned-by-nab-13th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.125Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"https://www.youtube.com/watch/OyugWH63k9o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148728/breaking-point-with-malick-shahbaz-sharif-s-family-summoned-by-nab-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2921,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.214Z\",\n            \"updated\": \"2019-07-07T06:38:44.214Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Questions Arising on Punjab Courts) - 12th April 2019\",\n            \"slug\": \"breaking-point-with-malick-questions-arising-on-punjab-courts-12th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.214Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"https://www.youtube.com/watch/Rw6w-3lAKA8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148674/breaking-point-with-malick-questions-arising-on-punjab-courts-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2922,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.264Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.263Z\",\n            \"updated\": \"2019-07-07T06:38:44.264Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point with Malick (Conflict of Interest) - 7th April 2019\",\n            \"slug\": \"breaking-point-with-malick-conflict-of-interest-7th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.281Z\",\n            \"target_date\": \"2019-04-08\",\n            \"text\": \"https://www.youtube.com/watch/haIeiISYHok\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148413/breaking-point-with-malick-conflict-of-interest-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2923,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.380Z\",\n            \"updated\": \"2019-07-07T06:38:44.380Z\",\n            \"extra_data\": {\n                \"host\": \"M. malick\",\n                \"job_id\": 158,\n                \"feed_id\": 31,\n                \"feed_name\": \"unewstv - Breaking Point with Malick\",\n                \"show_name\": \"Breaking Point with Malick\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Breaking Point With Malick (NAB's Raid At Hamza Shahbaz Residence) - 6th April 2019\",\n            \"slug\": \"breaking-point-with-malick-nabs-raid-at-hamza-shahbaz-residence-6th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.380Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"https://www.youtube.com/watch/xTEv6cwpIO8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Breaking+Point+with+Malick\",\n            \"source_detail\": \"http://www.unewstv.com/148364/breaking-point-with-malick-nab-s-raid-at-hamza-shahbaz-residence-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 29,\n            \"tags\": \"[\\\"M. malick\\\", \\\"Breaking Point with Malick\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2924,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.784Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.784Z\",\n            \"updated\": \"2019-07-07T06:38:44.784Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Benami Assets Being Confiscated) \\u2013 3rd July 2019\",\n            \"slug\": \"off-the-record-benami-assets-being-confiscated-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.784Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfsjj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153451/off-the-record-benami-assets-being-confiscated-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2925,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.881Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.881Z\",\n            \"updated\": \"2019-07-07T06:38:44.881Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Rana Sanauallah, Imran Khan Ki Opposition Ko Offer) \\u2013 2nd July 2019\",\n            \"slug\": \"off-the-record-rana-sanauallah-imran-khan-ki-opposition-ko-offer-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.881Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd6re\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153382/off-the-record-rana-sanauallah-imran-khan-ki-opposition-ko-offer-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2926,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.988Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:44.988Z\",\n            \"updated\": \"2019-07-07T06:38:44.988Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (All Parties Conference, Inflation) - 27th June 2019\",\n            \"slug\": \"off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:44.988Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0nyh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153037/off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2927,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.076Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.075Z\",\n            \"updated\": \"2019-07-07T06:38:45.076Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (APC Ne Kia Hasil Kia?) \\u2013 26th June 2019\",\n            \"slug\": \"off-the-record-apc-ne-kia-hasil-kia-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.076Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxz7c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152973/off-the-record-apc-ne-kia-hasil-kia-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2928,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.180Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.180Z\",\n            \"updated\": \"2019-07-07T06:38:45.180Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Misaq e Maeeshat Kia Hai) \\u2013 25th June 2019\",\n            \"slug\": \"off-the-record-misaq-e-maeeshat-kia-hai-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.180Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvc9b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152900/off-the-record-misaq-e-maeeshat-kia-hai-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2929,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.287Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.287Z\",\n            \"updated\": \"2019-07-07T06:38:45.287Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Aur Hakumat Mein Mahaz Arai) - 24th June 2019\",\n            \"slug\": \"off-the-record-opposition-aur-hakumat-mein-mahaz-arai-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.287Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt3no\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152839/off-the-record-opposition-aur-hakumat-mein-mahaz-arai-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2930,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.356Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.356Z\",\n            \"updated\": \"2019-07-07T06:38:45.356Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Hakumat Aur Opposition Mein Mahaz Aarai) - 20th June 2019\",\n            \"slug\": \"off-the-record-hakumat-aur-opposition-mein-mahaz-aarai-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.356Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl9pi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152578/off-the-record-hakumat-aur-opposition-mein-mahaz-aarai-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2931,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.402Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.402Z\",\n            \"updated\": \"2019-07-07T06:38:45.406Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Rejects Budget) \\u2013 19th June 2019\",\n            \"slug\": \"off-the-record-opposition-rejects-budget-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.406Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjkoc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152511/off-the-record-opposition-rejects-budget-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2932,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.462Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.462Z\",\n            \"updated\": \"2019-07-07T06:38:45.462Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Qaumi Assembly Mein Hungama) - 18th June 2019\",\n            \"slug\": \"off-the-record-qaumi-assembly-mein-hungama-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.462Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhuqm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152454/off-the-record-qaumi-assembly-mein-hungama-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2933,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.494Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.494Z\",\n            \"updated\": \"2019-07-07T06:38:45.500Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Qaumi Assembly Ka Ijlas) - 17th June 2019\",\n            \"slug\": \"off-the-record-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.500Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgf3b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152395/off-the-record-qaumi-assembly-ka-ijlas-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2934,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.528Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.528Z\",\n            \"updated\": \"2019-07-07T06:38:45.528Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Leaders Ki Giraftari) - 13th June 2019\",\n            \"slug\": \"off-the-record-opposition-leaders-ki-giraftari-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.529Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2c8f\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152177/off-the-record-opposition-leaders-ki-giraftari-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2935,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.572Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.572Z\",\n            \"updated\": \"2019-07-07T06:38:45.572Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (24000 Billion Debt in 10 Years?) - 12th June 2019\",\n            \"slug\": \"off-the-record-24000-billion-debt-in-10-years-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.573Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay5iu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152124/off-the-record-24000-billion-debt-in-10-years-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2936,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.607Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.606Z\",\n            \"updated\": \"2019-07-07T06:38:45.607Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Hamza Shahbaz Arrested) \\u2013 11th June 2019\",\n            \"slug\": \"off-the-record-hamza-shahbaz-arrested-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.607Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aty9b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152064/off-the-record-hamza-shahbaz-arrested-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2937,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.655Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.655Z\",\n            \"updated\": \"2019-07-07T06:38:45.656Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Asif Zardari Arrested) - 10th June 2019\",\n            \"slug\": \"off-the-record-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.656Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqy9e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152026/off-the-record-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2938,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.695Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.694Z\",\n            \"updated\": \"2019-07-07T06:38:45.695Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Second Day Eid Special) \\u2013 6th June 2019\",\n            \"slug\": \"off-the-record-second-day-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.695Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7afc8d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151813/off-the-record-second-day-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2939,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.743Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.743Z\",\n            \"updated\": \"2019-07-07T06:38:45.743Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Day One Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"off-the-record-day-one-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.743Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7acc23\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151780/off-the-record-day-one-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2940,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.780Z\",\n            \"updated\": \"2019-07-07T06:38:45.785Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Maryam Nawaz in Action, Shahbaz Sharif Silent) - 4th June 2019\",\n            \"slug\": \"off-the-record-maryam-nawaz-in-action-shahbaz-sharif-silent-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.785Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7a98un\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151723/off-the-record-maryam-nawaz-in-action-shahbaz-sharif-silent-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2941,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.826Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.826Z\",\n            \"updated\": \"2019-07-07T06:38:45.826Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (PMLN Politics Vs PTI Politics) \\u2013 3rd June 2019\",\n            \"slug\": \"off-the-record-pmln-politics-vs-pti-politics-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.826Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a67zt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151699/off-the-record-pmln-politics-vs-pti-politics-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2942,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.870Z\",\n            \"updated\": \"2019-07-07T06:38:45.870Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Adlia Bachao Tehreek Ka Elan) - 30th May 2019\",\n            \"slug\": \"off-the-record-adlia-bachao-tehreek-ka-elan-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.870Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79td7b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151491/off-the-record-adlia-bachao-tehreek-ka-elan-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2943,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.906Z\",\n            \"updated\": \"2019-07-07T06:38:45.907Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Opposition Giving Tough Time to Govt) - 29th May 2019\",\n            \"slug\": \"off-the-record-opposition-giving-tough-time-to-govt-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.907Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79q01u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151429/off-the-record-opposition-giving-tough-time-to-govt-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2944,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.947Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.947Z\",\n            \"updated\": \"2019-07-07T06:38:45.947Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Kia Nawaz Sharif Atomi Dhamakon Ki Waja Se Jail Mein) -28th May 2019\",\n            \"slug\": \"off-the-record-kia-nawaz-sharif-atomi-dhamakon-ki-waja-se-jail-mein-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.947Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mbud\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151385/off-the-record-kia-nawaz-sharif-atomi-dhamakon-ki-waja-se-jail-mein-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2945,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:45.997Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:45.997Z\",\n            \"updated\": \"2019-07-07T06:38:45.998Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Issue of Chairman NAB's Leaked Video) - 27th May 2019\",\n            \"slug\": \"off-the-record-issue-of-chairman-nabs-leaked-video-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:45.998Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79ifyp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151341/off-the-record-issue-of-chairman-nab-s-leaked-video-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2946,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.061Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.061Z\",\n            \"updated\": \"2019-07-07T06:38:46.061Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Ab Vote Ko Izzat Do Plus Hoga - Nawaz Sharif) - 23rd May 2019\",\n            \"slug\": \"off-the-record-ab-vote-ko-izzat-do-plus-hoga-nawaz-sharif-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.061Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x795f5n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151113/off-the-record-ab-vote-ko-izzat-do-plus-hoga-nawaz-sharif-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2947,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.099Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.099Z\",\n            \"updated\": \"2019-07-07T06:38:46.100Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Maryam Nawaz Ki Hakumat Per Tanqeed) - 22nd May 2019\",\n            \"slug\": \"off-the-record-maryam-nawaz-ki-hakumat-per-tanqeed-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.100Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x791sps\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151058/off-the-record-maryam-nawaz-ki-hakumat-per-tanqeed-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2948,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.152Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.152Z\",\n            \"updated\": \"2019-07-07T06:38:46.153Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Chairman NAB Interview to Javed Chaudhry) - 21st May 2019\",\n            \"slug\": \"off-the-record-chairman-nab-interview-to-javed-chaudhry-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.153Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y9n7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150998/off-the-record-chairman-nab-interview-to-javed-chaudhry-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2949,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.193Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.193Z\",\n            \"updated\": \"2019-07-07T06:38:46.193Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Kia Opposition Eid Ke Baad Tehreek Chalaye Gi) - 20th May 2019\",\n            \"slug\": \"off-the-record-kia-opposition-eid-ke-baad-tehreek-chalaye-gi-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.193Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ulg4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150947/off-the-record-kia-opposition-eid-ke-baad-tehreek-chalaye-gi-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2950,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.255Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.254Z\",\n            \"updated\": \"2019-07-07T06:38:46.255Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Dollar Rate Increased, Opposition Ready on Protest) - 16th May 2019\",\n            \"slug\": \"off-the-record-dollar-rate-increased-opposition-ready-on-protest-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.255Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hnrm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150736/off-the-record-dollar-rate-increased-opposition-ready-on-protest-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2951,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.345Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.344Z\",\n            \"updated\": \"2019-07-07T06:38:46.345Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Will Govt Complete Its Tenure?) - 15th May 2019\",\n            \"slug\": \"off-the-record-will-govt-complete-its-tenure-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.345Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ekj3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150661/off-the-record-will-govt-complete-its-tenure-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2952,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.432Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.432Z\",\n            \"updated\": \"2019-07-07T06:38:46.432Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (PTI Govt Tax Amnesty Scheme) - 14th May 2019\",\n            \"slug\": \"off-the-record-pti-govt-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.432Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bayu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150598/off-the-record-pti-govt-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2953,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.491Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.490Z\",\n            \"updated\": \"2019-07-07T06:38:46.491Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (IMF Package, Opposition Objections) - 13th May 2019\",\n            \"slug\": \"off-the-record-imf-package-opposition-objections-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.491Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787vpe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150551/off-the-record-imf-package-opposition-objections-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2954,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.572Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.572Z\",\n            \"updated\": \"2019-07-07T06:38:46.572Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Assembly Mein Opposition Ka Hungama) - 9th May 2019\",\n            \"slug\": \"off-the-record-assembly-mein-opposition-ka-hungama-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.572Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77v3x8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150297/off-the-record-assembly-mein-opposition-ka-hungama-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2955,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.706Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.706Z\",\n            \"updated\": \"2019-07-07T06:38:46.707Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Mushahid Ullah Khan Exclusive Interview) - 8th May 2019\",\n            \"slug\": \"off-the-record-mushahid-ullah-khan-exclusive-interview-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.707Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rg60\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150231/off-the-record-mushahid-ullah-khan-exclusive-interview-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2956,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.768Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.768Z\",\n            \"updated\": \"2019-07-07T06:38:46.768Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Nawaz Sharif Ki Jail Wapis Rawangi) - 7th May 2019\",\n            \"slug\": \"off-the-record-nawaz-sharif-ki-jail-wapis-rawangi-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.768Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77obxw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150165/off-the-record-nawaz-sharif-ki-jail-wapis-rawangi-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2957,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:46.878Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:46.858Z\",\n            \"updated\": \"2019-07-07T06:38:46.878Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (IMF, Mehngai, Opposition) - 6th May 2019\",\n            \"slug\": \"off-the-record-imf-mehngai-opposition-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:46.878Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77klqa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150097/off-the-record-imf-mehngai-opposition-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2958,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:47.044Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:47.044Z\",\n            \"updated\": \"2019-07-07T06:38:47.044Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Shahbaz Sharif London Se Wapis Kab Ayein Ge?) - 2nd May 2019\",\n            \"slug\": \"off-the-record-shahbaz-sharif-london-se-wapis-kab-ayein-ge-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:47.044Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x777yny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149845/off-the-record-shahbaz-sharif-london-se-wapis-kab-ayein-ge-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2959,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:47.133Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:47.132Z\",\n            \"updated\": \"2019-07-07T06:38:47.133Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (PTI Ke 23 Saal, Imran Khan Ki Hakumat) - 1st May 2019\",\n            \"slug\": \"off-the-record-pti-ke-23-saal-imran-khan-ki-hakumat-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:47.133Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774smq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149781/off-the-record-pti-ke-23-saal-imran-khan-ki-hakumat-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2960,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:47.426Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:47.319Z\",\n            \"updated\": \"2019-07-07T06:38:47.426Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Kia Muashi Badhali Ka Zimmedar NAB?) - 30th April 2019\",\n            \"slug\": \"off-the-record-kia-muashi-badhali-ka-zimmedar-nab-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:47.426Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771rjx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149704/off-the-record-kia-muashi-badhali-ka-zimmedar-nab-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2961,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:47.817Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:47.816Z\",\n            \"updated\": \"2019-07-07T06:38:47.817Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (DG ISPR Press Conference) - 29th April 2019\",\n            \"slug\": \"off-the-record-dg-ispr-press-conference-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:47.817Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xxn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149638/off-the-record-dg-ispr-press-conference-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2962,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:47.866Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:47.865Z\",\n            \"updated\": \"2019-07-07T06:38:47.866Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Nawaz Sharif Want to Go Abroad?) - 25th April 2019\",\n            \"slug\": \"off-the-record-nawaz-sharif-want-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:47.866Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l9wb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149406/off-the-record-nawaz-sharif-want-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2963,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:47.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:47.906Z\",\n            \"updated\": \"2019-07-07T06:38:47.906Z\",\n            \"extra_data\": {\n                \"host\": \"Kashif Abbasi\",\n                \"job_id\": 138,\n                \"feed_id\": 10,\n                \"feed_name\": \"unewstv - Off The Record\",\n                \"show_name\": \"Off The Record\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Off The Record (Bilawal Sahiba, Kia PM Ki Zaban Phisal Gai) - 24th April 2019\",\n            \"slug\": \"off-the-record-bilawal-sahiba-kia-pm-ki-zaban-phisal-gai-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:47.906Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76i4td\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149342/off-the-record-bilawal-sahiba-kia-pm-ki-zaban-phisal-gai-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 8,\n            \"tags\": \"[\\\"Kashif Abbasi\\\", \\\"Off The Record\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2964,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.135Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.135Z\",\n            \"updated\": \"2019-07-07T06:38:48.135Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Rana Sanaullah Ka Khel Khatam?) \\u2013 4th July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-rana-sanaullah-ka-khel-khatam-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.135Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/m3-_0wAdXNI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153542/kal-tak-with-javed-chaudhry-rana-sanaullah-ka-khel-khatam-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2965,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.179Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.178Z\",\n            \"updated\": \"2019-07-07T06:38:48.179Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Accountability Process) \\u2013 3rd July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-accountability-process-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.179Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/5-6oVAc9TpA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153477/kal-tak-with-javed-chaudhry-accountability-process-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2966,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.222Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.222Z\",\n            \"updated\": \"2019-07-07T06:38:48.223Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Imran Khan's Big Announcement) \\u2013 2nd July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-imran-khans-big-announcement-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.223Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/bixypPknVec\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153391/kal-tak-with-javed-chaudhry-imran-khan-s-big-announcement-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2967,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.264Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.263Z\",\n            \"updated\": \"2019-07-07T06:38:48.264Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (PMLN Mein Cracks) \\u2013 1st July 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-pmln-mein-cracks-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.264Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/Kl1433b1K9M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153321/kal-tak-with-javed-chaudhry-pmln-mein-cracks-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2968,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.293Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.293Z\",\n            \"updated\": \"2019-07-07T06:38:48.293Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Qaumi Assembly Ka Ijlas) \\u2013 27th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-qaumi-assembly-ka-ijlas-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.293Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/1at-IJfMldU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/153059/kal-tak-with-javed-chaudhry-qaumi-assembly-ka-ijlas-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2969,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.328Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.328Z\",\n            \"updated\": \"2019-07-07T06:38:48.328Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (All Parties Conference) \\u2013 26th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.328Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/HJn5L05nJVU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152992/kal-tak-with-javed-chaudhry-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2970,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.375Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.374Z\",\n            \"updated\": \"2019-07-07T06:38:48.375Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Tax Amnesty Scheme) \\u2013 25th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-tax-amnesty-scheme-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.375Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/Re2Ap3F9T-k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152912/kal-tak-with-javed-chaudhry-tax-amnesty-scheme-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2971,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.409Z\",\n            \"updated\": \"2019-07-07T06:38:48.410Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Kia Deal Ho Gai?) \\u2013 24th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-kia-deal-ho-gai-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.410Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/WkLoXQ4Fj40\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152845/kal-tak-with-javed-chaudhry-kia-deal-ho-gai-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2972,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.459Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.459Z\",\n            \"updated\": \"2019-07-07T06:38:48.459Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Asad Umar's Criticism on His Govt) \\u2013 20th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-asad-umars-criticism-on-his-govt-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.460Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/UIcWRz-IFG0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152595/kal-tak-with-javed-chaudhry-asad-umar-s-criticism-on-his-govt-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2973,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.503Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.503Z\",\n            \"updated\": \"2019-07-07T06:38:48.503Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Fazal ur Rehman Kia Chahte Hain) \\u2013 19th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-fazal-ur-rehman-kia-chahte-hain-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.503Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/beuuXHWuM24\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152525/kal-tak-with-javed-chaudhry-fazal-ur-rehman-kia-chahte-hain-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2974,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.530Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.530Z\",\n            \"updated\": \"2019-07-07T06:38:48.530Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Govt Vs Opposition) \\u2013 18th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-govt-vs-opposition-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.530Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/zMh70sOmDc4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152459/kal-tak-with-javed-chaudhry-govt-vs-opposition-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2975,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.580Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.580Z\",\n            \"updated\": \"2019-07-07T06:38:48.580Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Reference Against Judges) \\u2013 13th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-reference-against-judges-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.580Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/uJyH0YR24DE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152194/kal-tak-with-javed-chaudhry-reference-against-judges-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2976,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.606Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.606Z\",\n            \"updated\": \"2019-07-07T06:38:48.607Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (PM Khan's Aggressive Speech) \\u2013 12th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-pm-khans-aggressive-speech-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.607Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/YisqAkglsqg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152137/kal-tak-with-javed-chaudhry-pm-khan-s-aggressive-speech-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2977,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.661Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.660Z\",\n            \"updated\": \"2019-07-07T06:38:48.661Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Asif Zardari Ki Giraftari) \\u201310th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.661Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/QXI2yJCwpZs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/152016/kal-tak-with-javed-chaudhry-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2978,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.703Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.702Z\",\n            \"updated\": \"2019-07-07T06:38:48.703Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Al-Khidmat Foundation) \\u2013 6th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-al-khidmat-foundation-6th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.703Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/tO2qTjk5SPk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151806/kal-tak-with-javed-chaudhry-al-khidmat-foundation-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2979,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.744Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.743Z\",\n            \"updated\": \"2019-07-07T06:38:48.744Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Eid Special) \\u20135th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.744Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/OzY3ipSe57c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151779/kal-tak-with-javed-chaudhry-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2980,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.798Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.798Z\",\n            \"updated\": \"2019-07-07T06:38:48.799Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Mulk Mein Aik Eid Na Ho Saki) \\u2013 4th June 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-mulk-mein-aik-eid-na-ho-saki-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.799Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/zi-cYK6kSO4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151733/kal-tak-with-javed-chaudhry-mulk-mein-aik-eid-na-ho-saki-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2981,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:48.960Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:48.944Z\",\n            \"updated\": \"2019-07-07T06:38:48.961Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Reference Against Judges) \\u2013 30th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-reference-against-judges-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:48.961Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/4GlvVdT01gQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151509/kal-tak-with-javed-chaudhry-reference-against-judges-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2982,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.070Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.069Z\",\n            \"updated\": \"2019-07-07T06:38:49.070Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Zardari Aur Bilawal Ki NAB Mein Paishi) \\u2013 29th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-zardari-aur-bilawal-ki-nab-mein-paishi-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.070Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/X6pYB-Ofw8I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151442/kal-tak-with-javed-chaudhry-zardari-aur-bilawal-ki-nab-mein-paishi-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2983,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.158Z\",\n            \"updated\": \"2019-07-07T06:38:49.159Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Politics on Yaum e Takbeer) \\u2013 28th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-politics-on-yaum-e-takbeer-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.159Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/mFB7Q3fVyD0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151393/kal-tak-with-javed-chaudhry-politics-on-yaum-e-takbeer-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2984,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.218Z\",\n            \"updated\": \"2019-07-07T06:38:49.225Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Chairman NAB Issue) \\u2013 27th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-chairman-nab-issue-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.225Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/l8FMvuGb5yM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151356/kal-tak-with-javed-chaudhry-chairman-nab-issue-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2985,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.316Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.315Z\",\n            \"updated\": \"2019-07-07T06:38:49.316Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Indian Election) \\u2013 23rd May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-indian-election-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.316Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/9ShyCJ1XtNU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151128/kal-tak-with-javed-chaudhry-indian-election-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2986,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.434Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.434Z\",\n            \"updated\": \"2019-07-07T06:38:49.434Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Dollar Ki Buland Parwaz) \\u2013 21st May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-dollar-ki-buland-parwaz-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.434Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/b172hkzwNDU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/151024/kal-tak-with-javed-chaudhry-dollar-ki-buland-parwaz-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2987,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.543Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.543Z\",\n            \"updated\": \"2019-07-07T06:38:49.543Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Opposition's Real Target?) \\u2013 20th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-oppositions-real-target-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.543Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/K12UaS2Ot9A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150956/kal-tak-with-javed-chaudhry-opposition-s-real-target-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2988,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.631Z\",\n            \"updated\": \"2019-07-07T06:38:49.632Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Opposition Ka Plan) \\u2013 16th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-opposition-ka-plan-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.632Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/glB1VvCWCgY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150753/kal-tak-with-javed-chaudhry-opposition-ka-plan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2989,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.757Z\",\n            \"updated\": \"2019-07-07T06:38:49.758Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Anti Govt Movement) \\u2013 15th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-anti-govt-movement-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.758Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/_zbkUPpxMEQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150681/kal-tak-with-javed-chaudhry-anti-govt-movement-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2990,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.886Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.885Z\",\n            \"updated\": \"2019-07-07T06:38:49.886Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Tax Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.886Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/CuVxiPlVhpY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150610/kal-tak-with-javed-chaudhry-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2991,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:49.966Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:49.966Z\",\n            \"updated\": \"2019-07-07T06:38:49.985Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak With Javed Chaudhry (Mehngai Mein Izafa) \\u2013 13th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-mehngai-mein-izafa-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:49.985Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/GEElxltS2WY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150562/kal-tak-with-javed-chaudhry-mehngai-mein-izafa-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2992,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.092Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.091Z\",\n            \"updated\": \"2019-07-07T06:38:50.092Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Maryam Nawaz Party Position) \\u2013 9th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-maryam-nawaz-party-position-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.092Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/3Gl1BnlB8ig\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150315/kal-tak-with-javed-chaudhry-maryam-nawaz-party-position-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2993,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.160Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.159Z\",\n            \"updated\": \"2019-07-07T06:38:50.160Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Asad Umar Back in Cabinet) \\u2013 8th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-asad-umar-back-in-cabinet-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.160Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/aTsUGICXe38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150244/kal-tak-with-javed-chaudhry-asad-umar-back-in-cabinet-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2994,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.230Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.230Z\",\n            \"updated\": \"2019-07-07T06:38:50.230Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Mehngai Mein Izafa) \\u2013 7th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-mehngai-mein-izafa-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.230Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/QEV9geRpydY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150183/kal-tak-with-javed-chaudhry-mehngai-mein-izafa-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2995,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.279Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.279Z\",\n            \"updated\": \"2019-07-07T06:38:50.280Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (IMF Deal) \\u2013 6th May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-imf-deal-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.280Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/rIxVf7_Wdro\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/150111/kal-tak-with-javed-chaudhry-imf-deal-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2996,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.308Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.308Z\",\n            \"updated\": \"2019-07-07T06:38:50.308Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Special Talk With Shahid Khaqan Abbasi) \\u2013 2nd May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-special-talk-with-shahid-khaqan-abbasi-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.308Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/cGUWErI5wO0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149861/kal-tak-with-javed-chaudhry-special-talk-with-shahid-khaqan-abbasi-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2997,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.358Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.357Z\",\n            \"updated\": \"2019-07-07T06:38:50.358Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Qarze Per Qarza) \\u2013 1st May 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-qarze-per-qarza-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.358Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/UPf-68hokYM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149800/kal-tak-with-javed-chaudhry-qarze-per-qarza-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2998,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.391Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.390Z\",\n            \"updated\": \"2019-07-07T06:38:50.391Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (Marriage Bill) \\u2013 30th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-marriage-bill-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.391Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/hzJV0-0qcmE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149725/kal-tak-with-javed-chaudhry-marriage-bill-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 2999,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.423Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.422Z\",\n            \"updated\": \"2019-07-07T06:38:50.423Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (DG ISPR on PTM) \\u2013 28th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-dg-ispr-on-ptm-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.423Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/O6bsXprrYu8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149654/kal-tak-with-javed-chaudhry-dg-ispr-on-ptm-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3000,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.479Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.478Z\",\n            \"updated\": \"2019-07-07T06:38:50.479Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Sahib Vs Sahiba) \\u2013 24th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-sahib-vs-sahiba-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.479Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/TSUKAgJJgqY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149423/kal-tak-with-javed-chaudhry-sahib-vs-sahiba-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3001,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.508Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.508Z\",\n            \"updated\": \"2019-07-07T06:38:50.508Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Tabdeeli Kab Aye Gi) \\u2013 24th April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-tabdeeli-kab-aye-gi-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.508Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/V7ndb73JPYs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149360/kal-tak-with-javed-chaudhry-tabdeeli-kab-aye-gi-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3002,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.547Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.547Z\",\n            \"updated\": \"2019-07-07T06:38:50.547Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal Tak with Javed Chaudhry (Opposition Active Against Govt) \\u2013 23rd April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-opposition-active-against-govt-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.547Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"https://www.youtube.com/watch/7QMZemIY6E0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149305/kal-tak-with-javed-chaudhry-opposition-active-against-govt-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3003,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.578Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.578Z\",\n            \"updated\": \"2019-07-07T06:38:50.578Z\",\n            \"extra_data\": {\n                \"host\": \"Javed Chaudhry\",\n                \"job_id\": 153,\n                \"feed_id\": 25,\n                \"feed_name\": \"unewstv - Kal Tak\",\n                \"show_name\": \"Kal Tak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Kal tak with Javed Chaudhry (PTI New Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"kal-tak-with-javed-chaudhry-pti-new-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.578Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"https://www.youtube.com/watch/O_gTehXNjPI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Kal+Tak+with+Javed+Chaudhry\",\n            \"source_detail\": \"http://www.unewstv.com/149246/kal-tak-with-javed-chaudhry-pti-new-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 23,\n            \"tags\": \"[\\\"Javed Chaudhry\\\", \\\"Kal Tak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3004,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.772Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.771Z\",\n            \"updated\": \"2019-07-07T06:38:50.772Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point With Mansoor Ali Khan (Maryam Nawaz Press Conference) - 6th July 2019\",\n            \"slug\": \"to-the-point-with-mansoor-ali-khan-maryam-nawaz-press-conference-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.772Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/5io-ndGouLA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153674/to-the-point-with-mansoor-ali-khan-maryam-nawaz-press-conference-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3005,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.803Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.803Z\",\n            \"updated\": \"2019-07-07T06:38:50.803Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Chairman Senate Jaye Ga Ya Nahi?) \\u2013 5th July 2019\",\n            \"slug\": \"to-the-point-chairman-senate-jaye-ga-ya-nahi-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.803Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/5q2gPyQzgJI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153601/to-the-point-chairman-senate-jaye-ga-ya-nahi-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3006,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.833Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.833Z\",\n            \"updated\": \"2019-07-07T06:38:50.833Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Cracks in PMLN) \\u2013 30th June 2019\",\n            \"slug\": \"to-the-point-cracks-in-pmln-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.833Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/Z_UEl20TldE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153251/to-the-point-cracks-in-pmln-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3007,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.869Z\",\n            \"updated\": \"2019-07-07T06:38:50.870Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Opposition Failed To Reject Budget) \\u2013 29th June 2019\",\n            \"slug\": \"to-the-point-opposition-failed-to-reject-budget-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.870Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/NrwnJR-dj2M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153194/to-the-point-opposition-failed-to-reject-budget-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3008,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.922Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.921Z\",\n            \"updated\": \"2019-07-07T06:38:50.922Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Parliament Mein Selected Ki Gonj) \\u2013 28th June 2019\",\n            \"slug\": \"to-the-point-parliament-mein-selected-ki-gonj-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.922Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/HGk7hsqNSEg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/153122/to-the-point-parliament-mein-selected-ki-gonj-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3009,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.972Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:50.972Z\",\n            \"updated\": \"2019-07-07T06:38:50.972Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Maryam Nawaz Exclusive Interview) \\u2013 22nd June 2019\",\n            \"slug\": \"to-the-point-maryam-nawaz-exclusive-interview-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:50.972Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/JJiEauEy0-w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/152721/to-the-point-maryam-nawaz-exclusive-interview-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3010,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.007Z\",\n            \"updated\": \"2019-07-07T06:38:51.007Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Imran Khan Ka Aik Ke Baad Aik Bara Elan) \\u2013 21st June 2019\",\n            \"slug\": \"to-the-point-imran-khan-ka-aik-ke-baad-aik-bara-elan-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.007Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/jCfM9mafdlg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/152655/to-the-point-imran-khan-ka-aik-ke-baad-aik-bara-elan-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3011,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.036Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.036Z\",\n            \"updated\": \"2019-07-07T06:38:51.036Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Father's Day Per Abbu Bachao Muhim) - 16th June 2019\",\n            \"slug\": \"to-the-point-fathers-day-per-abbu-bachao-muhim-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.036Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/keeT30zLBm4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/152348/to-the-point-father-s-day-per-abbu-bachao-muhim-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3012,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.083Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.083Z\",\n            \"updated\": \"2019-07-07T06:38:51.083Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (PTI Ki Androni Larayian) \\u2013 2nd May 2019\",\n            \"slug\": \"to-the-point-pti-ki-androni-larayian-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.084Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/vdY-YuJ2EDc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151656/to-the-point-pti-ki-androni-larayian-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3013,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.112Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.112Z\",\n            \"updated\": \"2019-07-07T06:38:51.112Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Fawad Chaudhry's Statement) - 1st June 2019\",\n            \"slug\": \"to-the-point-fawad-chaudhrys-statement-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.112Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/Kt8AcSSSIjc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151616/to-the-point-fawad-chaudhry-s-statement-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3014,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.207Z\",\n            \"updated\": \"2019-07-07T06:38:51.214Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Discussion on Current Issues) \\u2013 31st May 2019\",\n            \"slug\": \"to-the-point-discussion-on-current-issues-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.214Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/Zr8uCYaeHe0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151561/to-the-point-discussion-on-current-issues-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3015,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.304Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.286Z\",\n            \"updated\": \"2019-07-07T06:38:51.304Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Chairman NAB Scandal) \\u2013 26th May 2019\",\n            \"slug\": \"to-the-point-chairman-nab-scandal-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.304Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/lfDJLojxtb8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151299/to-the-point-chairman-nab-scandal-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3016,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.384Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.383Z\",\n            \"updated\": \"2019-07-07T06:38:51.384Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Chairman NAB Under Pressure)  \\u2013 25th May 2019\",\n            \"slug\": \"to-the-point-chairman-nab-under-pressure-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.384Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/otNGJgcIOiM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/151243/to-the-point-chairman-nab-under-pressure-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3017,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.470Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.470Z\",\n            \"updated\": \"2019-07-07T06:38:51.470Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Meray Kaptan Ki Kamyabian) \\u2013 18th May 2019\",\n            \"slug\": \"to-the-point-meray-kaptan-ki-kamyabian-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.470Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/bvUJlo8XaxU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150865/to-the-point-meray-kaptan-ki-kamyabian-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3018,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.599Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.599Z\",\n            \"updated\": \"2019-07-07T06:38:51.599Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Dollar Rate Mein Phir Izafa) \\u2013 17th May 2019\",\n            \"slug\": \"to-the-point-dollar-rate-mein-phir-izafa-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.599Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/YFQVmiuQX14\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150808/to-the-point-dollar-rate-mein-phir-izafa-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3019,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.758Z\",\n            \"updated\": \"2019-07-07T06:38:51.758Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (No More Subsidy on Metro Bus) \\u2013 12th May 2019\",\n            \"slug\": \"to-the-point-no-more-subsidy-on-metro-bus-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.758Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/MrC4KJRh0c0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150498/to-the-point-no-more-subsidy-on-metro-bus-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3020,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.817Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.817Z\",\n            \"updated\": \"2019-07-07T06:38:51.817Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Can Opposition Run Movement Against Govt) \\u2013 11th May 2019\",\n            \"slug\": \"to-the-point-can-opposition-run-movement-against-govt-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.817Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/2boeAD_rh88\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150432/to-the-point-can-opposition-run-movement-against-govt-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3021,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:51.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:51.913Z\",\n            \"updated\": \"2019-07-07T06:38:51.913Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (PTI Govt Policies & Opposition Criticism) \\u2013 10th May 2019\",\n            \"slug\": \"to-the-point-pti-govt-policies-opposition-criticism-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:51.914Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/mzCr1m75uFs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150377/to-the-point-pti-govt-policies-opposition-criticism-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3022,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.035Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.034Z\",\n            \"updated\": \"2019-07-07T06:38:52.035Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Meray Kaptaan Theek Kahtay Thay) \\u2013 5th May 2019\",\n            \"slug\": \"to-the-point-meray-kaptaan-theek-kahtay-thay-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.036Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/Hj_nH56hXBs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/150049/to-the-point-meray-kaptaan-theek-kahtay-thay-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3023,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.160Z\",\n            \"updated\": \"2019-07-07T06:38:52.161Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Why Changes in PMLN) \\u2013 4th May 2019\",\n            \"slug\": \"to-the-point-why-changes-in-pmln-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.161Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/OILuwCgaseM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149984/to-the-point-why-changes-in-pmln-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3024,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.308Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.308Z\",\n            \"updated\": \"2019-07-07T06:38:52.308Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Future of Shahbaz Sharif & Nawaz Sharif) \\u2013 3rd May 2019\",\n            \"slug\": \"to-the-point-future-of-shahbaz-sharif-nawaz-sharif-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.308Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/dFS_iq6Wf-U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149932/to-the-point-future-of-shahbaz-sharif-nawaz-sharif-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3025,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.446Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.419Z\",\n            \"updated\": \"2019-07-07T06:38:52.446Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Hamid Khan Exclusive Interview) \\u2013 28th April 2019\",\n            \"slug\": \"to-the-point-hamid-khan-exclusive-interview-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.446Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/WAAgnKqK3IU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149595/to-the-point-hamid-khan-exclusive-interview-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3026,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.624Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.616Z\",\n            \"updated\": \"2019-07-07T06:38:52.624Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Agar Mere Kaptaan Nakam Ho Gaye Tu?) - 27th April 2019\",\n            \"slug\": \"to-the-point-agar-mere-kaptaan-nakam-ho-gaye-tu-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.624Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"https://www.youtube.com/watch/aCJB-86nol8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149545/to-the-point-agar-mere-kaptaan-nakam-ho-gaye-tu-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3027,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.733Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.732Z\",\n            \"updated\": \"2019-07-07T06:38:52.733Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Mere Kaptan Ki Team) \\u2013 26th April 2019\",\n            \"slug\": \"to-the-point-mere-kaptan-ki-team-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.733Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"https://www.youtube.com/watch/aAum7dhkTKE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149485/to-the-point-mere-kaptan-ki-team-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3028,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.840Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.840Z\",\n            \"updated\": \"2019-07-07T06:38:52.841Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Chaudhry Sarwar Exclusive Interview) \\u2013 21st April 2019\",\n            \"slug\": \"to-the-point-chaudhry-sarwar-exclusive-interview-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.841Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"https://www.youtube.com/watch/yMBLnGssq2c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149194/to-the-point-chaudhry-sarwar-exclusive-interview-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3029,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.883Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.882Z\",\n            \"updated\": \"2019-07-07T06:38:52.883Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Aap Nay Ghabrana Nahi Hai) \\u2013 20th April 2019\",\n            \"slug\": \"to-the-point-aap-nay-ghabrana-nahi-hai-20th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.883Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"https://www.youtube.com/watch/j1fzKUt3kcA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149138/to-the-point-aap-nay-ghabrana-nahi-hai-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3030,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.919Z\",\n            \"updated\": \"2019-07-07T06:38:52.919Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Who Want to Demolish PTI Govt) \\u2013 19th April 2019\",\n            \"slug\": \"to-the-point-who-want-to-demolish-pti-govt-19th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.919Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"https://www.youtube.com/watch/9IL7NLPh0K4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/149083/to-the-point-who-want-to-demolish-pti-govt-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3031,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:52.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.967Z\",\n            \"updated\": \"2019-07-07T06:38:52.967Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Punjab Ke 2 Chaudhry, Aamne Saamne) \\u2013 14th April 2019\",\n            \"slug\": \"to-the-point-punjab-ke-2-chaudhry-aamne-saamne-14th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:52.967Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/w-HWT2mveiM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148791/to-the-point-punjab-ke-2-chaudhry-aamne-saamne-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3032,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:52.999Z\",\n            \"updated\": \"2019-07-07T06:38:53Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Shahbaz Sharif's Family Summoned By NAB) \\u2013 13th April 2019\",\n            \"slug\": \"to-the-point-shahbaz-sharifs-family-summoned-by-nab-13th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"https://www.youtube.com/watch/yEO9DcuEe6s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148742/to-the-point-shahbaz-sharif-s-family-summoned-by-nab-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3033,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.029Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.029Z\",\n            \"updated\": \"2019-07-07T06:38:53.029Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Why Peshawar Metro Not Being Completed?) \\u2013 12th April 2019\",\n            \"slug\": \"to-the-point-why-peshawar-metro-not-being-completed-12th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.029Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"https://www.youtube.com/watch/iqFsIIGp-oE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148695/to-the-point-why-peshawar-metro-not-being-completed-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3034,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.070Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.070Z\",\n            \"updated\": \"2019-07-07T06:38:53.070Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Tabdeeli Ke Alambardar Tauba Per Majboor) \\u2013 7th April 2019\",\n            \"slug\": \"to-the-point-tabdeeli-ke-alambardar-tauba-per-majboor-7th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.070Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"https://www.youtube.com/watch/OudNMKvof2Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148418/to-the-point-tabdeeli-ke-alambardar-tauba-per-majboor-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3035,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.120Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.120Z\",\n            \"updated\": \"2019-07-07T06:38:53.120Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Accountability of Two Types) \\u2013 5th April 2019\",\n            \"slug\": \"to-the-point-accountability-of-two-types-5th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.120Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"https://www.youtube.com/watch/CTLBp76UO3o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148327/to-the-point-accountability-of-two-types-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3036,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.179Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.178Z\",\n            \"updated\": \"2019-07-07T06:38:53.179Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Benazir Income Support Program) \\u2013 31st March 2019\",\n            \"slug\": \"to-the-point-benazir-income-support-program-31st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.179Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"https://www.youtube.com/watch/2HhLHI5Hhyg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148059/to-the-point-benazir-income-support-program-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3037,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.205Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.204Z\",\n            \"updated\": \"2019-07-07T06:38:53.205Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Federal Govt Bankrupt?) \\u2013 30th March 2019\",\n            \"slug\": \"to-the-point-federal-govt-bankrupt-30th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.205Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"https://www.youtube.com/watch/QQrN7k4ul0M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/148005/to-the-point-federal-govt-bankrupt-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3038,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.242Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.242Z\",\n            \"updated\": \"2019-07-07T06:38:53.243Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Imran Khan's Poverty Elimination Program) \\u2013 29th March 2019\",\n            \"slug\": \"to-the-point-imran-khans-poverty-elimination-program-29th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.243Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"https://www.youtube.com/watch/35q6K8Acor0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147948/to-the-point-imran-khan-s-poverty-elimination-program-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3039,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.283Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.282Z\",\n            \"updated\": \"2019-07-07T06:38:53.283Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (What's Bilawal's Ideology) \\u2013 24th March 2019\",\n            \"slug\": \"to-the-point-whats-bilawals-ideology-24th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.283Z\",\n            \"target_date\": \"2019-03-24\",\n            \"text\": \"https://www.youtube.com/watch/W079bgIKcYE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147629/to-the-point-what-s-bilawal-s-ideology-24th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3040,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.364Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.363Z\",\n            \"updated\": \"2019-07-07T06:38:53.364Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Challenges For Medical Students) \\u2013 23rd March 2019\",\n            \"slug\": \"to-the-point-challenges-for-medical-students-23rd-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.364Z\",\n            \"target_date\": \"2019-03-23\",\n            \"text\": \"https://www.youtube.com/watch/iYoYs_r2cNE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147584/to-the-point-challenges-for-medical-students-23rd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3041,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.450Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.432Z\",\n            \"updated\": \"2019-07-07T06:38:53.450Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Peshawar Metro Ka Kia Bana) \\u2013 22nd March 2019\",\n            \"slug\": \"to-the-point-peshawar-metro-ka-kia-bana-22nd-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.450Z\",\n            \"target_date\": \"2019-03-22\",\n            \"text\": \"https://www.youtube.com/watch/LwJ0nuU2jGY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147522/to-the-point-peshawar-metro-ka-kia-bana-22nd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3042,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.531Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.530Z\",\n            \"updated\": \"2019-07-07T06:38:53.537Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (Nawaz Sharif's Treatment Issue) \\u2013 17th March 2019\",\n            \"slug\": \"to-the-point-nawaz-sharifs-treatment-issue-17th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.537Z\",\n            \"target_date\": \"2019-03-17\",\n            \"text\": \"https://www.youtube.com/watch/lpAsHIredbw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147241/to-the-point-nawaz-sharif-s-treatment-issue-17th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3043,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.600Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.598Z\",\n            \"updated\": \"2019-07-07T06:38:53.600Z\",\n            \"extra_data\": {\n                \"host\": \"Mansoor Ali Khan\",\n                \"job_id\": 154,\n                \"feed_id\": 27,\n                \"feed_name\": \"unewstv - To The Point\",\n                \"show_name\": \"To The Point\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"To The Point (New Pakistan Vs Old Pakistan) \\u2013 16th March 2019\",\n            \"slug\": \"to-the-point-new-pakistan-vs-old-pakistan-16th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.600Z\",\n            \"target_date\": \"2019-03-16\",\n            \"text\": \"https://www.youtube.com/watch/j1gfG8YbmnQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/To+The+Point+With+Mansoor+Ali+Khan\",\n            \"source_detail\": \"http://www.unewstv.com/147198/to-the-point-new-pakistan-vs-old-pakistan-16th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 25,\n            \"tags\": \"[\\\"Mansoor Ali Khan\\\", \\\"To The Point\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3044,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.971Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:53.971Z\",\n            \"updated\": \"2019-07-07T06:38:53.971Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Opposition Ki Rahbar Committee) - 5th July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-opposition-ki-rahbar-committee-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:53.971Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/ILFBNT4yf38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153605/dunya-kamran-khan-kay-sath-opposition-ki-rahbar-committee-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3045,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.097Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.097Z\",\n            \"updated\": \"2019-07-07T06:38:54.097Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Amnesty Scheme, Other Issues) - 4th July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-amnesty-scheme-other-issues-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.097Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/fjb1JZe9w-w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153545/dunya-kamran-khan-kay-sath-amnesty-scheme-other-issues-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3046,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.185Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.185Z\",\n            \"updated\": \"2019-07-07T06:38:54.185Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Hospitals Band Gali Mein) - 3rd July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-hospitals-band-gali-mein-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.185Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/PkXZrpe3JUY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153479/dunya-kamran-khan-kay-sath-sindh-hospitals-band-gali-mein-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3047,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.343Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.342Z\",\n            \"updated\": \"2019-07-07T06:38:54.343Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Mehngai Ka Tofan) - 2nd July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.343Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/eYVpn3C2Xy0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153395/dunya-kamran-khan-kay-sath-mehngai-ka-tofan-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3048,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.569Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.567Z\",\n            \"updated\": \"2019-07-07T06:38:54.569Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.569Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/QloijplKJto\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153324/dunya-kamran-khan-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3049,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.605Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.600Z\",\n            \"updated\": \"2019-07-07T06:38:54.605Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Polio Spreading in Pakistan) - 28th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-polio-spreading-in-pakistan-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.605Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/P0hh6TdPpJU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153126/dunya-kamran-khan-kay-sath-polio-spreading-in-pakistan-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3050,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.657Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.657Z\",\n            \"updated\": \"2019-07-07T06:38:54.657Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Development in Money Laundering Case) - 27th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-development-in-money-laundering-case-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.657Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/PrnSBQrUXjc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153057/dunya-kamran-khan-kay-sath-development-in-money-laundering-case-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3051,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.711Z\",\n            \"updated\": \"2019-07-07T06:38:54.711Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Dollar 163 Ka Ho Gaya) - 26th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-dollar-163-ka-ho-gaya-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.711Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/PYYdMNfojDc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152984/dunya-kamran-khan-kay-sath-dollar-163-ka-ho-gaya-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3052,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.757Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.756Z\",\n            \"updated\": \"2019-07-07T06:38:54.757Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (IMF Program Shuru Ho Gaya) - 25th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imf-program-shuru-ho-gaya-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.757Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/VIC-07Pl6Rw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152924/dunya-kamran-khan-kay-sath-imf-program-shuru-ho-gaya-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3053,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.818Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.817Z\",\n            \"updated\": \"2019-07-07T06:38:54.818Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Peshawar BRT Project) - 24th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-peshawar-brt-project-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.818Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/B9Rfm0hsUL8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152854/dunya-kamran-khan-kay-sath-peshawar-brt-project-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3054,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.880Z\",\n            \"updated\": \"2019-07-07T06:38:54.880Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Corrupt Tareen Soba Qarar) - 21st June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-corrupt-tareen-soba-qarar-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.880Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/pGxMgvLGKlQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152654/dunya-kamran-khan-kay-sath-sindh-corrupt-tareen-soba-qarar-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3055,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.910Z\",\n            \"updated\": \"2019-07-07T06:38:54.911Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Discussion on Different Issues) - 20th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-discussion-on-different-issues-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.911Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/JdK8atReMCk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152598/dunya-kamran-khan-kay-sath-discussion-on-different-issues-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3056,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:54.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:54.981Z\",\n            \"updated\": \"2019-07-07T06:38:54.981Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan Ki Maeeshat Aur Siasat) - 17th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistan-ki-maeeshat-aur-siasat-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:54.981Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/tyZ7l-KRJJE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152412/dunya-kamran-khan-kay-sath-pakistan-ki-maeeshat-aur-siasat-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3057,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:55.016Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:55.015Z\",\n            \"updated\": \"2019-07-07T06:38:55.016Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan's Economic Condition) - 14th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistans-economic-condition-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:55.016Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/OrR09_WSPJA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152252/dunya-kamran-khan-kay-sath-pakistan-s-economic-condition-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3058,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.071Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.070Z\",\n            \"updated\": \"2019-07-07T06:38:56.071Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Budget Aur Taxes) - 13th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-budget-aur-taxes-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.071Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/CHI_r7c8Jp8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152188/dunya-kamran-khan-kay-sath-budget-aur-taxes-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3059,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.178Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.178Z\",\n            \"updated\": \"2019-07-07T06:38:56.178Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Imran Khan Ka Khitab) - 12th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imran-khan-ka-khitab-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.178Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/niL8RLEXm88\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152142/dunya-kamran-khan-kay-sath-imran-khan-ka-khitab-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3060,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.226Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.225Z\",\n            \"updated\": \"2019-07-07T06:38:56.226Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Budget 2019-20) - 11th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-budget-2019-20-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.226Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/ubnXlT3rTkA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152081/dunya-kamran-khan-kay-sath-budget-2019-20-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3061,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.302Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.302Z\",\n            \"updated\": \"2019-07-07T06:38:56.302Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Asif Zardari Ki Giraftari) - 10th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.302Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/kvDkPGix4FM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152019/dunya-kamran-khan-kay-sath-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3062,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.339Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.339Z\",\n            \"updated\": \"2019-07-07T06:38:56.340Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Discussion on Different Issues) - 7th June 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-discussion-on-different-issues-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.340Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/hAoZjjyn8Ik\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151858/dunya-kamran-khan-kay-sath-discussion-on-different-issues-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3063,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.378Z\",\n            \"updated\": \"2019-07-07T06:38:56.378Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Siasi Mahaz Arai Mein Izafa) - 31st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-siasi-mahaz-arai-mein-izafa-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.378Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/TxxNdXtIf_g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151563/dunya-kamran-khan-kay-sath-siasi-mahaz-arai-mein-izafa-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3064,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.415Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.414Z\",\n            \"updated\": \"2019-07-07T06:38:56.415Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Accountability in Military) - 30th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-accountability-in-military-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.415Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/AyJA1xSj85c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151513/dunya-kamran-khan-kay-sath-accountability-in-military-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3065,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.467Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.467Z\",\n            \"updated\": \"2019-07-07T06:38:56.467Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Reference Against Judges) - 29th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-reference-against-judges-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.467Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/fgMe66Qg1QE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151454/dunya-kamran-khan-kay-sath-reference-against-judges-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3066,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.494Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.494Z\",\n            \"updated\": \"2019-07-07T06:38:56.494Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Opposition Active Against Govt) - 28th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-opposition-active-against-govt-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.495Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/32xwX0ZKTeY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151392/dunya-kamran-khan-kay-sath-opposition-active-against-govt-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3067,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.521Z\",\n            \"updated\": \"2019-07-07T06:38:56.522Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Higher Tax Target) - 27th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-higher-tax-target-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.522Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/aLcrB7rfmDo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151359/dunya-kamran-khan-kay-sath-higher-tax-target-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3068,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.574Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.573Z\",\n            \"updated\": \"2019-07-07T06:38:56.574Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Economy Getting Better) - 23rd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-economy-getting-better-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.574Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/5dQ4t4mVifw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151132/dunya-kamran-khan-kay-sath-economy-getting-better-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3069,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.610Z\",\n            \"updated\": \"2019-07-07T06:38:56.610Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistan's Economy) - 22nd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistans-economy-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.610Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/tGizpdAf4lc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151077/dunya-kamran-khan-kay-sath-pakistan-s-economy-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3070,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.683Z\",\n            \"updated\": \"2019-07-07T06:38:56.684Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Chairman NAB, Other Issues) - 21st May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-chairman-nab-other-issues-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.684Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/T7LksP9h3cw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151028/dunya-kamran-khan-kay-sath-chairman-nab-other-issues-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3071,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.735Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.735Z\",\n            \"updated\": \"2019-07-07T06:38:56.735Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (NAB's Message to Business Community) - 20th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-nabs-message-to-business-community-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.735Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/wNySXXObcA0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150959/dunya-kamran-khan-kay-sath-nab-s-message-to-business-community-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3072,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.779Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.779Z\",\n            \"updated\": \"2019-07-07T06:38:56.779Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Economy Issues) - 17th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-economy-issues-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.779Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/vpLknAh5QJc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150813/dunya-kamran-khan-kay-sath-economy-issues-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3073,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.839Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.838Z\",\n            \"updated\": \"2019-07-07T06:38:56.839Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pakistani Maeeshat) - 16th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pakistani-maeeshat-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.839Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/MST06SpL2Ks\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150756/dunya-kamran-khan-kay-sath-pakistani-maeeshat-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3074,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.880Z\",\n            \"updated\": \"2019-07-07T06:38:56.880Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Terrorism in Balochistan, Karachi Issues) - 15th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-terrorism-in-balochistan-karachi-issues-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.880Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/6TmBiZtIXx4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150683/dunya-kamran-khan-kay-sath-terrorism-in-balochistan-karachi-issues-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3075,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.918Z\",\n            \"updated\": \"2019-07-07T06:38:56.919Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Cases on Zardari & Bilawal) - 14th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-cases-on-zardari-bilawal-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.919Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/xeAkEWUWxp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150615/dunya-kamran-khan-kay-sath-cases-on-zardari-bilawal-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3076,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:56.976Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:56.975Z\",\n            \"updated\": \"2019-07-07T06:38:56.976Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (IMF, 1000 Buses For Karachi) - 13th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-imf-1000-buses-for-karachi-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:56.976Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/1iTV7gL7KUk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150565/dunya-kamran-khan-kay-sath-imf-1000-buses-for-karachi-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3077,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.023Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:57.014Z\",\n            \"updated\": \"2019-07-07T06:38:57.023Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Strict Conditions of IMF) - 10th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-strict-conditions-of-imf-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:57.023Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/LSTZeN8kDx0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150386/dunya-kamran-khan-kay-sath-strict-conditions-of-imf-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3078,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.092Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:57.091Z\",\n            \"updated\": \"2019-07-07T06:38:57.092Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Pak Iran Gas Pipeline Project) - 9th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pak-iran-gas-pipeline-project-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:57.092Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/Ha69Up_D9ZE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150318/dunya-kamran-khan-kay-sath-pak-iran-gas-pipeline-project-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3079,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.132Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:57.132Z\",\n            \"updated\": \"2019-07-07T06:38:57.133Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Mein Gandam Chori) - 8th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-mein-gandam-chori-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:57.133Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/vfNJ4jLfc44\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150259/dunya-kamran-khan-kay-sath-sindh-mein-gandam-chori-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3080,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.289Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:57.289Z\",\n            \"updated\": \"2019-07-07T06:38:57.306Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Multiple Issues) - 7th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-multiple-issues-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:57.306Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/5Ix6o0afr3Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150185/dunya-kamran-khan-kay-sath-multiple-issues-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3081,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:57.583Z\",\n            \"updated\": \"2019-07-07T06:38:57.584Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (PTI Hakumat Mein Tabdeeli) - 6th May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-pti-hakumat-mein-tabdeeli-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:57.584Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/XwaqwJDdVtg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150117/dunya-kamran-khan-kay-sath-pti-hakumat-mein-tabdeeli-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3082,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.819Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:57.802Z\",\n            \"updated\": \"2019-07-07T06:38:57.819Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (NAB, Maeeshat, Sehafat) - 3rd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-nab-maeeshat-sehafat-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:57.819Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/wQH7qauMBJ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149938/dunya-kamran-khan-kay-sath-nab-maeeshat-sehafat-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3083,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.877Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:57.870Z\",\n            \"updated\": \"2019-07-07T06:38:57.877Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Khan\",\n                \"job_id\": 139,\n                \"feed_id\": 11,\n                \"feed_name\": \"unewstv - Dunya Kamran Khan Kay Sath\",\n                \"show_name\": \"Dunya Kamran Khan Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Dunya Kamran Khan Kay Sath (Sindh Hakumat Gandam Chori) -  2nd May 2019\",\n            \"slug\": \"dunya-kamran-khan-kay-sath-sindh-hakumat-gandam-chori-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:57.877Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/XDm_7G37PEk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Dunya+Kamran+Khan+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149868/dunya-kamran-khan-kay-sath-sindh-hakumat-gandam-chori-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 9,\n            \"tags\": \"[\\\"Kamran Khan\\\", \\\"Dunya Kamran Khan Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1,\n                2,\n                3,\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3084,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:58.257Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:58.257Z\",\n            \"updated\": \"2019-07-07T06:38:58.257Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (FBR Action Against Benami Assets) - 4th July 2019\",\n            \"slug\": \"nadeem-malik-live-fbr-action-against-benami-assets-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:58.257Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/xfRj2hyPFeA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153509/nadeem-malik-live-fbr-action-against-benami-assets-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3085,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:58.355Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:58.355Z\",\n            \"updated\": \"2019-07-07T06:38:58.355Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Kisi Ko NRO Nahi Mile Ga - Imran Khan) - 3rd July 2019\",\n            \"slug\": \"nadeem-malik-live-kisi-ko-nro-nahi-mile-ga-imran-khan-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:58.364Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/ZrQCTL5mxt4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153429/nadeem-malik-live-kisi-ko-nro-nahi-mile-ga-imran-khan-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3086,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:58.444Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:58.444Z\",\n            \"updated\": \"2019-07-07T06:38:58.444Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Rana Sanaullah Arrest, Production Orders Issue) - 2nd July 2019\",\n            \"slug\": \"nadeem-malik-live-rana-sanaullah-arrest-production-orders-issue-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:58.461Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/zXDAuOWtL1Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153362/nadeem-malik-live-rana-sanaullah-arrest-production-orders-issue-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3087,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:58.579Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:58.578Z\",\n            \"updated\": \"2019-07-07T06:38:58.579Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Rana Sanaullah Arrest, PMLN Members Meet Imran Khan) - 1st July 2019\",\n            \"slug\": \"nadeem-malik-live-rana-sanaullah-arrest-pmln-members-meet-imran-khan-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:38:58.579Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/wswxdubqrBw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153295/nadeem-malik-live-rana-sanaullah-arrest-pmln-members-meet-imran-khan-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3088,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:58.726Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:58.690Z\",\n            \"updated\": \"2019-07-07T06:38:58.726Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Wazir e Azam Ne Mehngai Ka Notice Le Lia) - 27th June 2019\",\n            \"slug\": \"nadeem-malik-live-wazir-e-azam-ne-mehngai-ka-notice-le-lia-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:58.726Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/CGi_36O8mAw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153023/nadeem-malik-live-wazir-e-azam-ne-mehngai-ka-notice-le-lia-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3089,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:58.856Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:58.855Z\",\n            \"updated\": \"2019-07-07T06:38:58.856Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Opposition Determined Against Govt) - 26th June 2019\",\n            \"slug\": \"nadeem-malik-live-opposition-determined-against-govt-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:58.856Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/_qiamU5e80I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152954/nadeem-malik-live-opposition-determined-against-govt-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3090,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.030Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.014Z\",\n            \"updated\": \"2019-07-07T06:38:59.030Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Hakumat Ka Tabdeeli Nara, APC) - 25th June 2019\",\n            \"slug\": \"nadeem-malik-live-hakumat-ka-tabdeeli-nara-apc-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.030Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/84FvL4lsKOM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152886/nadeem-malik-live-hakumat-ka-tabdeeli-nara-apc-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3091,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.092Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.091Z\",\n            \"updated\": \"2019-07-07T06:38:59.092Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (HIV Virus in Punjab, Opposition APC) - 24th June 2019\",\n            \"slug\": \"nadeem-malik-live-hiv-virus-in-punjab-opposition-apc-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.092Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/yjnr_kmQ_sc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152815/nadeem-malik-live-hiv-virus-in-punjab-opposition-apc-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3092,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.121Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.121Z\",\n            \"updated\": \"2019-07-07T06:38:59.121Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Qaumi Assembly Ka Ijlas) - 20th June 2019\",\n            \"slug\": \"nadeem-malik-live-qaumi-assembly-ka-ijlas-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.121Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/Ty-feGK4QMs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152569/nadeem-malik-live-qaumi-assembly-ka-ijlas-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3093,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.169Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.169Z\",\n            \"updated\": \"2019-07-07T06:38:59.169Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Budget, Inquiry Commission, Other Issues) - 19th June 2019\",\n            \"slug\": \"nadeem-malik-live-budget-inquiry-commission-other-issues-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.169Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/GxJSK94WE5Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152501/nadeem-malik-live-budget-inquiry-commission-other-issues-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3094,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.212Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.211Z\",\n            \"updated\": \"2019-07-07T06:38:59.212Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Qarza Inquiry Commission) - 18th June 2019\",\n            \"slug\": \"nadeem-malik-live-qarza-inquiry-commission-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.212Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/3PpZo3j-BH8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152445/nadeem-malik-live-qarza-inquiry-commission-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3095,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.267Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.266Z\",\n            \"updated\": \"2019-07-07T06:38:59.267Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Qaumi Assembly Ka Hungama Khaiz Ijlas) - 17th June 2019\",\n            \"slug\": \"nadeem-malik-live-qaumi-assembly-ka-hungama-khaiz-ijlas-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.267Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/k39rgasAqwY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152388/nadeem-malik-live-qaumi-assembly-ka-hungama-khaiz-ijlas-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3096,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.307Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.307Z\",\n            \"updated\": \"2019-07-07T06:38:59.307Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Budget, Inquiry Commission) - 13th June 2019\",\n            \"slug\": \"nadeem-malik-live-budget-inquiry-commission-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.307Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/DJ7_nBeUtf8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152165/nadeem-malik-live-budget-inquiry-commission-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3097,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.345Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.344Z\",\n            \"updated\": \"2019-07-07T06:38:59.345Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Budget, Opposition, Other Issues) - 12th June 2019\",\n            \"slug\": \"nadeem-malik-live-budget-opposition-other-issues-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.345Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/IV-P_yzVR9s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152111/nadeem-malik-live-budget-opposition-other-issues-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3098,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.387Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.386Z\",\n            \"updated\": \"2019-07-07T06:38:59.387Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Budget Aur Giraftariyan) - 11th June 2019\",\n            \"slug\": \"nadeem-malik-live-budget-aur-giraftariyan-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.387Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/err8lS1rX28\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152060/nadeem-malik-live-budget-aur-giraftariyan-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3099,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.415Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.415Z\",\n            \"updated\": \"2019-07-07T06:38:59.416Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Asif Zardari Ki Giraftari, PPP Ke Liye Dhachka) - 10th June 2019\",\n            \"slug\": \"nadeem-malik-live-asif-zardari-ki-giraftari-ppp-ke-liye-dhachka-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.416Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/2x0dVs3unaU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151985/nadeem-malik-live-asif-zardari-ki-giraftari-ppp-ke-liye-dhachka-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3100,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.463Z\",\n            \"updated\": \"2019-07-07T06:38:59.465Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Mulk Mein Aik Eid Na Ho Saki) - 4th June 2019\",\n            \"slug\": \"nadeem-malik-live-mulk-mein-aik-eid-na-ho-saki-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.465Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/0DtnJEObTTU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151715/nadeem-malik-live-mulk-mein-aik-eid-na-ho-saki-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3101,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.499Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.494Z\",\n            \"updated\": \"2019-07-07T06:38:59.499Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Jahangir Tareen Exclusive Interview) - 3rd June 2019\",\n            \"slug\": \"nadeem-malik-live-jahangir-tareen-exclusive-interview-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.499Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/rjQSMd7CjG0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151683/nadeem-malik-live-jahangir-tareen-exclusive-interview-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3102,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.539Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.538Z\",\n            \"updated\": \"2019-07-07T06:38:59.539Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Conviction To Army Officers) - 30th May 2019\",\n            \"slug\": \"nadeem-malik-live-conviction-to-army-officers-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.539Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/cASe9mkz7sU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151485/nadeem-malik-live-conviction-to-army-officers-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3103,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.588Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.587Z\",\n            \"updated\": \"2019-07-07T06:38:59.588Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Hakumat Aur Opposition Ka Takrao) - 29th May 2019\",\n            \"slug\": \"nadeem-malik-live-hakumat-aur-opposition-ka-takrao-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.588Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/TzjkhmUPoww\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151421/nadeem-malik-live-hakumat-aur-opposition-ka-takrao-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3104,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.628Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.617Z\",\n            \"updated\": \"2019-07-07T06:38:59.628Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Jahangir Tareen Exclusive Interview) - 28th May 2019\",\n            \"slug\": \"nadeem-malik-live-jahangir-tareen-exclusive-interview-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.628Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/3h-dR7sLS9g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151379/nadeem-malik-live-jahangir-tareen-exclusive-interview-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3105,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.675Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.675Z\",\n            \"updated\": \"2019-07-07T06:38:59.675Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Challenges For PTI Govt) - 27th May 2019\",\n            \"slug\": \"nadeem-malik-live-challenges-for-pti-govt-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.675Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/ekDlvwY2eMs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151332/nadeem-malik-live-challenges-for-pti-govt-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3106,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.709Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.709Z\",\n            \"updated\": \"2019-07-07T06:38:59.709Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Opposition Reservations on NAB) - 23rd May 2019\",\n            \"slug\": \"nadeem-malik-live-opposition-reservations-on-nab-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.709Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/2NqwZWJT2vk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151102/nadeem-malik-live-opposition-reservations-on-nab-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3107,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.770Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.770Z\",\n            \"updated\": \"2019-07-07T06:38:59.770Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Opposition Ready For Movement?) - 22nd May 2019\",\n            \"slug\": \"nadeem-malik-live-opposition-ready-for-movement-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.770Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/8nXD3myogu4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151052/nadeem-malik-live-opposition-ready-for-movement-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3108,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.799Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.799Z\",\n            \"updated\": \"2019-07-07T06:38:59.799Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Special Talk With Khawaja Asif) - 21st May 2019\",\n            \"slug\": \"nadeem-malik-live-special-talk-with-khawaja-asif-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.799Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/LNDs5pHee9A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150984/nadeem-malik-live-special-talk-with-khawaja-asif-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3109,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.825Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.825Z\",\n            \"updated\": \"2019-07-07T06:38:59.825Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Shahid Khaqan Abbasi Exclusive Interview) - 20th May 2019\",\n            \"slug\": \"nadeem-malik-live-shahid-khaqan-abbasi-exclusive-interview-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.825Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/EBBXraW6-qw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150939/nadeem-malik-live-shahid-khaqan-abbasi-exclusive-interview-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3110,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.869Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.869Z\",\n            \"updated\": \"2019-07-07T06:38:59.869Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Dollar Rate Aur Mehngai Mein Izafa) - 16th May 2019\",\n            \"slug\": \"nadeem-malik-live-dollar-rate-aur-mehngai-mein-izafa-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.869Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/uJYU0RN_6U8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150730/nadeem-malik-live-dollar-rate-aur-mehngai-mein-izafa-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3111,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.897Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.897Z\",\n            \"updated\": \"2019-07-07T06:38:59.897Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Negative Trend Towards Industry) - 15th May 2019\",\n            \"slug\": \"nadeem-malik-live-negative-trend-towards-industry-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.897Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/mqy-j-w03U4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150653/nadeem-malik-live-negative-trend-towards-industry-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3112,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:59.933Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:59.933Z\",\n            \"updated\": \"2019-07-07T06:38:59.933Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Tax Amnesty Scheme Approved) \\u2013 14th May 2019\",\n            \"slug\": \"nadeem-malik-live-tax-amnesty-scheme-approved-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:38:59.934Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/1U_NlZCuTq4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150582/nadeem-malik-live-tax-amnesty-scheme-approved-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3113,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.033Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.033Z\",\n            \"updated\": \"2019-07-07T06:39:00.033Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Pakistan Ki Economy Kaise Behtar Hogi?) - 13th May 2019\",\n            \"slug\": \"nadeem-malik-live-pakistan-ki-economy-kaise-behtar-hogi-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.033Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/sxy6ccsLKsk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150541/nadeem-malik-live-pakistan-ki-economy-kaise-behtar-hogi-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3114,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.090Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.090Z\",\n            \"updated\": \"2019-07-07T06:39:00.090Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (IMF Conditions, Economy, Other Issues) - 9th May 2019\",\n            \"slug\": \"nadeem-malik-live-imf-conditions-economy-other-issues-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.090Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/Q9Oyy2MsoKg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150290/nadeem-malik-live-imf-conditions-economy-other-issues-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3115,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.229Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.229Z\",\n            \"updated\": \"2019-07-07T06:39:00.229Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Controversy New Chairman FBR) \\u2013 8th May 2019\",\n            \"slug\": \"nadeem-malik-live-controversy-new-chairman-fbr-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.229Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/MVcS-xldzU8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150225/nadeem-malik-live-controversy-new-chairman-fbr-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3116,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.326Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.326Z\",\n            \"updated\": \"2019-07-07T06:39:00.326Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Nawaz Sharif Ki Jail Wapsi) - 7th May 2019\",\n            \"slug\": \"nadeem-malik-live-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.326Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/LNgA6Mo0zIg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150156/nadeem-malik-live-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3117,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.405Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.404Z\",\n            \"updated\": \"2019-07-07T06:39:00.405Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Khursheed Shah Exclusive Interview) - 6th May 2019\",\n            \"slug\": \"nadeem-malik-live-khursheed-shah-exclusive-interview-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.405Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/VoBFEPpXIaU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150087/nadeem-malik-live-khursheed-shah-exclusive-interview-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3118,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.482Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.482Z\",\n            \"updated\": \"2019-07-07T06:39:00.482Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (NRO, IMF, Tax Issues) - 2nd May 2019\",\n            \"slug\": \"nadeem-malik-live-nro-imf-tax-issues-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.483Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/Ty-jR_UjCZM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149839/nadeem-malik-live-nro-imf-tax-issues-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3119,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.572Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.572Z\",\n            \"updated\": \"2019-07-07T06:39:00.572Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (IMF, Accountability, Masood Azhar) - 1st May 2019\",\n            \"slug\": \"nadeem-malik-live-imf-accountability-masood-azhar-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.572Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/UYVBQwpPBm4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149777/nadeem-malik-live-imf-accountability-masood-azhar-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3120,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.682Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.681Z\",\n            \"updated\": \"2019-07-07T06:39:00.682Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Awam Mehngai Se Pareshan) \\u2013 30th April 2019\",\n            \"slug\": \"nadeem-malik-live-awam-mehngai-se-pareshan-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.682Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/vkbSMfIFobU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149703/nadeem-malik-live-awam-mehngai-se-pareshan-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3121,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.797Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.797Z\",\n            \"updated\": \"2019-07-07T06:39:00.798Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (DG ISPR's Press Conference) - 29th April 2019\",\n            \"slug\": \"nadeem-malik-live-dg-isprs-press-conference-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.798Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/KMSpsYHCZTw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149636/nadeem-malik-live-dg-ispr-s-press-conference-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3122,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:00.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:00.906Z\",\n            \"updated\": \"2019-07-07T06:39:00.921Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Shahid Khaqan Abbasi Exclusive Interview) - 25th April 2019\",\n            \"slug\": \"nadeem-malik-live-shahid-khaqan-abbasi-exclusive-interview-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:00.921Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/MzkuOh1h8Sk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149403/nadeem-malik-live-shahid-khaqan-abbasi-exclusive-interview-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3123,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.010Z\",\n            \"updated\": \"2019-07-07T06:39:01.010Z\",\n            \"extra_data\": {\n                \"host\": \"Nadeem Malik\",\n                \"job_id\": 162,\n                \"feed_id\": 35,\n                \"feed_name\": \"unewstv - Nadeem Malik Live\",\n                \"show_name\": \"Nadeem Malik Live\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nadeem Malik Live (Hakumat Ke Liye Mushkil Waqt) \\u2013 24th April 2019\",\n            \"slug\": \"nadeem-malik-live-hakumat-ke-liye-mushkil-waqt-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.010Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/nwQN7BxrFDA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nadeem+Malik+Live+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149359/nadeem-malik-live-hakumat-ke-liye-mushkil-waqt-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 33,\n            \"tags\": \"[\\\"Nadeem Malik\\\", \\\"Nadeem Malik Live\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3124,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.285Z\",\n            \"updated\": \"2019-07-07T06:39:01.286Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Evidence Against Rana Sanaullah?) \\u2013 4th July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-evidence-against-rana-sanaullah-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.286Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7civ3s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153543/news-eye-with-meher-abbasi-evidence-against-rana-sanaullah-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3125,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.312Z\",\n            \"updated\": \"2019-07-07T06:39:01.313Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Rana Sanaullah's Arrest) \\u2013 3rd July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-rana-sanaullahs-arrest-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.313Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfzn5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153458/news-eye-with-meher-abbasi-rana-sanaullah-s-arrest-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3126,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.379Z\",\n            \"updated\": \"2019-07-07T06:39:01.380Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Imran Khan's Clear Message) \\u2013 2nd July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-imran-khans-clear-message-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.380Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdckb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153389/news-eye-with-meher-abbasi-imran-khan-s-clear-message-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3127,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.443Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.443Z\",\n            \"updated\": \"2019-07-07T06:39:01.443Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Rana Sanaullah Arrested) \\u2013 1st July 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.443Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7camj8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153317/news-eye-with-meher-abbasi-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3128,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.476Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.476Z\",\n            \"updated\": \"2019-07-07T06:39:01.476Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (All Parties Conference) \\u2013 27th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-all-parties-conference-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.476Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0vj1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/153050/news-eye-with-meher-abbasi-all-parties-conference-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3129,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.507Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.507Z\",\n            \"updated\": \"2019-07-07T06:39:01.507Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (All Parties Conference) \\u2013 26th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.507Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by5m9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152983/news-eye-with-meher-abbasi-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3130,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.543Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.543Z\",\n            \"updated\": \"2019-07-07T06:39:01.543Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition APC) \\u2013 25th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-apc-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.543Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvg68\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152905/news-eye-with-meher-abbasi-opposition-apc-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3131,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.578Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.577Z\",\n            \"updated\": \"2019-07-07T06:39:01.578Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition APC) \\u2013 24th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-apc-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.578Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt5eu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152846/news-eye-with-meher-abbasi-opposition-apc-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3132,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.611Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.610Z\",\n            \"updated\": \"2019-07-07T06:39:01.611Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Budget Kaise Manzoor Hoga) \\u2013 20th June 2019\",\n            \"slug\": \"news-eye-budget-kaise-manzoor-hoga-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.611Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7blgds\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152593/news-eye-budget-kaise-manzoor-hoga-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3133,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.665Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.665Z\",\n            \"updated\": \"2019-07-07T06:39:01.665Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Budget Per Hungama) \\u2013 19th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-budget-per-hungama-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.665Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjp14\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152519/news-eye-with-meher-abbasi-budget-per-hungama-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3134,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.707Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.707Z\",\n            \"updated\": \"2019-07-07T06:39:01.707Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Budget Kaise Manzoor Hoga?) \\u2013 18th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-budget-kaise-manzoor-hoga-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.707Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhyw9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152471/news-eye-with-meher-abbasi-budget-kaise-manzoor-hoga-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3135,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.746Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.745Z\",\n            \"updated\": \"2019-07-07T06:39:01.746Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition Vs Govt) \\u2013 17th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-vs-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.746Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/Oq2yJ3pZPms\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152409/news-eye-with-meher-abbasi-opposition-vs-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3136,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.776Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.776Z\",\n            \"updated\": \"2019-07-07T06:39:01.776Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Commission of Inquiry) \\u2013 13th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-commission-of-inquiry-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.776Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/FmLWtg1o1PE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152199/news-eye-with-meher-abbasi-commission-of-inquiry-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3137,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.812Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.812Z\",\n            \"updated\": \"2019-07-07T06:39:01.812Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (PM Imran Khan's Speech) \\u2013 12th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-pm-imran-khans-speech-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.812Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayg6o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152126/news-eye-with-meher-abbasi-pm-imran-khan-s-speech-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3138,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.862Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.862Z\",\n            \"updated\": \"2019-07-07T06:39:01.862Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Asif Zardari Giraftar) \\u2013 10th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-asif-zardari-giraftar-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.862Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqxqf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/152005/news-eye-with-meher-abbasi-asif-zardari-giraftar-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3139,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.900Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.900Z\",\n            \"updated\": \"2019-07-07T06:39:01.900Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Eid Special) \\u2013 6th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.900Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aflsz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151804/news-eye-with-meher-abbasi-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3140,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.933Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.933Z\",\n            \"updated\": \"2019-07-07T06:39:01.933Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Eid Special) \\u2013 5th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-eid-special-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.933Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/XCU1TFUsko4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151777/news-eye-with-meher-abbasi-eid-special-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3141,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.961Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:01.961Z\",\n            \"updated\": \"2019-07-07T06:39:01.961Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Opposition Ka Ahtajaj Ka Elan) \\u2013 4th June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-opposition-ka-ahtajaj-ka-elan-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:01.961Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a9jkb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151734/news-eye-with-meher-abbasi-opposition-ka-ahtajaj-ka-elan-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3142,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:02.064Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:02.064Z\",\n            \"updated\": \"2019-07-07T06:39:02.064Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Moon Sighting Issue) \\u2013 3rd June 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-moon-sighting-issue-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:02.064Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a6gs5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151692/news-eye-with-meher-abbasi-moon-sighting-issue-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3143,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:02.195Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:02.194Z\",\n            \"updated\": \"2019-07-07T06:39:02.250Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Shahid Khaqan Abbasi Exclusive) \\u2013 30th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-shahid-khaqan-abbasi-exclusive-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:02.250Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tqt0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151507/news-eye-with-meher-abbasi-shahid-khaqan-abbasi-exclusive-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3144,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:02.406Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:02.406Z\",\n            \"updated\": \"2019-07-07T06:39:02.406Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Discussion on Current Issues) \\u2013 29th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-discussion-on-current-issues-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:02.407Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79qga6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151450/news-eye-with-meher-abbasi-discussion-on-current-issues-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3145,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:02.564Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:02.564Z\",\n            \"updated\": \"2019-07-07T06:39:02.564Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Yaum e Takbeer) \\u2013 28th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-yaum-e-takbeer-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:02.564Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mkoi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151389/news-eye-with-meher-abbasi-yaum-e-takbeer-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3146,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:02.789Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:02.788Z\",\n            \"updated\": \"2019-07-07T06:39:02.789Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Who Want to Replace PM?) \\u2013 27th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-who-want-to-replace-pm-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:02.789Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79imn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151349/news-eye-with-meher-abbasi-who-want-to-replace-pm-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3147,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:02.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:02.869Z\",\n            \"updated\": \"2019-07-07T06:39:02.876Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Opposition Want to Topple PTI Govt) \\u2013 23rd May 2019\",\n            \"slug\": \"news-eye-opposition-want-to-topple-pti-govt-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:02.876Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795kfa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151121/news-eye-opposition-want-to-topple-pti-govt-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3148,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:02.984Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:02.984Z\",\n            \"updated\": \"2019-07-07T06:39:02.984Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (NAB Under Pressure) \\u2013 21st May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-nab-under-pressure-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:02.984Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ylf5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/151023/news-eye-with-meher-abbasi-nab-under-pressure-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3149,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.083Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.083Z\",\n            \"updated\": \"2019-07-07T06:39:03.083Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Anti Govt Movement) \\u2013 16th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-anti-govt-movement-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.083Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hvp1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150740/news-eye-with-meher-abbasi-anti-govt-movement-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3150,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.173Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.173Z\",\n            \"updated\": \"2019-07-07T06:39:03.174Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Fake Accounts Case) \\u2013 15th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-fake-accounts-case-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.174Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78esx0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150680/news-eye-with-meher-abbasi-fake-accounts-case-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3151,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.302Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.301Z\",\n            \"updated\": \"2019-07-07T06:39:03.302Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.302Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bo6h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150609/news-eye-with-meher-abbasi-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3152,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.437Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.437Z\",\n            \"updated\": \"2019-07-07T06:39:03.437Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Current Issues) \\u2013 9th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-current-issues-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.437Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/li15Hdp3w0g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150310/news-eye-with-meher-abbasi-current-issues-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3153,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.513Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.498Z\",\n            \"updated\": \"2019-07-07T06:39:03.514Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Shahid Kakhan Abbasi Exclusive Interview) \\u2013 8th May 2019\",\n            \"slug\": \"news-eye-shahid-kakhan-abbasi-exclusive-interview-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.514Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/rbbXPpylYIE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150243/news-eye-shahid-kakhan-abbasi-exclusive-interview-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3154,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.602Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.602Z\",\n            \"updated\": \"2019-07-07T06:39:03.602Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Nawaz Sharif Back to Jail) \\u2013 7th May 2018\",\n            \"slug\": \"news-eye-with-meher-abbasi-nawaz-sharif-back-to-jail-7th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:03.602Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77ol66\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150177/news-eye-with-meher-abbasi-nawaz-sharif-back-to-jail-7th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3155,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.635Z\",\n            \"updated\": \"2019-07-07T06:39:03.635Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (New Economic Team) \\u2013 6th May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-new-economic-team-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.635Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kzrz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/150108/news-eye-with-meher-abbasi-new-economic-team-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3156,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.676Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.676Z\",\n            \"updated\": \"2019-07-07T06:39:03.676Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (NAB Qanoon Per Tanqeed) \\u2013 2nd May 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-nab-qanoon-per-tanqeed-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.676Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7789f7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149856/news-eye-with-meher-abbasi-nab-qanoon-per-tanqeed-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3157,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.712Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.712Z\",\n            \"updated\": \"2019-07-07T06:39:03.712Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Old Faces in New Pakistan?) \\u2013 1st May 2019\",\n            \"slug\": \"news-eye-old-faces-in-new-pakistan-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.712Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x775129\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149794/news-eye-old-faces-in-new-pakistan-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3158,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.760Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.760Z\",\n            \"updated\": \"2019-07-07T06:39:03.760Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Nay Pakistan Mein Purane Masayl) - 30th April 2019\",\n            \"slug\": \"news-eye-nay-pakistan-mein-purane-masayl-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.760Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7720v0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149721/news-eye-nay-pakistan-mein-purane-masayl-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3159,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.802Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.802Z\",\n            \"updated\": \"2019-07-07T06:39:03.802Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye with Meher Abbasi (Who Is Funding PTM?) \\u2013 29th April 2019\",\n            \"slug\": \"news-eye-with-meher-abbasi-who-is-funding-ptm-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.802Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ybj3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149647/news-eye-with-meher-abbasi-who-is-funding-ptm-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3160,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.831Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.831Z\",\n            \"updated\": \"2019-07-07T06:39:03.831Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Sharif Family Cases) \\u2013 25th April 2019\",\n            \"slug\": \"news-eye-sharif-family-cases-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.831Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76lnsu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149410/news-eye-sharif-family-cases-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3161,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.898Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.897Z\",\n            \"updated\": \"2019-07-07T06:39:03.898Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Kia Punjab Mein Tabdeeli Aaye Gi?) \\u2013 24th April 2019\",\n            \"slug\": \"news-eye-kia-punjab-mein-tabdeeli-aaye-gi-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.898Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76icr7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149344/news-eye-kia-punjab-mein-tabdeeli-aaye-gi-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3162,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:03.950Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:03.949Z\",\n            \"updated\": \"2019-07-07T06:39:03.950Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Allegation of Money Laundering on Sharif Family) \\u2013 23rd April 2019\",\n            \"slug\": \"news-eye-allegation-of-money-laundering-on-sharif-family-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:03.950Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fnlt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149306/news-eye-allegation-of-money-laundering-on-sharif-family-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.032Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.032Z\",\n            \"updated\": \"2019-07-07T06:39:04.034Z\",\n            \"extra_data\": {\n                \"host\": \"Mehar Bokhari\",\n                \"job_id\": 155,\n                \"feed_id\": 28,\n                \"feed_name\": \"unewstv - News Eye\",\n                \"show_name\": \"News Eye\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Eye (Technocrats in PTI Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"news-eye-technocrats-in-pti-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.034Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76c8a0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Eye+with+Meher+Abbasi\",\n            \"source_detail\": \"http://www.unewstv.com/149238/news-eye-technocrats-in-pti-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 26,\n            \"tags\": \"[\\\"Mehar Bokhari\\\", \\\"News Eye\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.283Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.283Z\",\n            \"updated\": \"2019-07-07T06:39:04.283Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Ministers Fight in Federal Cabinet Meeting) \\u2013 4th July 2019\",\n            \"slug\": \"aap-kay-muqabil-ministers-fight-in-federal-cabinet-meeting-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.283Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/yhwI9xEcuw8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153539/aap-kay-muqabil-ministers-fight-in-federal-cabinet-meeting-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.323Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.322Z\",\n            \"updated\": \"2019-07-07T06:39:04.323Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (System Kab Theek Hoga) \\u2013 3rd July 2019\",\n            \"slug\": \"aap-kay-muqabil-system-kab-theek-hoga-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.323Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cg0zl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153460/aap-kay-muqabil-system-kab-theek-hoga-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.370Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.370Z\",\n            \"updated\": \"2019-07-07T06:39:04.370Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Rana Sanaullah's Arrest, Other Issues) \\u2013 2nd July 2019\",\n            \"slug\": \"aap-kay-muqabil-rana-sanaullahs-arrest-other-issues-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.370Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cddip\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153388/aap-kay-muqabil-rana-sanaullah-s-arrest-other-issues-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.405Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.405Z\",\n            \"updated\": \"2019-07-07T06:39:04.405Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (PM Imran Khan's Interview About Amnesty & Taxes) \\u2013 1st July 2019\",\n            \"slug\": \"aap-kay-muqabil-pm-imran-khans-interview-about-amnesty-taxes-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.405Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7camxb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153315/aap-kay-muqabil-pm-imran-khan-s-interview-about-amnesty-taxes-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.471Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.470Z\",\n            \"updated\": \"2019-07-07T06:39:04.471Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Opposition Aur Hakumat Mein Mahaz Arai) \\u2013 27th June 2019\",\n            \"slug\": \"aap-kay-muqabil-opposition-aur-hakumat-mein-mahaz-arai-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.471Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0w8v\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/153051/aap-kay-muqabil-opposition-aur-hakumat-mein-mahaz-arai-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.498Z\",\n            \"updated\": \"2019-07-07T06:39:04.498Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Opposition's All Parties Conference) \\u2013 26th June 2019\",\n            \"slug\": \"aap-kay-muqabil-oppositions-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.498Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by66z\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152990/aap-kay-muqabil-opposition-s-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.527Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.527Z\",\n            \"updated\": \"2019-07-07T06:39:04.527Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Serious Clash Between Murad Saeed & Ahsan Iqbal) \\u2013 25th June 2019\",\n            \"slug\": \"aap-kay-muqabil-serious-clash-between-murad-saeed-ahsan-iqbal-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.527Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvghs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152907/aap-kay-muqabil-serious-clash-between-murad-saeed-ahsan-iqbal-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.598Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.597Z\",\n            \"updated\": \"2019-07-07T06:39:04.598Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap kay Muqabil (Imran Khan Ka Amnesty Scheme Per Zoor) - 24th June 2019\",\n            \"slug\": \"aap-kay-muqabil-imran-khan-ka-amnesty-scheme-per-zoor-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.598Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/gBdntPG86hc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152853/aap-kay-muqabil-imran-khan-ka-amnesty-scheme-per-zoor-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.656Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.655Z\",\n            \"updated\": \"2019-07-07T06:39:04.656Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap kay Muqabi (Asad Umar Ki Hakumat Par Tanqeed) - 20th June 2019\",\n            \"slug\": \"aap-kay-muqabi-asad-umar-ki-hakumat-par-tanqeed-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.656Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/JqvjwRDNv0k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152613/aap-kay-muqabi-asad-umar-ki-hakumat-par-tanqeed-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.749Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.749Z\",\n            \"updated\": \"2019-07-07T06:39:04.749Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Opposition Aur Hakumat Mein Tanao) \\u2013 19th June 2019\",\n            \"slug\": \"aap-kay-muqabil-opposition-aur-hakumat-mein-tanao-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.749Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjp31\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152522/aap-kay-muqabil-opposition-aur-hakumat-mein-tanao-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.879Z\",\n            \"updated\": \"2019-07-07T06:39:04.880Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Cricket Match, Political Issues) \\u2013 18th June 2019\",\n            \"slug\": \"aap-kay-muqabil-cricket-match-political-issues-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.880Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhyzg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152466/aap-kay-muqabil-cricket-match-political-issues-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.999Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:04.999Z\",\n            \"updated\": \"2019-07-07T06:39:04.999Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Maryam Bilawal Meeting) \\u2013 17th June 2019\",\n            \"slug\": \"aap-kay-muqabil-maryam-bilawal-meeting-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:04.999Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgkel\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152407/aap-kay-muqabil-maryam-bilawal-meeting-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.105Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.104Z\",\n            \"updated\": \"2019-07-07T06:39:05.105Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Shahid Khaqan Abbasi's Challenge to PM Imran Khan) \\u2013 13th June 2019\",\n            \"slug\": \"aap-kay-muqabil-shahid-khaqan-abbasis-challenge-to-pm-imran-khan-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.105Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/jZ7JDdMDxVI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152196/aap-kay-muqabil-shahid-khaqan-abbasi-s-challenge-to-pm-imran-khan-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3177,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.154Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.154Z\",\n            \"updated\": \"2019-07-07T06:39:05.154Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (PM Imran Khan's Address to Nation) \\u2013 12th June 2019\",\n            \"slug\": \"aap-kay-muqabil-pm-imran-khans-address-to-nation-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.154Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayi3s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152134/aap-kay-muqabil-pm-imran-khan-s-address-to-nation-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3178,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.270Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.270Z\",\n            \"updated\": \"2019-07-07T06:39:05.270Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Discussion on Current Issues) \\u2013 11th June 2019\",\n            \"slug\": \"aap-kay-muqabil-discussion-on-current-issues-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.270Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7auj8h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152082/aap-kay-muqabil-discussion-on-current-issues-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3179,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.381Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.379Z\",\n            \"updated\": \"2019-07-07T06:39:05.381Z\",\n            \"extra_data\": {\n                \"host\": \"Rauf Klasra, Amir Mateen\",\n                \"job_id\": 140,\n                \"feed_id\": 12,\n                \"feed_name\": \"unewstv - Aap Kay Muqabil\",\n                \"show_name\": \"Aap Kay Muqabil\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aap Kay Muqabil (Asif Zardari Arrested) \\u2013 10th June 2019\",\n            \"slug\": \"aap-kay-muqabil-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.381Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqy43\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aap+Kay+Muqabil\",\n            \"source_detail\": \"http://www.unewstv.com/152006/aap-kay-muqabil-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 10,\n            \"tags\": \"[\\\"Rauf Klasra, Amir Mateen\\\", \\\"Aap Kay Muqabil\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3180,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.767Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.767Z\",\n            \"updated\": \"2019-07-07T06:39:05.767Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Leaked Video of Judge) \\u2013 6th July 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-leaked-video-of-judge-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.767Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/JkPEjNsemkI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153650/face-to-face-with-ayesha-bakhsh-leaked-video-of-judge-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3181,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.814Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.813Z\",\n            \"updated\": \"2019-07-07T06:39:05.814Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Ahsan Iqbal in Trouble) \\u2013 5th July 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-ahsan-iqbal-in-trouble-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.814Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/27AuMPwqKQY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153587/face-to-face-with-ayesha-bakhsh-ahsan-iqbal-in-trouble-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3182,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.873Z\",\n            \"updated\": \"2019-07-07T06:39:05.873Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (PMLN Members Meet Imran Khan) \\u2013 30th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.873Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/Zbg7Vb8QKRs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153229/face-to-face-with-ayesha-bakhsh-pmln-members-meet-imran-khan-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3183,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.904Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.903Z\",\n            \"updated\": \"2019-07-07T06:39:05.904Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (PM Imran Khan's Speech) - 29th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-pm-imran-khans-speech-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.904Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/TRzgxjBp1lY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153169/face-to-face-with-ayesha-bakhsh-pm-imran-khan-s-speech-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3184,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.953Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.953Z\",\n            \"updated\": \"2019-07-07T06:39:05.953Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face (Pakistan Ki Maeeshat Kaise Bahal Hogi?) - 28th June 2019\",\n            \"slug\": \"face-to-face-pakistan-ki-maeeshat-kaise-bahal-hogi-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.953Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/IbK1oCZh5fs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/153108/face-to-face-pakistan-ki-maeeshat-kaise-bahal-hogi-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3185,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.983Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:05.983Z\",\n            \"updated\": \"2019-07-07T06:39:05.983Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (What Is The Agenda of APC?) \\u2013 23rd June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-what-is-the-agenda-of-apc-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:05.983Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/pq2Y2UOfR6g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152769/face-to-face-with-ayesha-bakhsh-what-is-the-agenda-of-apc-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3186,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.010Z\",\n            \"updated\": \"2019-07-07T06:39:06.011Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Maryam Nawaz Press Conference) \\u2013 22nd June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.011Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/n6PqogrpMq8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152709/face-to-face-with-ayesha-bakhsh-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3187,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.050Z\",\n            \"updated\": \"2019-07-07T06:39:06.050Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Current Issues) \\u2013 21st June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-current-issues-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.050Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/uqWAboigyrw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152638/face-to-face-with-ayesha-bakhsh-current-issues-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3188,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.091Z\",\n            \"updated\": \"2019-07-07T06:39:06.091Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Bilawal Maryam Meeting) \\u2013 16th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-bilawal-maryam-meeting-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.091Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/NYA54aQOfuQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152340/face-to-face-with-ayesha-bakhsh-bilawal-maryam-meeting-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3189,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.119Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.119Z\",\n            \"updated\": \"2019-07-07T06:39:06.120Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (Siasi Giraftariyon Ka Mausam) - 15th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-siasi-giraftariyon-ka-mausam-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.120Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/kE6jVgNP6vA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152290/face-to-face-with-ayesha-bakhsh-siasi-giraftariyon-ka-mausam-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3190,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.160Z\",\n            \"updated\": \"2019-07-07T06:39:06.161Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (Siasi Giraftariyan) - 14th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-siasi-giraftariyan-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.161Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/Y3Jx_-Wt-tg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/152231/face-to-face-with-ayesha-bakhsh-siasi-giraftariyan-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3191,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.191Z\",\n            \"updated\": \"2019-07-07T06:39:06.191Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Why Judges Are Not Accountable?) \\u2013 9th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-why-judges-are-not-accountable-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.191Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/miyghoQyzrw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151929/face-to-face-with-ayesha-bakhsh-why-judges-are-not-accountable-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3192,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.244Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.244Z\",\n            \"updated\": \"2019-07-07T06:39:06.244Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Shahbaz Sharif Ki Wapsi) \\u2013 8th June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-shahbaz-sharif-ki-wapsi-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.244Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/1t3l9YoBYD4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151887/face-to-face-with-ayesha-bakhsh-shahbaz-sharif-ki-wapsi-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3193,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.276Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.276Z\",\n            \"updated\": \"2019-07-07T06:39:06.276Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (PTM, Other Issues) \\u2013 2nd June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-ptm-other-issues-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.276Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/7gT9Bw8Dhv4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151652/face-to-face-with-ayesha-bakhsh-ptm-other-issues-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3194,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.306Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.306Z\",\n            \"updated\": \"2019-07-07T06:39:06.306Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Petrol Prices Increased) \\u2013 1st June 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-petrol-prices-increased-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.306Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/z1MZKDoLEQU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151595/face-to-face-with-ayesha-bakhsh-petrol-prices-increased-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3195,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.337Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.336Z\",\n            \"updated\": \"2019-07-07T06:39:06.337Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Reference Against Judges) \\u2013 31st May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-reference-against-judges-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.337Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/U5PnB7P2NNY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151545/face-to-face-with-ayesha-bakhsh-reference-against-judges-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3196,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.369Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.369Z\",\n            \"updated\": \"2019-07-07T06:39:06.369Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (What Is Agenda of Opposition?) \\u2013 26th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-what-is-agenda-of-opposition-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.370Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/l8hQDimMuno\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151297/face-to-face-with-ayesha-bakhsh-what-is-agenda-of-opposition-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3197,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.408Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.408Z\",\n            \"updated\": \"2019-07-07T06:39:06.408Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Chairman NAB Scandal) \\u2013 24th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.408Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/cYMKi0-nxaM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/151170/face-to-face-with-ayesha-bakhsh-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3198,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.465Z\",\n            \"updated\": \"2019-07-07T06:39:06.465Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Dr. Muhammad Amjid Saqib Exclusive) \\u2013 19th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-dr-muhammad-amjid-saqib-exclusive-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.465Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/Fgv_PKYEyoM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150903/face-to-face-with-ayesha-bakhsh-dr-muhammad-amjid-saqib-exclusive-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3199,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.492Z\",\n            \"updated\": \"2019-07-07T06:39:06.493Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Firdous Ashiq Awan Exclusive) \\u2013 18th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-firdous-ashiq-awan-exclusive-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.493Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/xpfMbLnGmU0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150847/face-to-face-with-ayesha-bakhsh-firdous-ashiq-awan-exclusive-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3200,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.521Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.521Z\",\n            \"updated\": \"2019-07-07T06:39:06.521Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Eid Ke Baad Tehreek Ya?) \\u2013 17th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-eid-ke-baad-tehreek-ya-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.521Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/XESgm1SkQOQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150794/face-to-face-with-ayesha-bakhsh-eid-ke-baad-tehreek-ya-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3201,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.572Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.572Z\",\n            \"updated\": \"2019-07-07T06:39:06.572Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face To Face with Ayesha Bakhsh (IMF Package) - 11th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-imf-package-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.572Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/xtdEK-VoIPs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150422/face-to-face-with-ayesha-bakhsh-imf-package-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3202,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.607Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.607Z\",\n            \"updated\": \"2019-07-07T06:39:06.607Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (IMF, Other Issues) \\u2013 10th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-imf-other-issues-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.607Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/hXbTuvx_rg4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150372/face-to-face-with-ayesha-bakhsh-imf-other-issues-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3203,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.641Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.641Z\",\n            \"updated\": \"2019-07-07T06:39:06.641Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Indian Aggression) \\u2013 5th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-indian-aggression-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.641Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/CWQHZVu8MtE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/150041/face-to-face-with-ayesha-bakhsh-indian-aggression-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3204,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.750Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.749Z\",\n            \"updated\": \"2019-07-07T06:39:06.750Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Hakumati Karkardagi) \\u2013 4th May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-hakumati-karkardagi-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.750Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77eh38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149969/face-to-face-with-ayesha-bakhsh-hakumati-karkardagi-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3205,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.838Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.837Z\",\n            \"updated\": \"2019-07-07T06:39:06.838Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Nawaz Sharif Back To Jail) \\u2013 3rd May 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-nawaz-sharif-back-to-jail-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.838Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77b4qm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149909/face-to-face-with-ayesha-bakhsh-nawaz-sharif-back-to-jail-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3206,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.917Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.917Z\",\n            \"updated\": \"2019-07-07T06:39:06.917Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will PTI Support MQM?) \\u2013 28th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-pti-support-mqm-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.917Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ur8r\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149568/face-to-face-with-ayesha-bakhsh-will-pti-support-mqm-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3207,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:06.976Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:06.976Z\",\n            \"updated\": \"2019-07-07T06:39:06.976Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Hassan Nisar Exclusive Interview) \\u2013 27th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-hassan-nisar-exclusive-interview-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:06.976Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76s07d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149524/face-to-face-with-ayesha-bakhsh-hassan-nisar-exclusive-interview-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3208,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.082Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.056Z\",\n            \"updated\": \"2019-07-07T06:39:07.082Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will Nawaz Sharif Get NRO?) \\u2013 26th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-nawaz-sharif-get-nro-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.082Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76owba\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149463/face-to-face-with-ayesha-bakhsh-will-nawaz-sharif-get-nro-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3209,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.248Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.248Z\",\n            \"updated\": \"2019-07-07T06:39:07.248Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Opposition Vs Govt) \\u2013 21st April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-opposition-vs-govt-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.248Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7697xw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149165/face-to-face-with-ayesha-bakhsh-opposition-vs-govt-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3210,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.408Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.407Z\",\n            \"updated\": \"2019-07-07T06:39:07.408Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (New CM Punjab) \\u2013 20th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-new-cm-punjab-20th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.408Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7674qw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149124/face-to-face-with-ayesha-bakhsh-new-cm-punjab-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3211,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.574Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.574Z\",\n            \"updated\": \"2019-07-07T06:39:07.575Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will CM Punjab Be Replaced?) \\u2013 19th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-cm-punjab-be-replaced-19th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.575Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x764ryk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/149062/face-to-face-with-ayesha-bakhsh-will-cm-punjab-be-replaced-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3212,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.673Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.673Z\",\n            \"updated\": \"2019-07-07T06:39:07.673Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Will Looted Wealth Be Brought Back?) \\u2013 14th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-will-looted-wealth-be-brought-back-14th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.673Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75tuo8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148772/face-to-face-with-ayesha-bakhsh-will-looted-wealth-be-brought-back-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3213,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.753Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.753Z\",\n            \"updated\": \"2019-07-07T06:39:07.753Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Hamza Shahbaz's Criticism on NAB) \\u2013 13th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-hamza-shahbazs-criticism-on-nab-13th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.753Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75s5ai\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148741/face-to-face-with-ayesha-bakhsh-hamza-shahbaz-s-criticism-on-nab-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3214,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.868Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.868Z\",\n            \"updated\": \"2019-07-07T06:39:07.868Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Opposition Ki Tehreekein) \\u2013 12th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-opposition-ki-tehreekein-12th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.868Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75q2ke\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148673/face-to-face-with-ayesha-bakhsh-opposition-ki-tehreekein-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3215,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.937Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.936Z\",\n            \"updated\": \"2019-07-07T06:39:07.937Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Bharat Ke Hamle Ka Khatra) \\u2013 7th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-bharat-ke-hamle-ka-khatra-7th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.937Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75f7br\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148410/face-to-face-with-ayesha-bakhsh-bharat-ke-hamle-ka-khatra-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3216,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:07.966Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:07.966Z\",\n            \"updated\": \"2019-07-07T06:39:07.966Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (NAB Ki Nakam Karwai) \\u2013 6th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-nab-ki-nakam-karwai-6th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:07.966Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"https://www.youtube.com/watch/SnYD5xvUmEI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148366/face-to-face-with-ayesha-bakhsh-nab-ki-nakam-karwai-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3217,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.003Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.002Z\",\n            \"updated\": \"2019-07-07T06:39:08.003Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (NAB Ki Team Per Hamla?) \\u2013 5th April 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-nab-ki-team-per-hamla-5th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.003Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75bsqx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148302/face-to-face-with-ayesha-bakhsh-nab-ki-team-per-hamla-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3218,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.064Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.064Z\",\n            \"updated\": \"2019-07-07T06:39:08.064Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Fawad Chaudhry Exclusive Interview) \\u2013 31st March 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-fawad-chaudhry-exclusive-interview-31st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.064Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x751yxm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/148043/face-to-face-with-ayesha-bakhsh-fawad-chaudhry-exclusive-interview-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3219,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.101Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.101Z\",\n            \"updated\": \"2019-07-07T06:39:08.101Z\",\n            \"extra_data\": {\n                \"host\": \"Ayesha Bakhsh\",\n                \"job_id\": 159,\n                \"feed_id\": 32,\n                \"feed_name\": \"unewstv - Face to Face with Ayesha Bakhsh\",\n                \"show_name\": \"Face to Face with Ayesha Bakhsh\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Face to Face with Ayesha Bakhsh (Plea Bargain Offer For Nawaz Sharif) \\u2013 30th March 2019\",\n            \"slug\": \"face-to-face-with-ayesha-bakhsh-plea-bargain-offer-for-nawaz-sharif-30th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.101Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7508bp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Face+to+Face+with+Ayesha+Bakhsh\",\n            \"source_detail\": \"http://www.unewstv.com/147985/face-to-face-with-ayesha-bakhsh-plea-bargain-offer-for-nawaz-sharif-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 30,\n            \"tags\": \"[\\\"Ayesha Bakhsh\\\", \\\"Face to Face with Ayesha Bakhsh\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3220,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.320Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.320Z\",\n            \"updated\": \"2019-07-07T06:39:08.320Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Maryam Nawaz Ki Press Conference) \\u2013 6th July 2019\",\n            \"slug\": \"the-reporters-maryam-nawaz-ki-press-conference-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.320Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cnnbd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153647/the-reporters-maryam-nawaz-ki-press-conference-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3221,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.363Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.362Z\",\n            \"updated\": \"2019-07-07T06:39:08.363Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (FBR In Action, Political Issues) \\u2013 3rd July 2019\",\n            \"slug\": \"the-reporters-fbr-in-action-political-issues-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.363Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfqws\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153439/the-reporters-fbr-in-action-political-issues-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3222,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.389Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.389Z\",\n            \"updated\": \"2019-07-07T06:39:08.389Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PM Imran Khan's Offer to Nawaz & Zardari) \\u2013 2nd July 2019\",\n            \"slug\": \"the-reporters-pm-imran-khans-offer-to-nawaz-zardari-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.389Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd3zc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153376/the-reporters-pm-imran-khan-s-offer-to-nawaz-zardari-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3223,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.428Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.428Z\",\n            \"updated\": \"2019-07-07T06:39:08.428Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition's All Parties Conference Failed) - 27th June 2019\",\n            \"slug\": \"the-reporters-oppositions-all-parties-conference-failed-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.428Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0l55\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153030/the-reporters-opposition-s-all-parties-conference-failed-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3224,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.459Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.459Z\",\n            \"updated\": \"2019-07-07T06:39:08.459Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (What Has APC Decided?) \\u2013 26th June 2019\",\n            \"slug\": \"the-reporters-what-has-apc-decided-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.459Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxxu0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152972/the-reporters-what-has-apc-decided-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3225,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.485Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.485Z\",\n            \"updated\": \"2019-07-07T06:39:08.485Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (What The Narrative of PMLN?) - 25th June 2019\",\n            \"slug\": \"the-reporters-what-the-narrative-of-pmln-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.485Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bv5wl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152881/the-reporters-what-the-narrative-of-pmln-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3226,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.514Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.513Z\",\n            \"updated\": \"2019-07-07T06:39:08.514Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Offer of Charter of Economy) \\u2013 24th June 2019\",\n            \"slug\": \"the-reporters-offer-of-charter-of-economy-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.514Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt2p1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152838/the-reporters-offer-of-charter-of-economy-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3227,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.541Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.540Z\",\n            \"updated\": \"2019-07-07T06:39:08.541Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Ki Darkhast Zamanat Mustard) - 20th June 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-ki-darkhast-zamanat-mustard-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.541Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl88t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152568/the-reporters-nawaz-sharif-ki-darkhast-zamanat-mustard-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3228,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.571Z\",\n            \"updated\": \"2019-07-07T06:39:08.571Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Ishaq Dar Trying To Get Political Asylum in UK) - 19th June 2019\",\n            \"slug\": \"the-reporters-ishaq-dar-trying-to-get-political-asylum-in-uk-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.571Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjimy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152493/the-reporters-ishaq-dar-trying-to-get-political-asylum-in-uk-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3229,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.609Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.608Z\",\n            \"updated\": \"2019-07-07T06:39:08.609Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Ki NAB Zada Siasat) - 18th June 2019\",\n            \"slug\": \"the-reporters-opposition-ki-nab-zada-siasat-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.609Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhrrv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152438/the-reporters-opposition-ki-nab-zada-siasat-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3230,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.674Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.674Z\",\n            \"updated\": \"2019-07-07T06:39:08.674Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Fawad Chaudhry Ka Sami Ibrahim Ko Thappar) \\u2013 17th June 2019.\",\n            \"slug\": \"the-reporters-fawad-chaudhry-ka-sami-ibrahim-ko-thappar-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.674Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgaqi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152383/the-reporters-fawad-chaudhry-ka-sami-ibrahim-ko-thappar-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3231,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.706Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.706Z\",\n            \"updated\": \"2019-07-07T06:39:08.706Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Iftikhar Chaudhry Bhi Maidan Mein Aa Gaye) - 13th June 2019\",\n            \"slug\": \"the-reporters-iftikhar-chaudhry-bhi-maidan-mein-aa-gaye-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.706Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b26rp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152162/the-reporters-iftikhar-chaudhry-bhi-maidan-mein-aa-gaye-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3232,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.733Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.733Z\",\n            \"updated\": \"2019-07-07T06:39:08.733Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PTI Govt's Budget, Other Issues) - 12th June 2019\",\n            \"slug\": \"the-reporters-pti-govts-budget-other-issues-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.733Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay2es\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152113/the-reporters-pti-govt-s-budget-other-issues-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3233,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.785Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.785Z\",\n            \"updated\": \"2019-07-07T06:39:08.785Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Hamza Shahbaz Ki Giraftari) - 11th June 2019\",\n            \"slug\": \"the-reporters-hamza-shahbaz-ki-giraftari-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.785Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7atu05\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152057/the-reporters-hamza-shahbaz-ki-giraftari-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3234,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.811Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.811Z\",\n            \"updated\": \"2019-07-07T06:39:08.811Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Asif Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"the-reporters-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.811Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqrmr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151997/the-reporters-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3235,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.839Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.839Z\",\n            \"updated\": \"2019-07-07T06:39:08.839Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Eid Ke Baad Ka Siasi Manzar Nama) - 4th June 2019\",\n            \"slug\": \"the-reporters-eid-ke-baad-ka-siasi-manzar-nama-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.839Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7a93e2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151711/the-reporters-eid-ke-baad-ka-siasi-manzar-nama-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3236,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.914Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.901Z\",\n            \"updated\": \"2019-07-07T06:39:08.914Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Kia Chahti Hai) \\u2013 3rd June 2019\",\n            \"slug\": \"the-reporters-opposition-kia-chahti-hai-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.914Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a6464\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151698/the-reporters-opposition-kia-chahti-hai-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3237,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.960Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:08.960Z\",\n            \"updated\": \"2019-07-07T06:39:08.976Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Sentence To Army Officers on Espionage) - 30th May 2019\",\n            \"slug\": \"the-reporters-sentence-to-army-officers-on-espionage-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:08.976Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79t8nr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151479/the-reporters-sentence-to-army-officers-on-espionage-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3238,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.085Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.068Z\",\n            \"updated\": \"2019-07-07T06:39:09.085Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Ka Countdown Shuru) - 29th May 2019\",\n            \"slug\": \"the-reporters-opposition-ka-countdown-shuru-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.085Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79pvvn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151419/the-reporters-opposition-ka-countdown-shuru-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3239,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.178Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.177Z\",\n            \"updated\": \"2019-07-07T06:39:09.178Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Kia Nawaz Sharif Ne Atom Bomb Banaya?) - 28th May 2019\",\n            \"slug\": \"the-reporters-kia-nawaz-sharif-ne-atom-bomb-banaya-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.178Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79m4zp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151373/the-reporters-kia-nawaz-sharif-ne-atom-bomb-banaya-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3240,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.275Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.275Z\",\n            \"updated\": \"2019-07-07T06:39:09.275Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PTM Attack on Pakistan Army) - 27th May 2019\",\n            \"slug\": \"the-reporters-ptm-attack-on-pakistan-army-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.275Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79i5p3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151328/the-reporters-ptm-attack-on-pakistan-army-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3241,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.342Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.342Z\",\n            \"updated\": \"2019-07-07T06:39:09.342Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Modi's Victory in Indian Election) - 23rd May 2019\",\n            \"slug\": \"the-reporters-modis-victory-in-indian-election-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.342Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x7956pt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151110/the-reporters-modi-s-victory-in-indian-election-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3242,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.442Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.442Z\",\n            \"updated\": \"2019-07-07T06:39:09.442Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PTM Ka Agenda, US Want to Target Iran) - 22nd May 2019\",\n            \"slug\": \"the-reporters-ptm-ka-agenda-us-want-to-target-iran-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.442Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x791mey\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151079/the-reporters-ptm-ka-agenda-us-want-to-target-iran-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3243,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.492Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.491Z\",\n            \"updated\": \"2019-07-07T06:39:09.492Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Demands New Election) - 21st May 2019\",\n            \"slug\": \"the-reporters-opposition-demands-new-election-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.492Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78y5ov\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150987/the-reporters-opposition-demands-new-election-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3244,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.619Z\",\n            \"updated\": \"2019-07-07T06:39:09.620Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Bilawal Maryam Iftar Dinner) - 20th May 2019\",\n            \"slug\": \"the-reporters-bilawal-maryam-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.620Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uhji\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150940/the-reporters-bilawal-maryam-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3245,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.759Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.759Z\",\n            \"updated\": \"2019-07-07T06:39:09.759Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Zardar Appearance Before NAB, PMLN Meeting) - 16th May 2019\",\n            \"slug\": \"the-reporters-zardar-appearance-before-nab-pmln-meeting-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.759Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hk05\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150719/the-reporters-zardar-appearance-before-nab-pmln-meeting-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3246,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.826Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.826Z\",\n            \"updated\": \"2019-07-07T06:39:09.827Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Will Maryam Nawaz Lead PMLN?) - 15th May 2019\",\n            \"slug\": \"the-reporters-will-maryam-nawaz-lead-pmln-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.827Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78efor\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150648/the-reporters-will-maryam-nawaz-lead-pmln-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3247,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.943Z\",\n            \"updated\": \"2019-07-07T06:39:09.944Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Tax Amnesty Scheme) - 14th May 2019\",\n            \"slug\": \"the-reporters-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.944Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78b7fs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150588/the-reporters-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3248,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:09.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:09.986Z\",\n            \"updated\": \"2019-07-07T06:39:09.986Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Balochistan Aur CPEC) - 13th May 2019\",\n            \"slug\": \"the-reporters-balochistan-aur-cpec-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:09.986Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x787n99\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150533/the-reporters-balochistan-aur-cpec-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3249,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.019Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.019Z\",\n            \"updated\": \"2019-07-07T06:39:10.019Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Opposition Ka Assembly Mein Shoor Sharaba) - 9th May 2019\",\n            \"slug\": \"the-reporters-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.019Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77uym4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150285/the-reporters-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3250,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.069Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.069Z\",\n            \"updated\": \"2019-07-07T06:39:10.069Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Jail Mein) \\u2013 8th May 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-jail-mein-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.069Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rb84\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150216/the-reporters-nawaz-sharif-jail-mein-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3251,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.102Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.101Z\",\n            \"updated\": \"2019-07-07T06:39:10.102Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Doesn't Want to Go Jail?) - 7th May 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-doesnt-want-to-go-jail-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.102Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77o8dw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150154/the-reporters-nawaz-sharif-doesn-t-want-to-go-jail-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3252,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.147Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.147Z\",\n            \"updated\": \"2019-07-07T06:39:10.147Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Sharif Brothers Future) - 6th May 2019\",\n            \"slug\": \"the-reporters-sharif-brothers-future-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.147Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kjwy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150086/the-reporters-sharif-brothers-future-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3253,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.184Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.184Z\",\n            \"updated\": \"2019-07-07T06:39:10.184Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Shahbaz Sharif in London) - 2nd May 2019\",\n            \"slug\": \"the-reporters-shahbaz-sharif-in-london-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.184Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x777uba\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149830/the-reporters-shahbaz-sharif-in-london-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3254,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.211Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.211Z\",\n            \"updated\": \"2019-07-07T06:39:10.212Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (International Media's Agenda Against Pakistan) - 1st May 2019\",\n            \"slug\": \"the-reporters-international-medias-agenda-against-pakistan-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.212Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x774pt6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149770/the-reporters-international-media-s-agenda-against-pakistan-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3255,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.240Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.240Z\",\n            \"updated\": \"2019-07-07T06:39:10.240Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Fazal ur Rehman Ka Elan e Jang) - 30th April 2019\",\n            \"slug\": \"the-reporters-fazal-ur-rehman-ka-elan-e-jang-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.240Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x771mn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149694/the-reporters-fazal-ur-rehman-ka-elan-e-jang-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3256,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.306Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.305Z\",\n            \"updated\": \"2019-07-07T06:39:10.306Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (DG ISPR, PTM, Grouping in PTI) - 29th April 2019\",\n            \"slug\": \"the-reporters-dg-ispr-ptm-grouping-in-pti-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.306Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76xtqd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149621/the-reporters-dg-ispr-ptm-grouping-in-pti-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3257,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.348Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.348Z\",\n            \"updated\": \"2019-07-07T06:39:10.348Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Ka Plan Samne Aa Gaya) \\u2013 25th April 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-ka-plan-samne-aa-gaya-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.349Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76l81w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149402/the-reporters-nawaz-sharif-ka-plan-samne-aa-gaya-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3258,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.375Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.374Z\",\n            \"updated\": \"2019-07-07T06:39:10.375Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (PM Imran Khan's Statement in Iran) - 24th April 2019\",\n            \"slug\": \"the-reporters-pm-imran-khans-statement-in-iran-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.375Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76hzv1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149331/the-reporters-pm-imran-khan-s-statement-in-iran-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3259,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.400Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.400Z\",\n            \"updated\": \"2019-07-07T06:39:10.400Z\",\n            \"extra_data\": {\n                \"host\": \"Sabir Shakir\",\n                \"job_id\": 141,\n                \"feed_id\": 13,\n                \"feed_name\": \"unewstv - The Reporters\",\n                \"show_name\": \"The Reporters\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"The Reporters (Nawaz Sharif Ke Checkup Jaari) - 23rd April 2019\",\n            \"slug\": \"the-reporters-nawaz-sharif-ke-checkup-jaari-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.400Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76f8ez\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/The+Reporters+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149276/the-reporters-nawaz-sharif-ke-checkup-jaari-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 11,\n            \"tags\": \"[\\\"Sabir Shakir\\\", \\\"The Reporters\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3260,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.537Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.537Z\",\n            \"updated\": \"2019-07-07T06:39:10.537Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Pakistan Out of World Cup) \\u2013 5th July 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-pakistan-out-of-world-cup-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.537Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/2H7wjKKK02Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153613/aaj-shahzaib-khanzada-ke-saath-pakistan-out-of-world-cup-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3261,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.569Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.569Z\",\n            \"updated\": \"2019-07-07T06:39:10.569Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (FBR Actions, Power Projects) - 4th July 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-fbr-actions-power-projects-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.569Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/Rpx0a7x3sOc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153548/aaj-shahzeb-khanzada-kay-sath-fbr-actions-power-projects-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3262,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.609Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.608Z\",\n            \"updated\": \"2019-07-07T06:39:10.609Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Last Day of Amnesty Scheme) \\u2013 3rd July 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-last-day-of-amnesty-scheme-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.609Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/jLOdCGfwgBg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153461/aaj-shahzaib-khanzada-ke-saath-last-day-of-amnesty-scheme-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3263,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.642Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.642Z\",\n            \"updated\": \"2019-07-07T06:39:10.642Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.648Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/hDg1RFmGRz8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153325/aaj-shahzeb-khanzada-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3264,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.683Z\",\n            \"updated\": \"2019-07-07T06:39:10.684Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Army Chief's Statement About Economy) \\u2013 28th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-army-chiefs-statement-about-economy-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.684Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/hXandh8N_Y8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153137/aaj-shahzaib-khanzada-ke-saath-army-chief-s-statement-about-economy-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3265,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.720Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.719Z\",\n            \"updated\": \"2019-07-07T06:39:10.720Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Dollar Rate Increased) \\u2013 27th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-dollar-rate-increased-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.720Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/36Px78QbkVI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153066/aaj-shahzaib-khanzada-ke-saath-dollar-rate-increased-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3266,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.757Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.757Z\",\n            \"updated\": \"2019-07-07T06:39:10.757Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (APC Ne Kia Faisla Kia) \\u2013 26th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-apc-ne-kia-faisla-kia-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.757Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/IiH0eEAbDao\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/153000/aaj-shahzaib-khanzada-ke-saath-apc-ne-kia-faisla-kia-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3267,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.784Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.784Z\",\n            \"updated\": \"2019-07-07T06:39:10.784Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Chairman NAB Proving Right) \\u2013 25th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-chairman-nab-proving-right-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.784Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/W8jFyqkC0BY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152921/aaj-shahzaib-khanzada-ke-saath-chairman-nab-proving-right-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3268,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.810Z\",\n            \"updated\": \"2019-07-07T06:39:10.810Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (When Peshawar Metro Will Be Completed) \\u2013 21st June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-when-peshawar-metro-will-be-completed-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.810Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/PS3GW6CBQEQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152670/aaj-shahzaib-khanzada-ke-saath-when-peshawar-metro-will-be-completed-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3269,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.836Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.835Z\",\n            \"updated\": \"2019-07-07T06:39:10.836Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Tension Between Govt & Opposition) - 20th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-tension-between-govt-opposition-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.836Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/Uw0AyuUXS1M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152602/aaj-shahzeb-khanzada-kay-sath-tension-between-govt-opposition-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3270,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.867Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.866Z\",\n            \"updated\": \"2019-07-07T06:39:10.867Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (MQM Kis Ke Sath?) \\u2013 19th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-mqm-kis-ke-sath-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.867Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/Nl9Z8aVhXwk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152533/aaj-shahzaib-khanzada-ke-saath-mqm-kis-ke-sath-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3271,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.910Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:10.910Z\",\n            \"updated\": \"2019-07-07T06:39:10.910Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Inquiry Commission For Debt) \\u2013 18th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-inquiry-commission-for-debt-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:10.910Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/ZhWkBnLnTto\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152463/aaj-shahzaib-khanzada-ke-saath-inquiry-commission-for-debt-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3272,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.010Z\",\n            \"updated\": \"2019-07-07T06:39:11.010Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Opposition Alliance) \\u2013 17th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-opposition-alliance-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.010Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/IDJ0njnC_Zg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152418/aaj-shahzaib-khanzada-ke-saath-opposition-alliance-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3273,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.088Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.081Z\",\n            \"updated\": \"2019-07-07T06:39:11.088Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Fake Accounts Case) \\u2013 14th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-fake-accounts-case-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.088Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/fZPppmDT-0U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152261/aaj-shahzaib-khanzada-ke-saath-fake-accounts-case-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3274,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.157Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.156Z\",\n            \"updated\": \"2019-07-07T06:39:11.157Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (PTI Govt's First Budget) - 13th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-pti-govts-first-budget-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.157Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/eFftKqeq5tM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152191/aaj-shahzeb-khanzada-kay-sath-pti-govt-s-first-budget-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3275,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.242Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.241Z\",\n            \"updated\": \"2019-07-07T06:39:11.242Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Cricket Aur Siasat) - 12th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-cricket-aur-siasat-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.242Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/m9utN4wVIQU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152145/aaj-shahzeb-khanzada-kay-sath-cricket-aur-siasat-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3276,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.311Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.310Z\",\n            \"updated\": \"2019-07-07T06:39:11.311Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Hakumat Ka Umeedon Bhara Budget) - 11th June 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-hakumat-ka-umeedon-bhara-budget-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.311Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/pTaqO-EUaT4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152084/aaj-shahzeb-khanzada-kay-sath-hakumat-ka-umeedon-bhara-budget-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3277,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.402Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.402Z\",\n            \"updated\": \"2019-07-07T06:39:11.402Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Asif Zardari Arrested) \\u2013 10th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.402Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/i8Cy6MonVeA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/152008/aaj-shahzaib-khanzada-ke-saath-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3278,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.470Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.469Z\",\n            \"updated\": \"2019-07-07T06:39:11.470Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Shahid Afridi's Book) \\u2013 4th June 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-shahid-afridis-book-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.470Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/VNtLptY8qes\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151730/aaj-shahzaib-khanzada-ke-saath-shahid-afridi-s-book-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3279,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.550Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.549Z\",\n            \"updated\": \"2019-07-07T06:39:11.550Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Pakistan Lost in First Match) \\u2013 31st May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-pakistan-lost-in-first-match-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.550Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/2uUPGJNEGPM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151572/aaj-shahzaib-khanzada-ke-saath-pakistan-lost-in-first-match-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3280,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.657Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.657Z\",\n            \"updated\": \"2019-07-07T06:39:11.657Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Army Officers Ko Saza) \\u2013 30th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-army-officers-ko-saza-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.657Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/WuTjqzzjyus\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151521/aaj-shahzaib-khanzada-ke-saath-army-officers-ko-saza-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3281,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.718Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.718Z\",\n            \"updated\": \"2019-07-07T06:39:11.718Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Reference Against Qazi Faiz Isa) \\u2013 29th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-reference-against-qazi-faiz-isa-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.718Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/v1uDYOofV2k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151443/aaj-shahzaib-khanzada-ke-saath-reference-against-qazi-faiz-isa-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3282,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.816Z\",\n            \"updated\": \"2019-07-07T06:39:11.816Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (Justice Delayed Is Justice Denied) - 28th May 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-justice-delayed-is-justice-denied-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.816Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/iPixZG7KjlQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151405/aaj-shahzeb-khanzada-kay-sath-justice-delayed-is-justice-denied-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3283,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.863Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.863Z\",\n            \"updated\": \"2019-07-07T06:39:11.863Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Chairman NAB Scandal) \\u2013 24th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.863Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/XRWsz6vVoR0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151194/aaj-shahzaib-khanzada-ke-saath-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3284,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.893Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.893Z\",\n            \"updated\": \"2019-07-07T06:39:11.893Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Modi Ki Jeet) \\u2013 23rd May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-modi-ki-jeet-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.893Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/u4J8G4OFI7s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151141/aaj-shahzaib-khanzada-ke-saath-modi-ki-jeet-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3285,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.936Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.936Z\",\n            \"updated\": \"2019-07-07T06:39:11.936Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Chairman NAB Interview) \\u2013 21st May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-chairman-nab-interview-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.936Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/XHrHBGb-SkM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/151011/aaj-shahzaib-khanzada-ke-saath-chairman-nab-interview-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3286,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:11.974Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:11.974Z\",\n            \"updated\": \"2019-07-07T06:39:11.974Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (PMLN, PPP United) \\u2013 20th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-pmln-ppp-united-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:11.974Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/e9NcYHKWVFI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150953/aaj-shahzaib-khanzada-ke-saath-pmln-ppp-united-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3287,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.028Z\",\n            \"updated\": \"2019-07-07T06:39:12.028Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Economy Going Down) \\u2013 17th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-economy-going-down-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:12.028Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/Ot8R6lEFDDI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150820/aaj-shahzaib-khanzada-ke-saath-economy-going-down-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3288,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.061Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.060Z\",\n            \"updated\": \"2019-07-07T06:39:12.061Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Dollar Rate High) \\u2013 16th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-dollar-rate-high-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:12.061Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/6g7cAbkfHxg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150762/aaj-shahzaib-khanzada-ke-saath-dollar-rate-high-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3289,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.097Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.096Z\",\n            \"updated\": \"2019-07-07T06:39:12.097Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Shahid Afridi's Book) \\u2013 15th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-shahid-afridis-book-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:12.097Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/VNtLptY8qes\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150696/aaj-shahzaib-khanzada-ke-saath-shahid-afridi-s-book-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3290,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.150Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.149Z\",\n            \"updated\": \"2019-07-07T06:39:12.150Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Kay Sath (IMF Ke Sath Deal Done?) - 10th May 2019\",\n            \"slug\": \"aaj-shahzeb-khanzada-kay-sath-imf-ke-sath-deal-done-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:12.150Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/1Aed2ALs1K0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150394/aaj-shahzeb-khanzada-kay-sath-imf-ke-sath-deal-done-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3291,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.221Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.219Z\",\n            \"updated\": \"2019-07-07T06:39:12.221Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (IMF Conditions) \\u2013 9th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-imf-conditions-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:12.221Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/Ug3Hu4B5ERc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150329/aaj-shahzaib-khanzada-ke-saath-imf-conditions-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3292,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.319Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.318Z\",\n            \"updated\": \"2019-07-07T06:39:12.319Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (IMF Program) \\u2013 8th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-imf-program-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:12.319Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/X2gqE4SOifc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150251/aaj-shahzaib-khanzada-ke-saath-imf-program-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3293,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.368Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.368Z\",\n            \"updated\": \"2019-07-07T06:39:12.368Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzaib Khanzada Ke Saath (Nawaz Sharif Back to Jail) \\u2013 6th May 2019\",\n            \"slug\": \"aaj-shahzaib-khanzada-ke-saath-nawaz-sharif-back-to-jail-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:12.368Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/eRbXOahoJss\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/150124/aaj-shahzaib-khanzada-ke-saath-nawaz-sharif-back-to-jail-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3294,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.456Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.455Z\",\n            \"updated\": \"2019-07-07T06:39:12.456Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Sadarti Intikhab) - 3rd September 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-sadarti-intikhab-3rd-september-2018\",\n            \"publish_date\": \"2019-07-07T06:39:12.456Z\",\n            \"target_date\": \"2018-09-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t1xx9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135562/aaj-shahzeb-khanzada-ke-sath-sadarti-intikhab-3rd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3295,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.583Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.582Z\",\n            \"updated\": \"2019-07-07T06:39:12.583Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (DPO And Other Issues) - 31st August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-dpo-and-other-issues-31st-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:12.583Z\",\n            \"target_date\": \"2018-08-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sxify\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135356/aaj-shahzeb-khanzada-ke-sath-dpo-and-other-issues-31st-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3296,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.641Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.641Z\",\n            \"updated\": \"2019-07-07T06:39:12.641Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Imran Khan's GHQ Visit) - 30th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-imran-khans-ghq-visit-30th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:12.641Z\",\n            \"target_date\": \"2018-08-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6svsy9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135286/aaj-shahzeb-khanzada-ke-sath-imran-khan-s-ghq-visit-30th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3297,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.750Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.750Z\",\n            \"updated\": \"2019-07-07T06:39:12.750Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Fake Accounts Case) - 29th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-fake-accounts-case-29th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:12.750Z\",\n            \"target_date\": \"2018-08-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sttyk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135209/aaj-shahzeb-khanzada-ke-sath-fake-accounts-case-29th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3298,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.788Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.788Z\",\n            \"updated\": \"2019-07-07T06:39:12.788Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (PTI Ke Dikhawe Ke Iqdamat) - 28th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-pti-ke-dikhawe-ke-iqdamat-28th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:12.788Z\",\n            \"target_date\": \"2018-08-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sro52\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135138/aaj-shahzeb-khanzada-ke-sath-pti-ke-dikhawe-ke-iqdamat-28th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3299,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:12.816Z\",\n            \"updated\": \"2019-07-07T06:39:12.816Z\",\n            \"extra_data\": {\n                \"host\": \"Shahzaib Khanzada\",\n                \"job_id\": 142,\n                \"feed_id\": 14,\n                \"feed_name\": \"unewstv - Aaj Shahzaib Khanzada Ke Saath\",\n                \"show_name\": \"Aaj Shahzaib Khanzada Ke Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Shahzeb Khanzada Ke Sath (Khawar Manika DPO Issue) - 27th August 2018\",\n            \"slug\": \"aaj-shahzeb-khanzada-ke-sath-khawar-manika-dpo-issue-27th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:12.816Z\",\n            \"target_date\": \"2018-08-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sp8hn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Shahzaib+Khanzada+Ke+Saath\",\n            \"source_detail\": \"http://www.unewstv.com/135063/aaj-shahzeb-khanzada-ke-sath-khawar-manika-dpo-issue-27th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 12,\n            \"tags\": \"[\\\"Shahzaib Khanzada\\\", \\\"Aaj Shahzaib Khanzada Ke Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3300,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.298Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.298Z\",\n            \"updated\": \"2019-07-07T06:39:13.298Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Maryam Nawaz Press Conference) \\u2013 6th July 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-maryam-nawaz-press-conference-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.298Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cnnp8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153641/tajzia-sami-ibrahim-kay-sath-maryam-nawaz-press-conference-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3301,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.415Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.415Z\",\n            \"updated\": \"2019-07-07T06:39:13.415Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Hamza Shahbaz Attacked Police Official) \\u2013 5th July 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-hamza-shahbaz-attacked-police-official-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.415Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cl9aj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153577/tajzia-sami-ibrahim-kay-sath-hamza-shahbaz-attacked-police-official-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3302,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.476Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.476Z\",\n            \"updated\": \"2019-07-07T06:39:13.476Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (FBR In Action) \\u2013 3rd July 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fbr-in-action-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.476Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cfq48\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153434/tajzia-sami-ibrahim-kay-sath-fbr-in-action-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3303,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.601Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.601Z\",\n            \"updated\": \"2019-07-07T06:39:13.601Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Rana Sanaullah Arrest) \\u2013 2nd July 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-rana-sanaullah-arrest-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.601Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cd9gj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153381/tajzia-sami-ibrahim-kay-sath-rana-sanaullah-arrest-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3304,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.712Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.711Z\",\n            \"updated\": \"2019-07-07T06:39:13.712Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Usman Buzdar's Performance) \\u2013 30th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-usman-buzdars-performance-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.712Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c7pjq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153222/tajzia-sami-ibrahim-kay-sath-usman-buzdar-s-performance-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3305,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.771Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.770Z\",\n            \"updated\": \"2019-07-07T06:39:13.771Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fake Bank Accounts Case) \\u2013 29th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.771Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5eox\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153162/tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3306,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.857Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.856Z\",\n            \"updated\": \"2019-07-07T06:39:13.857Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Army Chief Hopeful About Economy) \\u2013 28th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-army-chief-hopeful-about-economy-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.857Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c2xdv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153097/tajzia-sami-ibrahim-kay-sath-army-chief-hopeful-about-economy-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3307,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:13.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:13.967Z\",\n            \"updated\": \"2019-07-07T06:39:13.967Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Asif Zardari Ki Paishi) \\u2013 27th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-asif-zardari-ki-paishi-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:13.967Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0nm9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153028/tajzia-sami-ibrahim-kay-sath-asif-zardari-ki-paishi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3308,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.085Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.084Z\",\n            \"updated\": \"2019-07-07T06:39:14.085Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (All Parties Conference ) \\u2013 26th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.085Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bxu8a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152958/tajzia-sami-ibrahim-kay-sath-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3309,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.131Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.131Z\",\n            \"updated\": \"2019-07-07T06:39:14.131Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Kia Jamhoriyat Khatre Mein) \\u2013 25th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-kia-jamhoriyat-khatre-mein-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.131Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvfhn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152901/tajzia-sami-ibrahim-kay-sath-kia-jamhoriyat-khatre-mein-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3310,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.201Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.200Z\",\n            \"updated\": \"2019-07-07T06:39:14.201Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Babar Awan Exclusive Interview) \\u2013 Tajzia Sami Ibrahim Kay Sath (Babar Awan Exclusive Interview) \\u2013 24th June 201924th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-24th-june-201924th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.201Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bswo6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152818/tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-tajzia-sami-ibrahim-kay-sath-babar-awan-exclusive-interview-24th-june-201924th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3311,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.241Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.241Z\",\n            \"updated\": \"2019-07-07T06:39:14.241Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Misaq e Maeeshat Ya NRO?) \\u2013 23rd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-misaq-e-maeeshat-ya-nro-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.241Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bqne2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152764/tajzia-sami-ibrahim-kay-sath-misaq-e-maeeshat-ya-nro-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3312,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.295Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.294Z\",\n            \"updated\": \"2019-07-07T06:39:14.295Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Maryam Nawaz Vs Shahbaz Sharif) \\u2013 22nd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.295Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7boxny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152699/tajzia-sami-ibrahim-kay-sath-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3313,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.324Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.323Z\",\n            \"updated\": \"2019-07-07T06:39:14.324Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Maeeshat Aur Siasat) \\u2013 21st June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-maeeshat-aur-siasat-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.324Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn0bu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152639/tajzia-sami-ibrahim-kay-sath-maeeshat-aur-siasat-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3314,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.373Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.372Z\",\n            \"updated\": \"2019-07-07T06:39:14.373Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Nawaz Sharif's Bail Plea Rejected) \\u2013 20th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-nawaz-sharifs-bail-plea-rejected-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.373Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bl8qz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152566/tajzia-sami-ibrahim-kay-sath-nawaz-sharif-s-bail-plea-rejected-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3315,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.406Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.406Z\",\n            \"updated\": \"2019-07-07T06:39:14.406Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Will Ishaq Dar Be Brought Back) \\u2013 19th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-will-ishaq-dar-be-brought-back-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.406Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjjxx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152499/tajzia-sami-ibrahim-kay-sath-will-ishaq-dar-be-brought-back-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3316,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.469Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.469Z\",\n            \"updated\": \"2019-07-07T06:39:14.469Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fake Bank Accounts Case) \\u2013 18th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.469Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhwk6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152455/tajzia-sami-ibrahim-kay-sath-fake-bank-accounts-case-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3317,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.500Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.499Z\",\n            \"updated\": \"2019-07-07T06:39:14.500Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (PM Imran Khan Contacts Sami Ibrahim) \\u2013 17th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-pm-imran-khan-contacts-sami-ibrahim-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.500Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bge9m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152381/tajzia-sami-ibrahim-kay-sath-pm-imran-khan-contacts-sami-ibrahim-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3318,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.537Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.537Z\",\n            \"updated\": \"2019-07-07T06:39:14.537Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fawad Chaudhry Ka Hamla) \\u2013 16th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ka-hamla-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.537Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bd4i9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152328/tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ka-hamla-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3319,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.578Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.578Z\",\n            \"updated\": \"2019-07-07T06:39:14.578Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fawad Chaudhry Ki Ghunda Gardi) \\u2013 15th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ki-ghunda-gardi-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.578Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b9wlt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152281/tajzia-sami-ibrahim-kay-sath-fawad-chaudhry-ki-ghunda-gardi-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3320,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.610Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.609Z\",\n            \"updated\": \"2019-07-07T06:39:14.610Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Pak India Relations) \\u2013 14th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-pak-india-relations-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.610Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6em9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152223/tajzia-sami-ibrahim-kay-sath-pak-india-relations-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3321,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.658Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.658Z\",\n            \"updated\": \"2019-07-07T06:39:14.658Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath  (Reference Against Justice Qazi Faez Isa) \\u2013 13th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.658Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2aia\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152167/tajzia-sami-ibrahim-kay-sath-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3322,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.688Z\",\n            \"updated\": \"2019-07-07T06:39:14.689Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Opposition Vs Govt) \\u2013 12th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-opposition-vs-govt-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.689Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ay5a0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152110/tajzia-sami-ibrahim-kay-sath-opposition-vs-govt-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3323,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.717Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.717Z\",\n            \"updated\": \"2019-07-07T06:39:14.717Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Three Important Arrests) \\u2013 11th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-three-important-arrests-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.717Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7auhcu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152078/tajzia-sami-ibrahim-kay-sath-three-important-arrests-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3324,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.791Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.791Z\",\n            \"updated\": \"2019-07-07T06:39:14.791Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (NAB Arrests Asif Zardari) \\u2013 10th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-nab-arrests-asif-zardari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.791Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aqmt9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151982/tajzia-sami-ibrahim-kay-sath-nab-arrests-asif-zardari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3325,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.832Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.832Z\",\n            \"updated\": \"2019-07-07T06:39:14.832Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Reference Against Judges) \\u2013 9th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-reference-against-judges-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.833Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anofe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151919/tajzia-sami-ibrahim-kay-sath-reference-against-judges-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3326,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.870Z\",\n            \"updated\": \"2019-07-07T06:39:14.870Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (PMLN's Narrative) \\u2013 8th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-pmlns-narrative-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.870Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7al38n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151873/tajzia-sami-ibrahim-kay-sath-pmln-s-narrative-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3327,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:14.902Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:14.901Z\",\n            \"updated\": \"2019-07-07T06:39:14.902Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Opposition Ready For Movement) \\u2013 7th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-opposition-ready-for-movement-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:14.902Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ai8wh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151833/tajzia-sami-ibrahim-kay-sath-opposition-ready-for-movement-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3328,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.019Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.019Z\",\n            \"updated\": \"2019-07-07T06:39:15.019Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Eid Special \\u2013 6th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.019Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/l12aeRrboA4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151807/tajzia-sami-ibrahim-kay-sath-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3329,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.165Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.164Z\",\n            \"updated\": \"2019-07-07T06:39:15.165Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Mehngai Ka Tufan) \\u2013 5th June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-mehngai-ka-tufan-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.165Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ac973\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151755/tajzia-sami-ibrahim-kay-sath-mehngai-ka-tufan-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3330,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.237Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.237Z\",\n            \"updated\": \"2019-07-07T06:39:15.237Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (What Fawad Chaudhry Wants?) \\u2013 3rd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-what-fawad-chaudhry-wants-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.237Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a668v\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151682/tajzia-sami-ibrahim-kay-sath-what-fawad-chaudhry-wants-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3331,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.343Z\",\n            \"updated\": \"2019-07-07T06:39:15.344Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (5 Children Died in DHQ Hosptial Sahiwal) \\u2013 2nd June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-5-children-died-in-dhq-hosptial-sahiwal-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.344Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3dcz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151643/tajzia-sami-ibrahim-kay-sath-5-children-died-in-dhq-hosptial-sahiwal-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3332,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.404Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.403Z\",\n            \"updated\": \"2019-07-07T06:39:15.404Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Petrol Bomb Dropped on Public) \\u2013 1st June 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-petrol-bomb-dropped-on-public-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.404Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a0pxm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151596/tajzia-sami-ibrahim-kay-sath-petrol-bomb-dropped-on-public-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3333,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.482Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.481Z\",\n            \"updated\": \"2019-07-07T06:39:15.482Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Reference Against Judges) \\u2013 31st May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-reference-against-judges-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.491Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xhet\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151543/tajzia-sami-ibrahim-kay-sath-reference-against-judges-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3334,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.568Z\",\n            \"updated\": \"2019-07-07T06:39:15.568Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Corrupt Politicians Ka Ahtasab Kab Hoga?) \\u2013 30th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-corrupt-politicians-ka-ahtasab-kab-hoga-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.568Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79tc8u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151484/tajzia-sami-ibrahim-kay-sath-corrupt-politicians-ka-ahtasab-kab-hoga-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3335,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.647Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.645Z\",\n            \"updated\": \"2019-07-07T06:39:15.647Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Fake Bank Account Case) \\u2013 29th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-fake-bank-account-case-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.647Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.dailymotion.com/watch/video/x79pylz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151426/tajzia-sami-ibrahim-kay-sath-fake-bank-account-case-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3336,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.734Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.733Z\",\n            \"updated\": \"2019-07-07T06:39:15.734Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Who Is Funding PTM?) \\u2013 28th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-who-is-funding-ptm-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.734Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mh2h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151388/tajzia-sami-ibrahim-kay-sath-who-is-funding-ptm-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3337,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.843Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.843Z\",\n            \"updated\": \"2019-07-07T06:39:15.843Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Tabdeeli Kab Aaye Gi?) \\u2013 27th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-tabdeeli-kab-aaye-gi-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.843Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79i9vq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151331/tajzia-sami-ibrahim-kay-sath-tabdeeli-kab-aaye-gi-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3338,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.951Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.944Z\",\n            \"updated\": \"2019-07-07T06:39:15.951Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (PTM Attack on Army) \\u2013 26th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-ptm-attack-on-army-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.951Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/2vs2xU4kRKk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151277/tajzia-sami-ibrahim-kay-sath-ptm-attack-on-army-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3339,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:15.993Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:15.992Z\",\n            \"updated\": \"2019-07-07T06:39:15.993Z\",\n            \"extra_data\": {\n                \"host\": \"Sami Ibrahim\",\n                \"job_id\": 160,\n                \"feed_id\": 33,\n                \"feed_name\": \"unewstv - Tajzia Sami Ibrahim Kay Sath\",\n                \"show_name\": \"Tajzia Sami Ibrahim Kay Sath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Tajzia Sami Ibrahim Kay Sath (Conspiracy Against Chairman NAB) \\u2013 25th May 2019\",\n            \"slug\": \"tajzia-sami-ibrahim-kay-sath-conspiracy-against-chairman-nab-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:15.993Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79bypw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Tajzia+Sami+Ibrahim+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151232/tajzia-sami-ibrahim-kay-sath-conspiracy-against-chairman-nab-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 31,\n            \"tags\": \"[\\\"Sami Ibrahim\\\", \\\"Tajzia Sami Ibrahim Kay Sath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3340,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.273Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.273Z\",\n            \"updated\": \"2019-07-07T06:39:16.273Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Hassan Nisar Exclusive Interview) \\u2013 6th July 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-hassan-nisar-exclusive-interview-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.273Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cnnmo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153640/aaj-rana-mubashir-kay-saath-hassan-nisar-exclusive-interview-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3341,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.300Z\",\n            \"updated\": \"2019-07-07T06:39:16.300Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Who Is Funding PTM?) \\u2013 5th July 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-who-is-funding-ptm-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.300Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cl8rs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153575/aaj-rana-mubashir-kay-saath-who-is-funding-ptm-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3342,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.330Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.329Z\",\n            \"updated\": \"2019-07-07T06:39:16.330Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Debt Inquiry Commission Ka Kia Huwa) \\u2013 30th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-debt-inquiry-commission-ka-kia-huwa-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.330Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c7pc3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153221/aaj-rana-mubashir-kay-saath-debt-inquiry-commission-ka-kia-huwa-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3343,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.376Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.376Z\",\n            \"updated\": \"2019-07-07T06:39:16.376Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Shahid Khaqan Abbasi Exclusive) \\u2013 29th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-shahid-khaqan-abbasi-exclusive-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.376Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5ede\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153161/aaj-rana-mubashir-kay-saath-shahid-khaqan-abbasi-exclusive-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3344,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.402Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.401Z\",\n            \"updated\": \"2019-07-07T06:39:16.402Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Dollar Uncontrolled) \\u2013 28th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-dollar-uncontrolled-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.402Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c2wyq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/153096/aaj-rana-mubashir-kay-saath-dollar-uncontrolled-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3345,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.427Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.427Z\",\n            \"updated\": \"2019-07-07T06:39:16.427Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Siasi Mahool Garam) \\u2013 23rd June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-siasi-mahool-garam-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.427Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bqmla\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152761/aaj-rana-mubashir-kay-saath-siasi-mahool-garam-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3346,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.477Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.477Z\",\n            \"updated\": \"2019-07-07T06:39:16.477Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Challenges For Govt) \\u2013 22nd June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-challenges-for-govt-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.477Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7boxl2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152698/aaj-rana-mubashir-kay-saath-challenges-for-govt-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3347,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.505Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.505Z\",\n            \"updated\": \"2019-07-07T06:39:16.505Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (PM Imran Khan's Message) \\u2013 21st June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-pm-imran-khans-message-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.505Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn0gi\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152637/aaj-rana-mubashir-kay-saath-pm-imran-khan-s-message-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3348,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.571Z\",\n            \"updated\": \"2019-07-07T06:39:16.572Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Pak India Match) \\u2013 16th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-pak-india-match-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.572Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bd4sc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152329/aaj-rana-mubashir-kay-saath-pak-india-match-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3349,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.602Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.602Z\",\n            \"updated\": \"2019-07-07T06:39:16.602Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Current Issues) \\u2013 15th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-current-issues-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.604Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b9wqx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152280/aaj-rana-mubashir-kay-saath-current-issues-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3350,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.636Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.636Z\",\n            \"updated\": \"2019-07-07T06:39:16.636Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Cricket Team Performance) \\u2013 14th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-cricket-team-performance-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.636Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6e5a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/152221/aaj-rana-mubashir-kay-saath-cricket-team-performance-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3351,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.711Z\",\n            \"updated\": \"2019-07-07T06:39:16.711Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Opposition Movement Against Govt) \\u2013 9th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-opposition-movement-against-govt-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.711Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anniy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151916/aaj-rana-mubashir-kay-saath-opposition-movement-against-govt-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3352,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.773Z\",\n            \"updated\": \"2019-07-07T06:39:16.774Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Opposition Ki Tehreek) \\u2013 8th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-opposition-ki-tehreek-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.774Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7al7t9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151882/aaj-rana-mubashir-kay-saath-opposition-ki-tehreek-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3353,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.810Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.810Z\",\n            \"updated\": \"2019-07-07T06:39:16.810Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Eid Day Special) \\u2013 7th June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-eid-day-special-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.810Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ai86o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151828/aaj-rana-mubashir-kay-saath-eid-day-special-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3354,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.869Z\",\n            \"updated\": \"2019-07-07T06:39:16.870Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Discussion on Current Issues) \\u2013 2nd June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-discussion-on-current-issues-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.870Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3cxh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151641/aaj-rana-mubashir-kay-saath-discussion-on-current-issues-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3355,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.902Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.902Z\",\n            \"updated\": \"2019-07-07T06:39:16.902Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Eid Ke Baad Kia Hoga) \\u2013 1st June 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-eid-ke-baad-kia-hoga-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.902Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a0utt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151606/aaj-rana-mubashir-kay-saath-eid-ke-baad-kia-hoga-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3356,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.934Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:16.932Z\",\n            \"updated\": \"2019-07-07T06:39:16.934Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Opposition Want to Demolish Govt) \\u2013 31st May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-opposition-want-to-demolish-govt-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:16.934Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xhar\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151542/aaj-rana-mubashir-kay-saath-opposition-want-to-demolish-govt-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3357,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:17.032Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:17.023Z\",\n            \"updated\": \"2019-07-07T06:39:17.032Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (PM Khan in Action) \\u2013 26th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-pm-khan-in-action-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:17.032Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79es6k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151273/aaj-rana-mubashir-kay-saath-pm-khan-in-action-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3358,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:17.140Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:17.139Z\",\n            \"updated\": \"2019-07-07T06:39:17.140Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Shahid Khaqan Abbasi Exclusive) \\u2013 25th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-shahid-khaqan-abbasi-exclusive-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:17.141Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79c4g5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151249/aaj-rana-mubashir-kay-saath-shahid-khaqan-abbasi-exclusive-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3359,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:17.318Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:17.317Z\",\n            \"updated\": \"2019-07-07T06:39:17.319Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (NAB Cases) \\u2013 24th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-nab-cases-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:17.319Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x798rsz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/151166/aaj-rana-mubashir-kay-saath-nab-cases-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3360,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:17.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:17.526Z\",\n            \"updated\": \"2019-07-07T06:39:17.526Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (IMF Package, Economy) \\u2013 19th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-imf-package-economy-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:17.526Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78r8sw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150900/aaj-rana-mubashir-kay-saath-imf-package-economy-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3361,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:17.733Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:17.733Z\",\n            \"updated\": \"2019-07-07T06:39:17.733Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (New Chairman FBR) \\u2013 18th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-new-chairman-fbr-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:17.733Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78osl2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150864/aaj-rana-mubashir-kay-saath-new-chairman-fbr-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3362,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:17.840Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:17.839Z\",\n            \"updated\": \"2019-07-07T06:39:17.840Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Dollar Ki Parwaz Jari) \\u2013 17th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-dollar-ki-parwaz-jari-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:17.840Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78l50e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150787/aaj-rana-mubashir-kay-saath-dollar-ki-parwaz-jari-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3363,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:17.929Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:17.928Z\",\n            \"updated\": \"2019-07-07T06:39:17.929Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Siasi Hulchul) \\u2013 12th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-siasi-hulchul-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:17.929Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x784nty\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150470/aaj-rana-mubashir-kay-saath-siasi-hulchul-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3364,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.026Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.026Z\",\n            \"updated\": \"2019-07-07T06:39:18.026Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Mehngai Ka Tufan) \\u2013 11th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-mehngai-ka-tufan-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.026Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x781vgw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150413/aaj-rana-mubashir-kay-saath-mehngai-ka-tufan-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3365,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.094Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.094Z\",\n            \"updated\": \"2019-07-07T06:39:18.094Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Eid Ke Baad Kia Hoga) \\u2013 10th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-eid-ke-baad-kia-hoga-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.094Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77yqgq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150356/aaj-rana-mubashir-kay-saath-eid-ke-baad-kia-hoga-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3366,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.144Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.144Z\",\n            \"updated\": \"2019-07-07T06:39:18.144Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Babar Awam Exclusive Interview) \\u2013 5th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-babar-awam-exclusive-interview-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.144Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77hbot\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/150026/aaj-rana-mubashir-kay-saath-babar-awam-exclusive-interview-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3367,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.231Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.204Z\",\n            \"updated\": \"2019-07-07T06:39:18.231Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Ch. Tariq Bashir Cheema Exclusive) \\u2013 4th May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-ch-tariq-bashir-cheema-exclusive-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.231Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77eenw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149963/aaj-rana-mubashir-kay-saath-ch-tariq-bashir-cheema-exclusive-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3368,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.311Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.311Z\",\n            \"updated\": \"2019-07-07T06:39:18.311Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Nawaz Sharif's Plea Rejected) \\u2013 3rd May 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-nawaz-sharifs-plea-rejected-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.311Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77b3no\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149905/aaj-rana-mubashir-kay-saath-nawaz-sharif-s-plea-rejected-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3369,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.440Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.440Z\",\n            \"updated\": \"2019-07-07T06:39:18.440Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Grouping in Political Parties) \\u2013 28th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-grouping-in-political-parties-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.440Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76uqqc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149567/aaj-rana-mubashir-kay-saath-grouping-in-political-parties-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3370,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.497Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.497Z\",\n            \"updated\": \"2019-07-07T06:39:18.497Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (PTI Govt Performance) \\u2013 27th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-pti-govt-performance-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.497Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76rzbf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149520/aaj-rana-mubashir-kay-saath-pti-govt-performance-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3371,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.529Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.529Z\",\n            \"updated\": \"2019-07-07T06:39:18.529Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Chaudhry Sarwar Exclusive) \\u2013 26th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-chaudhry-sarwar-exclusive-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.529Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ovj0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149456/aaj-rana-mubashir-kay-saath-chaudhry-sarwar-exclusive-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3372,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.572Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.572Z\",\n            \"updated\": \"2019-07-07T06:39:18.572Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Ghulam Sarwar Exclusive Interview) \\u2013 21st April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-ghulam-sarwar-exclusive-interview-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.572Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7697dj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149163/aaj-rana-mubashir-kay-saath-ghulam-sarwar-exclusive-interview-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3373,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.606Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.606Z\",\n            \"updated\": \"2019-07-07T06:39:18.606Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Who Will Be CM Punjab) \\u2013 20th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-who-will-be-cm-punjab-20th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.606Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7674ga\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149122/aaj-rana-mubashir-kay-saath-who-will-be-cm-punjab-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3374,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.665Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.665Z\",\n            \"updated\": \"2019-07-07T06:39:18.665Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Hakumati Tabdeelian) \\u2013 19th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-hakumati-tabdeelian-19th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.665Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x764rm0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/149057/aaj-rana-mubashir-kay-saath-hakumati-tabdeelian-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3375,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.694Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.694Z\",\n            \"updated\": \"2019-07-07T06:39:18.694Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Punjab Hakumat Ka Karnaama) \\u2013 14th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-punjab-hakumat-ka-karnaama-14th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.694Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75tu74\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/148770/aaj-rana-mubashir-kay-saath-punjab-hakumat-ka-karnaama-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3376,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.739Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.739Z\",\n            \"updated\": \"2019-07-07T06:39:18.739Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Meeting in London) \\u2013 13th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-meeting-in-london-13th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.739Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75s3ss\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/148726/aaj-rana-mubashir-kay-saath-meeting-in-london-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3377,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.788Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.788Z\",\n            \"updated\": \"2019-07-07T06:39:18.788Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (London Mein Arif Naqvi Giraftar) \\u2013 12th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-london-mein-arif-naqvi-giraftar-12th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.788Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75q226\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/148670/aaj-rana-mubashir-kay-saath-london-mein-arif-naqvi-giraftar-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3378,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.816Z\",\n            \"updated\": \"2019-07-07T06:39:18.816Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Hassan Nisar Exclusive Interview) \\u2013 7th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-hassan-nisar-exclusive-interview-7th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.816Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75f6ql\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/148409/aaj-rana-mubashir-kay-saath-hassan-nisar-exclusive-interview-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3379,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.872Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:18.871Z\",\n            \"updated\": \"2019-07-07T06:39:18.872Z\",\n            \"extra_data\": {\n                \"host\": \"Rana Mubashir\",\n                \"job_id\": 163,\n                \"feed_id\": 36,\n                \"feed_name\": \"unewstv - Aaj Rana Mubashir Kay Saath\",\n                \"show_name\": \"Aaj Rana Mubashir Kay Saath\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aaj Rana Mubashir Kay Saath (Hamza Shahbaz  & NAB) \\u2013 6th April 2019\",\n            \"slug\": \"aaj-rana-mubashir-kay-saath-hamza-shahbaz-nab-6th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:18.872Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75djs9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aaj+Rana+Mubashir+Kay+Sath\",\n            \"source_detail\": \"http://www.unewstv.com/148359/aaj-rana-mubashir-kay-saath-hamza-shahbaz-nab-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 34,\n            \"tags\": \"[\\\"Rana Mubashir\\\", \\\"Aaj Rana Mubashir Kay Saath\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3380,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.190Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.189Z\",\n            \"updated\": \"2019-07-07T06:39:19.190Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Leaked Video of Judge Arshad Malik) - 6th July 2019\",\n            \"slug\": \"news-beat-leaked-video-of-judge-arshad-malik-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.190Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/RhCtiM1I6Ww\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153666/news-beat-leaked-video-of-judge-arshad-malik-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3381,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.222Z\",\n            \"updated\": \"2019-07-07T06:39:19.225Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Opposition Abhi Se Bikharne Lagi?) - 30th June 2019\",\n            \"slug\": \"news-beat-opposition-abhi-se-bikharne-lagi-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.225Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/kJFyL7DCS2o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153257/news-beat-opposition-abhi-se-bikharne-lagi-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3382,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.263Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.262Z\",\n            \"updated\": \"2019-07-07T06:39:19.263Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PTI Hakumat Ka Pehla Budget Manzoor) - 28th June 2019\",\n            \"slug\": \"news-beat-pti-hakumat-ka-pehla-budget-manzoor-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.263Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/1R3XmEpoQU4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/153139/news-beat-pti-hakumat-ka-pehla-budget-manzoor-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3383,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.301Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.300Z\",\n            \"updated\": \"2019-07-07T06:39:19.301Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (26 June Ko Opposition APC Talab) - 23rd June 2019\",\n            \"slug\": \"news-beat-26-june-ko-opposition-apc-talab-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.301Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/PU60t9NNEpU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152790/news-beat-26-june-ko-opposition-apc-talab-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3384,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.337Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.337Z\",\n            \"updated\": \"2019-07-07T06:39:19.337Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Maryam Nawaz Press Conference) - 22nd June 2019\",\n            \"slug\": \"news-beat-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.338Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/kqp95Yg0J2E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152724/news-beat-maryam-nawaz-press-conference-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3385,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.375Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.375Z\",\n            \"updated\": \"2019-07-07T06:39:19.375Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Bilawal Maryam Mulaqat Mein Kia Tay Paya) - 16th June 2019\",\n            \"slug\": \"news-beat-bilawal-maryam-mulaqat-mein-kia-tay-paya-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.375Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/sTY_FYlCBz4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152352/news-beat-bilawal-maryam-mulaqat-mein-kia-tay-paya-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3386,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.405Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.405Z\",\n            \"updated\": \"2019-07-07T06:39:19.405Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Who Will Be Next After Faryal Talpur) - 14th June 2019\",\n            \"slug\": \"news-beat-who-will-be-next-after-faryal-talpur-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.405Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/nYtNHN7v0ic\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/152263/news-beat-who-will-be-next-after-faryal-talpur-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3387,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.448Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.448Z\",\n            \"updated\": \"2019-07-07T06:39:19.448Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahbaz Sharif Ki Wapsi, Opposition Tehreek) - 9th June 2019\",\n            \"slug\": \"news-beat-shahbaz-sharif-ki-wapsi-opposition-tehreek-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.448Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/KU4TaHKHq6g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151951/news-beat-shahbaz-sharif-ki-wapsi-opposition-tehreek-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3388,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.510Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.510Z\",\n            \"updated\": \"2019-07-07T06:39:19.510Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Hassan Nisar Exclusive Interview) - 8th June 2019\",\n            \"slug\": \"news-beat-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.510Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/iv-mSjH2DPg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151897/news-beat-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3389,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.647Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.646Z\",\n            \"updated\": \"2019-07-07T06:39:19.647Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Discussion on Different Issues) - 7th June 2019\",\n            \"slug\": \"news-beat-discussion-on-different-issues-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.647Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/lQwbfhPvCmc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151851/news-beat-discussion-on-different-issues-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3390,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.733Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.733Z\",\n            \"updated\": \"2019-07-07T06:39:19.734Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (NAB Hakumat Gath Joor Ka Taasur) - 1st June 2019\",\n            \"slug\": \"news-beat-nab-hakumat-gath-joor-ka-taasur-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.734Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/6ys2o3kbuoA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151619/news-beat-nab-hakumat-gath-joor-ka-taasur-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3391,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.809Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.809Z\",\n            \"updated\": \"2019-07-07T06:39:19.809Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PTM Ki Siasat, Other Issues) - 31st May 2019\",\n            \"slug\": \"news-beat-ptm-ki-siasat-other-issues-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.809Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/UjnMRqQ8gBo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151576/news-beat-ptm-ki-siasat-other-issues-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3392,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.869Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.869Z\",\n            \"updated\": \"2019-07-07T06:39:19.869Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PMLN Changing Stance on Chairman NAB Issue) - 25th May 2019\",\n            \"slug\": \"news-beat-pmln-changing-stance-on-chairman-nab-issue-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.869Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/swS2kKQQ1uM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151254/news-beat-pmln-changing-stance-on-chairman-nab-issue-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3393,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:19.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.918Z\",\n            \"updated\": \"2019-07-07T06:39:19.918Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Bachon Ko Jinsi Darindo Se Kaise Bachaya Jaye) - 24th May 2019\",\n            \"slug\": \"news-beat-bachon-ko-jinsi-darindo-se-kaise-bachaya-jaye-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:19.918Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/G0DuTf4Cy_k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/151203/news-beat-bachon-ko-jinsi-darindo-se-kaise-bachaya-jaye-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3394,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.023Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:19.988Z\",\n            \"updated\": \"2019-07-07T06:39:20.023Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Opposition Meeting, Why Govt Worried?) - 19th May 2019\",\n            \"slug\": \"news-beat-opposition-meeting-why-govt-worried-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.023Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/6dGUkZ5NnaE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150914/news-beat-opposition-meeting-why-govt-worried-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3395,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.115Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.114Z\",\n            \"updated\": \"2019-07-07T06:39:20.115Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Will Opposition Be United Against Govt) - 18th May 2019\",\n            \"slug\": \"news-beat-will-opposition-be-united-against-govt-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.115Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/HsgYwhktiEU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150881/news-beat-will-opposition-be-united-against-govt-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3396,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.190Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.190Z\",\n            \"updated\": \"2019-07-07T06:39:20.190Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Mulki Maeeshat Kaise Behtar Hogi?) - 17th May 2019\",\n            \"slug\": \"news-beat-mulki-maeeshat-kaise-behtar-hogi-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.190Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/OpunlQl9-uk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150814/news-beat-mulki-maeeshat-kaise-behtar-hogi-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3397,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.288Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.271Z\",\n            \"updated\": \"2019-07-07T06:39:20.288Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahid Khaqan Abbasi Exclusive Interview) - 12th May 2019\",\n            \"slug\": \"news-beat-shahid-khaqan-abbasi-exclusive-interview-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.288Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/Fc4rfeNplKk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150501/news-beat-shahid-khaqan-abbasi-exclusive-interview-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3398,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.366Z\",\n            \"updated\": \"2019-07-07T06:39:20.366Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (IMF Ki Shraiyt Ka Masla) - 11th May 2019\",\n            \"slug\": \"news-beat-imf-ki-shraiyt-ka-masla-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.366Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/8gTXxUQPom8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150437/news-beat-imf-ki-shraiyt-ka-masla-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3399,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.454Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.454Z\",\n            \"updated\": \"2019-07-07T06:39:20.454Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Ramzan Aur Mehngai Ka Tufan) - 10th May 2019\",\n            \"slug\": \"news-beat-ramzan-aur-mehngai-ka-tufan-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.455Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/MG6c1vpjTVw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150388/news-beat-ramzan-aur-mehngai-ka-tufan-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3400,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.504Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.503Z\",\n            \"updated\": \"2019-07-07T06:39:20.504Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Sheikh Rasheed Ahmad Exclusive Interview) - 5th May 2019\",\n            \"slug\": \"news-beat-sheikh-rasheed-ahmad-exclusive-interview-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.504Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"https://www.youtube.com/watch/VIUQGriy3wk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/150051/news-beat-sheikh-rasheed-ahmad-exclusive-interview-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3401,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.538Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.537Z\",\n            \"updated\": \"2019-07-07T06:39:20.538Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahbaz Sharif Minus From PMLN?) - 4th May 2019\",\n            \"slug\": \"news-beat-shahbaz-sharif-minus-from-pmln-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.538Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/Shn3s2Ynxl8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149994/news-beat-shahbaz-sharif-minus-from-pmln-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3402,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.566Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.566Z\",\n            \"updated\": \"2019-07-07T06:39:20.566Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Nawaz Sharif Will Go Back to Jail) - 3rd May 2019\",\n            \"slug\": \"news-beat-nawaz-sharif-will-go-back-to-jail-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.566Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"https://www.youtube.com/watch/Q95Zc9wwDKU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149937/news-beat-nawaz-sharif-will-go-back-to-jail-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3403,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.607Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.605Z\",\n            \"updated\": \"2019-07-07T06:39:20.607Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Economic Challenges For Govt) - 27th April 2019\",\n            \"slug\": \"news-beat-economic-challenges-for-govt-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.607Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"https://www.youtube.com/watch/SZqv3y23W04\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149546/news-beat-economic-challenges-for-govt-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3404,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.639Z\",\n            \"updated\": \"2019-07-07T06:39:20.640Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Awam Ki Takleef Kaun Door Kare Ga) - 21st April 2019\",\n            \"slug\": \"news-beat-awam-ki-takleef-kaun-door-kare-ga-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.640Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"https://www.youtube.com/watch/LjAfJlQ13y4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/149191/news-beat-awam-ki-takleef-kaun-door-kare-ga-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3405,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.692Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.692Z\",\n            \"updated\": \"2019-07-07T06:39:20.692Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (LHC Stops NAB From Arresting Hamza Shahabz) - 6th April 2019\",\n            \"slug\": \"news-beat-lhc-stops-nab-from-arresting-hamza-shahabz-6th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.692Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"https://www.youtube.com/watch/rqM7gvUYHXo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/148380/news-beat-lhc-stops-nab-from-arresting-hamza-shahabz-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3406,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.739Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.739Z\",\n            \"updated\": \"2019-07-07T06:39:20.740Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Mehngai Se Ahtasab Tak) - 5th April 2019\",\n            \"slug\": \"news-beat-mehngai-se-ahtasab-tak-5th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.740Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"https://www.youtube.com/watch/7bpKmVEQyMg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/148330/news-beat-mehngai-se-ahtasab-tak-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3407,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.790Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.790Z\",\n            \"updated\": \"2019-07-07T06:39:20.790Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PPP Confuse on Nawaz Sharif's Bail) - 30th March 2019\",\n            \"slug\": \"news-beat-ppp-confuse-on-nawaz-sharifs-bail-30th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.790Z\",\n            \"target_date\": \"2019-03-30\",\n            \"text\": \"https://www.youtube.com/watch/c_lDPoYGYk8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/148008/news-beat-ppp-confuse-on-nawaz-sharif-s-bail-30th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3408,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.829Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.822Z\",\n            \"updated\": \"2019-07-07T06:39:20.829Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Hakumat Opposition Mein Mahaz Arai) - 29th March 2019\",\n            \"slug\": \"news-beat-hakumat-opposition-mein-mahaz-arai-29th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.829Z\",\n            \"target_date\": \"2019-03-29\",\n            \"text\": \"https://www.youtube.com/watch/INRtaTe2Bb8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/147952/news-beat-hakumat-opposition-mein-mahaz-arai-29th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3409,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.879Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.879Z\",\n            \"updated\": \"2019-07-07T06:39:20.879Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PMLN Workers Purjosh, Leadership Khamosh) - 24th March 2019\",\n            \"slug\": \"news-beat-pmln-workers-purjosh-leadership-khamosh-24th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.879Z\",\n            \"target_date\": \"2019-03-24\",\n            \"text\": \"https://www.youtube.com/watch/spjbGQjGYfw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/147633/news-beat-pmln-workers-purjosh-leadership-khamosh-24th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3410,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.919Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.916Z\",\n            \"updated\": \"2019-07-07T06:39:20.919Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Nawaz Sharif Want to Go Abroad?) - 8th March 2019\",\n            \"slug\": \"news-beat-nawaz-sharif-want-to-go-abroad-8th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.919Z\",\n            \"target_date\": \"2019-03-09\",\n            \"text\": \"https://www.youtube.com/watch/JhNC14qGhAo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146774/news-beat-nawaz-sharif-want-to-go-abroad-8th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3411,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:20.955Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:20.955Z\",\n            \"updated\": \"2019-07-07T06:39:20.955Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Sheikh Rasheed Ahmad Exclusive Interview) - 3rd March 2019\",\n            \"slug\": \"news-beat-sheikh-rasheed-ahmad-exclusive-interview-3rd-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:20.956Z\",\n            \"target_date\": \"2019-03-04\",\n            \"text\": \"https://www.youtube.com/watch/_1gahL5Dutw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146487/news-beat-sheikh-rasheed-ahmad-exclusive-interview-3rd-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3412,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.013Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.013Z\",\n            \"updated\": \"2019-07-07T06:39:21.013Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Aman Ka Chakka, Modi Ki Ruswai) - 1st March 2019\",\n            \"slug\": \"news-beat-aman-ka-chakka-modi-ki-ruswai-1st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.013Z\",\n            \"target_date\": \"2019-03-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x73anr3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146395/news-beat-aman-ka-chakka-modi-ki-ruswai-1st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3413,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.060Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.059Z\",\n            \"updated\": \"2019-07-07T06:39:21.060Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahbaz Sharif Got Clean Chit) - 24th February 2019\",\n            \"slug\": \"news-beat-shahbaz-sharif-got-clean-chit-24th-february-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.060Z\",\n            \"target_date\": \"2019-02-25\",\n            \"text\": \"https://www.youtube.com/watch/EF7eTsTF7YI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146085/news-beat-shahbaz-sharif-got-clean-chit-24th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3414,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.093Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.093Z\",\n            \"updated\": \"2019-07-07T06:39:21.093Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Shahid Khaqan Abbasi Exclusive Interview) - 24th February 2019\",\n            \"slug\": \"news-beat-shahid-khaqan-abbasi-exclusive-interview-24th-february-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.093Z\",\n            \"target_date\": \"2019-02-24\",\n            \"text\": \"https://www.youtube.com/watch/-XH9g5Bud7w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/146048/news-beat-shahid-khaqan-abbasi-exclusive-interview-24th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3415,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.133Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.133Z\",\n            \"updated\": \"2019-07-07T06:39:21.133Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Indian Accusations on Pakistan) - 16th February 2019\",\n            \"slug\": \"news-beat-indian-accusations-on-pakistan-16th-february-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.133Z\",\n            \"target_date\": \"2019-02-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x72iobn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145664/news-beat-indian-accusations-on-pakistan-16th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3416,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.198Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.197Z\",\n            \"updated\": \"2019-07-07T06:39:21.198Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Kia Nawaz Sharif Ki Zamanat Hogi) - 15th January 2019\",\n            \"slug\": \"news-beat-kia-nawaz-sharif-ki-zamanat-hogi-15th-january-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.198Z\",\n            \"target_date\": \"2019-02-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x72gw1s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145617/news-beat-kia-nawaz-sharif-ki-zamanat-hogi-15th-january-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3417,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.242Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.241Z\",\n            \"updated\": \"2019-07-07T06:39:21.242Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (PM Imran Khan Ka NRO Dene Se Inkar) - 10th February 2019\",\n            \"slug\": \"news-beat-pm-imran-khan-ka-nro-dene-se-inkar-10th-february-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.242Z\",\n            \"target_date\": \"2019-02-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x725z4p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145342/news-beat-pm-imran-khan-ka-nro-dene-se-inkar-10th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3418,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.292Z\",\n            \"updated\": \"2019-07-07T06:39:21.300Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Aleem Khan Ke Baad Agla Number Kis Ka) - 9th February 2019\",\n            \"slug\": \"news-beat-aleem-khan-ke-baad-agla-number-kis-ka-9th-february-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.300Z\",\n            \"target_date\": \"2019-02-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x724liu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/145280/news-beat-aleem-khan-ke-baad-agla-number-kis-ka-9th-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3419,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.331Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.330Z\",\n            \"updated\": \"2019-07-07T06:39:21.331Z\",\n            \"extra_data\": {\n                \"host\": \"Fereeha Idrees\",\n                \"job_id\": 161,\n                \"feed_id\": 34,\n                \"feed_name\": \"unewstv - News Beat\",\n                \"show_name\": \"News Beat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"News Beat (Public Accounts Committee Ka Mahaz) - 2nd February 2019\",\n            \"slug\": \"news-beat-public-accounts-committee-ka-mahaz-2nd-february-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.331Z\",\n            \"target_date\": \"2019-02-03\",\n            \"text\": \"https://www.youtube.com/watch/u3RnxT-aI38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/News+Beat+on+Samaa+News\",\n            \"source_detail\": \"http://www.unewstv.com/144892/news-beat-public-accounts-committee-ka-mahaz-2nd-february-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 32,\n            \"tags\": \"[\\\"Fereeha Idrees\\\", \\\"News Beat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3420,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.632Z\",\n            \"updated\": \"2019-07-07T06:39:21.632Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Old Customs in New Pakistan) \\u2013 6th July 2019\",\n            \"slug\": \"night-edition-old-customs-in-new-pakistan-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.632Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cnwes\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153657/night-edition-old-customs-in-new-pakistan-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3421,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.742Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.742Z\",\n            \"updated\": \"2019-07-07T06:39:21.742Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Rana Sanaullah In Jail0 \\u2013 5th July 2019\",\n            \"slug\": \"night-edition-rana-sanaullah-in-jail0-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.742Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7clgx5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153603/night-edition-rana-sanaullah-in-jail0-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3422,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.792Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.791Z\",\n            \"updated\": \"2019-07-07T06:39:21.792Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Big Shock For PMLN?) \\u2013 30th June 2019\",\n            \"slug\": \"night-edition-big-shock-for-pmln-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.792Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c7xp3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153244/night-edition-big-shock-for-pmln-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3423,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.868Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.868Z\",\n            \"updated\": \"2019-07-07T06:39:21.868Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Budget Approved, Opposition Failed?) \\u2013 29th June 2019\",\n            \"slug\": \"night-edition-budget-approved-opposition-failed-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.868Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5qbo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153185/night-edition-budget-approved-opposition-failed-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3424,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:21.967Z\",\n            \"updated\": \"2019-07-07T06:39:21.967Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hakumat Ne Budget Pass Kar Lia) \\u2013 28th June 2019\",\n            \"slug\": \"night-edition-hakumat-ne-budget-pass-kar-lia-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:21.967Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c36hy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/153120/night-edition-hakumat-ne-budget-pass-kar-lia-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3425,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:22.103Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:22.088Z\",\n            \"updated\": \"2019-07-07T06:39:22.103Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Opposition Mein Ittehad Nahi?) \\u2013 23rd June 2019\",\n            \"slug\": \"night-edition-opposition-mein-ittehad-nahi-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:22.104Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bqtqz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152776/night-edition-opposition-mein-ittehad-nahi-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3426,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:22.221Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:22.155Z\",\n            \"updated\": \"2019-07-07T06:39:22.221Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (How Govt Managed Lawyers Movement?) \\u2013 22nd June 2019\",\n            \"slug\": \"night-edition-how-govt-managed-lawyers-movement-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:22.221Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bp2ga\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152715/night-edition-how-govt-managed-lawyers-movement-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3427,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:22.483Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:22.482Z\",\n            \"updated\": \"2019-07-07T06:39:22.483Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia PTI Mein Forward Blaock Ban Raha Hai) \\u2013 21st June 2019\",\n            \"slug\": \"night-edition-kia-pti-mein-forward-blaock-ban-raha-hai-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:22.483Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn8lk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152646/night-edition-kia-pti-mein-forward-blaock-ban-raha-hai-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3428,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:22.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:22.689Z\",\n            \"updated\": \"2019-07-07T06:39:22.768Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Success Chances of Anti Govt Movement) \\u2013 16th June 2019\",\n            \"slug\": \"night-edition-success-chances-of-anti-govt-movement-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:22.768Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bddv9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152345/night-edition-success-chances-of-anti-govt-movement-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3429,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:22.904Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:22.903Z\",\n            \"updated\": \"2019-07-07T06:39:22.904Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (First Budget of Naya Pakistan) \\u2013 15th June 2019\",\n            \"slug\": \"night-edition-first-budget-of-naya-pakistan-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:22.904Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/-wb2tQygRL4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152305/night-edition-first-budget-of-naya-pakistan-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3430,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.043Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.043Z\",\n            \"updated\": \"2019-07-07T06:39:23.043Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia Commission Bane Ga?) \\u2013 14th June 2019\",\n            \"slug\": \"night-edition-kia-commission-bane-ga-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.043Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6r6c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/152245/night-edition-kia-commission-bane-ga-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3431,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.159Z\",\n            \"updated\": \"2019-07-07T06:39:23.159Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Internal Differences in PTI) \\u2013 9th June 2019\",\n            \"slug\": \"night-edition-internal-differences-in-pti-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.159Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anwfv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151933/night-edition-internal-differences-in-pti-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3432,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.199Z\",\n            \"updated\": \"2019-07-07T06:39:23.200Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hassan Nisar Exclusive Interview) \\u2013 8th June 2019\",\n            \"slug\": \"night-edition-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.200Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7algzs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151890/night-edition-hassan-nisar-exclusive-interview-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3433,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.229Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.229Z\",\n            \"updated\": \"2019-07-07T06:39:23.229Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Opposition Ki Tehreek) \\u2013 7th June 2019\",\n            \"slug\": \"night-edition-opposition-ki-tehreek-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.229Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aihyq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151850/night-edition-opposition-ki-tehreek-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3434,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.288Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.281Z\",\n            \"updated\": \"2019-07-07T06:39:23.288Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (PTI's Internal Differences) \\u2013 2nd June 2019\",\n            \"slug\": \"night-edition-ptis-internal-differences-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.288Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3kxz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151654/night-edition-pti-s-internal-differences-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3435,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.318Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.318Z\",\n            \"updated\": \"2019-07-07T06:39:23.318Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia Pakistan Islam Ka Qila Ban Gaya?) \\u2013 1st June 2019\",\n            \"slug\": \"night-edition-kia-pakistan-islam-ka-qila-ban-gaya-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.318Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a0z47\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151609/night-edition-kia-pakistan-islam-ka-qila-ban-gaya-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3436,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.366Z\",\n            \"updated\": \"2019-07-07T06:39:23.366Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (What Is The Agenda of Opposition) \\u2013 31st May 2019\",\n            \"slug\": \"night-edition-what-is-the-agenda-of-opposition-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.366Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xv4v\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151557/night-edition-what-is-the-agenda-of-opposition-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3437,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.395Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.394Z\",\n            \"updated\": \"2019-07-07T06:39:23.395Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Chairman NAB Issue) \\u2013 26th May 2019\",\n            \"slug\": \"night-edition-chairman-nab-issue-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.395Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79f220\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151289/night-edition-chairman-nab-issue-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3438,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.442Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.442Z\",\n            \"updated\": \"2019-07-07T06:39:23.442Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Sheikh Rasheed Ahmad Exclusive Interview) \\u2013 25th May 2019\",\n            \"slug\": \"night-edition-sheikh-rasheed-ahmad-exclusive-interview-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.442Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79c7qg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151251/night-edition-sheikh-rasheed-ahmad-exclusive-interview-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3439,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.480Z\",\n            \"updated\": \"2019-07-07T06:39:23.480Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Discussion on Current Issues) \\u2013 24th May 2019\",\n            \"slug\": \"night-edition-discussion-on-current-issues-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.480Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79935b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/151187/night-edition-discussion-on-current-issues-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3440,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.510Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.509Z\",\n            \"updated\": \"2019-07-07T06:39:23.510Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Tribal Areas Issues)  \\u2013 18th May 2019\",\n            \"slug\": \"night-edition-tribal-areas-issues-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.510Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78opfd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150859/night-edition-tribal-areas-issues-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3441,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.551Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.551Z\",\n            \"updated\": \"2019-07-07T06:39:23.552Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Opposition Planning Movement After Eid) \\u2013 17th May 2019\",\n            \"slug\": \"night-edition-opposition-planning-movement-after-eid-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.552Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78lgls\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150806/night-edition-opposition-planning-movement-after-eid-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3442,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.582Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.580Z\",\n            \"updated\": \"2019-07-07T06:39:23.582Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Scientific Way of Moon Sighting) \\u2013 12th May 2019\",\n            \"slug\": \"night-edition-scientific-way-of-moon-sighting-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.582Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x784vtt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150490/night-edition-scientific-way-of-moon-sighting-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3443,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.611Z\",\n            \"updated\": \"2019-07-07T06:39:23.612Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (America's Sanctions on Iran) \\u2013 11th May 2019\",\n            \"slug\": \"night-edition-americas-sanctions-on-iran-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.612Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7828ah\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150433/night-edition-america-s-sanctions-on-iran-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3444,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.662Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.661Z\",\n            \"updated\": \"2019-07-07T06:39:23.662Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hassan Nisar Exclusive Interview) \\u2013 10th May 2019\",\n            \"slug\": \"night-edition-hassan-nisar-exclusive-interview-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.662Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77z3on\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150373/night-edition-hassan-nisar-exclusive-interview-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3445,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.694Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.694Z\",\n            \"updated\": \"2019-07-07T06:39:23.694Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (New Local Body System in Punjab) \\u2013 5th May 2019\",\n            \"slug\": \"night-edition-new-local-body-system-in-punjab-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.694Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77hkdm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/150040/night-edition-new-local-body-system-in-punjab-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3446,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.732Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.732Z\",\n            \"updated\": \"2019-07-07T06:39:23.732Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (South Punjab Province, Other Issues) \\u2013 4th May 2019\",\n            \"slug\": \"night-edition-south-punjab-province-other-issues-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.732Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77er0g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149986/night-edition-south-punjab-province-other-issues-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3447,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.809Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.808Z\",\n            \"updated\": \"2019-07-07T06:39:23.809Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Kia PTI Koi Tabdeeli La Pai) \\u2013 3rd May 2019\",\n            \"slug\": \"night-edition-kia-pti-koi-tabdeeli-la-pai-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.809Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77bfw2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149926/night-edition-kia-pti-koi-tabdeeli-la-pai-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3448,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.857Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.857Z\",\n            \"updated\": \"2019-07-07T06:39:23.857Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Why PM Doesn't Want to Brief Parliament) \\u2013 28th April 2019\",\n            \"slug\": \"night-edition-why-pm-doesnt-want-to-brief-parliament-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.857Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76uzi9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149585/night-edition-why-pm-doesn-t-want-to-brief-parliament-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3449,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:23.916Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:23.907Z\",\n            \"updated\": \"2019-07-07T06:39:23.916Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (New Corruption Story) \\u2013 27th April 2019\",\n            \"slug\": \"night-edition-new-corruption-story-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:23.916Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76s7fx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149534/night-edition-new-corruption-story-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3450,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.007Z\",\n            \"updated\": \"2019-07-07T06:39:24.007Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Hakumat Aur Opposition Mein Tanao) \\u2013 26th April 2019\",\n            \"slug\": \"night-edition-hakumat-aur-opposition-mein-tanao-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.007Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76p5lz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149478/night-edition-hakumat-aur-opposition-mein-tanao-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3451,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.067Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.066Z\",\n            \"updated\": \"2019-07-07T06:39:24.068Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Chaudhary Sarwar Exclusive Interview) \\u2013 21st April 2019\",\n            \"slug\": \"night-edition-chaudhary-sarwar-exclusive-interview-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.068Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x769fak\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149183/night-edition-chaudhary-sarwar-exclusive-interview-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3452,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.100Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.100Z\",\n            \"updated\": \"2019-07-07T06:39:24.100Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Big Changes in PTI Govt) \\u2013 19th April 2019\",\n            \"slug\": \"night-edition-big-changes-in-pti-govt-19th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.100Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x764yx5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/149074/night-edition-big-changes-in-pti-govt-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3453,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.159Z\",\n            \"updated\": \"2019-07-07T06:39:24.159Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Parliament Should Support Chief Justice) \\u2013 14th April 2019\",\n            \"slug\": \"night-edition-parliament-should-support-chief-justice-14th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.159Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"https://www.youtube.com/watch/pniOzQNe9Z8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148796/night-edition-parliament-should-support-chief-justice-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3454,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.284Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.284Z\",\n            \"updated\": \"2019-07-07T06:39:24.284Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (NA Speaker Asad Qaiser Exclusive) \\u2013 13th April 2019\",\n            \"slug\": \"night-edition-na-speaker-asad-qaiser-exclusive-13th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.284Z\",\n            \"target_date\": \"2019-04-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75saev\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148739/night-edition-na-speaker-asad-qaiser-exclusive-13th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3455,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.384Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.383Z\",\n            \"updated\": \"2019-07-07T06:39:24.384Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Shahbaz Sharif Family in Trouble) \\u2013 12th April 2019\",\n            \"slug\": \"night-edition-shahbaz-sharif-family-in-trouble-12th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.384Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75q8ug\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148690/night-edition-shahbaz-sharif-family-in-trouble-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3456,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.461Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.461Z\",\n            \"updated\": \"2019-07-07T06:39:24.461Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (FBR And Tax Reforms) \\u2013 7th April 2019\",\n            \"slug\": \"night-edition-fbr-and-tax-reforms-7th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.461Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75fccl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148416/night-edition-fbr-and-tax-reforms-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3457,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.529Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.529Z\",\n            \"updated\": \"2019-07-07T06:39:24.529Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (NAB's Attempt to Arrest Hamza Shahbaz) \\u2013 6th April 2019\",\n            \"slug\": \"night-edition-nabs-attempt-to-arrest-hamza-shahbaz-6th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.529Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75dpt8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148370/night-edition-nab-s-attempt-to-arrest-hamza-shahbaz-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3458,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.619Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.608Z\",\n            \"updated\": \"2019-07-07T06:39:24.619Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Asif Zardari Jail Jaane Wale Hain - PM) \\u2013 5th April 2019\",\n            \"slug\": \"night-edition-asif-zardari-jail-jaane-wale-hain-pm-5th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.619Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75bz2x\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148321/night-edition-asif-zardari-jail-jaane-wale-hain-pm-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3459,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:24.773Z\",\n            \"updated\": \"2019-07-07T06:39:24.774Z\",\n            \"extra_data\": {\n                \"host\": \"Shazia Akram\",\n                \"job_id\": 143,\n                \"feed_id\": 15,\n                \"feed_name\": \"unewstv - Night Edition\",\n                \"show_name\": \"Night Edition\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Night Edition (Imran Khan Determined on Accountability) \\u2013 31st March 2019\",\n            \"slug\": \"night-edition-imran-khan-determined-on-accountability-31st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:24.774Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7525dd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Night+Edition+on+92+News\",\n            \"source_detail\": \"http://www.unewstv.com/148055/night-edition-imran-khan-determined-on-accountability-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 13,\n            \"tags\": \"[\\\"Shazia Akram\\\", \\\"Night Edition\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3460,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.139Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.139Z\",\n            \"updated\": \"2019-07-07T06:39:25.139Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front with Kamran Shahid (Case Against Rana Sanaullah) - 4th July 2019\",\n            \"slug\": \"on-the-front-with-kamran-shahid-case-against-rana-sanaullah-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.139Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/FZmKfaxCTEY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/153523/on-the-front-with-kamran-shahid-case-against-rana-sanaullah-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3461,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.197Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.197Z\",\n            \"updated\": \"2019-07-07T06:39:25.197Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Hakumat Aur Opposition Aamne Samne) - 3rd July 2019\",\n            \"slug\": \"on-the-front-hakumat-aur-opposition-aamne-samne-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.197Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/HbQBjtU4i0Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/153442/on-the-front-hakumat-aur-opposition-aamne-samne-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3462,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.256Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.256Z\",\n            \"updated\": \"2019-07-07T06:39:25.256Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Real Story Behind Rana Sanaullah's Arrest) - 2nd July 2019\",\n            \"slug\": \"on-the-front-real-story-behind-rana-sanaullahs-arrest-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.256Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/XygQqPFyJVQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/153371/on-the-front-real-story-behind-rana-sanaullah-s-arrest-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3463,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.298Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.298Z\",\n            \"updated\": \"2019-07-07T06:39:25.298Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Brig (R) Ijaz Ahmed Shah Exclusive Interview) - 1st July 2019\",\n            \"slug\": \"on-the-front-brig-r-ijaz-ahmed-shah-exclusive-interview-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.298Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/OhLIQeshB60\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/153304/on-the-front-brig-r-ijaz-ahmed-shah-exclusive-interview-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3464,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.345Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.345Z\",\n            \"updated\": \"2019-07-07T06:39:25.345Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Sheikh Rasheed Ahmad Exclusive Interview) - 27th June 2019\",\n            \"slug\": \"on-the-front-sheikh-rasheed-ahmad-exclusive-interview-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.345Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/Ry1VQwPmX9U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/153036/on-the-front-sheikh-rasheed-ahmad-exclusive-interview-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3465,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.387Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.387Z\",\n            \"updated\": \"2019-07-07T06:39:25.387Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Opposition's Charge Sheet Against Govt) - 26th June 2019\",\n            \"slug\": \"on-the-front-oppositions-charge-sheet-against-govt-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.387Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/OoXgDtzsHCY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152964/on-the-front-opposition-s-charge-sheet-against-govt-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3466,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.417Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.417Z\",\n            \"updated\": \"2019-07-07T06:39:25.417Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Hakumat Ke Paas Kia Muashi Plan Hai?) - 25th June 2019\",\n            \"slug\": \"on-the-front-hakumat-ke-paas-kia-muashi-plan-hai-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.417Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/tdPUUjFEXoc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152894/on-the-front-hakumat-ke-paas-kia-muashi-plan-hai-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3467,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.472Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.472Z\",\n            \"updated\": \"2019-07-07T06:39:25.472Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Hakumat Aur Opposition Ka Rawaiya) - 24th June 2019\",\n            \"slug\": \"on-the-front-hakumat-aur-opposition-ka-rawaiya-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.472Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/dzTQb-okr1A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152825/on-the-front-hakumat-aur-opposition-ka-rawaiya-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3468,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.518Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.518Z\",\n            \"updated\": \"2019-07-07T06:39:25.518Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Jamhoriyat Aur Ahtasab, Aik Sath) - 20th June 2019\",\n            \"slug\": \"on-the-front-jamhoriyat-aur-ahtasab-aik-sath-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.518Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/OSQxk3kXwR8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152577/on-the-front-jamhoriyat-aur-ahtasab-aik-sath-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3469,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.563Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.563Z\",\n            \"updated\": \"2019-07-07T06:39:25.563Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Opposition Budget Ke Khilaf Dutt Gayi) - 19th June 2019\",\n            \"slug\": \"on-the-front-opposition-budget-ke-khilaf-dutt-gayi-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.563Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/3nHPLNl6E6U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152510/on-the-front-opposition-budget-ke-khilaf-dutt-gayi-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3470,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.598Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.597Z\",\n            \"updated\": \"2019-07-07T06:39:25.598Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front with Kamran Shahid (Parliament Maidan e Jang) - 18th June 2019\",\n            \"slug\": \"on-the-front-with-kamran-shahid-parliament-maidan-e-jang-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.598Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/RgZe30h8V-4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152452/on-the-front-with-kamran-shahid-parliament-maidan-e-jang-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3471,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.648Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.648Z\",\n            \"updated\": \"2019-07-07T06:39:25.648Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front with Kamran Shahid (Imran Khan Ka Khitab) - 13th June 2019\",\n            \"slug\": \"on-the-front-with-kamran-shahid-imran-khan-ka-khitab-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.648Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/0exU1-oZFmc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152176/on-the-front-with-kamran-shahid-imran-khan-ka-khitab-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3472,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.681Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.681Z\",\n            \"updated\": \"2019-07-07T06:39:25.681Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (PM's High Power Commission) - 12th June 2019\",\n            \"slug\": \"on-the-front-pms-high-power-commission-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.681Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/sYA6nws8A6Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152123/on-the-front-pm-s-high-power-commission-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3473,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.718Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.718Z\",\n            \"updated\": \"2019-07-07T06:39:25.718Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front with Kamran Shahid (PTI Hakumat Ka Pehla Budget) - 11th June 2019\",\n            \"slug\": \"on-the-front-with-kamran-shahid-pti-hakumat-ka-pehla-budget-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.718Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/xKeiiYDfGEY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/152062/on-the-front-with-kamran-shahid-pti-hakumat-ka-pehla-budget-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3474,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.767Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.766Z\",\n            \"updated\": \"2019-07-07T06:39:25.767Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front with Kamran Shahid (Asif Zardari Ki Giraftari) - 10th June 2019\",\n            \"slug\": \"on-the-front-with-kamran-shahid-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.767Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/56xqVaIStW0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151994/on-the-front-with-kamran-shahid-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3475,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.800Z\",\n            \"updated\": \"2019-07-07T06:39:25.800Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Moon Sighting Issue) - 4th June 2019\",\n            \"slug\": \"on-the-front-moon-sighting-issue-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.800Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/eyGWsbrmt-I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151721/on-the-front-moon-sighting-issue-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3476,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.830Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.830Z\",\n            \"updated\": \"2019-07-07T06:39:25.830Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Will Public Take Part in Anti Govt Movement) - 3rd June 2019\",\n            \"slug\": \"on-the-front-will-public-take-part-in-anti-govt-movement-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.830Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/7FrqqubLi7o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151690/on-the-front-will-public-take-part-in-anti-govt-movement-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3477,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.880Z\",\n            \"updated\": \"2019-07-07T06:39:25.880Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Govt Files Reference Against Judges) - 30th May 2019\",\n            \"slug\": \"on-the-front-govt-files-reference-against-judges-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.880Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/LVtVXHr88P0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151490/on-the-front-govt-files-reference-against-judges-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3478,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.910Z\",\n            \"updated\": \"2019-07-07T06:39:25.911Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Why Govt Using Power Against Opponents) - 29th May 2019\",\n            \"slug\": \"on-the-front-why-govt-using-power-against-opponents-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.911Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/SIHQ3mHfWyY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151456/on-the-front-why-govt-using-power-against-opponents-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3479,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.959Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.959Z\",\n            \"updated\": \"2019-07-07T06:39:25.959Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Mehngai, Siasat, Tehreek) - 28th May 2019\",\n            \"slug\": \"on-the-front-mehngai-siasat-tehreek-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.959Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/enzVi3IhV24\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151383/on-the-front-mehngai-siasat-tehreek-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3480,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:25.992Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:25.991Z\",\n            \"updated\": \"2019-07-07T06:39:25.992Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Chairman NAB Issue) - 27th May 2019\",\n            \"slug\": \"on-the-front-chairman-nab-issue-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:25.992Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/iSSD1StwIYU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151340/on-the-front-chairman-nab-issue-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3481,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.021Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.021Z\",\n            \"updated\": \"2019-07-07T06:39:26.021Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Indian Election, Pakistani Issues) - 23rd May 2019\",\n            \"slug\": \"on-the-front-indian-election-pakistani-issues-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.021Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/QQaIXQb0Fss\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151111/on-the-front-indian-election-pakistani-issues-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3482,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.059Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.059Z\",\n            \"updated\": \"2019-07-07T06:39:26.059Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Is Govt In Trouble Due To Economic Crisis) - 22nd May 2019\",\n            \"slug\": \"on-the-front-is-govt-in-trouble-due-to-economic-crisis-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.059Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/r9ZA42pqldY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/151057/on-the-front-is-govt-in-trouble-due-to-economic-crisis-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3483,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.093Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.092Z\",\n            \"updated\": \"2019-07-07T06:39:26.093Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Mehngai Mein Hosh Raba Izafa) - 21st May 2019\",\n            \"slug\": \"on-the-front-mehngai-mein-hosh-raba-izafa-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.094Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/hTqAxrBqmv8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150997/on-the-front-mehngai-mein-hosh-raba-izafa-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3484,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.133Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.125Z\",\n            \"updated\": \"2019-07-07T06:39:26.133Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (PPP Aur PMLN Ka Iftar Dinner) - 20th May 2019\",\n            \"slug\": \"on-the-front-ppp-aur-pmln-ka-iftar-dinner-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.134Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/nCZ0LB-Ofy0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150945/on-the-front-ppp-aur-pmln-ka-iftar-dinner-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3485,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.197Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.197Z\",\n            \"updated\": \"2019-07-07T06:39:26.197Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Imran Khan Ki Hakumat Aur Muashi Bohran) - 16th May 2019\",\n            \"slug\": \"on-the-front-imran-khan-ki-hakumat-aur-muashi-bohran-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.198Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/5erSUqVY78k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150731/on-the-front-imran-khan-ki-hakumat-aur-muashi-bohran-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3486,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.284Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.283Z\",\n            \"updated\": \"2019-07-07T06:39:26.284Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Economy, Amnesty Scheme, Accountability) - 15th May 2019\",\n            \"slug\": \"on-the-front-economy-amnesty-scheme-accountability-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.284Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/FbcBQ768RVc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150659/on-the-front-economy-amnesty-scheme-accountability-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3487,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.392Z\",\n            \"updated\": \"2019-07-07T06:39:26.392Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Tax Amnesty Scheme) - 14th May 2019\",\n            \"slug\": \"on-the-front-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.392Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/JpbE4-hwUkw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150593/on-the-front-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3488,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.476Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.476Z\",\n            \"updated\": \"2019-07-07T06:39:26.476Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (IMF's Strict Conditions) - 13th May 2019\",\n            \"slug\": \"on-the-front-imfs-strict-conditions-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.477Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/uuuYglmvdn4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150547/on-the-front-imf-s-strict-conditions-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3489,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.571Z\",\n            \"updated\": \"2019-07-07T06:39:26.571Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Pakistan's Economic Condition) - 9th May 2019\",\n            \"slug\": \"on-the-front-pakistans-economic-condition-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.571Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/ZbNF1rGQm6w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150301/on-the-front-pakistan-s-economic-condition-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3490,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.641Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.640Z\",\n            \"updated\": \"2019-07-07T06:39:26.641Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Mehngai, Lahore Dhamaka, Siasat) - 8th May 2019\",\n            \"slug\": \"on-the-front-mehngai-lahore-dhamaka-siasat-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.641Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/Ogze1cgjNI0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150232/on-the-front-mehngai-lahore-dhamaka-siasat-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3491,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.744Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.743Z\",\n            \"updated\": \"2019-07-07T06:39:26.744Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Muashi Bohran, Nawaz Sharif Ki Jail Wapsi) - 7th May 2019\",\n            \"slug\": \"on-the-front-muashi-bohran-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.744Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/AQFpT4gm1gc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150164/on-the-front-muashi-bohran-nawaz-sharif-ki-jail-wapsi-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3492,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.825Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.823Z\",\n            \"updated\": \"2019-07-07T06:39:26.825Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Ramzan Mein Mehngai, Awam Pareshan) - 6th May 2019\",\n            \"slug\": \"on-the-front-ramzan-mein-mehngai-awam-pareshan-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.825Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/wwsiJ4CS1lI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/150092/on-the-front-ramzan-mein-mehngai-awam-pareshan-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3493,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:26.914Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:26.911Z\",\n            \"updated\": \"2019-07-07T06:39:26.914Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Opposition Reservations on Accountability) - 2nd May 2019\",\n            \"slug\": \"on-the-front-opposition-reservations-on-accountability-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:26.914Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/tUjbPBrqM5M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/149846/on-the-front-opposition-reservations-on-accountability-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3494,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:27.032Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:27.031Z\",\n            \"updated\": \"2019-07-07T06:39:27.032Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Imran Khan Hakumat Ki Karkardagi) - 1st May 2019\",\n            \"slug\": \"on-the-front-imran-khan-hakumat-ki-karkardagi-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:27.032Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/rgHDmqxT4PA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/149782/on-the-front-imran-khan-hakumat-ki-karkardagi-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3495,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:27.139Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:27.138Z\",\n            \"updated\": \"2019-07-07T06:39:27.139Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Larkana Mein Awam Rul Gaye) - 30th April 2019\",\n            \"slug\": \"on-the-front-larkana-mein-awam-rul-gaye-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:27.139Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/gGnaDfohm-k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/149711/on-the-front-larkana-mein-awam-rul-gaye-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3496,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:27.345Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:27.344Z\",\n            \"updated\": \"2019-07-07T06:39:27.345Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (DG ISPR Clear Stance About PTM) - 29th April 2019\",\n            \"slug\": \"on-the-front-dg-ispr-clear-stance-about-ptm-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:27.345Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/MWXTLJLHwM0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/149639/on-the-front-dg-ispr-clear-stance-about-ptm-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3497,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:27.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:27.522Z\",\n            \"updated\": \"2019-07-07T06:39:27.522Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Should Nawaz Sharif Be Allowed To Go Abroad) - 25th April 2019\",\n            \"slug\": \"on-the-front-should-nawaz-sharif-be-allowed-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:27.522Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/149416/on-the-front-should-nawaz-sharif-be-allowed-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3498,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:27.775Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:27.767Z\",\n            \"updated\": \"2019-07-07T06:39:27.775Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Sadarti Nizam Ki Behas) - 23rd April 2019\",\n            \"slug\": \"on-the-front-sadarti-nizam-ki-behas-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:27.775Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/149289/on-the-front-sadarti-nizam-ki-behas-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3499,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:27.824Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:27.824Z\",\n            \"updated\": \"2019-07-07T06:39:27.825Z\",\n            \"extra_data\": {\n                \"host\": \"Kamran Shahid\",\n                \"job_id\": 166,\n                \"feed_id\": 39,\n                \"feed_name\": \"unewstv - On The Front\",\n                \"show_name\": \"On The Front\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"On The Front (Usman Buzdar Ka Kia Hoga?) - 22nd April 2019\",\n            \"slug\": \"on-the-front-usman-buzdar-ka-kia-hoga-22nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:27.825Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/On+The+Front+with+Kamran+Shahid\",\n            \"source_detail\": \"http://www.unewstv.com/149224/on-the-front-usman-buzdar-ka-kia-hoga-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 37,\n            \"tags\": \"[\\\"Kamran Shahid\\\", \\\"On The Front\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3500,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.022Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.022Z\",\n            \"updated\": \"2019-07-07T06:39:28.022Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Rana Sanaullah Ki Giraftari) - 4th July 2019\",\n            \"slug\": \"nuqta-e-nazar-rana-sanaullah-ki-giraftari-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.022Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/Eq436sJ_XWA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/153507/nuqta-e-nazar-rana-sanaullah-ki-giraftari-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3501,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.081Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.081Z\",\n            \"updated\": \"2019-07-07T06:39:28.081Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Ahtasab Aur Maeeshat) - 3rd July 2019\",\n            \"slug\": \"nuqta-e-nazar-ahtasab-aur-maeeshat-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.081Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/mgG5U82w5tM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/153426/nuqta-e-nazar-ahtasab-aur-maeeshat-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3502,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.117Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.117Z\",\n            \"updated\": \"2019-07-07T06:39:28.118Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Production Orders Will Not Be Issued) - 2nd July 2019\",\n            \"slug\": \"nuqta-e-nazar-production-orders-will-not-be-issued-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.118Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/H4qTAozka68\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/153361/nuqta-e-nazar-production-orders-will-not-be-issued-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3503,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.180Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.180Z\",\n            \"updated\": \"2019-07-07T06:39:28.180Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Rana Sanaullah Arrested by ANF?) - 1st July 2019\",\n            \"slug\": \"nuqta-e-nazar-rana-sanaullah-arrested-by-anf-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.180Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/fvLka9qRoLY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/153289/nuqta-e-nazar-rana-sanaullah-arrested-by-anf-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3504,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.213Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.213Z\",\n            \"updated\": \"2019-07-07T06:39:28.213Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Opposition's All Parties Conference) - 27th June 2019\",\n            \"slug\": \"nuqta-e-nazar-oppositions-all-parties-conference-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.213Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/4ktDfyAzA3k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/153022/nuqta-e-nazar-opposition-s-all-parties-conference-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3505,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.268Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.268Z\",\n            \"updated\": \"2019-07-07T06:39:28.269Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Opposition's All Parties Conference) - 26th June 2019\",\n            \"slug\": \"nuqta-e-nazar-oppositions-all-parties-conference-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.269Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/JoT3ZqE1-3M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152952/nuqta-e-nazar-opposition-s-all-parties-conference-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3506,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.298Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.298Z\",\n            \"updated\": \"2019-07-07T06:39:28.298Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Opposition's All Parties Conference) - 25th June 2019\",\n            \"slug\": \"nuqta-e-nazar-oppositions-all-parties-conference-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.298Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/puZ0JRa2gnc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152882/nuqta-e-nazar-opposition-s-all-parties-conference-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3507,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.328Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.327Z\",\n            \"updated\": \"2019-07-07T06:39:28.328Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Opposition Ki Siasat Kia Rang La Sakti Hai) - 24th June 2019\",\n            \"slug\": \"nuqta-e-nazar-opposition-ki-siasat-kia-rang-la-sakti-hai-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.328Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/rWia7ijuRY4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152814/nuqta-e-nazar-opposition-ki-siasat-kia-rang-la-sakti-hai-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3508,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.378Z\",\n            \"updated\": \"2019-07-07T06:39:28.378Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Nawaz Sharif's Bail Plea Rejected) - 20th June 2019\",\n            \"slug\": \"nuqta-e-nazar-nawaz-sharifs-bail-plea-rejected-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.378Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/5LP7Y0r_1AA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152558/nuqta-e-nazar-nawaz-sharif-s-bail-plea-rejected-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3509,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.412Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.412Z\",\n            \"updated\": \"2019-07-07T06:39:28.412Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Qaumi Assembly Ka Ijlas) - 19th June 2019\",\n            \"slug\": \"nuqta-e-nazar-qaumi-assembly-ka-ijlas-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.412Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/PxEOTvc6Mpg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152494/nuqta-e-nazar-qaumi-assembly-ka-ijlas-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3510,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.501Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.495Z\",\n            \"updated\": \"2019-07-07T06:39:28.502Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Budget Manzori Ka Marhala) - 18th June 2019\",\n            \"slug\": \"nuqta-e-nazar-budget-manzori-ka-marhala-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.502Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/bDz40V11Dfw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152439/nuqta-e-nazar-budget-manzori-ka-marhala-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3511,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.532Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.532Z\",\n            \"updated\": \"2019-07-07T06:39:28.532Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Pakistan Cricket Team's Failures) - 17th June 2019\",\n            \"slug\": \"nuqta-e-nazar-pakistan-cricket-teams-failures-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.532Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/zAh_tW03GAs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152385/nuqta-e-nazar-pakistan-cricket-team-s-failures-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3512,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.576Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.576Z\",\n            \"updated\": \"2019-07-07T06:39:28.576Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Ahsan Iqbal Aur Murad Saeed Ke Ilzamat) - 13th June 2019\",\n            \"slug\": \"nuqta-e-nazar-ahsan-iqbal-aur-murad-saeed-ke-ilzamat-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.576Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/WIcyTUgkL3A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152164/nuqta-e-nazar-ahsan-iqbal-aur-murad-saeed-ke-ilzamat-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3513,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.611Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.609Z\",\n            \"updated\": \"2019-07-07T06:39:28.611Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (PM Imran Khan's Address to Nation) - 12th June 2019\",\n            \"slug\": \"nuqta-e-nazar-pm-imran-khans-address-to-nation-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.611Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/eyIYp3P4YdI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152119/nuqta-e-nazar-pm-imran-khan-s-address-to-nation-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3514,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.652Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.651Z\",\n            \"updated\": \"2019-07-07T06:39:28.652Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Discussion on PTI's Budget) - 11th June 2019\",\n            \"slug\": \"nuqta-e-nazar-discussion-on-ptis-budget-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.652Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/fjgGeFkrvFY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/152059/nuqta-e-nazar-discussion-on-pti-s-budget-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3515,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.685Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.685Z\",\n            \"updated\": \"2019-07-07T06:39:28.685Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Bilawal Ke Paas Kia Options Baqi Hain) - 10th June 2019\",\n            \"slug\": \"nuqta-e-nazar-bilawal-ke-paas-kia-options-baqi-hain-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.685Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/WARvQDCCnAM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151984/nuqta-e-nazar-bilawal-ke-paas-kia-options-baqi-hain-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3516,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.717Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.717Z\",\n            \"updated\": \"2019-07-07T06:39:28.717Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Mufti Popalzai Ka Karnama) - 4th June 2019\",\n            \"slug\": \"nuqta-e-nazar-mufti-popalzai-ka-karnama-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.718Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/AMfzvdrCPiU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151712/nuqta-e-nazar-mufti-popalzai-ka-karnama-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3517,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.782Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.782Z\",\n            \"updated\": \"2019-07-07T06:39:28.782Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Imran Khan Ka Daura e Saudia Kitna Kamyab) - 3rd June 2019\",\n            \"slug\": \"nuqta-e-nazar-imran-khan-ka-daura-e-saudia-kitna-kamyab-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.782Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/ifk8WoebeT4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151678/nuqta-e-nazar-imran-khan-ka-daura-e-saudia-kitna-kamyab-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3518,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:28.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:28.967Z\",\n            \"updated\": \"2019-07-07T06:39:28.967Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Opposition Active Against Govt) - 30th May 2019\",\n            \"slug\": \"nuqta-e-nazar-opposition-active-against-govt-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:28.967Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/NWLYwDvb2TY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151477/nuqta-e-nazar-opposition-active-against-govt-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3519,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.105Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.089Z\",\n            \"updated\": \"2019-07-07T06:39:29.105Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (PPP Aur Hakumat Aamne Samne) - 29th May 2019\",\n            \"slug\": \"nuqta-e-nazar-ppp-aur-hakumat-aamne-samne-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.105Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/fFUB_6RpSdY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151413/nuqta-e-nazar-ppp-aur-hakumat-aamne-samne-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3520,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.227Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.208Z\",\n            \"updated\": \"2019-07-07T06:39:29.227Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar with Ajmal Jami (Maryam Nawaz Speech) - 28th May 2019\",\n            \"slug\": \"nuqta-e-nazar-with-ajmal-jami-maryam-nawaz-speech-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.227Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/YoKmSsMTU60\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151372/nuqta-e-nazar-with-ajmal-jami-maryam-nawaz-speech-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3521,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.323Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.323Z\",\n            \"updated\": \"2019-07-07T06:39:29.323Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Chairman NAB Leaked Video Issue) - 27th May 2019\",\n            \"slug\": \"nuqta-e-nazar-chairman-nab-leaked-video-issue-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.323Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/7k8PwZ3e3pU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151325/nuqta-e-nazar-chairman-nab-leaked-video-issue-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3522,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.382Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.381Z\",\n            \"updated\": \"2019-07-07T06:39:29.382Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Modi's Victory in India) - 23rd May 2019\",\n            \"slug\": \"nuqta-e-nazar-modis-victory-in-india-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.382Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/mHMIqBoXo6I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151097/nuqta-e-nazar-modi-s-victory-in-india-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3523,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.451Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.450Z\",\n            \"updated\": \"2019-07-07T06:39:29.451Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Maryam Nawaz Criticism on PTI Govt) - 22nd May 2019\",\n            \"slug\": \"nuqta-e-nazar-maryam-nawaz-criticism-on-pti-govt-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.451Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/GH1nj5_1BCE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/151050/nuqta-e-nazar-maryam-nawaz-criticism-on-pti-govt-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3524,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.547Z\",\n            \"updated\": \"2019-07-07T06:39:29.548Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Is It Possible to Boycott Dollar?) - 21st May 2019\",\n            \"slug\": \"nuqta-e-nazar-is-it-possible-to-boycott-dollar-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.548Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/USJlbg73Ddc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150981/nuqta-e-nazar-is-it-possible-to-boycott-dollar-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3525,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.619Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.600Z\",\n            \"updated\": \"2019-07-07T06:39:29.619Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Dollar Rise, Oil & Gas Reservoirs) - 20th May 2019\",\n            \"slug\": \"nuqta-e-nazar-dollar-rise-oil-gas-reservoirs-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.619Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/5EK24k5-A70\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150934/nuqta-e-nazar-dollar-rise-oil-gas-reservoirs-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3526,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.688Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.688Z\",\n            \"updated\": \"2019-07-07T06:39:29.688Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Chairman NAB Ka Dhamaka) - 16th May 2019\",\n            \"slug\": \"nuqta-e-nazar-chairman-nab-ka-dhamaka-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.688Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/F050rgFkv_0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150718/nuqta-e-nazar-chairman-nab-ka-dhamaka-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3527,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.757Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.757Z\",\n            \"updated\": \"2019-07-07T06:39:29.757Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Aleem Khan Released, South Punjab Issue) - 15th May 2019\",\n            \"slug\": \"nuqta-e-nazar-aleem-khan-released-south-punjab-issue-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.757Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/sNaK7m2Tc8s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150646/nuqta-e-nazar-aleem-khan-released-south-punjab-issue-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3528,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.842Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.827Z\",\n            \"updated\": \"2019-07-07T06:39:29.842Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Discussion on Tax Amnesty Scheme) - 14th May 2019\",\n            \"slug\": \"nuqta-e-nazar-discussion-on-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.843Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/Mi6EBNa2ELk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150580/nuqta-e-nazar-discussion-on-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3529,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:29.934Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:29.934Z\",\n            \"updated\": \"2019-07-07T06:39:29.934Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (IMF Package And Conditions) - 13th May 2019\",\n            \"slug\": \"nuqta-e-nazar-imf-package-and-conditions-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:29.934Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/NNtUcxj9wH8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150534/nuqta-e-nazar-imf-package-and-conditions-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3530,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.022Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.021Z\",\n            \"updated\": \"2019-07-07T06:39:30.022Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Bilawal Ki Hakumat Per Kari Tanqeed) - 9th May 2019\",\n            \"slug\": \"nuqta-e-nazar-bilawal-ki-hakumat-per-kari-tanqeed-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.022Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/2dyHMKNk7YY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150283/nuqta-e-nazar-bilawal-ki-hakumat-per-kari-tanqeed-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3531,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.072Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.072Z\",\n            \"updated\": \"2019-07-07T06:39:30.072Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Data Darbar Dhamaka, Siasi Behas) - 8th May 2019\",\n            \"slug\": \"nuqta-e-nazar-data-darbar-dhamaka-siasi-behas-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.072Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/K6E3Oht-LBI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150215/nuqta-e-nazar-data-darbar-dhamaka-siasi-behas-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3532,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.118Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.118Z\",\n            \"updated\": \"2019-07-07T06:39:30.118Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (New FBR Chairman Appointment Issue) - 7th May 2019\",\n            \"slug\": \"nuqta-e-nazar-new-fbr-chairman-appointment-issue-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.119Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/x9_TKmgMVmM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150152/nuqta-e-nazar-new-fbr-chairman-appointment-issue-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3533,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.159Z\",\n            \"updated\": \"2019-07-07T06:39:30.159Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Moon Sighting Issue) - 6th May 2019\",\n            \"slug\": \"nuqta-e-nazar-moon-sighting-issue-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.159Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/qXfJvXVywNA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/150077/nuqta-e-nazar-moon-sighting-issue-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3534,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.191Z\",\n            \"updated\": \"2019-07-07T06:39:30.191Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (PMLN Towards Expected Deal?) - 2nd May 2019\",\n            \"slug\": \"nuqta-e-nazar-pmln-towards-expected-deal-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.191Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/heJNHTHi-YE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/149838/nuqta-e-nazar-pmln-towards-expected-deal-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3535,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.221Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.221Z\",\n            \"updated\": \"2019-07-07T06:39:30.221Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Masood Azhar Par Pabandi) - 1st May 2019\",\n            \"slug\": \"nuqta-e-nazar-masood-azhar-par-pabandi-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.221Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/n8ozy1vXG7c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/149776/nuqta-e-nazar-masood-azhar-par-pabandi-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3536,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.263Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.262Z\",\n            \"updated\": \"2019-07-07T06:39:30.263Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Pak Army's Message to PTM) - 30th April 2019\",\n            \"slug\": \"nuqta-e-nazar-pak-armys-message-to-ptm-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.263Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/WgFn_qKstJk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/149702/nuqta-e-nazar-pak-army-s-message-to-ptm-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3537,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.296Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.296Z\",\n            \"updated\": \"2019-07-07T06:39:30.297Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (DG ISPR Press Conference, Madrassa Reforms) - 29th April 2019\",\n            \"slug\": \"nuqta-e-nazar-dg-ispr-press-conference-madrassa-reforms-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.297Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/7dpQmwVyozc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/149623/nuqta-e-nazar-dg-ispr-press-conference-madrassa-reforms-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3538,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.325Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.325Z\",\n            \"updated\": \"2019-07-07T06:39:30.325Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (Imran Khan Vs Bilawal Zardari) - 25th April 2019\",\n            \"slug\": \"nuqta-e-nazar-imran-khan-vs-bilawal-zardari-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.325Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/149401/nuqta-e-nazar-imran-khan-vs-bilawal-zardari-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3539,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.368Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.368Z\",\n            \"updated\": \"2019-07-07T06:39:30.368Z\",\n            \"extra_data\": {\n                \"host\": \"Mujeeb Ur Rehman Shami, Ajmal Jami\",\n                \"job_id\": 165,\n                \"feed_id\": 38,\n                \"feed_name\": \"unewstv - Nuqta e Nazar\",\n                \"show_name\": \"Nuqta e Nazar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Nuqta e Nazar (PM Imran Khan's Iran Visit) - 23rd April 2019\",\n            \"slug\": \"nuqta-e-nazar-pm-imran-khans-iran-visit-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.368Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Nuqta+e+Nazar+by+Mujeeb+ur+Rehman+Shami\",\n            \"source_detail\": \"http://www.unewstv.com/149285/nuqta-e-nazar-pm-imran-khan-s-iran-visit-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 36,\n            \"tags\": \"[\\\"Mujeeb Ur Rehman Shami, Ajmal Jami\\\", \\\"Nuqta e Nazar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3540,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.569Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.569Z\",\n            \"updated\": \"2019-07-07T06:39:30.569Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Former Afghan PM Gulbuddin Hekmatyar Exclusive) \\u2013 6th July 2019\",\n            \"slug\": \"jirga-with-saleem-safi-former-afghan-pm-gulbuddin-hekmatyar-exclusive-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.569Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/B4vXy7n749M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/153664/jirga-with-saleem-safi-former-afghan-pm-gulbuddin-hekmatyar-exclusive-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3541,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.596Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.596Z\",\n            \"updated\": \"2019-07-07T06:39:30.596Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Ashraf Ghani Special Interview) - 30th June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-ashraf-ghani-special-interview-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.596Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/1zZ56wxkOkk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/153255/jirga-with-saleem-safi-ashraf-ghani-special-interview-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3542,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.629Z\",\n            \"updated\": \"2019-07-07T06:39:30.639Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Qamar Zaman Kaira Exclusive) - 22nd June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-qamar-zaman-kaira-exclusive-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.639Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/A0WRKVFeDpg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/152726/jirga-with-saleem-safi-qamar-zaman-kaira-exclusive-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3543,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.690Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.690Z\",\n            \"updated\": \"2019-07-07T06:39:30.696Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Zaidan Hamid Exclusive Interview) \\u2013 9th June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-zaidan-hamid-exclusive-interview-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.696Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/W-k7oaH8ke0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151938/jirga-with-saleem-safi-zaidan-hamid-exclusive-interview-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3544,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.748Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.748Z\",\n            \"updated\": \"2019-07-07T06:39:30.748Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Mishal Malik Exclusive Interview) \\u2013 2nd June 2019\",\n            \"slug\": \"jirga-mishal-malik-exclusive-interview-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.748Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/K0Qj6wJ2Gpw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151659/jirga-mishal-malik-exclusive-interview-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3545,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.797Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.797Z\",\n            \"updated\": \"2019-07-07T06:39:30.797Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Sardar Akhtar Mengal Interview) \\u2013 1st June 2019\",\n            \"slug\": \"jirga-with-saleem-safi-sardar-akhtar-mengal-interview-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.797Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/BsDeH1L96X8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151623/jirga-with-saleem-safi-sardar-akhtar-mengal-interview-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3546,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.826Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.826Z\",\n            \"updated\": \"2019-07-07T06:39:30.826Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Firdous Ashiq Awan Exclusive Interview) \\u2013 26th May 2019\",\n            \"slug\": \"jirga-firdous-ashiq-awan-exclusive-interview-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.826Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ZF1HJrWQu-k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151305/jirga-firdous-ashiq-awan-exclusive-interview-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3547,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.875Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.874Z\",\n            \"updated\": \"2019-07-07T06:39:30.875Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Talk With Three Political Parties Representatives) \\u2013 25th May 2019\",\n            \"slug\": \"jirga-talk-with-three-political-parties-representatives-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.875Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/RQWKyINEOQ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/151250/jirga-talk-with-three-political-parties-representatives-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3548,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.917Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.917Z\",\n            \"updated\": \"2019-07-07T06:39:30.917Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Maulana Tariq Jameel Exclusive Talk) \\u2013 18th May 2019\",\n            \"slug\": \"jirga-maulana-tariq-jameel-exclusive-talk-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.917Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/UVmI_hCYga4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/150874/jirga-maulana-tariq-jameel-exclusive-talk-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3549,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.970Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.970Z\",\n            \"updated\": \"2019-07-07T06:39:30.970Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Speaker NA Asad Qaiser Exclusive Interview) \\u2013 12th May 2019\",\n            \"slug\": \"jirga-speaker-na-asad-qaiser-exclusive-interview-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.970Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/cj1yqgFJRVk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/150507/jirga-speaker-na-asad-qaiser-exclusive-interview-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3550,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.998Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:30.998Z\",\n            \"updated\": \"2019-07-07T06:39:30.998Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga (Ruet-e-Hilal Committee Ka Mamla) \\u2013 11th May 2019\",\n            \"slug\": \"jirga-ruet-e-hilal-committee-ka-mamla-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:30.998Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/urUc1Ju7sh0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/150436/jirga-ruet-e-hilal-committee-ka-mamla-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3551,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.055Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.055Z\",\n            \"updated\": \"2019-07-07T06:39:31.055Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Maulana Fazal ur Rehman Interview) - 2nd September 2018\",\n            \"slug\": \"jirga-with-saleem-safi-maulana-fazal-ur-rehman-interview-2nd-september-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.055Z\",\n            \"target_date\": \"2018-09-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t0ecx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/135496/jirga-with-saleem-safi-maulana-fazal-ur-rehman-interview-2nd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3552,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.144Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.143Z\",\n            \"updated\": \"2019-07-07T06:39:31.144Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Aitzaz Ahsan Interview) - 1st September 2018\",\n            \"slug\": \"jirga-with-saleem-safi-aitzaz-ahsan-interview-1st-september-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.144Z\",\n            \"target_date\": \"2018-09-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sz4od\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/135429/jirga-with-saleem-safi-aitzaz-ahsan-interview-1st-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3553,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.233Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.233Z\",\n            \"updated\": \"2019-07-07T06:39:31.233Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Regional Poets) - 26th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-regional-poets-26th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.233Z\",\n            \"target_date\": \"2018-08-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sn757\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134994/jirga-with-saleem-safi-regional-poets-26th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3554,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.305Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.304Z\",\n            \"updated\": \"2019-07-07T06:39:31.305Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Afghan Sadar Ke Shikwe) - 25th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-afghan-sadar-ke-shikwe-25th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.305Z\",\n            \"target_date\": \"2018-08-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6slqla\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134938/jirga-with-saleem-safi-afghan-sadar-ke-shikwe-25th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3555,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.402Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.401Z\",\n            \"updated\": \"2019-07-07T06:39:31.402Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (New Faces in Assembly) - 18th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-new-faces-in-assembly-18th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.402Z\",\n            \"target_date\": \"2018-08-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6s7rm3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134556/jirga-with-saleem-safi-new-faces-in-assembly-18th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3556,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.520Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.519Z\",\n            \"updated\": \"2019-07-07T06:39:31.520Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Why America Is Angry on Pakistan) - 12th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-why-america-is-angry-on-pakistan-12th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.520Z\",\n            \"target_date\": \"2018-08-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rw98w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134145/jirga-with-saleem-safi-why-america-is-angry-on-pakistan-12th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3557,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.580Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.579Z\",\n            \"updated\": \"2019-07-07T06:39:31.598Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (PTI's Govt Formation) - 11th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-ptis-govt-formation-11th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.598Z\",\n            \"target_date\": \"2018-08-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ruu7a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/134096/jirga-with-saleem-safi-pti-s-govt-formation-11th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3558,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.748Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.723Z\",\n            \"updated\": \"2019-07-07T06:39:31.748Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Zaidan Hamid, Little Professor) - 5th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-zaidan-hamid-little-professor-5th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.748Z\",\n            \"target_date\": \"2018-08-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rhd9a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133690/jirga-with-saleem-safi-zaidan-hamid-little-professor-5th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3559,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.873Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.873Z\",\n            \"updated\": \"2019-07-07T06:39:31.873Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Khushiyan Bantne Walon Ke Sath) - 4th August 2018\",\n            \"slug\": \"jirga-with-saleem-safi-khushiyan-bantne-walon-ke-sath-4th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.873Z\",\n            \"target_date\": \"2018-08-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rfbrk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133638/jirga-with-saleem-safi-khushiyan-bantne-walon-ke-sath-4th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3560,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:31.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:31.943Z\",\n            \"updated\": \"2019-07-07T06:39:31.944Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (ECP Response on Rigging Allegations) - 29th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-ecp-response-on-rigging-allegations-29th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:31.944Z\",\n            \"target_date\": \"2018-07-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qnk2n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133235/jirga-with-saleem-safi-ecp-response-on-rigging-allegations-29th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3561,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.091Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.091Z\",\n            \"updated\": \"2019-07-07T06:39:32.091Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Mustafa Kamal Exclusive Interview) - 28th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-mustafa-kamal-exclusive-interview-28th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.091Z\",\n            \"target_date\": \"2018-07-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qjmkf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/133176/jirga-with-saleem-safi-mustafa-kamal-exclusive-interview-28th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3562,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.162Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.161Z\",\n            \"updated\": \"2019-07-07T06:39:32.162Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election Challenge For Caretaker Govt) - 21st July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-challenge-for-caretaker-govt-21st-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.162Z\",\n            \"target_date\": \"2018-07-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6pq4sd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/132744/jirga-with-saleem-safi-election-challenge-for-caretaker-govt-21st-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3563,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.268Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.268Z\",\n            \"updated\": \"2019-07-07T06:39:32.268Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Naqibullah Mehsud Case) - 15th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-naqibullah-mehsud-case-15th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.268Z\",\n            \"target_date\": \"2018-07-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6otlrx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/132374/jirga-with-saleem-safi-naqibullah-mehsud-case-15th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3564,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.425Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.424Z\",\n            \"updated\": \"2019-07-07T06:39:32.425Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Use of Religion in Pakistani Politics) - 8th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-use-of-religion-in-pakistani-politics-8th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.425Z\",\n            \"target_date\": \"2018-07-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nzjty\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131943/jirga-with-saleem-safi-use-of-religion-in-pakistani-politics-8th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3565,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.522Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.522Z\",\n            \"updated\": \"2019-07-07T06:39:32.522Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Asfandyar Wali Interview) - 7th July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-asfandyar-wali-interview-7th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.522Z\",\n            \"target_date\": \"2018-07-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nwujd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131877/jirga-with-saleem-safi-asfandyar-wali-interview-7th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3566,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.710Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.710Z\",\n            \"updated\": \"2019-07-07T06:39:32.710Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi Part-2 (Shahbaz Sharif Interview) - 1st July 2018\",\n            \"slug\": \"jirga-with-saleem-safi-part-2-shahbaz-sharif-interview-1st-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.711Z\",\n            \"target_date\": \"2018-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nbx57\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131503/jirga-with-saleem-safi-part-2-shahbaz-sharif-interview-1st-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3567,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.838Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.838Z\",\n            \"updated\": \"2019-07-07T06:39:32.838Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Shahbaz Sharif Exclusive Interview) - 30th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-shahbaz-sharif-exclusive-interview-30th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.838Z\",\n            \"target_date\": \"2018-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6n91xt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131450/jirga-with-saleem-safi-shahbaz-sharif-exclusive-interview-30th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3568,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.880Z\",\n            \"updated\": \"2019-07-07T06:39:32.880Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Iftikhar Chaudhry Interview) - 24th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-iftikhar-chaudhry-interview-24th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.880Z\",\n            \"target_date\": \"2018-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mo5p3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131093/jirga-with-saleem-safi-iftikhar-chaudhry-interview-24th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3569,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.924Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.923Z\",\n            \"updated\": \"2019-07-07T06:39:32.924Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election 2018) - 23rd June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-2018-23rd-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.924Z\",\n            \"target_date\": \"2018-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mlc4z\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/131048/jirga-with-saleem-safi-election-2018-23rd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3570,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:32.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:32.981Z\",\n            \"updated\": \"2019-07-07T06:39:32.981Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Zaidan Hamid) - 18th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-zaidan-hamid-18th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:32.981Z\",\n            \"target_date\": \"2018-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6m6lop\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/130748/jirga-with-saleem-safi-zaidan-hamid-18th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3571,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.033Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.032Z\",\n            \"updated\": \"2019-07-07T06:39:33.033Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Balochistan Awami Party) - 10th June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-balochistan-awami-party-10th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.033Z\",\n            \"target_date\": \"2018-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ljqti\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/130350/jirga-with-saleem-safi-balochistan-awami-party-10th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3572,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.095Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.094Z\",\n            \"updated\": \"2019-07-07T06:39:33.095Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Changes in FATA After Merger) - 3rd June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-changes-in-fata-after-merger-3rd-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.095Z\",\n            \"target_date\": \"2018-06-03\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kz3zb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129871/jirga-with-saleem-safi-changes-in-fata-after-merger-3rd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3573,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.144Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.144Z\",\n            \"updated\": \"2019-07-07T06:39:33.144Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Issues of Balochistan) \\u2013 2nd June 2018\",\n            \"slug\": \"jirga-with-saleem-safi-issues-of-balochistan-2nd-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.144Z\",\n            \"target_date\": \"2018-06-02\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kws1r\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129797/jirga-with-saleem-safi-issues-of-balochistan-2nd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3574,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.251Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.250Z\",\n            \"updated\": \"2019-07-07T06:39:33.251Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Gilgat Baltistan Governance Ordinance) \\u2013 27th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-gilgat-baltistan-governance-ordinance-27th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.251Z\",\n            \"target_date\": \"2018-05-27\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kgamn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129355/jirga-with-saleem-safi-gilgat-baltistan-governance-ordinance-27th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3575,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.360Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.360Z\",\n            \"updated\": \"2019-07-07T06:39:33.360Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (FATA Merger in KPK) \\u2013 26th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-fata-merger-in-kpk-26th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.360Z\",\n            \"target_date\": \"2018-05-26\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6ke7p8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/129322/jirga-with-saleem-safi-fata-merger-in-kpk-26th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3576,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.428Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.428Z\",\n            \"updated\": \"2019-07-07T06:39:33.428Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election 2018) Part-2 \\u2013 20th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-2018-part-2-20th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.428Z\",\n            \"target_date\": \"2018-05-20\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jxptv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128976/jirga-with-saleem-safi-election-2018-part-2-20th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3577,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.504Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.488Z\",\n            \"updated\": \"2019-07-07T06:39:33.504Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga with Saleem Safi (Election 2018) \\u2013 19th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-election-2018-19th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.504Z\",\n            \"target_date\": \"2018-05-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6jvb6f\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128921/jirga-with-saleem-safi-election-2018-19th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3578,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.653Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.653Z\",\n            \"updated\": \"2019-07-07T06:39:33.653Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (KPK Hakumat Ke Dawe) - 13th May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-kpk-hakumat-ke-dawe-13th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.653Z\",\n            \"target_date\": \"2018-05-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6jg3fg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128543/jirga-with-saleem-safi-kpk-hakumat-ke-dawe-13th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3579,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.762Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:33.762Z\",\n            \"updated\": \"2019-07-07T06:39:33.762Z\",\n            \"extra_data\": {\n                \"host\": \"Saleem Safi\",\n                \"job_id\": 144,\n                \"feed_id\": 16,\n                \"feed_name\": \"unewstv - Jirga\",\n                \"show_name\": \"Jirga\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Jirga With Saleem Safi (Gilgit Baltistan) - 12 May 2018\",\n            \"slug\": \"jirga-with-saleem-safi-gilgit-baltistan-12-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:33.762Z\",\n            \"target_date\": \"2018-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6je4d6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Jirga+with+Saleem+Safi\",\n            \"source_detail\": \"http://www.unewstv.com/128470/jirga-with-saleem-safi-gilgit-baltistan-12-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 14,\n            \"tags\": \"[\\\"Saleem Safi\\\", \\\"Jirga\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3580,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.236Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.236Z\",\n            \"updated\": \"2019-07-07T06:39:34.236Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Maryam Nawaz Leaked Video of Judge) - 6th July 2019\",\n            \"slug\": \"ikhtilafi-note-maryam-nawaz-leaked-video-of-judge-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.236Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/xkVTMR4jUyw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153638/ikhtilafi-note-maryam-nawaz-leaked-video-of-judge-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3581,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.282Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.282Z\",\n            \"updated\": \"2019-07-07T06:39:34.282Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Chairman Senate Issue, Amnesty Scheme) - 5th July 2019\",\n            \"slug\": \"ikhtilafi-note-chairman-senate-issue-amnesty-scheme-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.282Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/tnrhHbUVXYY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153578/ikhtilafi-note-chairman-senate-issue-amnesty-scheme-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3582,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.323Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.323Z\",\n            \"updated\": \"2019-07-07T06:39:34.323Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Cracks in PMLN's Ranks) - 30th June 2019\",\n            \"slug\": \"ikhtilafi-note-cracks-in-pmlns-ranks-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.323Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/2TCfSKOxYBg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153223/ikhtilafi-note-cracks-in-pmln-s-ranks-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3583,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.366Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.365Z\",\n            \"updated\": \"2019-07-07T06:39:34.366Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (PM Imran Khan's Speech) - 29th June 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-pm-imran-khans-speech-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.366Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/qAlVgAl2EEY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153164/ikhtilafi-note-with-habib-akram-pm-imran-khan-s-speech-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3584,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.396Z\",\n            \"updated\": \"2019-07-07T06:39:34.397Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Army Chief Hopeful For Economy Revival) - 28th June 2019\",\n            \"slug\": \"ikhtilafi-note-army-chief-hopeful-for-economy-revival-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.397Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/8RsBBtjuAaU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/153093/ikhtilafi-note-army-chief-hopeful-for-economy-revival-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3585,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.435Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.434Z\",\n            \"updated\": \"2019-07-07T06:39:34.435Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Misaq e Maeeshat Ya Mazaq e Maeeshat) - 23rd June 2019\",\n            \"slug\": \"ikhtilafi-note-misaq-e-maeeshat-ya-mazaq-e-maeeshat-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.435Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/PvUn0PkraBg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152758/ikhtilafi-note-misaq-e-maeeshat-ya-mazaq-e-maeeshat-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3586,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.480Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.480Z\",\n            \"updated\": \"2019-07-07T06:39:34.481Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"khtilafi Note (Maryam Rejects Shahbaz Sharif's Misaq e Maeeshat) - 22nd June 2019\",\n            \"slug\": \"khtilafi-note-maryam-rejects-shahbaz-sharifs-misaq-e-maeeshat-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.481Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/8Qz13kEQrCU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152695/khtilafi-note-maryam-rejects-shahbaz-sharif-s-misaq-e-maeeshat-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3587,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.515Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.514Z\",\n            \"updated\": \"2019-07-07T06:39:34.515Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (What Public Says About PTI Govt) - 21st June 2019\",\n            \"slug\": \"ikhtilafi-note-what-public-says-about-pti-govt-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.515Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/vvbfc-Cn8YI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152640/ikhtilafi-note-what-public-says-about-pti-govt-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3588,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.590Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.590Z\",\n            \"updated\": \"2019-07-07T06:39:34.590Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (Pakistan Vs India) - 16th June 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-pakistan-vs-india-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.590Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/DuQwCEXxs7A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152324/ikhtilafi-note-with-habib-akram-pakistan-vs-india-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3589,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.619Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.618Z\",\n            \"updated\": \"2019-07-07T06:39:34.619Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (Qarza Commission) - 15th June 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-qarza-commission-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.619Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/hfoh0h9SX0g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152278/ikhtilafi-note-with-habib-akram-qarza-commission-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3590,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.668Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.668Z\",\n            \"updated\": \"2019-07-07T06:39:34.668Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Hakumat Per Siasi Inteqam Ka Elan) - 14th June 2019\",\n            \"slug\": \"ikhtilafi-note-hakumat-per-siasi-inteqam-ka-elan-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.668Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/qoBNMD7Y5fI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/152220/ikhtilafi-note-hakumat-per-siasi-inteqam-ka-elan-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3591,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.699Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.699Z\",\n            \"updated\": \"2019-07-07T06:39:34.699Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (Budget, Opposition Aur Hakumat) - 9th June 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-budget-opposition-aur-hakumat-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.699Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/Y63fY46P5U4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151926/ikhtilafi-note-with-habib-akram-budget-opposition-aur-hakumat-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3592,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.751Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.750Z\",\n            \"updated\": \"2019-07-07T06:39:34.751Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (Nawaz Sharif, Hakumat Ke Liye Khatra) - 8th June 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-nawaz-sharif-hakumat-ke-liye-khatra-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.751Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/g6SoPq0ylpc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151879/ikhtilafi-note-with-habib-akram-nawaz-sharif-hakumat-ke-liye-khatra-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3593,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.793Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.793Z\",\n            \"updated\": \"2019-07-07T06:39:34.793Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Hakumat Mukhalif Tehreek) - 7th June 2019\",\n            \"slug\": \"ikhtilafi-note-hakumat-mukhalif-tehreek-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.793Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/20BT6K2fNM4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151826/ikhtilafi-note-hakumat-mukhalif-tehreek-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3594,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.860Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.857Z\",\n            \"updated\": \"2019-07-07T06:39:34.860Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (Zartaj Gul Sister Issue) - 2nd June 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-zartaj-gul-sister-issue-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.860Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/wKC7ClgcibM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151635/ikhtilafi-note-with-habib-akram-zartaj-gul-sister-issue-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3595,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.891Z\",\n            \"updated\": \"2019-07-07T06:39:34.891Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Discussion on Multiple Issues) - 31st May 2019\",\n            \"slug\": \"ikhtilafi-note-discussion-on-multiple-issues-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.892Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/kjs3W4iWkI4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151538/ikhtilafi-note-discussion-on-multiple-issues-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3596,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.923Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.922Z\",\n            \"updated\": \"2019-07-07T06:39:34.923Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Is Govt Going in Right Direction) - 26th May 2019\",\n            \"slug\": \"ikhtilafi-note-is-govt-going-in-right-direction-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.923Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ZAvCt-ErUNk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151271/ikhtilafi-note-is-govt-going-in-right-direction-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3597,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:34.979Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:34.979Z\",\n            \"updated\": \"2019-07-07T06:39:34.979Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Chairman NAB Issue) - 25th May 2019\",\n            \"slug\": \"ikhtilafi-note-chairman-nab-issue-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:34.979Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/qLBuhHgyZKw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151225/ikhtilafi-note-chairman-nab-issue-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3598,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.021Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.021Z\",\n            \"updated\": \"2019-07-07T06:39:35.021Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Chairman NAB Video Scandal) - 24th May 2019\",\n            \"slug\": \"ikhtilafi-note-chairman-nab-video-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.021Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"https://www.youtube.com/watch/K1OYoOpl5go\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/151163/ikhtilafi-note-chairman-nab-video-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3599,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.062Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.062Z\",\n            \"updated\": \"2019-07-07T06:39:35.062Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (PMLN, PPP United Against Govt) - 19th May 2019\",\n            \"slug\": \"ikhtilafi-note-pmln-ppp-united-against-govt-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.062Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"https://www.youtube.com/watch/4qa-8NAyqXg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150892/ikhtilafi-note-pmln-ppp-united-against-govt-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3600,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.089Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.089Z\",\n            \"updated\": \"2019-07-07T06:39:35.089Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Opposition Decides To Give Tough Time To Govt) - 18th May 2019\",\n            \"slug\": \"ikhtilafi-note-opposition-decides-to-give-tough-time-to-govt-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.089Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"https://www.youtube.com/watch/1gaCrJHpd-Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150845/ikhtilafi-note-opposition-decides-to-give-tough-time-to-govt-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3601,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.118Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.118Z\",\n            \"updated\": \"2019-07-07T06:39:35.118Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (IMF Conditions, Dollar Rate Uncontrolled) - 17th May 2019\",\n            \"slug\": \"ikhtilafi-note-imf-conditions-dollar-rate-uncontrolled-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.118Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"https://www.youtube.com/watch/KtAdfEAq0yA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150783/ikhtilafi-note-imf-conditions-dollar-rate-uncontrolled-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3602,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.175Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.174Z\",\n            \"updated\": \"2019-07-07T06:39:35.175Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Nation Will Have To Face Tough Time - PM) - 11th May 2019\",\n            \"slug\": \"ikhtilafi-note-nation-will-have-to-face-tough-time-pm-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.175Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"https://www.youtube.com/watch/j7tTW37SPpo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150409/ikhtilafi-note-nation-will-have-to-face-tough-time-pm-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3603,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.204Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.204Z\",\n            \"updated\": \"2019-07-07T06:39:35.204Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Tax, Inflation, Economy, IMF) - 10th May 2019\",\n            \"slug\": \"ikhtilafi-note-tax-inflation-economy-imf-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.204Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"https://www.youtube.com/watch/VR2c6BVPLps\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/150353/ikhtilafi-note-tax-inflation-economy-imf-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3604,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.232Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.232Z\",\n            \"updated\": \"2019-07-07T06:39:35.232Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note (Kuch Tu Hai Jis Ki Parda Dari Hai) - 4th May 2019\",\n            \"slug\": \"ikhtilafi-note-kuch-tu-hai-jis-ki-parda-dari-hai-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.232Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"https://www.youtube.com/watch/mAg6i-Sd7uM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149965/ikhtilafi-note-kuch-tu-hai-jis-ki-parda-dari-hai-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3605,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.331Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.331Z\",\n            \"updated\": \"2019-07-07T06:39:35.331Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note  (What People Say About PTI Govt) - 28th April 2019\",\n            \"slug\": \"ikhtilafi-note-what-people-say-about-pti-govt-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.331Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"https://www.youtube.com/watch/qzwU2v2w3MM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149569/ikhtilafi-note-what-people-say-about-pti-govt-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3606,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.468Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.467Z\",\n            \"updated\": \"2019-07-07T06:39:35.468Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (What Public Say About PTI Govt) - 27th April 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-what-public-say-about-pti-govt-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.468Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149514/ikhtilafi-note-with-habib-akram-what-public-say-about-pti-govt-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3607,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.592Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.591Z\",\n            \"updated\": \"2019-07-07T06:39:35.592Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtilafi Note With Habib Akram (Public Views About PTI Govt) - 21st April 2019\",\n            \"slug\": \"ikhtilafi-note-with-habib-akram-public-views-about-pti-govt-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:35.592Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/149168/ikhtilafi-note-with-habib-akram-public-views-about-pti-govt-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3608,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.653Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.653Z\",\n            \"updated\": \"2019-07-07T06:39:35.653Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note With Babar Awan (Freedom Movements in India) \\u2013 22nd October 2016\",\n            \"slug\": \"ikhtalafi-note-with-babar-awan-freedom-movements-in-india-22nd-october-2016\",\n            \"publish_date\": \"2019-07-07T06:39:35.653Z\",\n            \"target_date\": \"2016-10-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x4ylpip\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/90123/ikhtalafi-note-with-babar-awan-freedom-movements-in-india-22nd-october-2016\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3609,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.720Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.720Z\",\n            \"updated\": \"2019-07-07T06:39:35.720Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Election Commission Ka Insaf) \\u2013 10th October 2015\",\n            \"slug\": \"ikhtalafi-note-election-commission-ka-insaf-10th-october-2015\",\n            \"publish_date\": \"2019-07-07T06:39:35.720Z\",\n            \"target_date\": \"2015-10-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x397i08?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/58515/ikhtalafi-note-election-commission-ka-insaf-10th-october-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3610,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.793Z\",\n            \"updated\": \"2019-07-07T06:39:35.800Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Allama Iqbal Ke Baite Wafat Pa Gaye) \\u2013 3rd October 2015\",\n            \"slug\": \"ikhtalafi-note-allama-iqbal-ke-baite-wafat-pa-gaye-3rd-october-2015\",\n            \"publish_date\": \"2019-07-07T06:39:35.800Z\",\n            \"target_date\": \"2015-10-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x38hywm?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/57940/ikhtalafi-note-allama-iqbal-ke-baite-wafat-pa-gaye-3rd-october-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3611,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:35.899Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:35.898Z\",\n            \"updated\": \"2019-07-07T06:39:35.899Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Supreme Court Issued Order) \\u2013 2nd October 2015\",\n            \"slug\": \"ikhtalafi-note-supreme-court-issued-order-2nd-october-2015\",\n            \"publish_date\": \"2019-07-07T06:39:35.899Z\",\n            \"target_date\": \"2015-10-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x38ey2e?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/57856/ikhtalafi-note-supreme-court-issued-order-2nd-october-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3612,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.015Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.014Z\",\n            \"updated\": \"2019-07-07T06:39:36.015Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Tragic Incident in Mina) \\u2013 27th September 2015\",\n            \"slug\": \"ikhtalafi-note-tragic-incident-in-mina-27th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.015Z\",\n            \"target_date\": \"2015-09-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x37wi2b?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/57433/ikhtalafi-note-tragic-incident-in-mina-27th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3613,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.085Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.085Z\",\n            \"updated\": \"2019-07-07T06:39:36.085Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Kya PPP Ne PMLN Se Mafahmat Khatam Kar Di?) \\u2013 20th September 2015\",\n            \"slug\": \"ikhtalafi-note-kya-ppp-ne-pmln-se-mafahmat-khatam-kar-di-20th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.085Z\",\n            \"target_date\": \"2015-09-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x37d94m?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/56875/ikhtalafi-note-kya-ppp-ne-pmln-se-mafahmat-khatam-kar-di-20th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3614,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.162Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.162Z\",\n            \"updated\": \"2019-07-07T06:39:36.162Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Peshawar Attack, Who is Involved?) \\u2013 19th September 2015\",\n            \"slug\": \"ikhtalafi-note-peshawar-attack-who-is-involved-19th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.162Z\",\n            \"target_date\": \"2015-09-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x37axwu?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/56786/ikhtalafi-note-peshawar-attack-who-is-involved-19th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3615,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.252Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.252Z\",\n            \"updated\": \"2019-07-07T06:39:36.252Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Pak Army Soldiers Saved Pakistan) \\u2013 18th September 2015\",\n            \"slug\": \"ikhtalafi-note-pak-army-soldiers-saved-pakistan-18th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.252Z\",\n            \"target_date\": \"2015-09-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x37816s?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/56693/ikhtalafi-note-pak-army-soldiers-saved-pakistan-18th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3616,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.299Z\",\n            \"updated\": \"2019-07-07T06:39:36.300Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Kala Bagh Dam Compulsory for Pakistan) \\u2013 13th September 2015\",\n            \"slug\": \"ikhtalafi-note-kala-bagh-dam-compulsory-for-pakistan-13th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.300Z\",\n            \"target_date\": \"2015-09-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x36qp85?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/56283/ikhtalafi-note-kala-bagh-dam-compulsory-for-pakistan-13th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3617,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.329Z\",\n            \"updated\": \"2019-07-07T06:39:36.329Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (No Country Can Survive Without Dams) \\u2013 12th September 2015\",\n            \"slug\": \"ikhtalafi-note-no-country-can-survive-without-dams-12th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.329Z\",\n            \"target_date\": \"2015-09-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x36kwm0?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/56207/ikhtalafi-note-no-country-can-survive-without-dams-12th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3618,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.363Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.363Z\",\n            \"updated\": \"2019-07-07T06:39:36.363Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Quaid-e-Azam Muhammad Ali Jinnah) \\u2013 11th September 2015\",\n            \"slug\": \"ikhtalafi-note-quaid-e-azam-muhammad-ali-jinnah-11th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.363Z\",\n            \"target_date\": \"2015-09-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x36c9ft?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/56117/ikhtalafi-note-quaid-e-azam-muhammad-ali-jinnah-11th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3619,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.393Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.393Z\",\n            \"updated\": \"2019-07-07T06:39:36.393Z\",\n            \"extra_data\": {\n                \"host\": \"Habib Akram, Saad Rasul, Ume Rabab\",\n                \"job_id\": 167,\n                \"feed_id\": 40,\n                \"feed_name\": \"unewstv - Ikhtilafi Note\",\n                \"show_name\": \"Ikhtilafi Note\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Ikhtalafi Note (Imran Khan Political Campaign In Sindh) \\u2013 4th September 2015\",\n            \"slug\": \"ikhtalafi-note-imran-khan-political-campaign-in-sindh-4th-september-2015\",\n            \"publish_date\": \"2019-07-07T06:39:36.393Z\",\n            \"target_date\": \"2015-09-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x34oaik?autoPlay=0&syndication=126520\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Ikhtilafi+Note+on+Dunya+News\",\n            \"source_detail\": \"http://www.unewstv.com/55480/ikhtalafi-note-imran-khan-political-campaign-in-sindh-4th-september-2015\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 38,\n            \"tags\": \"[\\\"Habib Akram, Saad Rasul, Ume Rabab\\\", \\\"Ikhtilafi Note\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3620,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.563Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.555Z\",\n            \"updated\": \"2019-07-07T06:39:36.563Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Charges on Rana Sanaullah) \\u2013 4th July 2019\",\n            \"slug\": \"seedhi-baat-charges-on-rana-sanaullah-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.563Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/b8o2tdIRiVA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153521/seedhi-baat-charges-on-rana-sanaullah-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3621,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.593Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.593Z\",\n            \"updated\": \"2019-07-07T06:39:36.593Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Rana Sanaullah Ki Giraftari) \\u2013 3rd July 2019\",\n            \"slug\": \"seedhi-baat-rana-sanaullah-ki-giraftari-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.593Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/jABUK1h2PiI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153440/seedhi-baat-rana-sanaullah-ki-giraftari-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3622,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.625Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.625Z\",\n            \"updated\": \"2019-07-07T06:39:36.625Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Rana Sanaullah Ki Giraftari Per Tanqeed) \\u2013 2nd July 2019\",\n            \"slug\": \"seedhi-baat-rana-sanaullah-ki-giraftari-per-tanqeed-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.625Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/cISMaL7hoFQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153360/seedhi-baat-rana-sanaullah-ki-giraftari-per-tanqeed-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3623,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.662Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.662Z\",\n            \"updated\": \"2019-07-07T06:39:36.662Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat Beenish Saleem Kay Sath (Rana Sanaullah Arrested) - 1st July 2019\",\n            \"slug\": \"seedhi-baat-beenish-saleem-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.662Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/8GGRGfSKus8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153296/seedhi-baat-beenish-saleem-kay-sath-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3624,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.693Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.693Z\",\n            \"updated\": \"2019-07-07T06:39:36.693Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (APC, What Opposition Wants?) - 27th June 2019\",\n            \"slug\": \"seedhi-baat-apc-what-opposition-wants-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.693Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/g5VGzWuqbVI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/153025/seedhi-baat-apc-what-opposition-wants-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3625,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.735Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.735Z\",\n            \"updated\": \"2019-07-07T06:39:36.735Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Akhtar Mengal Agree to Support PTI) \\u2013 26th June 2019\",\n            \"slug\": \"seedhi-baat-akhtar-mengal-agree-to-support-pti-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.735Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/WQvrnK_TWXc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152976/seedhi-baat-akhtar-mengal-agree-to-support-pti-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3626,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.774Z\",\n            \"updated\": \"2019-07-07T06:39:36.774Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Opposition Ki APC, Aur Hakumat) \\u2013 25th June 2019\",\n            \"slug\": \"seedhi-baat-opposition-ki-apc-aur-hakumat-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.774Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/x_np4u9qm2k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152880/seedhi-baat-opposition-ki-apc-aur-hakumat-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3627,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.805Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.805Z\",\n            \"updated\": \"2019-07-07T06:39:36.805Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Maryam Nawaz Vs Shahbaz Sharif) \\u2013 24th June 2019\",\n            \"slug\": \"seedhi-baat-maryam-nawaz-vs-shahbaz-sharif-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.805Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/riwrldod3vw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152813/seedhi-baat-maryam-nawaz-vs-shahbaz-sharif-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3628,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.865Z\",\n            \"updated\": \"2019-07-07T06:39:36.865Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Asif Zardari's Speech in Assembly) \\u2013 20th June 2019\",\n            \"slug\": \"seedhi-baat-asif-zardaris-speech-in-assembly-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.865Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/fl3h7HfVzA0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152571/seedhi-baat-asif-zardari-s-speech-in-assembly-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3629,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.892Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.892Z\",\n            \"updated\": \"2019-07-07T06:39:36.892Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (PM Imran Khan Meets Governor Sindh) \\u2013 19th June 2019\",\n            \"slug\": \"seedhi-baat-pm-imran-khan-meets-governor-sindh-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.893Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/vLQT9WqUVB8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152504/seedhi-baat-pm-imran-khan-meets-governor-sindh-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3630,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.932Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.925Z\",\n            \"updated\": \"2019-07-07T06:39:36.932Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Kia Budget Pass Ho Paye Ga) \\u2013 18th June 2019\",\n            \"slug\": \"seedhi-baat-kia-budget-pass-ho-paye-ga-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.932Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/1qvWwX-Bt6E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152440/seedhi-baat-kia-budget-pass-ho-paye-ga-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3631,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.980Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:36.980Z\",\n            \"updated\": \"2019-07-07T06:39:36.980Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (PPP Ka Ehtijaaj OR Dharna) \\u2013 17th June 2019\",\n            \"slug\": \"seedhi-baat-ppp-ka-ehtijaaj-or-dharna-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:36.980Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/0jO7vH2ljDA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152394/seedhi-baat-ppp-ka-ehtijaaj-or-dharna-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3632,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.024Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.024Z\",\n            \"updated\": \"2019-07-07T06:39:37.024Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Imran Khan Ki Opposition Ko Dhamkiyan) \\u2013 13th June 2019\",\n            \"slug\": \"seedhi-baat-imran-khan-ki-opposition-ko-dhamkiyan-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.024Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/16Vs1AGTvE8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152180/seedhi-baat-imran-khan-ki-opposition-ko-dhamkiyan-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3633,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.066Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.065Z\",\n            \"updated\": \"2019-07-07T06:39:37.066Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Budget 2019, Awam Ko Kia Mila) \\u2013 11th June 2019\",\n            \"slug\": \"seedhi-baat-budget-2019-awam-ko-kia-mila-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.066Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/qmGm1BLYNXA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/152053/seedhi-baat-budget-2019-awam-ko-kia-mila-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3634,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.094Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.094Z\",\n            \"updated\": \"2019-07-07T06:39:37.094Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"seedhi-baat-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.094Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/pof8himNp6w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151767/seedhi-baat-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3635,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.135Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.134Z\",\n            \"updated\": \"2019-07-07T06:39:37.135Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Chairman NAB Interview Controversy) \\u2013 21st May 2019\",\n            \"slug\": \"seedhi-baat-chairman-nab-interview-controversy-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.135Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/b6cc3TrP2Fw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/151017/seedhi-baat-chairman-nab-interview-controversy-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3636,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.232Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.232Z\",\n            \"updated\": \"2019-07-07T06:39:37.232Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Imran Khan Ki 3 Mah Baad Assembly Amad) \\u2013 8th May 2019\",\n            \"slug\": \"seedhi-baat-imran-khan-ki-3-mah-baad-assembly-amad-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.232Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/puq0Y10Qx6Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150253/seedhi-baat-imran-khan-ki-3-mah-baad-assembly-amad-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3637,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.484Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.484Z\",\n            \"updated\": \"2019-07-07T06:39:37.485Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Ramzan Mein Petrol Mehnga) \\u2013 6th May 2019\",\n            \"slug\": \"seedhi-baat-ramzan-mein-petrol-mehnga-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.485Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/jI9bj4wbkv0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/150090/seedhi-baat-ramzan-mein-petrol-mehnga-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3638,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.622Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.622Z\",\n            \"updated\": \"2019-07-07T06:39:37.622Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (When Will Shahbaz Sharif Come Back?) \\u2013 2nd May 2019\",\n            \"slug\": \"seedhi-baat-when-will-shahbaz-sharif-come-back-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.622Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"https://www.youtube.com/watch/HOAnm52weo8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149850/seedhi-baat-when-will-shahbaz-sharif-come-back-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3639,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.836Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.836Z\",\n            \"updated\": \"2019-07-07T06:39:37.836Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Future of Shahbaz Sharif & Family) \\u2013 1st May 2019\",\n            \"slug\": \"seedhi-baat-future-of-shahbaz-sharif-family-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.836Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"https://www.youtube.com/watch/p6gjwEUG4NQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149771/seedhi-baat-future-of-shahbaz-sharif-family-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3640,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:37.948Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:37.948Z\",\n            \"updated\": \"2019-07-07T06:39:37.948Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Mehngai Mein Mazeed Izafa) \\u2013 30th April 2019\",\n            \"slug\": \"seedhi-baat-mehngai-mein-mazeed-izafa-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:37.948Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"https://www.youtube.com/watch/sJZth7xVW6k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149697/seedhi-baat-mehngai-mein-mazeed-izafa-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3641,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.007Z\",\n            \"updated\": \"2019-07-07T06:39:38.007Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Sherry Rehman Exclusive Interview) \\u2013 29th April 2019\",\n            \"slug\": \"seedhi-baat-sherry-rehman-exclusive-interview-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.007Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"https://www.youtube.com/watch/G0gi6SyDs6k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149619/seedhi-baat-sherry-rehman-exclusive-interview-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3642,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.106Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.106Z\",\n            \"updated\": \"2019-07-07T06:39:38.106Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Imran Khan Ke Remarks Par Hungama) \\u2013 25th April 2019\",\n            \"slug\": \"seedhi-baat-imran-khan-ke-remarks-par-hungama-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.107Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"https://www.youtube.com/watch/numRfOabtoM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149394/seedhi-baat-imran-khan-ke-remarks-par-hungama-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3643,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.185Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.185Z\",\n            \"updated\": \"2019-07-07T06:39:38.185Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Imran Khan Ki Taqreer) \\u2013 24th April 2019\",\n            \"slug\": \"seedhi-baat-imran-khan-ki-taqreer-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.185Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"https://www.youtube.com/watch/0tHklUwctkc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149350/seedhi-baat-imran-khan-ki-taqreer-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3644,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.332Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.332Z\",\n            \"updated\": \"2019-07-07T06:39:38.332Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Azam Swati Ki Kabina Mein Wapsi) \\u2013 22nd April 2019\",\n            \"slug\": \"seedhi-baat-azam-swati-ki-kabina-mein-wapsi-22nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.332Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"https://www.youtube.com/watch/SWQF4tKHDBc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149223/seedhi-baat-azam-swati-ki-kabina-mein-wapsi-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3645,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.420Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.419Z\",\n            \"updated\": \"2019-07-07T06:39:38.420Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Discussion on Current Issues) \\u2013 18th April 2019\",\n            \"slug\": \"seedhi-baat-discussion-on-current-issues-18th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.420Z\",\n            \"target_date\": \"2019-04-18\",\n            \"text\": \"https://www.youtube.com/watch/I2aDM3zCukU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/149001/seedhi-baat-discussion-on-current-issues-18th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3646,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.497Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.497Z\",\n            \"updated\": \"2019-07-07T06:39:38.497Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Police Should Be Accountable) \\u2013 17th April 2019\",\n            \"slug\": \"seedhi-baat-police-should-be-accountable-17th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.497Z\",\n            \"target_date\": \"2019-04-17\",\n            \"text\": \"https://www.youtube.com/watch/rs1pWe5MskM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148942/seedhi-baat-police-should-be-accountable-17th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3647,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.578Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.577Z\",\n            \"updated\": \"2019-07-07T06:39:38.578Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (IG Changed in Punjab) \\u2013 16th April 2019\",\n            \"slug\": \"seedhi-baat-ig-changed-in-punjab-16th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.593Z\",\n            \"target_date\": \"2019-04-16\",\n            \"text\": \"https://www.youtube.com/watch/dxrFm7Q5Zig\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148881/seedhi-baat-ig-changed-in-punjab-16th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3648,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.685Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.685Z\",\n            \"updated\": \"2019-07-07T06:39:38.685Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Shahbaz Sharif Family in Trouble) \\u2013 15th April 2019\",\n            \"slug\": \"seedhi-baat-shahbaz-sharif-family-in-trouble-15th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.685Z\",\n            \"target_date\": \"2019-04-15\",\n            \"text\": \"https://www.youtube.com/watch/pUX5vRahdhI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148821/seedhi-baat-shahbaz-sharif-family-in-trouble-15th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3649,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.741Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.725Z\",\n            \"updated\": \"2019-07-07T06:39:38.741Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Discussion on Current Issues) \\u2013 11th April 2019\",\n            \"slug\": \"seedhi-baat-discussion-on-current-issues-11th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.741Z\",\n            \"target_date\": \"2019-04-11\",\n            \"text\": \"https://www.youtube.com/watch/zXErr9RQki0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148627/seedhi-baat-discussion-on-current-issues-11th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3650,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.783Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.783Z\",\n            \"updated\": \"2019-07-07T06:39:38.783Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Fazal ur Rehman Meets Nawaz Sharif) \\u2013 9th April 2019\",\n            \"slug\": \"seedhi-baat-fazal-ur-rehman-meets-nawaz-sharif-9th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.783Z\",\n            \"target_date\": \"2019-04-09\",\n            \"text\": \"https://www.youtube.com/watch/iJ7kXNmBhMw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148493/seedhi-baat-fazal-ur-rehman-meets-nawaz-sharif-9th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3651,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.812Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.812Z\",\n            \"updated\": \"2019-07-07T06:39:38.812Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Politics of Non Political Persons) \\u2013 8th April 2019\",\n            \"slug\": \"seedhi-baat-politics-of-non-political-persons-8th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.812Z\",\n            \"target_date\": \"2019-04-08\",\n            \"text\": \"https://www.youtube.com/watch/6PBgnazHGIU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148442/seedhi-baat-politics-of-non-political-persons-8th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3652,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.862Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.862Z\",\n            \"updated\": \"2019-07-07T06:39:38.862Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Inflation on Its Peak) \\u2013 3rd April 2019\",\n            \"slug\": \"seedhi-baat-inflation-on-its-peak-3rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.862Z\",\n            \"target_date\": \"2019-04-03\",\n            \"text\": \"https://www.youtube.com/watch/0A7xZPwRaas\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148181/seedhi-baat-inflation-on-its-peak-3rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3653,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.906Z\",\n            \"updated\": \"2019-07-07T06:39:38.907Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Mehngai, Petrol Ki Qeematon Mein Izafa) \\u2013 2nd April 2019\",\n            \"slug\": \"seedhi-baat-mehngai-petrol-ki-qeematon-mein-izafa-2nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.907Z\",\n            \"target_date\": \"2019-04-02\",\n            \"text\": \"https://www.youtube.com/watch/yj3sWVPWrXI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148133/seedhi-baat-mehngai-petrol-ki-qeematon-mein-izafa-2nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3654,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:38.974Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:38.974Z\",\n            \"updated\": \"2019-07-07T06:39:38.974Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (PTI Govt Dropped Petrol Bomb) \\u2013 1st April 2019\",\n            \"slug\": \"seedhi-baat-pti-govt-dropped-petrol-bomb-1st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:38.974Z\",\n            \"target_date\": \"2019-04-01\",\n            \"text\": \"https://www.youtube.com/watch/iKYMj3rqLjc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/148091/seedhi-baat-pti-govt-dropped-petrol-bomb-1st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3655,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.060Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.060Z\",\n            \"updated\": \"2019-07-07T06:39:39.060Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Kia Adalatein Azad Hain?) \\u2013 28th March 2019\",\n            \"slug\": \"seedhi-baat-kia-adalatein-azad-hain-28th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.060Z\",\n            \"target_date\": \"2019-03-28\",\n            \"text\": \"https://www.youtube.com/watch/q672daEkHGM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/147865/seedhi-baat-kia-adalatein-azad-hain-28th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3656,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.093Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.093Z\",\n            \"updated\": \"2019-07-07T06:39:39.093Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Another Lollipop of Govt For People) \\u2013 27th March 2019\",\n            \"slug\": \"seedhi-baat-another-lollipop-of-govt-for-people-27th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.093Z\",\n            \"target_date\": \"2019-03-27\",\n            \"text\": \"https://www.youtube.com/watch/ibDKu2iHz80\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/147820/seedhi-baat-another-lollipop-of-govt-for-people-27th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3657,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.123Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.123Z\",\n            \"updated\": \"2019-07-07T06:39:39.124Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Nawaz Sharif Ko Rihai Mil Gai) \\u2013 26th March 2019\",\n            \"slug\": \"seedhi-baat-nawaz-sharif-ko-rihai-mil-gai-26th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.124Z\",\n            \"target_date\": \"2019-03-26\",\n            \"text\": \"https://www.youtube.com/watch/Fv9wBaIErKs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/147724/seedhi-baat-nawaz-sharif-ko-rihai-mil-gai-26th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3658,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.169Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.169Z\",\n            \"updated\": \"2019-07-07T06:39:39.169Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (Will Nawaz Sharif Got Bail or Not?) \\u2013 25th March 2019\",\n            \"slug\": \"seedhi-baat-will-nawaz-sharif-got-bail-or-not-25th-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.169Z\",\n            \"target_date\": \"2019-03-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x74s6f7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/147660/seedhi-baat-will-nawaz-sharif-got-bail-or-not-25th-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3659,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.196Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.196Z\",\n            \"updated\": \"2019-07-07T06:39:39.197Z\",\n            \"extra_data\": {\n                \"host\": \"Beenish Saleem\",\n                \"job_id\": 168,\n                \"feed_id\": 41,\n                \"feed_name\": \"unewstv - Seedhi Baat\",\n                \"show_name\": \"Seedhi Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Seedhi Baat (PM Awarding NAB) \\u2013 21st March 2019\",\n            \"slug\": \"seedhi-baat-pm-awarding-nab-21st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.197Z\",\n            \"target_date\": \"2019-03-21\",\n            \"text\": \"https://www.youtube.com/watch/AUwBJkOWDjM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Seedhi+Baat+on+Capital+Tv\",\n            \"source_detail\": \"http://www.unewstv.com/147456/seedhi-baat-pm-awarding-nab-21st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 39,\n            \"tags\": \"[\\\"Beenish Saleem\\\", \\\"Seedhi Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3660,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.439Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.439Z\",\n            \"updated\": \"2019-07-07T06:39:39.439Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Ahtasab, IMF, Economy, Other Issues) - 4th July 2019\",\n            \"slug\": \"bebaak-ahtasab-imf-economy-other-issues-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.439Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/wmkj9znlJCU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153546/bebaak-ahtasab-imf-economy-other-issues-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3661,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.481Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.481Z\",\n            \"updated\": \"2019-07-07T06:39:39.481Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Rana Sanaullah Ke Baad Agli Baari Kis Ki) \\u2013 3rd July 2019\",\n            \"slug\": \"bebaak-rana-sanaullah-ke-baad-agli-baari-kis-ki-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.481Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/T7qUzfDuoMY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153462/bebaak-rana-sanaullah-ke-baad-agli-baari-kis-ki-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3662,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.511Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.510Z\",\n            \"updated\": \"2019-07-07T06:39:39.511Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Production Orders, Arrests, Economy) - 2nd July 2019\",\n            \"slug\": \"bebaak-production-orders-arrests-economy-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.511Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/ZqpPFiOOgCg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153396/bebaak-production-orders-arrests-economy-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3663,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.559Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.559Z\",\n            \"updated\": \"2019-07-07T06:39:39.559Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Rana Sanaullah Arrested, Shahbaz Maryam Meeting) - 1st July 2019\",\n            \"slug\": \"bebaak-rana-sanaullah-arrested-shahbaz-maryam-meeting-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.559Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/mSa6BuXRnrA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153326/bebaak-rana-sanaullah-arrested-shahbaz-maryam-meeting-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3664,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.590Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.589Z\",\n            \"updated\": \"2019-07-07T06:39:39.590Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Ishaq Dar 50 Crore Dene Per Razamand?) - 27th June 2019\",\n            \"slug\": \"bebaak-ishaq-dar-50-crore-dene-per-razamand-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.590Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/3RU-QsugdhM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/153056/bebaak-ishaq-dar-50-crore-dene-per-razamand-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3665,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.632Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.632Z\",\n            \"updated\": \"2019-07-07T06:39:39.632Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Dollar Rate Mein Phir Izafa) \\u2013 26th June 2019\",\n            \"slug\": \"bebaak-dollar-rate-mein-phir-izafa-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.632Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/aKLL0IUHpoE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152993/bebaak-dollar-rate-mein-phir-izafa-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3666,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.734Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.733Z\",\n            \"updated\": \"2019-07-07T06:39:39.734Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Can Opposition Resign From Assemblies) \\u2013 25th June 2019\",\n            \"slug\": \"bebaak-can-opposition-resign-from-assemblies-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.734Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/5yUXElXk8UQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152923/bebaak-can-opposition-resign-from-assemblies-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3667,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.841Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.841Z\",\n            \"updated\": \"2019-07-07T06:39:39.841Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Ka Ittehad Kab Tak Rahe Ga) - 24th June 2019\",\n            \"slug\": \"bebaak-opposition-ka-ittehad-kab-tak-rahe-ga-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.841Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/aa0ePVpYm3I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152841/bebaak-opposition-ka-ittehad-kab-tak-rahe-ga-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3668,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.923Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:39.923Z\",\n            \"updated\": \"2019-07-07T06:39:39.923Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Parties United Against Govt) \\u2013 20th June 2019\",\n            \"slug\": \"bebaak-opposition-parties-united-against-govt-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:39.923Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/qTKUeYHHD0w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152591/bebaak-opposition-parties-united-against-govt-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3669,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.019Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.019Z\",\n            \"updated\": \"2019-07-07T06:39:40.019Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Imran Khan Ka Usman Buzdar Ko Ghar Bhaijne Ka Faisla) \\u2013 19th June 2019\",\n            \"slug\": \"bebaak-imran-khan-ka-usman-buzdar-ko-ghar-bhaijne-ka-faisla-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.019Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/iTcDDGPr2dg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152536/bebaak-imran-khan-ka-usman-buzdar-ko-ghar-bhaijne-ka-faisla-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3670,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.089Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.089Z\",\n            \"updated\": \"2019-07-07T06:39:40.090Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Bilawal, Maryam Aur Fazal ur Rehman) \\u2013 18th June 2019\",\n            \"slug\": \"bebaak-bilawal-maryam-aur-fazal-ur-rehman-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.090Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/2SegHeJAP0s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152464/bebaak-bilawal-maryam-aur-fazal-ur-rehman-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3671,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.160Z\",\n            \"updated\": \"2019-07-07T06:39:40.161Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Want to Topple Govt?) \\u2013 17th June 2019\",\n            \"slug\": \"bebaak-opposition-want-to-topple-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.161Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/ZE2NVdHSoqU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152405/bebaak-opposition-want-to-topple-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3672,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.225Z\",\n            \"updated\": \"2019-07-07T06:39:40.225Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Agli Giraftari Kis Ki Hogi?) - 13th June 2019\",\n            \"slug\": \"bebaak-agli-giraftari-kis-ki-hogi-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.225Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/4kwgTeqIZbU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152189/bebaak-agli-giraftari-kis-ki-hogi-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3673,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.276Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.275Z\",\n            \"updated\": \"2019-07-07T06:39:40.276Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Qarz Hukamran Kha Gaye, Ada Awam Kare Gi?) \\u2013 12th June 2019\",\n            \"slug\": \"bebaak-qarz-hukamran-kha-gaye-ada-awam-kare-gi-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.276Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/HNE9kT-eDpA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152133/bebaak-qarz-hukamran-kha-gaye-ada-awam-kare-gi-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3674,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.336Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.336Z\",\n            \"updated\": \"2019-07-07T06:39:40.336Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (High Profile Giraftariyon Mein Agla Number Kis Ka) - 11th June 2019\",\n            \"slug\": \"bebaak-high-profile-giraftariyon-mein-agla-number-kis-ka-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.336Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/EGI26I3bPdE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152088/bebaak-high-profile-giraftariyon-mein-agla-number-kis-ka-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3675,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.405Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.405Z\",\n            \"updated\": \"2019-07-07T06:39:40.405Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Budget Se Pehle Asif Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"bebaak-budget-se-pehle-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.405Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/vCDHDZio3DU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/152013/bebaak-budget-se-pehle-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3676,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.541Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.541Z\",\n            \"updated\": \"2019-07-07T06:39:40.542Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Shahbaz Sharif Kab Wapis Ayein Ge) \\u2013 4th June 2019\",\n            \"slug\": \"bebaak-shahbaz-sharif-kab-wapis-ayein-ge-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.542Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/RA6u1V8JH14\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151727/bebaak-shahbaz-sharif-kab-wapis-ayein-ge-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3677,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.623Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.622Z\",\n            \"updated\": \"2019-07-07T06:39:40.623Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Zartaj Gul's Ministry in Danger) \\u2013 3rd June 2019\",\n            \"slug\": \"bebaak-zartaj-guls-ministry-in-danger-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.639Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/wkP3wHO8Jw4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151701/bebaak-zartaj-gul-s-ministry-in-danger-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3678,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.716Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.716Z\",\n            \"updated\": \"2019-07-07T06:39:40.716Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Ka Eid Ke Baad Tehreek Ka Elan) \\u2013 30th May 2019\",\n            \"slug\": \"bebaak-opposition-ka-eid-ke-baad-tehreek-ka-elan-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.716Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/Vv3aXq0qTlU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151516/bebaak-opposition-ka-eid-ke-baad-tehreek-ka-elan-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3679,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.793Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.792Z\",\n            \"updated\": \"2019-07-07T06:39:40.793Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Zardari Ki Giraftari Pakki?) \\u2013 29th May 2019\",\n            \"slug\": \"bebaak-zardari-ki-giraftari-pakki-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.793Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/65_HLxYBW-8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151438/bebaak-zardari-ki-giraftari-pakki-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3680,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.851Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.850Z\",\n            \"updated\": \"2019-07-07T06:39:40.851Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Pressure on Chairman NAB) \\u2013 27th May 2019\",\n            \"slug\": \"bebaak-opposition-pressure-on-chairman-nab-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.851Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/Qbdt4uxze7s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151365/bebaak-opposition-pressure-on-chairman-nab-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3681,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.881Z\",\n            \"updated\": \"2019-07-07T06:39:40.882Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Modi Sarkar, Phir Kamyab, Pakistani Politics) - 23rd May 2019\",\n            \"slug\": \"bebaak-modi-sarkar-phir-kamyab-pakistani-politics-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.882Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/5jk4EiIyGDk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151130/bebaak-modi-sarkar-phir-kamyab-pakistani-politics-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3682,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.912Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.912Z\",\n            \"updated\": \"2019-07-07T06:39:40.912Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Siasi Tehreek Ya Abbu Bachao Muhim) \\u2013 22nd May 2019\",\n            \"slug\": \"bebaak-siasi-tehreek-ya-abbu-bachao-muhim-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.912Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/Oux-hGzqGJs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151065/bebaak-siasi-tehreek-ya-abbu-bachao-muhim-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3683,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.961Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.961Z\",\n            \"updated\": \"2019-07-07T06:39:40.961Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Pakistan's Economic Condition) \\u2013 21st May 2019\",\n            \"slug\": \"bebaak-pakistans-economic-condition-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.961Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/TE9fc_Pq7oA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/151015/bebaak-pakistan-s-economic-condition-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3684,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:40.992Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:40.991Z\",\n            \"updated\": \"2019-07-07T06:39:40.992Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Opposition Ahtajaj Ke Liye Tayyar) \\u2013 20th May 2019\",\n            \"slug\": \"bebaak-opposition-ahtajaj-ke-liye-tayyar-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:40.992Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/oNMC0cS3Y-M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150950/bebaak-opposition-ahtajaj-ke-liye-tayyar-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3685,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.027Z\",\n            \"updated\": \"2019-07-07T06:39:41.028Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Hakumat Ko Darpaish Challenges) \\u2013 16th May 2019\",\n            \"slug\": \"bebaak-hakumat-ko-darpaish-challenges-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.028Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/Lggi3JZ4iXk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150758/bebaak-hakumat-ko-darpaish-challenges-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3686,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.069Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.068Z\",\n            \"updated\": \"2019-07-07T06:39:41.069Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Amnesty, Economy, Punjab Govt Land Grabbing) \\u2013 15th May 2019\",\n            \"slug\": \"bebaak-amnesty-economy-punjab-govt-land-grabbing-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.069Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/y4L5iLKASfI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150697/bebaak-amnesty-economy-punjab-govt-land-grabbing-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3687,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.098Z\",\n            \"updated\": \"2019-07-07T06:39:41.099Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Tax Amnesty, IMF, Accountability) \\u2013 14th May 2019\",\n            \"slug\": \"bebaak-tax-amnesty-imf-accountability-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.099Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/KjDhfNaQm9I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150614/bebaak-tax-amnesty-imf-accountability-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3688,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.126Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.126Z\",\n            \"updated\": \"2019-07-07T06:39:41.126Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Shahbaz Sharif Still in London) \\u2013 13th May 2019\",\n            \"slug\": \"bebaak-shahbaz-sharif-still-in-london-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.126Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/ooYwWJa4p-A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150564/bebaak-shahbaz-sharif-still-in-london-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3689,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.171Z\",\n            \"updated\": \"2019-07-07T06:39:41.171Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Mehngai Mein Izafa, IMF, Siasi Hulchul) \\u2013 8th May 2019\",\n            \"slug\": \"bebaak-mehngai-mein-izafa-imf-siasi-hulchul-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.171Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/dtvmQ6yhaSA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150257/bebaak-mehngai-mein-izafa-imf-siasi-hulchul-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3690,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.228Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.228Z\",\n            \"updated\": \"2019-07-07T06:39:41.228Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Nawaz Sharif Ki Jail Wapsi) \\u2013 6th May 2019\",\n            \"slug\": \"bebaak-nawaz-sharif-ki-jail-wapsi-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.228Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/sxHn56xP0L8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/150127/bebaak-nawaz-sharif-ki-jail-wapsi-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3691,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.276Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.275Z\",\n            \"updated\": \"2019-07-07T06:39:41.276Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Deal Ho Nahi Rahi, Deal Ho Chuki Hai) - 2nd May 2019\",\n            \"slug\": \"bebaak-deal-ho-nahi-rahi-deal-ho-chuki-hai-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.276Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7789br\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149866/bebaak-deal-ho-nahi-rahi-deal-ho-chuki-hai-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3692,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.309Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.303Z\",\n            \"updated\": \"2019-07-07T06:39:41.309Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Discussion on Multiple Issues) \\u2013 1st May 2019\",\n            \"slug\": \"bebaak-discussion-on-multiple-issues-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.310Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7750wf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149795/bebaak-discussion-on-multiple-issues-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3693,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.370Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.370Z\",\n            \"updated\": \"2019-07-07T06:39:41.370Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (PTI Govt, IMF Deal, Other Issues) \\u2013 30th April 2019\",\n            \"slug\": \"bebaak-pti-govt-imf-deal-other-issues-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.370Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7720e5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149714/bebaak-pti-govt-imf-deal-other-issues-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3694,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.401Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.401Z\",\n            \"updated\": \"2019-07-07T06:39:41.402Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Anti NAB Movement of Opposition) \\u2013 29th April 2019\",\n            \"slug\": \"bebaak-anti-nab-movement-of-opposition-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.402Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ybwj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149648/bebaak-anti-nab-movement-of-opposition-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3695,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.440Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.439Z\",\n            \"updated\": \"2019-07-07T06:39:41.440Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Nawaz Sharif Trying To Go Abroad) \\u2013 25th April 2019\",\n            \"slug\": \"bebaak-nawaz-sharif-trying-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.440Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76lnmx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149415/bebaak-nawaz-sharif-trying-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3696,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.479Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.478Z\",\n            \"updated\": \"2019-07-07T06:39:41.479Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Ch. Sarwar Ka Resign Na Karne Ka Paigham) \\u2013 24th April 2019\",\n            \"slug\": \"bebaak-ch-sarwar-ka-resign-na-karne-ka-paigham-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.479Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76idcb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149348/bebaak-ch-sarwar-ka-resign-na-karne-ka-paigham-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3697,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.509Z\",\n            \"updated\": \"2019-07-07T06:39:41.509Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Imran Khan Ka Iran Mein Bayan) \\u2013 23rd April 2019\",\n            \"slug\": \"bebaak-imran-khan-ka-iran-mein-bayan-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.509Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fmf6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149296/bebaak-imran-khan-ka-iran-mein-bayan-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3698,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.558Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.558Z\",\n            \"updated\": \"2019-07-07T06:39:41.558Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (What Is The Agenda of Ch. Nisar) \\u2013 22nd April 2019\",\n            \"slug\": \"bebaak-what-is-the-agenda-of-ch-nisar-22nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.558Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76c8nl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149239/bebaak-what-is-the-agenda-of-ch-nisar-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3699,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.600Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.600Z\",\n            \"updated\": \"2019-07-07T06:39:41.600Z\",\n            \"extra_data\": {\n                \"host\": \"Ch. Ghulam Hussain, Saeed Qazi\",\n                \"job_id\": 145,\n                \"feed_id\": 17,\n                \"feed_name\": \"unewstv - Bebaak\",\n                \"show_name\": \"Bebaak\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Bebaak (Asad Umar Ke Elawa Aur Kaun Kaun Tabdeel Hoga) \\u2013 18th April 2019\",\n            \"slug\": \"bebaak-asad-umar-ke-elawa-aur-kaun-kaun-tabdeel-hoga-18th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.600Z\",\n            \"target_date\": \"2019-04-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x762llt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Bebaak+on+GNN+News\",\n            \"source_detail\": \"http://www.unewstv.com/149019/bebaak-asad-umar-ke-elawa-aur-kaun-kaun-tabdeel-hoga-18th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 15,\n            \"tags\": \"[\\\"Ch. Ghulam Hussain, Saeed Qazi\\\", \\\"Bebaak\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3700,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.774Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.774Z\",\n            \"updated\": \"2019-07-07T06:39:41.774Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Maryam Nawaz Ki Press Conference) \\u2013 6th July 2019\",\n            \"slug\": \"sawal-yeh-hai-maryam-nawaz-ki-press-conference-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.774Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cnwyj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/153670/sawal-yeh-hai-maryam-nawaz-ki-press-conference-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3701,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.851Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.851Z\",\n            \"updated\": \"2019-07-07T06:39:41.851Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Opposition Ki Rahbar Committee Ka Ijlas) - 5th July 2019\",\n            \"slug\": \"sawal-yeh-hai-opposition-ki-rahbar-committee-ka-ijlas-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.851Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7clh7k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/153608/sawal-yeh-hai-opposition-ki-rahbar-committee-ka-ijlas-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3702,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:41.943Z\",\n            \"updated\": \"2019-07-07T06:39:41.944Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Jahangir Tareen Exclusive Interview) \\u2013 30th June 2019\",\n            \"slug\": \"sawal-yeh-hai-jahangir-tareen-exclusive-interview-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:41.944Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/BefgCyDocEQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/153250/sawal-yeh-hai-jahangir-tareen-exclusive-interview-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3703,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:42.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:42.010Z\",\n            \"updated\": \"2019-07-07T06:39:42.010Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Pakistan Won Match Against Afghanistan) \\u2013 29th June 2019\",\n            \"slug\": \"sawal-yeh-hai-pakistan-won-match-against-afghanistan-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:42.010Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5nus\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/153183/sawal-yeh-hai-pakistan-won-match-against-afghanistan-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3704,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:42.070Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:42.070Z\",\n            \"updated\": \"2019-07-07T06:39:42.070Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal yeh hai (Budget Pass Ho Gaya) \\u2013 28th June 2019\",\n            \"slug\": \"sawal-yeh-hai-budget-pass-ho-gaya-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:42.070Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c35l1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/153123/sawal-yeh-hai-budget-pass-ho-gaya-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3705,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:42.168Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:42.167Z\",\n            \"updated\": \"2019-07-07T06:39:42.168Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Pakistan Team Ki Performance) \\u2013 23rd June 2019\",\n            \"slug\": \"sawal-yeh-hai-pakistan-team-ki-performance-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:42.168Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bquoc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/152786/sawal-yeh-hai-pakistan-team-ki-performance-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3706,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:42.444Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:42.444Z\",\n            \"updated\": \"2019-07-07T06:39:42.444Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Maryam Rejects Shahbaz Sharif's Narrative) \\u2013 22nd June 2019\",\n            \"slug\": \"sawal-yeh-hai-maryam-rejects-shahbaz-sharifs-narrative-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:42.444Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bp37q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/152719/sawal-yeh-hai-maryam-rejects-shahbaz-sharif-s-narrative-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3707,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:42.619Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:42.619Z\",\n            \"updated\": \"2019-07-07T06:39:42.620Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (PM Imran Khan's Appeal to Nation) - 21st June 2019\",\n            \"slug\": \"sawal-yeh-hai-pm-imran-khans-appeal-to-nation-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:42.620Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn9ds\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/152661/sawal-yeh-hai-pm-imran-khan-s-appeal-to-nation-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3708,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:42.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:42.876Z\",\n            \"updated\": \"2019-07-07T06:39:42.876Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Pakistan Phir Haar Gaya) \\u2013 16th June 2019\",\n            \"slug\": \"sawal-yeh-hai-pakistan-phir-haar-gaya-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:42.877Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bdi2i\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/152355/sawal-yeh-hai-pakistan-phir-haar-gaya-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3709,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:42.956Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:42.956Z\",\n            \"updated\": \"2019-07-07T06:39:42.956Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Today's Pakistan Vs Musharraf's Pakistan?) - 14th June 2019\",\n            \"slug\": \"sawal-yeh-hai-todays-pakistan-vs-musharrafs-pakistan-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:42.956Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6raq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/152255/sawal-yeh-hai-today-s-pakistan-vs-musharraf-s-pakistan-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3710,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.098Z\",\n            \"updated\": \"2019-07-07T06:39:43.099Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (PTI's Important Meeting in Bani Gala) \\u2013 9th June 2019\",\n            \"slug\": \"sawal-yeh-hai-ptis-important-meeting-in-bani-gala-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.099Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anxa4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151946/sawal-yeh-hai-pti-s-important-meeting-in-bani-gala-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3711,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.218Z\",\n            \"updated\": \"2019-07-07T06:39:43.219Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Discussion on Current Issues) \\u2013 7th June 2019\",\n            \"slug\": \"sawal-yeh-hai-discussion-on-current-issues-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.219Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aiim7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151856/sawal-yeh-hai-discussion-on-current-issues-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3712,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.325Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.325Z\",\n            \"updated\": \"2019-07-07T06:39:43.325Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Pakistan Museum of Natural History) \\u2013 6th June 2019\",\n            \"slug\": \"sawal-yeh-hai-pakistan-museum-of-natural-history-6th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.325Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/ccynZ__Hc9g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151805/sawal-yeh-hai-pakistan-museum-of-natural-history-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3713,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.458Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.458Z\",\n            \"updated\": \"2019-07-07T06:39:43.458Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Fawad Chaudhry's Statement) \\u2013 2nd June 2019\",\n            \"slug\": \"sawal-yeh-hai-fawad-chaudhrys-statement-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.458Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3m1m\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151655/sawal-yeh-hai-fawad-chaudhry-s-statement-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3714,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.544Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.544Z\",\n            \"updated\": \"2019-07-07T06:39:43.544Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Petrol Price Increased) \\u2013 1st June 2019\",\n            \"slug\": \"sawal-yeh-hai-petrol-price-increased-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.544Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a10xh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151614/sawal-yeh-hai-petrol-price-increased-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3715,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.575Z\",\n            \"updated\": \"2019-07-07T06:39:43.575Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Reference Against Judges) \\u2013 31st May 2019\",\n            \"slug\": \"sawal-yeh-hai-reference-against-judges-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.575Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xt9b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151569/sawal-yeh-hai-reference-against-judges-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3716,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.615Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.614Z\",\n            \"updated\": \"2019-07-07T06:39:43.615Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Discussion on Current Issues) \\u2013 26th May 2019\",\n            \"slug\": \"sawal-yeh-hai-discussion-on-current-issues-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.615Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79f3mh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151303/sawal-yeh-hai-discussion-on-current-issues-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3717,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.673Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.673Z\",\n            \"updated\": \"2019-07-07T06:39:43.673Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (What Is The Narrative of PMLN?) \\u2013 25th May 2019\",\n            \"slug\": \"sawal-yeh-hai-what-is-the-narrative-of-pmln-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.673Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79c9q3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151242/sawal-yeh-hai-what-is-the-narrative-of-pmln-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3718,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.699Z\",\n            \"updated\": \"2019-07-07T06:39:43.700Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Chairman NAB Scandal) \\u2013 24th May 2019\",\n            \"slug\": \"sawal-yeh-hai-chairman-nab-scandal-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.700Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79947v\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/151190/sawal-yeh-hai-chairman-nab-scandal-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3719,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.726Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.725Z\",\n            \"updated\": \"2019-07-07T06:39:43.726Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Opposition United Against Govt) \\u2013 19th May 2019\",\n            \"slug\": \"sawal-yeh-hai-opposition-united-against-govt-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.726Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78rk1o\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/150908/sawal-yeh-hai-opposition-united-against-govt-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3720,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.776Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.775Z\",\n            \"updated\": \"2019-07-07T06:39:43.776Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Eid Ke Baad Kia Hoga?) \\u2013 18th May 2019\",\n            \"slug\": \"sawal-yeh-hai-eid-ke-baad-kia-hoga-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.776Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ore4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/150870/sawal-yeh-hai-eid-ke-baad-kia-hoga-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3721,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.811Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.811Z\",\n            \"updated\": \"2019-07-07T06:39:43.811Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Maryam Nawaz Again Active in Politics) - 17th May 2019\",\n            \"slug\": \"sawal-yeh-hai-maryam-nawaz-again-active-in-politics-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.811Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78lgs0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/150811/sawal-yeh-hai-maryam-nawaz-again-active-in-politics-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3722,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.875Z\",\n            \"updated\": \"2019-07-07T06:39:43.876Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Fraud Marriages & Pakistani Girls) \\u2013 12th May 2019\",\n            \"slug\": \"sawal-yeh-hai-fraud-marriages-pakistani-girls-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.876Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x784w38\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/150500/sawal-yeh-hai-fraud-marriages-pakistani-girls-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3723,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:43.952Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:43.952Z\",\n            \"updated\": \"2019-07-07T06:39:43.952Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Discussion on Current Issues) \\u2013 11th May 2019\",\n            \"slug\": \"sawal-yeh-hai-discussion-on-current-issues-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:43.952Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7827o3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/150434/sawal-yeh-hai-discussion-on-current-issues-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3724,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.038Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.038Z\",\n            \"updated\": \"2019-07-07T06:39:44.038Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Mulk Mein IMF Ki Hakumat Hai - Opposition) - 10th May 2019\",\n            \"slug\": \"sawal-yeh-hai-mulk-mein-imf-ki-hakumat-hai-opposition-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.038Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77z4ck\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/150385/sawal-yeh-hai-mulk-mein-imf-ki-hakumat-hai-opposition-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3725,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.087Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.086Z\",\n            \"updated\": \"2019-07-07T06:39:44.087Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Tariq Bajwa Used To Leak Important Info) \\u2013 5th May 2019\",\n            \"slug\": \"sawal-yeh-hai-tariq-bajwa-used-to-leak-important-info-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.087Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77hky6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/150048/sawal-yeh-hai-tariq-bajwa-used-to-leak-important-info-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3726,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.115Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.114Z\",\n            \"updated\": \"2019-07-07T06:39:44.115Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Is Sharif Family's Politics Ending) \\u2013 4th May 2019\",\n            \"slug\": \"sawal-yeh-hai-is-sharif-familys-politics-ending-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.115Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77eq1a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149985/sawal-yeh-hai-is-sharif-family-s-politics-ending-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3727,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.160Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.160Z\",\n            \"updated\": \"2019-07-07T06:39:44.160Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Who Is Opposition Leader?) \\u2013 3rd May 2019\",\n            \"slug\": \"sawal-yeh-hai-who-is-opposition-leader-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.160Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77bg5r\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149933/sawal-yeh-hai-who-is-opposition-leader-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3728,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.188Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.188Z\",\n            \"updated\": \"2019-07-07T06:39:44.188Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Kia Usman Buzdar Tabdeel Honge?)  \\u2013 28th April 2019\",\n            \"slug\": \"sawal-yeh-hai-kia-usman-buzdar-tabdeel-honge-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.188Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76v0bt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149594/sawal-yeh-hai-kia-usman-buzdar-tabdeel-honge-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3729,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.218Z\",\n            \"updated\": \"2019-07-07T06:39:44.219Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (NAB Se Sab Naraz) - 27th April 2019\",\n            \"slug\": \"sawal-yeh-hai-nab-se-sab-naraz-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.219Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76s88d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149544/sawal-yeh-hai-nab-se-sab-naraz-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3730,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.295Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.295Z\",\n            \"updated\": \"2019-07-07T06:39:44.295Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Naye Pakistan Ka Wada Kia Huwa?) \\u2013 26th April 2019\",\n            \"slug\": \"sawal-yeh-hai-naye-pakistan-ka-wada-kia-huwa-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.295Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76p5tb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149492/sawal-yeh-hai-naye-pakistan-ka-wada-kia-huwa-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3731,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.329Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.329Z\",\n            \"updated\": \"2019-07-07T06:39:44.329Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Kia Usman Buzdar Ki Chutti Hone Wali Hai?) \\u2013 21st April 2019\",\n            \"slug\": \"sawal-yeh-hai-kia-usman-buzdar-ki-chutti-hone-wali-hai-21st-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.329Z\",\n            \"target_date\": \"2019-04-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x769fnn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149189/sawal-yeh-hai-kia-usman-buzdar-ki-chutti-hone-wali-hai-21st-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3732,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.368Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.368Z\",\n            \"updated\": \"2019-07-07T06:39:44.368Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Presidential System in Debate) \\u2013 20th April 2019\",\n            \"slug\": \"sawal-yeh-hai-presidential-system-in-debate-20th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.368Z\",\n            \"target_date\": \"2019-04-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x767a68\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149136/sawal-yeh-hai-presidential-system-in-debate-20th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3733,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.397Z\",\n            \"updated\": \"2019-07-07T06:39:44.397Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Azam Swati Back in Cabinet) \\u2013 19th April 2019\",\n            \"slug\": \"sawal-yeh-hai-azam-swati-back-in-cabinet-19th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.397Z\",\n            \"target_date\": \"2019-04-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x764yt2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/149089/sawal-yeh-hai-azam-swati-back-in-cabinet-19th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3734,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.421Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.420Z\",\n            \"updated\": \"2019-07-07T06:39:44.421Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Opposition Aur Ahtasab) \\u2013 14th April 2019\",\n            \"slug\": \"sawal-yeh-hai-opposition-aur-ahtasab-14th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.421Z\",\n            \"target_date\": \"2019-04-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75tzr7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/148790/sawal-yeh-hai-opposition-aur-ahtasab-14th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3735,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.469Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.468Z\",\n            \"updated\": \"2019-07-07T06:39:44.469Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Terrorism in Balochistan) \\u2013 12th April 2019\",\n            \"slug\": \"sawal-yeh-hai-terrorism-in-balochistan-12th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.469Z\",\n            \"target_date\": \"2019-04-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75q93y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/148698/sawal-yeh-hai-terrorism-in-balochistan-12th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3736,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.551Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.550Z\",\n            \"updated\": \"2019-07-07T06:39:44.551Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (India May Attack Pakistan) \\u2013 7th April 2019\",\n            \"slug\": \"sawal-yeh-hai-india-may-attack-pakistan-7th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.551Z\",\n            \"target_date\": \"2019-04-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75fdig\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/148419/sawal-yeh-hai-india-may-attack-pakistan-7th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3737,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.657Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.656Z\",\n            \"updated\": \"2019-07-07T06:39:44.657Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Money Laundering) \\u2013 6th April 2019\",\n            \"slug\": \"sawal-yeh-hai-money-laundering-6th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.657Z\",\n            \"target_date\": \"2019-04-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75dr7b\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/148376/sawal-yeh-hai-money-laundering-6th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3738,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.794Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.794Z\",\n            \"updated\": \"2019-07-07T06:39:44.794Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (NAB Failed To Arrest Hamza Shahbaz) \\u2013 5th April 2019\",\n            \"slug\": \"sawal-yeh-hai-nab-failed-to-arrest-hamza-shahbaz-5th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.794Z\",\n            \"target_date\": \"2019-04-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75bz1e\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/148324/sawal-yeh-hai-nab-failed-to-arrest-hamza-shahbaz-5th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3739,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.864Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:44.844Z\",\n            \"updated\": \"2019-07-07T06:39:44.864Z\",\n            \"extra_data\": {\n                \"host\": \"Maria Memon\",\n                \"job_id\": 169,\n                \"feed_id\": 42,\n                \"feed_name\": \"unewstv - Sawal Yeh Hai\",\n                \"show_name\": \"Sawal Yeh Hai\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Sawal Yeh Hai (Sheikh Rasheed Ahmad Exclusive Interview) \\u2013 31st March 2019\",\n            \"slug\": \"sawal-yeh-hai-sheikh-rasheed-ahmad-exclusive-interview-31st-march-2019\",\n            \"publish_date\": \"2019-07-07T06:39:44.864Z\",\n            \"target_date\": \"2019-03-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7525uk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Sawal+Yeh+hai+with+Dr+Danish\",\n            \"source_detail\": \"http://www.unewstv.com/148060/sawal-yeh-hai-sheikh-rasheed-ahmad-exclusive-interview-31st-march-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 40,\n            \"tags\": \"[\\\"Maria Memon\\\", \\\"Sawal Yeh Hai\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3740,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.264Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.264Z\",\n            \"updated\": \"2019-07-07T06:39:45.264Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Shahbaz Sharif Exclusive Interview) \\u2013 4th July 2019\",\n            \"slug\": \"capital-talk-shahbaz-sharif-exclusive-interview-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.264Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/Xbw2yYUSb90\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153526/capital-talk-shahbaz-sharif-exclusive-interview-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3741,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.373Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.366Z\",\n            \"updated\": \"2019-07-07T06:39:45.373Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Production Orders Issue, Accountability) \\u2013 3rd July 2019\",\n            \"slug\": \"capital-talk-production-orders-issue-accountability-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.373Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/yprYGxoFQ3w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153449/capital-talk-production-orders-issue-accountability-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3742,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.420Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.420Z\",\n            \"updated\": \"2019-07-07T06:39:45.420Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Fazal ur Rehman Exclusive Interview) - 2nd July 2019\",\n            \"slug\": \"capital-talk-fazal-ur-rehman-exclusive-interview-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.420Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/aZHg1-NvQMA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153400/capital-talk-fazal-ur-rehman-exclusive-interview-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3743,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.477Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.477Z\",\n            \"updated\": \"2019-07-07T06:39:45.477Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Cricket Se Siasat Tak) \\u2013 27th June 2019\",\n            \"slug\": \"capital-talk-cricket-se-siasat-tak-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.477Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/VX7gA2ERevI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/153053/capital-talk-cricket-se-siasat-tak-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3744,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.508Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.508Z\",\n            \"updated\": \"2019-07-07T06:39:45.509Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (APC Hakumat Ke Liye Kitni Khatarnaak) \\u2013 26th June 2019\",\n            \"slug\": \"capital-talk-apc-hakumat-ke-liye-kitni-khatarnaak-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.509Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/1sEajTPbtlA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152970/capital-talk-apc-hakumat-ke-liye-kitni-khatarnaak-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3745,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.544Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.543Z\",\n            \"updated\": \"2019-07-07T06:39:45.544Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Karachi Ka Masla Pani) \\u2013 25th June 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-karachi-ka-masla-pani-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.544Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/89-R2xzZo50\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152916/capital-talk-with-hamid-mir-karachi-ka-masla-pani-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3746,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.577Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.577Z\",\n            \"updated\": \"2019-07-07T06:39:45.577Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Prime Minister Imran Khan Exclusive) \\u2013 24th June 2019\",\n            \"slug\": \"capital-talk-prime-minister-imran-khan-exclusive-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.577Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/59uW3fkCqJo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152842/capital-talk-prime-minister-imran-khan-exclusive-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3747,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.604Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.603Z\",\n            \"updated\": \"2019-07-07T06:39:45.604Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Speaker NA Asad Qaiser Exclusive Interview) \\u2013 20th June 2019\",\n            \"slug\": \"capital-talk-speaker-na-asad-qaiser-exclusive-interview-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.604Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/UF69Is7D3m0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152587/capital-talk-speaker-na-asad-qaiser-exclusive-interview-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3748,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.643Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.643Z\",\n            \"updated\": \"2019-07-07T06:39:45.643Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Qaumi Assembly Ka Ijlas) \\u2013 19th June 2019\",\n            \"slug\": \"capital-talk-qaumi-assembly-ka-ijlas-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.643Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/uTAM5xKAdZ4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152526/capital-talk-qaumi-assembly-ka-ijlas-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3749,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.679Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.679Z\",\n            \"updated\": \"2019-07-07T06:39:45.679Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Budget Pass Na Huwa Tu?) \\u2013 18th June 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-budget-pass-na-huwa-tu-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.679Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/0VCTeozgJDY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152461/capital-talk-with-hamid-mir-budget-pass-na-huwa-tu-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3750,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.709Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.709Z\",\n            \"updated\": \"2019-07-07T06:39:45.709Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Opposition Parties United Against Govt) \\u2013 17th June 2019\",\n            \"slug\": \"capital-talk-opposition-parties-united-against-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.709Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/2_HLfxCH7iE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152403/capital-talk-opposition-parties-united-against-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3751,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.756Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.756Z\",\n            \"updated\": \"2019-07-07T06:39:45.756Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Kia Parliament Ka Ghairayo Hoga?) - 13th June 2019\",\n            \"slug\": \"capital-talk-kia-parliament-ka-ghairayo-hoga-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.756Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/9CQd1xsk9Xw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152190/capital-talk-kia-parliament-ka-ghairayo-hoga-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3752,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.805Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.802Z\",\n            \"updated\": \"2019-07-07T06:39:45.805Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk \\u2013 (Pakistan Ke Muashi Aur Siasi Halaat) - 12th June 2019\",\n            \"slug\": \"capital-talk-pakistan-ke-muashi-aur-siasi-halaat-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.805Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/5Sa09xxT75A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152140/capital-talk-pakistan-ke-muashi-aur-siasi-halaat-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3753,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.856Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.856Z\",\n            \"updated\": \"2019-07-07T06:39:45.856Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Will This Budget Strengthen Economy) - 11th June 2019\",\n            \"slug\": \"capital-talk-will-this-budget-strengthen-economy-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.856Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/FTU-6IZ20jo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152085/capital-talk-will-this-budget-strengthen-economy-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3754,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.887Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.887Z\",\n            \"updated\": \"2019-07-07T06:39:45.887Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Who Is Next After Asif Zardari) \\u2013 10th June 2019\",\n            \"slug\": \"capital-talk-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.887Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/QEHA2z2Hcl4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/152009/capital-talk-who-is-next-after-asif-zardari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3755,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.918Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.917Z\",\n            \"updated\": \"2019-07-07T06:39:45.918Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"capital-talk-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.918Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/vNn2Via6Rb0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151770/capital-talk-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3756,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:45.977Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:45.976Z\",\n            \"updated\": \"2019-07-07T06:39:45.977Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Eid Moon Sighting Issue) \\u2013 4th June 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-eid-moon-sighting-issue-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:45.977Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/0sllBsa4KoY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151729/capital-talk-with-hamid-mir-eid-moon-sighting-issue-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3757,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.006Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.005Z\",\n            \"updated\": \"2019-07-07T06:39:46.006Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Reference Against Judges) - 3rd June 2019\",\n            \"slug\": \"capital-talk-reference-against-judges-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.006Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/XLdBM8t7abM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151704/capital-talk-reference-against-judges-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3758,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.057Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.057Z\",\n            \"updated\": \"2019-07-07T06:39:46.057Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Bill Against Interest in Senate) \\u2013 30th May 2019\",\n            \"slug\": \"capital-talk-bill-against-interest-in-senate-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.057Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/gddcP3nYPGA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151511/capital-talk-bill-against-interest-in-senate-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3759,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.087Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.087Z\",\n            \"updated\": \"2019-07-07T06:39:46.087Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Pakistan Under Pressure) \\u2013 29th May 2019\",\n            \"slug\": \"capital-talk-pakistan-under-pressure-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.087Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/KrQmZfcMJKY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151451/capital-talk-pakistan-under-pressure-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3760,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.116Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.115Z\",\n            \"updated\": \"2019-07-07T06:39:46.116Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Kia Hakumat Aur Opposition Aik Ho Sakti Hai) - 28th May 2019\",\n            \"slug\": \"capital-talk-kia-hakumat-aur-opposition-aik-ho-sakti-hai-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.116Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/5sFi6Qr4jOw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151403/capital-talk-kia-hakumat-aur-opposition-aik-ho-sakti-hai-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3761,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.170Z\",\n            \"updated\": \"2019-07-07T06:39:46.171Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Is Pakistani Nation Morally Corrupt?) \\u2013 27th May 2019\",\n            \"slug\": \"capital-talk-is-pakistani-nation-morally-corrupt-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.171Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"https://www.youtube.com/watch/WPMFa05XT0U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151358/capital-talk-is-pakistani-nation-morally-corrupt-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3762,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.206Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.205Z\",\n            \"updated\": \"2019-07-07T06:39:46.206Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Pak India Relations After Modi's Victory) \\u2013 23rd May 2019\",\n            \"slug\": \"capital-talk-pak-india-relations-after-modis-victory-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.206Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"https://www.youtube.com/watch/-ZjNEJls6Ro\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151140/capital-talk-pak-india-relations-after-modi-s-victory-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3763,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.256Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.255Z\",\n            \"updated\": \"2019-07-07T06:39:46.256Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Kia Chairman NAB Ne Javed Chaudhry Ko Interview Dia?) \\u2013 22nd May 2019\",\n            \"slug\": \"capital-talk-kia-chairman-nab-ne-javed-chaudhry-ko-interview-dia-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.256Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/ptBJ8phrPwc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151067/capital-talk-kia-chairman-nab-ne-javed-chaudhry-ko-interview-dia-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3764,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.286Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.286Z\",\n            \"updated\": \"2019-07-07T06:39:46.286Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Dollar Going Out of Control) \\u2013 21st May 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-dollar-going-out-of-control-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.286Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/UvO8quCpSig\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/151012/capital-talk-with-hamid-mir-dollar-going-out-of-control-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3765,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.314Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.314Z\",\n            \"updated\": \"2019-07-07T06:39:46.314Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (What Is Opposition's Real Agenda?) \\u2013 20th May 2019\",\n            \"slug\": \"capital-talk-what-is-oppositions-real-agenda-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.314Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"https://www.youtube.com/watch/9tjQ9TJPSG0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150954/capital-talk-what-is-opposition-s-real-agenda-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3766,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.361Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.361Z\",\n            \"updated\": \"2019-07-07T06:39:46.361Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Is Interest Compulsory in Pakistan) \\u2013 16th May 2019\",\n            \"slug\": \"capital-talk-is-interest-compulsory-in-pakistan-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.361Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"https://www.youtube.com/watch/nF99bz7tRKQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150755/capital-talk-is-interest-compulsory-in-pakistan-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3767,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.401Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.401Z\",\n            \"updated\": \"2019-07-07T06:39:46.401Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (FBR Reforms Possible? How?) \\u2013 15th May 2019\",\n            \"slug\": \"capital-talk-fbr-reforms-possible-how-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.401Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/AuhrRZEKa-g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150694/capital-talk-fbr-reforms-possible-how-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3768,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.473Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.473Z\",\n            \"updated\": \"2019-07-07T06:39:46.473Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk with Hamid Mir (Tax Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"capital-talk-with-hamid-mir-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.473Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/aLjKtwVXo6M\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150623/capital-talk-with-hamid-mir-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3769,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.568Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.567Z\",\n            \"updated\": \"2019-07-07T06:39:46.568Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (What Opposition Is Planning Against Govt) - 9th May 2019\",\n            \"slug\": \"capital-talk-what-opposition-is-planning-against-govt-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.568Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"https://www.youtube.com/watch/oSpEV9uOOag\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150324/capital-talk-what-opposition-is-planning-against-govt-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3770,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.636Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.636Z\",\n            \"updated\": \"2019-07-07T06:39:46.636Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Was PMLN's Rally Contempt of Court?) \\u2013 8th May 2019\",\n            \"slug\": \"capital-talk-was-pmlns-rally-contempt-of-court-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.636Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/cHdI36W0bTw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150250/capital-talk-was-pmln-s-rally-contempt-of-court-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3771,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.763Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.763Z\",\n            \"updated\": \"2019-07-07T06:39:46.763Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Movement After Eid, Load Shedding) - 7th May 2019\",\n            \"slug\": \"capital-talk-movement-after-eid-load-shedding-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.763Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"https://www.youtube.com/watch/FpbXpb3fHzc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150187/capital-talk-movement-after-eid-load-shedding-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3772,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.832Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.832Z\",\n            \"updated\": \"2019-07-07T06:39:46.832Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Ramzan Mein Mehngai Kyun?) \\u2013 6th May 2019\",\n            \"slug\": \"capital-talk-ramzan-mein-mehngai-kyun-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:46.832Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/Qqq30d_e3-s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/150123/capital-talk-ramzan-mein-mehngai-kyun-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3773,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.891Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.890Z\",\n            \"updated\": \"2019-07-07T06:39:46.891Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (PTI Jeet Gai, Opposition Haar Gai) - 4th September 2018\",\n            \"slug\": \"capital-talk-pti-jeet-gai-opposition-haar-gai-4th-september-2018\",\n            \"publish_date\": \"2019-07-07T06:39:46.891Z\",\n            \"target_date\": \"2018-09-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t3h6u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135622/capital-talk-pti-jeet-gai-opposition-haar-gai-4th-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3774,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:46.977Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:46.977Z\",\n            \"updated\": \"2019-07-07T06:39:46.977Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Few Hours Left in Presidential Election) - 3rd September 2018\",\n            \"slug\": \"capital-talk-few-hours-left-in-presidential-election-3rd-september-2018\",\n            \"publish_date\": \"2019-07-07T06:39:46.977Z\",\n            \"target_date\": \"2018-09-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t1t6j\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135547/capital-talk-few-hours-left-in-presidential-election-3rd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3775,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:47.095Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:47.094Z\",\n            \"updated\": \"2019-07-07T06:39:47.095Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Fayaz ul Hassan Chohan's Attitude) - 30th August 2018\",\n            \"slug\": \"capital-talk-fayaz-ul-hassan-chohans-attitude-30th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:47.095Z\",\n            \"target_date\": \"2018-08-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6svn28\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135269/capital-talk-fayaz-ul-hassan-chohan-s-attitude-30th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3776,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:47.216Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:47.215Z\",\n            \"updated\": \"2019-07-07T06:39:47.216Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Tehreek e Insaf Ke Iqdamat) - 29th August 2018\",\n            \"slug\": \"capital-talk-tehreek-e-insaf-ke-iqdamat-29th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:47.216Z\",\n            \"target_date\": \"2018-08-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6stn92\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135198/capital-talk-tehreek-e-insaf-ke-iqdamat-29th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3777,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:47.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:47.547Z\",\n            \"updated\": \"2019-07-07T06:39:47.548Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Opposition Ka Sadarti Umeedwar?) - 28th August 2018\",\n            \"slug\": \"capital-talk-opposition-ka-sadarti-umeedwar-28th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:47.548Z\",\n            \"target_date\": \"2018-08-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6srino\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135126/capital-talk-opposition-ka-sadarti-umeedwar-28th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3778,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:47.862Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:47.862Z\",\n            \"updated\": \"2019-07-07T06:39:47.862Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Presidential Election, Differences in PPP & PMLN) - 27th August 2018\",\n            \"slug\": \"capital-talk-presidential-election-differences-in-ppp-pmln-27th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:47.862Z\",\n            \"target_date\": \"2018-08-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sp0a3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/135045/capital-talk-presidential-election-differences-in-ppp-pmln-27th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3779,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:47.949Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:47.949Z\",\n            \"updated\": \"2019-07-07T06:39:47.949Z\",\n            \"extra_data\": {\n                \"host\": \"Hamid Mir\",\n                \"job_id\": 146,\n                \"feed_id\": 18,\n                \"feed_name\": \"unewstv - Capital Talk\",\n                \"show_name\": \"Capital Talk\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Capital Talk (Cricketers Views About Imran Khan) - 22nd August 2018\",\n            \"slug\": \"capital-talk-cricketers-views-about-imran-khan-22nd-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:47.949Z\",\n            \"target_date\": \"2018-08-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sfhzh\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Capital+Talk+with+Hamid+Mir\",\n            \"source_detail\": \"http://www.unewstv.com/134783/capital-talk-cricketers-views-about-imran-khan-22nd-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 16,\n            \"tags\": \"[\\\"Hamid Mir\\\", \\\"Capital Talk\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3780,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.152Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.151Z\",\n            \"updated\": \"2019-07-07T06:39:48.152Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Shahbaz Sharif Sidelined) - 6th July 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-shahbaz-sharif-sidelined-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.152Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cntjv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153652/hard-talk-pakistan-with-moeed-pirzada-shahbaz-sharif-sidelined-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3781,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.190Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.190Z\",\n            \"updated\": \"2019-07-07T06:39:48.190Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Rana Sanaullah Bhi Andar) - 5th July 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-rana-sanaullah-bhi-andar-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.190Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cl9r4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153583/hard-talk-pakistan-with-moeed-pirzada-rana-sanaullah-bhi-andar-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3782,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.225Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.225Z\",\n            \"updated\": \"2019-07-07T06:39:48.225Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Cracks in PMLN) - 30th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-cracks-in-pmln-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.225Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c7rxk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153236/hard-talk-pakistan-with-moeed-pirzada-cracks-in-pmln-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3783,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.268Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.268Z\",\n            \"updated\": \"2019-07-07T06:39:48.268Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Mid Term Elections Ka Mutalba) - 29th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-mid-term-elections-ka-mutalba-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.268Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c5m24\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153176/hard-talk-pakistan-with-moeed-pirzada-mid-term-elections-ka-mutalba-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3784,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.305Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.304Z\",\n            \"updated\": \"2019-07-07T06:39:48.305Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Opposition's Plan of Action) - 28th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-oppositions-plan-of-action-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.305Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c32vn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/153109/hard-talk-pakistan-with-moeed-pirzada-opposition-s-plan-of-action-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3785,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.344Z\",\n            \"updated\": \"2019-07-07T06:39:48.344Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Differences in Sharif Family) - 23rd June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-differences-in-sharif-family-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.344Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bqngk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152765/hard-talk-pakistan-with-moeed-pirzada-differences-in-sharif-family-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3786,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.384Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.384Z\",\n            \"updated\": \"2019-07-07T06:39:48.384Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Sheikh Rasheed Exclusive Talk) - 22nd June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-sheikh-rasheed-exclusive-talk-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.384Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7boxza\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152701/hard-talk-pakistan-with-moeed-pirzada-sheikh-rasheed-exclusive-talk-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3787,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.427Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.427Z\",\n            \"updated\": \"2019-07-07T06:39:48.427Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Govt Vs Opposition) - 21st June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.427Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bn849\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152648/hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3788,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.485Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.484Z\",\n            \"updated\": \"2019-07-07T06:39:48.485Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Maryam Bilawal Mulaqat) - 16th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-maryam-bilawal-mulaqat-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.485Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bd5ez\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152335/hard-talk-pakistan-with-moeed-pirzada-maryam-bilawal-mulaqat-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3789,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.514Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.514Z\",\n            \"updated\": \"2019-07-07T06:39:48.514Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan (Budget, Accountability, Arrests, Economy) - 15th June 2019\",\n            \"slug\": \"hard-talk-pakistan-budget-accountability-arrests-economy-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.515Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ba52c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152283/hard-talk-pakistan-budget-accountability-arrests-economy-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3790,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.555Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.555Z\",\n            \"updated\": \"2019-07-07T06:39:48.555Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Commission To Probe Debt) - 14th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-commission-to-probe-debt-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.555Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/cd-wTNsC4uI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/152236/hard-talk-pakistan-with-moeed-pirzada-commission-to-probe-debt-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3791,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.585Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.584Z\",\n            \"updated\": \"2019-07-07T06:39:48.585Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Shahbaz Sharif Ki Wapsi) \\u2013 9th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-shahbaz-sharif-ki-wapsi-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.585Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7anoab\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151920/hard-talk-pakistan-with-moeed-pirzada-shahbaz-sharif-ki-wapsi-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3792,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.617Z\",\n            \"updated\": \"2019-07-07T06:39:48.617Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (PTM, Conspiracy Against Pakistan) - 8th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-ptm-conspiracy-against-pakistan-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.617Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7al8ab\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151881/hard-talk-pakistan-with-moeed-pirzada-ptm-conspiracy-against-pakistan-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3793,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.662Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.661Z\",\n            \"updated\": \"2019-07-07T06:39:48.662Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Modi's Policy) - 7th June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-modis-policy-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.662Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ai8y8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151834/hard-talk-pakistan-with-moeed-pirzada-modi-s-policy-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3794,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.690Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.690Z\",\n            \"updated\": \"2019-07-07T06:39:48.690Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Shahid Khaqan Abbasi Exclusive) - 2nd June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-shahid-khaqan-abbasi-exclusive-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.690Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a3db2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151644/hard-talk-pakistan-with-moeed-pirzada-shahid-khaqan-abbasi-exclusive-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3795,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.718Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.718Z\",\n            \"updated\": \"2019-07-07T06:39:48.718Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Opposition's Intentions) - 1st June 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-oppositions-intentions-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.718Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a0qfs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151597/hard-talk-pakistan-with-moeed-pirzada-opposition-s-intentions-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3796,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.777Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.777Z\",\n            \"updated\": \"2019-07-07T06:39:48.777Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Anti Govt Movement) - 31st May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-anti-govt-movement-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.777Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xlc8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151554/hard-talk-pakistan-with-moeed-pirzada-anti-govt-movement-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3797,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.807Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.807Z\",\n            \"updated\": \"2019-07-07T06:39:48.807Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (PTI Ka Agenda Kia?) - 26th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-pti-ka-agenda-kia-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.807Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/TuPFgKP4Woc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151279/hard-talk-pakistan-with-moeed-pirzada-pti-ka-agenda-kia-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3798,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.850Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.849Z\",\n            \"updated\": \"2019-07-07T06:39:48.850Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Will Govt Improve Economy?) - 25th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-will-govt-improve-economy-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.850Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"https://www.youtube.com/watch/rKTW4zSndkI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151229/hard-talk-pakistan-with-moeed-pirzada-will-govt-improve-economy-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3799,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.881Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.880Z\",\n            \"updated\": \"2019-07-07T06:39:48.881Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (NAB Under Pressure) - 24th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-nab-under-pressure-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.881Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x798vhb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/151176/hard-talk-pakistan-with-moeed-pirzada-nab-under-pressure-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3800,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:48.972Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:48.971Z\",\n            \"updated\": \"2019-07-07T06:39:48.972Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Opposition Vs Govt) - 19th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-opposition-vs-govt-19th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:48.972Z\",\n            \"target_date\": \"2019-05-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78rdsu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150911/hard-talk-pakistan-with-moeed-pirzada-opposition-vs-govt-19th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3801,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.080Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.079Z\",\n            \"updated\": \"2019-07-07T06:39:49.080Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Economic Crisis) - 18th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-economic-crisis-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.080Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78og99\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150852/hard-talk-pakistan-with-moeed-pirzada-economic-crisis-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3802,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.199Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.198Z\",\n            \"updated\": \"2019-07-07T06:39:49.199Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Reason of Dollar Rise?) - 17th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-reason-of-dollar-rise-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.199Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78l6el\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150795/hard-talk-pakistan-with-moeed-pirzada-reason-of-dollar-rise-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3803,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.259Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.258Z\",\n            \"updated\": \"2019-07-07T06:39:49.259Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Who Is Behind Gwadar Attack?) - 12th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-who-is-behind-gwadar-attack-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.259Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x784oit\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150476/hard-talk-pakistan-with-moeed-pirzada-who-is-behind-gwadar-attack-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3804,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.357Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.357Z\",\n            \"updated\": \"2019-07-07T06:39:49.357Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (IMF Package) - 11th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-imf-package-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.357Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x781zz0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150424/hard-talk-pakistan-with-moeed-pirzada-imf-package-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3805,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.417Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.417Z\",\n            \"updated\": \"2019-07-07T06:39:49.417Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada  (Pak America Relations) - 10th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-pak-america-relations-10th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.417Z\",\n            \"target_date\": \"2019-05-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77yuo1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150362/hard-talk-pakistan-with-moeed-pirzada-pak-america-relations-10th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3806,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.486Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.468Z\",\n            \"updated\": \"2019-07-07T06:39:49.486Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Challenges For Govt) - 5th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-challenges-for-govt-5th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.486Z\",\n            \"target_date\": \"2019-05-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77hc74\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/150028/hard-talk-pakistan-with-moeed-pirzada-challenges-for-govt-5th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3807,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.584Z\",\n            \"updated\": \"2019-07-07T06:39:49.584Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Siasat Mein Tabdeeliyan) - 4th May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-siasat-mein-tabdeeliyan-4th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.584Z\",\n            \"target_date\": \"2019-05-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77egmz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149974/hard-talk-pakistan-with-moeed-pirzada-siasat-mein-tabdeeliyan-4th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3808,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.689Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.689Z\",\n            \"updated\": \"2019-07-07T06:39:49.689Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Shaikh Rasheed Exclusive Interview) - 3rd May 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-shaikh-rasheed-exclusive-interview-3rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.689Z\",\n            \"target_date\": \"2019-05-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77b58n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149910/hard-talk-pakistan-with-moeed-pirzada-shaikh-rasheed-exclusive-interview-3rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3809,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.768Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.767Z\",\n            \"updated\": \"2019-07-07T06:39:49.768Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Changes in NAB Law) - 28th April 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-changes-in-nab-law-28th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.768Z\",\n            \"target_date\": \"2019-04-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76urnk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149573/hard-talk-pakistan-with-moeed-pirzada-changes-in-nab-law-28th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3810,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.828Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.827Z\",\n            \"updated\": \"2019-07-07T06:39:49.828Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Imran Khan's New Team) - 27th April 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-imran-khans-new-team-27th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.828Z\",\n            \"target_date\": \"2019-04-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76rz7u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149521/hard-talk-pakistan-with-moeed-pirzada-imran-khan-s-new-team-27th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3811,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.895Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:49.895Z\",\n            \"updated\": \"2019-07-07T06:39:49.895Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Moeed Pirzada\",\n                \"job_id\": 147,\n                \"feed_id\": 19,\n                \"feed_name\": \"unewstv - Hard Talk Pakistan\",\n                \"show_name\": \"Hard Talk Pakistan\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Hard Talk Pakistan With Moeed Pirzada (Govt Vs Opposition) - 26th April 2019\",\n            \"slug\": \"hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-26th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:49.895Z\",\n            \"target_date\": \"2019-04-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76oxti\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Hard+Talk+Pakistan+With+Moeed+Pirzada\",\n            \"source_detail\": \"http://www.unewstv.com/149464/hard-talk-pakistan-with-moeed-pirzada-govt-vs-opposition-26th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 17,\n            \"tags\": \"[\\\"Dr. Moeed Pirzada\\\", \\\"Hard Talk Pakistan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3812,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.185Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.184Z\",\n            \"updated\": \"2019-07-07T06:39:50.185Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (IMF Approved Pakistan's Loan) \\u2013 3rd July 2019\",\n            \"slug\": \"power-play-imf-approved-pakistans-loan-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.185Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cg1be\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153475/power-play-imf-approved-pakistan-s-loan-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3813,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.213Z\",\n            \"updated\": \"2019-07-07T06:39:50.214Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Chairman FBR Shabbar Zaidi Exclusive Interview) \\u2013 2nd July 2019\",\n            \"slug\": \"power-play-chairman-fbr-shabbar-zaidi-exclusive-interview-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.214Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdcut\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153405/power-play-chairman-fbr-shabbar-zaidi-exclusive-interview-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3814,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.253Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.253Z\",\n            \"updated\": \"2019-07-07T06:39:50.253Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Beqabu Dollar Aur Maeeshat) \\u2013 27th June 2019\",\n            \"slug\": \"power-play-beqabu-dollar-aur-maeeshat-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.253Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0t56\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/153052/power-play-beqabu-dollar-aur-maeeshat-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3815,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.283Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.282Z\",\n            \"updated\": \"2019-07-07T06:39:50.283Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (APC Ke Mutalbaat Kia?) - 26th June 2019\",\n            \"slug\": \"power-play-apc-ke-mutalbaat-kia-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.283Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by43i\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152988/power-play-apc-ke-mutalbaat-kia-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3816,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.315Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.314Z\",\n            \"updated\": \"2019-07-07T06:39:50.315Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Ki Hakumat Se Mahaz Arai) \\u2013 25th June 2019\",\n            \"slug\": \"power-play-opposition-ki-hakumat-se-mahaz-arai-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.315Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvili\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152913/power-play-opposition-ki-hakumat-se-mahaz-arai-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3817,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.365Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.365Z\",\n            \"updated\": \"2019-07-07T06:39:50.365Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Tehreek Chala Paye Gi?) \\u2013 24th June 2019\",\n            \"slug\": \"power-play-opposition-tehreek-chala-paye-gi-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.365Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bt6z3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152851/power-play-opposition-tehreek-chala-paye-gi-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3818,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.397Z\",\n            \"updated\": \"2019-07-07T06:39:50.397Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Asad Umar Ki Apni Hakumat Per Tanqeed) \\u2013 20th June 2019\",\n            \"slug\": \"power-play-asad-umar-ki-apni-hakumat-per-tanqeed-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.397Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7blero\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152596/power-play-asad-umar-ki-apni-hakumat-per-tanqeed-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3819,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.437Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.437Z\",\n            \"updated\": \"2019-07-07T06:39:50.437Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Ke Zardari Ke Production Order Ka Mutalba) \\u2013 18th June 2019\",\n            \"slug\": \"power-play-opposition-ke-zardari-ke-production-order-ka-mutalba-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.438Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bhzsr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152457/power-play-opposition-ke-zardari-ke-production-order-ka-mutalba-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3820,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.486Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.486Z\",\n            \"updated\": \"2019-07-07T06:39:50.486Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Movement Against Govt) - 17th June 2019\",\n            \"slug\": \"power-play-opposition-movement-against-govt-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.486Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bgjkx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152411/power-play-opposition-movement-against-govt-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3821,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.514Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.514Z\",\n            \"updated\": \"2019-07-07T06:39:50.514Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Reference Against Justice Qazi Faez Isa) \\u2013 13th June 2019\",\n            \"slug\": \"power-play-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.514Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b2qlv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152202/power-play-reference-against-justice-qazi-faez-isa-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3822,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.573Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.564Z\",\n            \"updated\": \"2019-07-07T06:39:50.573Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Discussion on Current Issues) \\u2013 12th June 2019\",\n            \"slug\": \"power-play-discussion-on-current-issues-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.573Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ayhr0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152138/power-play-discussion-on-current-issues-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3823,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.604Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.604Z\",\n            \"updated\": \"2019-07-07T06:39:50.604Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Giraftariyan Aur Budget) \\u2013 11th June 2019\",\n            \"slug\": \"power-play-giraftariyan-aur-budget-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.604Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7auchn\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152079/power-play-giraftariyan-aur-budget-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3824,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.652Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.651Z\",\n            \"updated\": \"2019-07-07T06:39:50.652Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Aur Kaun Kaun Giraftar Hoga?) \\u2013 10th June 2019\",\n            \"slug\": \"power-play-aur-kaun-kaun-giraftar-hoga-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.652Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ar085\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/152018/power-play-aur-kaun-kaun-giraftar-hoga-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3825,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.684Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.684Z\",\n            \"updated\": \"2019-07-07T06:39:50.684Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Discussion on Current Issues) \\u2013 3rd June 2019\",\n            \"slug\": \"power-play-discussion-on-current-issues-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.684Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a6gto\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151693/power-play-discussion-on-current-issues-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3826,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.726Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.726Z\",\n            \"updated\": \"2019-07-07T06:39:50.726Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Shahid Khaqan Abbasi Exclusive Interview) - 30th May 2019\",\n            \"slug\": \"power-play-shahid-khaqan-abbasi-exclusive-interview-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.726Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79treb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151515/power-play-shahid-khaqan-abbasi-exclusive-interview-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3827,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.767Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.767Z\",\n            \"updated\": \"2019-07-07T06:39:50.767Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Hamza Shahbaz Ki NAB Mein Paishi) \\u2013 29th May 2019\",\n            \"slug\": \"power-play-hamza-shahbaz-ki-nab-mein-paishi-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.767Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79qby6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151440/power-play-hamza-shahbaz-ki-nab-mein-paishi-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3828,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.835Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.835Z\",\n            \"updated\": \"2019-07-07T06:39:50.835Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Pakistan's Step Against Terrorism) \\u2013 28th May 2019\",\n            \"slug\": \"power-play-pakistans-step-against-terrorism-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.835Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mm0k\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151402/power-play-pakistan-s-step-against-terrorism-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3829,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.893Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.893Z\",\n            \"updated\": \"2019-07-07T06:39:50.893Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (PMLN Want to Send Govt Home) - 23rd May 2019\",\n            \"slug\": \"power-play-pmln-want-to-send-govt-home-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.893Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795mgz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151133/power-play-pmln-want-to-send-govt-home-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3830,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.921Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.921Z\",\n            \"updated\": \"2019-07-07T06:39:50.921Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (NAB Chairman Interview) \\u2013 21st May 2019\",\n            \"slug\": \"power-play-nab-chairman-interview-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.921Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78yjp0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/151025/power-play-nab-chairman-interview-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3831,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:50.979Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:50.979Z\",\n            \"updated\": \"2019-07-07T06:39:50.982Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Will Opposition Give Tough Time To Govt?) \\u2013 20th May 2019\",\n            \"slug\": \"power-play-will-opposition-give-tough-time-to-govt-20th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:50.982Z\",\n            \"target_date\": \"2019-05-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78uvv2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150957/power-play-will-opposition-give-tough-time-to-govt-20th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3832,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.011Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.010Z\",\n            \"updated\": \"2019-07-07T06:39:51.011Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (IMF Package & Dollar Rate) - 16th May 2019\",\n            \"slug\": \"power-play-imf-package-dollar-rate-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.011Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78hy3c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150748/power-play-imf-package-dollar-rate-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3833,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.063Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.062Z\",\n            \"updated\": \"2019-07-07T06:39:51.063Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Kia Opposition Tehreek Chala Paye Gi?) - 15th May 2019\",\n            \"slug\": \"power-play-kia-opposition-tehreek-chala-paye-gi-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.063Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78erct\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150682/power-play-kia-opposition-tehreek-chala-paye-gi-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3834,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.122Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.122Z\",\n            \"updated\": \"2019-07-07T06:39:51.123Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (NAB Summons Bilawal Zardari) \\u2013 14th May 2019\",\n            \"slug\": \"power-play-nab-summons-bilawal-zardari-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.123Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78blca\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150612/power-play-nab-summons-bilawal-zardari-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3835,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.218Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.218Z\",\n            \"updated\": \"2019-07-07T06:39:51.218Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Opposition Ka Assembly Mein Shoor Sharaba) - 9th May 2019\",\n            \"slug\": \"power-play-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.218Z\",\n            \"target_date\": \"2019-05-09\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77vgib\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150317/power-play-opposition-ka-assembly-mein-shoor-sharaba-9th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3836,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.318Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.317Z\",\n            \"updated\": \"2019-07-07T06:39:51.318Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Money Laundering, Accountability) - 8th May 2019\",\n            \"slug\": \"power-play-money-laundering-accountability-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.318Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77rs0d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150246/power-play-money-laundering-accountability-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3837,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.387Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.379Z\",\n            \"updated\": \"2019-07-07T06:39:51.387Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (PMLN's Power Show??) - 7th May 2019\",\n            \"slug\": \"power-play-pmlns-power-show-7th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.387Z\",\n            \"target_date\": \"2019-05-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77olr8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150184/power-play-pmln-s-power-show-7th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3838,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.476Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.476Z\",\n            \"updated\": \"2019-07-07T06:39:51.476Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Mehngai, IMF, Economy) - 6th May 2019\",\n            \"slug\": \"power-play-mehngai-imf-economy-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.476Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77kyeu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/150121/power-play-mehngai-imf-economy-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3839,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.566Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.566Z\",\n            \"updated\": \"2019-07-07T06:39:51.566Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Who Will Lead PMLN After Sharif Brothers) - 2nd May 2019\",\n            \"slug\": \"power-play-who-will-lead-pmln-after-sharif-brothers-2nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.566Z\",\n            \"target_date\": \"2019-05-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7788e3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149859/power-play-who-will-lead-pmln-after-sharif-brothers-2nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3840,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.671Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.671Z\",\n            \"updated\": \"2019-07-07T06:39:51.672Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Attack on Pakistan From Afghanistan) \\u2013 1st May 2019\",\n            \"slug\": \"power-play-attack-on-pakistan-from-afghanistan-1st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.672Z\",\n            \"target_date\": \"2019-05-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7751wd\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149801/power-play-attack-on-pakistan-from-afghanistan-1st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3841,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.790Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.790Z\",\n            \"updated\": \"2019-07-07T06:39:51.790Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Fake Bank Accounts Case) \\u2013 30th April 2019\",\n            \"slug\": \"power-play-fake-bank-accounts-case-30th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.791Z\",\n            \"target_date\": \"2019-04-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x77214t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149728/power-play-fake-bank-accounts-case-30th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3842,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.859Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.851Z\",\n            \"updated\": \"2019-07-07T06:39:51.859Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (DG ISPR Questions From PTM) \\u2013 29th April 2019\",\n            \"slug\": \"power-play-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.859Z\",\n            \"target_date\": \"2019-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ygt2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149655/power-play-dg-ispr-questions-from-ptm-29th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3843,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:51.940Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:51.940Z\",\n            \"updated\": \"2019-07-07T06:39:51.940Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Nawaz Sharif Seeks Permission From SC To Go Abroad) - 25th April 2019\",\n            \"slug\": \"power-play-nawaz-sharif-seeks-permission-from-sc-to-go-abroad-25th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:51.940Z\",\n            \"target_date\": \"2019-04-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76logt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149427/power-play-nawaz-sharif-seeks-permission-from-sc-to-go-abroad-25th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3844,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.029Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.029Z\",\n            \"updated\": \"2019-07-07T06:39:52.029Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Sindh Govt Closes Dar ul Sehat) \\u2013 24th April 2019\",\n            \"slug\": \"power-play-sindh-govt-closes-dar-ul-sehat-24th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.029Z\",\n            \"target_date\": \"2019-04-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76ie8p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149361/power-play-sindh-govt-closes-dar-ul-sehat-24th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3845,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.124Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.124Z\",\n            \"updated\": \"2019-07-07T06:39:52.124Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Medicines Prices Increase, Who Is Beneficiary?) \\u2013 23rd April 2019\",\n            \"slug\": \"power-play-medicines-prices-increase-who-is-beneficiary-23rd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.124Z\",\n            \"target_date\": \"2019-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76fmyj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149307/power-play-medicines-prices-increase-who-is-beneficiary-23rd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3846,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.194Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.194Z\",\n            \"updated\": \"2019-07-07T06:39:52.194Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Old Faces in New Cabinet) \\u2013 22nd April 2019\",\n            \"slug\": \"power-play-old-faces-in-new-cabinet-22nd-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.194Z\",\n            \"target_date\": \"2019-04-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x76cabp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149245/power-play-old-faces-in-new-cabinet-22nd-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3847,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.310Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.309Z\",\n            \"updated\": \"2019-07-07T06:39:52.310Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Imran Khan Ki Team Mein Bari Tabdeeliyan) \\u2013 18th April 2019\",\n            \"slug\": \"power-play-imran-khan-ki-team-mein-bari-tabdeeliyan-18th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.310Z\",\n            \"target_date\": \"2019-04-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x762mbo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/149028/power-play-imran-khan-ki-team-mein-bari-tabdeeliyan-18th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3848,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.380Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.379Z\",\n            \"updated\": \"2019-07-07T06:39:52.380Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Wealth Transfer Through TT) \\u2013 17th April 2019\",\n            \"slug\": \"power-play-wealth-transfer-through-tt-17th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.380Z\",\n            \"target_date\": \"2019-04-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7600dk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148959/power-play-wealth-transfer-through-tt-17th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3849,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.468Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.467Z\",\n            \"updated\": \"2019-07-07T06:39:52.468Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Why Salman Shahbaz Flee From Country?) \\u2013 16th April 2019\",\n            \"slug\": \"power-play-why-salman-shahbaz-flee-from-country-16th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.468Z\",\n            \"target_date\": \"2019-04-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75xuj9\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148906/power-play-why-salman-shahbaz-flee-from-country-16th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3850,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.655Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.654Z\",\n            \"updated\": \"2019-07-07T06:39:52.662Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Changes in Federal Cabinet?) \\u2013 15th April 2019\",\n            \"slug\": \"power-play-changes-in-federal-cabinet-15th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.662Z\",\n            \"target_date\": \"2019-04-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75vy1n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148852/power-play-changes-in-federal-cabinet-15th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3851,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.780Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.780Z\",\n            \"updated\": \"2019-07-07T06:39:52.781Z\",\n            \"extra_data\": {\n                \"host\": \"Arshad Sharif\",\n                \"job_id\": 148,\n                \"feed_id\": 20,\n                \"feed_name\": \"unewstv - Power Play\",\n                \"show_name\": \"Power Play\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Power Play (Sharif Family Money Laundering) \\u2013 11th April 2019\",\n            \"slug\": \"power-play-sharif-family-money-laundering-11th-april-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.781Z\",\n            \"target_date\": \"2019-04-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x75nyci\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Power+Play+on+ARY+News\",\n            \"source_detail\": \"http://www.unewstv.com/148640/power-play-sharif-family-money-laundering-11th-april-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 18,\n            \"tags\": \"[\\\"Arshad Sharif\\\", \\\"Power Play\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3852,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.971Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:52.971Z\",\n            \"updated\": \"2019-07-07T06:39:52.971Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Be-Uladi , Haqaiq Or Afsanay) \\u2013 6th July 2019\",\n            \"slug\": \"zara-hut-kay-be-uladi-haqaiq-or-afsanay-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:52.971Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7co00p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153663/zara-hut-kay-be-uladi-haqaiq-or-afsanay-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3853,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.010Z\",\n            \"updated\": \"2019-07-07T06:39:53.010Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (The Caller's Day) \\u2013 5th July 2019\",\n            \"slug\": \"zara-hut-kay-the-callers-day-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.010Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7clhtb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153604/zara-hut-kay-the-caller-s-day-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3854,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.054Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.054Z\",\n            \"updated\": \"2019-07-07T06:39:53.054Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Charges on Rana Sanaullah) \\u2013 4th July 2019\",\n            \"slug\": \"zara-hut-kay-charges-on-rana-sanaullah-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.054Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cix07\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153553/zara-hut-kay-charges-on-rana-sanaullah-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3855,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.087Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.087Z\",\n            \"updated\": \"2019-07-07T06:39:53.087Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Thatha Needs Water) \\u2013 3rd July 2019\",\n            \"slug\": \"zara-hut-kay-thatha-needs-water-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.087Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cg34h\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153474/zara-hut-kay-thatha-needs-water-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3856,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.120Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.120Z\",\n            \"updated\": \"2019-07-07T06:39:53.120Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Akar Bakar Pakar Dhakar) \\u2013 2nd July 2019\",\n            \"slug\": \"zara-hut-kay-akar-bakar-pakar-dhakar-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.120Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cdfu8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153394/zara-hut-kay-akar-bakar-pakar-dhakar-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3857,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.174Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.171Z\",\n            \"updated\": \"2019-07-07T06:39:53.174Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Rana Sanaullah Ki Giraftari) \\u2013 1st July 2019\",\n            \"slug\": \"zara-hut-kay-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.174Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7cap9u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153319/zara-hut-kay-rana-sanaullah-ki-giraftari-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3858,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.204Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.204Z\",\n            \"updated\": \"2019-07-07T06:39:53.204Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019\",\n            \"slug\": \"zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.204Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/bsc23Rabj0w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153186/zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3859,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.277Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.257Z\",\n            \"updated\": \"2019-07-07T06:39:53.293Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 28th June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.293Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c38xl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153124/zara-hut-kay-callers-day-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3860,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.422Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.421Z\",\n            \"updated\": \"2019-07-07T06:39:53.422Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (All Parties Conference Kaisi Rahi) \\u2013 27th June 2019\",\n            \"slug\": \"zara-hut-kay-all-parties-conference-kaisi-rahi-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.422Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7c0xtr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/153061/zara-hut-kay-all-parties-conference-kaisi-rahi-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3861,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.484Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.483Z\",\n            \"updated\": \"2019-07-07T06:39:53.484Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (APC Ka Kia Natija Raha?) \\u2013 26th June 2019\",\n            \"slug\": \"zara-hut-kay-apc-ka-kia-natija-raha-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.484Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7by6wz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152991/zara-hut-kay-apc-ka-kia-natija-raha-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3862,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.580Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.579Z\",\n            \"updated\": \"2019-07-07T06:39:53.580Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Babar Awan Bari Ho Gaye) \\u2013 25th June 2019\",\n            \"slug\": \"zara-hut-kay-babar-awan-bari-ho-gaye-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.580Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bvkr8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152911/zara-hut-kay-babar-awan-bari-ho-gaye-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3863,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.708Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.707Z\",\n            \"updated\": \"2019-07-07T06:39:53.708Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Discussion on Different Issues) \\u2013 24th June 2019\",\n            \"slug\": \"zara-hut-kay-discussion-on-different-issues-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.708Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/fjvE20Uj-8U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152850/zara-hut-kay-discussion-on-different-issues-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3864,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:53.896Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:53.895Z\",\n            \"updated\": \"2019-07-07T06:39:53.896Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Khwandgi Barhanay Ki Koshish) \\u2013 22nd June 2019\",\n            \"slug\": \"zara-hut-kay-khwandgi-barhanay-ki-koshish-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:53.896Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bp4sv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152720/zara-hut-kay-khwandgi-barhanay-ki-koshish-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3865,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.103Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.102Z\",\n            \"updated\": \"2019-07-07T06:39:54.109Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 21st June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.109Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bnafm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152656/zara-hut-kay-callers-day-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3866,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.169Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.169Z\",\n            \"updated\": \"2019-07-07T06:39:54.169Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Makrooz Hona Tu Achi Baat Hai) \\u2013 19th June 2019\",\n            \"slug\": \"zara-hut-kay-makrooz-hona-tu-achi-baat-hai-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.169Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bjpwu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152524/zara-hut-kay-makrooz-hona-tu-achi-baat-hai-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3867,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.207Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.207Z\",\n            \"updated\": \"2019-07-07T06:39:54.207Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Doctor, Mareez, Hospital, Or Media) \\u2013 18th June 2019\",\n            \"slug\": \"zara-hut-kay-doctor-mareez-hospital-or-media-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.207Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bi1a1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152469/zara-hut-kay-doctor-mareez-hospital-or-media-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3868,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.276Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.276Z\",\n            \"updated\": \"2019-07-07T06:39:54.276Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Murgi Na Sahi Bakri Sahi) \\u2013 17th June 2019\",\n            \"slug\": \"zara-hut-kay-murgi-na-sahi-bakri-sahi-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.276Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/9cfLldGBgag\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152416/zara-hut-kay-murgi-na-sahi-bakri-sahi-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3869,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.346Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.346Z\",\n            \"updated\": \"2019-07-07T06:39:54.346Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Science Ka Budget Kahan Kharch Hoga) \\u2013 15th June 2019\",\n            \"slug\": \"zara-hut-kay-science-ka-budget-kahan-kharch-hoga-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.347Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7bafqp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152309/zara-hut-kay-science-ka-budget-kahan-kharch-hoga-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3870,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.406Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.406Z\",\n            \"updated\": \"2019-07-07T06:39:54.406Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 14th June 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.406Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7b6ut6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152249/zara-hut-kay-callers-day-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3871,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.454Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.453Z\",\n            \"updated\": \"2019-07-07T06:39:54.454Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Ali Raza Abdi Ka Qatal Muqadma) \\u2013 13th June 2019\",\n            \"slug\": \"zara-hut-kay-ali-raza-abdi-ka-qatal-muqadma-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.454Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/pib16LicjiI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152200/zara-hut-kay-ali-raza-abdi-ka-qatal-muqadma-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3872,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.489Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.488Z\",\n            \"updated\": \"2019-07-07T06:39:54.495Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Why Imran Khan Is So Tensed?) \\u2013 12th June 2019\",\n            \"slug\": \"zara-hut-kay-why-imran-khan-is-so-tensed-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.495Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aymez\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152136/zara-hut-kay-why-imran-khan-is-so-tensed-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3873,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.539Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.538Z\",\n            \"updated\": \"2019-07-07T06:39:54.539Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Asif Zardari Ki Giraftari) \\u2013 10th June 2019\",\n            \"slug\": \"zara-hut-kay-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.539Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7ar2bv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/152014/zara-hut-kay-asif-zardari-ki-giraftari-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3874,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.597Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.597Z\",\n            \"updated\": \"2019-07-07T06:39:54.597Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Mehtab Channa Se Mehtab Rashdi Tak Ka Safar) \\u2013 7th June 2019\",\n            \"slug\": \"zara-hut-kay-mehtab-channa-se-mehtab-rashdi-tak-ka-safar-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.597Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7aimbp\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151853/zara-hut-kay-mehtab-channa-se-mehtab-rashdi-tak-ka-safar-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3875,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.628Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.627Z\",\n            \"updated\": \"2019-07-07T06:39:54.628Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Eid Special With Qavi Khan) \\u2013 6th June 2019\",\n            \"slug\": \"zara-hut-kay-eid-special-with-qavi-khan-6th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.628Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7afp9p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151809/zara-hut-kay-eid-special-with-qavi-khan-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3876,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.676Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.676Z\",\n            \"updated\": \"2019-07-07T06:39:54.676Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Eid Special Show) \\u2013 5th June 2019\",\n            \"slug\": \"zara-hut-kay-eid-special-show-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.676Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/qFnS7jb-FjQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151783/zara-hut-kay-eid-special-show-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3877,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.712Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.712Z\",\n            \"updated\": \"2019-07-07T06:39:54.712Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Pakistan , Talent Or Technology) \\u2013 1st June 2019\",\n            \"slug\": \"zara-hut-kay-pakistan-talent-or-technology-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.712Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7a13eu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151617/zara-hut-kay-pakistan-talent-or-technology-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3878,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.778Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.777Z\",\n            \"updated\": \"2019-07-07T06:39:54.778Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 31st May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.778Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79xvjy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151560/zara-hut-kay-callers-day-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3879,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.807Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.806Z\",\n            \"updated\": \"2019-07-07T06:39:54.807Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Moon Sighting, Science & Fawad Chaudhry) \\u2013 28th May 2019\",\n            \"slug\": \"zara-hut-kay-moon-sighting-science-fawad-chaudhry-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.807Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79mqny\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151397/zara-hut-kay-moon-sighting-science-fawad-chaudhry-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3880,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.849Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.849Z\",\n            \"updated\": \"2019-07-07T06:39:54.850Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (PTM Ka Masla Siasat Se Hal Hoga) \\u2013 27th May 2019\",\n            \"slug\": \"zara-hut-kay-ptm-ka-masla-siasat-se-hal-hoga-27th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.851Z\",\n            \"target_date\": \"2019-05-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79itne\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151354/zara-hut-kay-ptm-ka-masla-siasat-se-hal-hoga-27th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3881,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.880Z\",\n            \"updated\": \"2019-07-07T06:39:54.880Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Kal Kayh Sahafi , CEJ IBA) \\u2013 25th May 2019\",\n            \"slug\": \"zara-hut-kay-kal-kayh-sahafi-cej-iba-25th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.881Z\",\n            \"target_date\": \"2019-05-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x79ccp5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151241/zara-hut-kay-kal-kayh-sahafi-cej-iba-25th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3882,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.909Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.909Z\",\n            \"updated\": \"2019-07-07T06:39:54.909Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Callers Day) \\u2013 24th May 2019\",\n            \"slug\": \"zara-hut-kay-callers-day-24th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.909Z\",\n            \"target_date\": \"2019-05-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x7996w5\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151200/zara-hut-kay-callers-day-24th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3883,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:54.967Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:54.967Z\",\n            \"updated\": \"2019-07-07T06:39:54.967Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Modi Aik Baar Phir Jeet Gaye) \\u2013 23rd May 2019\",\n            \"slug\": \"zara-hut-kay-modi-aik-baar-phir-jeet-gaye-23rd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:54.967Z\",\n            \"target_date\": \"2019-05-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x795nx7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151127/zara-hut-kay-modi-aik-baar-phir-jeet-gaye-23rd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3884,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.002Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.002Z\",\n            \"updated\": \"2019-07-07T06:39:55.002Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Justice For 10 Year Old Girl Farishta) \\u2013 21st May 2019\",\n            \"slug\": \"zara-hut-kay-justice-for-10-year-old-girl-farishta-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.002Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ynno\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/151022/zara-hut-kay-justice-for-10-year-old-girl-farishta-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3885,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.032Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.032Z\",\n            \"updated\": \"2019-07-07T06:39:55.032Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Sehat Ka Shoba Ya Black Comedy) \\u2013 18th May 2019\",\n            \"slug\": \"zara-hut-kay-sehat-ka-shoba-ya-black-comedy-18th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.032Z\",\n            \"target_date\": \"2019-05-18\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ovbr\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150873/zara-hut-kay-sehat-ka-shoba-ya-black-comedy-18th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3886,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.068Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.068Z\",\n            \"updated\": \"2019-07-07T06:39:55.068Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Discussion on Current Issues) \\u2013 17th May 2019\",\n            \"slug\": \"zara-hut-kay-discussion-on-current-issues-17th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.068Z\",\n            \"target_date\": \"2019-05-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78llc2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150810/zara-hut-kay-discussion-on-current-issues-17th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3887,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.098Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.098Z\",\n            \"updated\": \"2019-07-07T06:39:55.098Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Health System in Sindh) \\u2013 16th May 2019\",\n            \"slug\": \"zara-hut-kay-health-system-in-sindh-16th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.098Z\",\n            \"target_date\": \"2019-05-16\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78i1kx\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150751/zara-hut-kay-health-system-in-sindh-16th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3888,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.135Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.135Z\",\n            \"updated\": \"2019-07-07T06:39:55.135Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Heart, Brain And Science) \\u2013 15th May 2019\",\n            \"slug\": \"zara-hut-kay-heart-brain-and-science-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.135Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78ewc1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150688/zara-hut-kay-heart-brain-and-science-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3889,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.178Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.178Z\",\n            \"updated\": \"2019-07-07T06:39:55.178Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Whatsapp Bhi Heck Hogaya) \\u2013 14th May 2019\",\n            \"slug\": \"zara-hut-kay-whatsapp-bhi-heck-hogaya-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.178Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x78bqaa\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150617/zara-hut-kay-whatsapp-bhi-heck-hogaya-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3890,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.213Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.212Z\",\n            \"updated\": \"2019-07-07T06:39:55.213Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hat Kay (Callers Day) - 13th May 2019\",\n            \"slug\": \"zara-hat-kay-callers-day-13th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.213Z\",\n            \"target_date\": \"2019-05-13\",\n            \"text\": \"https://www.youtube.com/watch/yXV0gwQkf58\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150569/zara-hat-kay-callers-day-13th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3891,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.255Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.255Z\",\n            \"updated\": \"2019-07-07T06:39:55.255Z\",\n            \"extra_data\": {\n                \"host\": \"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\",\n                \"job_id\": 132,\n                \"feed_id\": 3,\n                \"feed_name\": \"unewstv - Zara Hat Kay\",\n                \"show_name\": \"Zara Hat Kay\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Zara Hut Kay (Zara Hut Kay) \\u2013 11th May 2019\",\n            \"slug\": \"zara-hut-kay-zara-hut-kay-11th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.255Z\",\n            \"target_date\": \"2019-05-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x782ccs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"source_detail\": \"http://www.unewstv.com/150431/zara-hut-kay-zara-hut-kay-11th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 2,\n            \"tags\": \"[\\\"Wusatullah Khan, Zarar Khoro & Mubashir Zaidi\\\", \\\"Zara Hat Kay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3892,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.399Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.398Z\",\n            \"updated\": \"2019-07-07T06:39:55.399Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Amnesty Scheme, Other Issues) - 30th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.399Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/k5USPAIelXc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/153242/meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3893,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.450Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.450Z\",\n            \"updated\": \"2019-07-07T06:39:55.450Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Different Issues) \\u2013 23rd June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-different-issues-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.450Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/zCygDFsBiLA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/152770/meray-mutabiq-with-hassan-nisar-different-issues-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3894,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.528Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.527Z\",\n            \"updated\": \"2019-07-07T06:39:55.528Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Different Issues) \\u2013 16th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.528Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/X6Syg2r6aOo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/152339/meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3895,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.608Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.607Z\",\n            \"updated\": \"2019-07-07T06:39:55.608Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Current Issues) \\u2013 9th June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.608Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/pKW-OYkAbQs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151924/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3896,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.704Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.704Z\",\n            \"updated\": \"2019-07-07T06:39:55.704Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 2nd June 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.704Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/LondCQqorZ8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151665/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3897,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.840Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.840Z\",\n            \"updated\": \"2019-07-07T06:39:55.840Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) - 26th May 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-26th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.840Z\",\n            \"target_date\": \"2019-05-26\",\n            \"text\": \"https://www.youtube.com/watch/ucZfd8DESNA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/151307/meray-mutabiq-with-hassan-nisar-current-issues-26th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3898,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:55.910Z\",\n            \"updated\": \"2019-07-07T06:39:55.911Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) \\u2013 12th May 2019\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-12th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:39:55.911Z\",\n            \"target_date\": \"2019-05-12\",\n            \"text\": \"https://www.youtube.com/watch/6OSk5b305_c\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/150509/meray-mutabiq-with-hassan-nisar-current-issues-12th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3899,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.010Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.010Z\",\n            \"updated\": \"2019-07-07T06:39:56.010Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 2nd September 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-september-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.010Z\",\n            \"target_date\": \"2018-09-02\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t03l6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/135460/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-2nd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3900,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.135Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.134Z\",\n            \"updated\": \"2019-07-07T06:39:56.135Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 26th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-26th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.135Z\",\n            \"target_date\": \"2018-08-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6smwe3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134966/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-26th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3901,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.223Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.222Z\",\n            \"updated\": \"2019-07-07T06:39:56.223Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Imran Khan Became PM) - 19th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-imran-khan-became-pm-19th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.224Z\",\n            \"target_date\": \"2018-08-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6s945s\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134591/mere-mutabiq-with-hassan-nisar-imran-khan-became-pm-19th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3902,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.298Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.298Z\",\n            \"updated\": \"2019-07-07T06:39:56.298Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 12th August 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-12th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.298Z\",\n            \"target_date\": \"2018-08-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rvz2q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/134122/meray-mutabiq-with-hassan-nisar-current-issues-12th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3903,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.422Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.422Z\",\n            \"updated\": \"2019-07-07T06:39:56.423Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Current Issues) - 5th August 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-current-issues-5th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.423Z\",\n            \"target_date\": \"2018-08-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rgsf2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/133665/mere-mutabiq-with-hassan-nisar-current-issues-5th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3904,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.472Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.472Z\",\n            \"updated\": \"2019-07-07T06:39:56.472Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 29th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-29th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.473Z\",\n            \"target_date\": \"2018-07-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qmnci\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/133200/meray-mutabiq-with-hassan-nisar-current-issues-29th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3905,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.502Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.501Z\",\n            \"updated\": \"2019-07-07T06:39:56.502Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 22nd July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-22nd-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.502Z\",\n            \"target_date\": \"2018-07-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6psevy\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/132776/meray-mutabiq-with-hassan-nisar-current-issues-22nd-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3906,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.575Z\",\n            \"updated\": \"2019-07-07T06:39:56.575Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 15th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-15th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.575Z\",\n            \"target_date\": \"2018-07-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6osrli\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/132350/meray-mutabiq-with-hassan-nisar-current-issues-15th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3907,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.604Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.603Z\",\n            \"updated\": \"2019-07-07T06:39:56.605Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Nawaz Sharif & Maryam Convicted) \\u2013 8th July 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-nawaz-sharif-maryam-convicted-8th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.605Z\",\n            \"target_date\": \"2018-07-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nz5gq\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/131917/meray-mutabiq-with-hassan-nisar-nawaz-sharif-maryam-convicted-8th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3908,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.646Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.645Z\",\n            \"updated\": \"2019-07-07T06:39:56.646Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 24th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-24th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.646Z\",\n            \"target_date\": \"2018-06-24\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6moa9q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/131102/meray-mutabiq-with-hassan-nisar-current-issues-24th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3909,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.706Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.705Z\",\n            \"updated\": \"2019-07-07T06:39:56.706Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 17th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-17th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.706Z\",\n            \"target_date\": \"2018-06-17\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6m3gtt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/130694/meray-mutabiq-with-hassan-nisar-current-issues-17th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3910,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.751Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.751Z\",\n            \"updated\": \"2019-07-07T06:39:56.751Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 10th June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-10th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.751Z\",\n            \"target_date\": \"2018-06-10\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6lj2h2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/130315/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-10th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3911,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.786Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.786Z\",\n            \"updated\": \"2019-07-07T06:39:56.786Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 3rd June 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-3rd-june-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.786Z\",\n            \"target_date\": \"2018-06-03\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kyihe\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/129845/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-3rd-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3912,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.821Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.821Z\",\n            \"updated\": \"2019-07-07T06:39:56.822Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 27th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-27th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.822Z\",\n            \"target_date\": \"2018-05-27\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6kfxj6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/129344/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-27th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3913,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.869Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.869Z\",\n            \"updated\": \"2019-07-07T06:39:56.869Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 20th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-20th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.869Z\",\n            \"target_date\": \"2018-05-20\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jx509\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128946/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-20th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3914,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.904Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.904Z\",\n            \"updated\": \"2019-07-07T06:39:56.904Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Nawaz Sharif's Statement) \\u2013 13th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-nawaz-sharifs-statement-13th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.904Z\",\n            \"target_date\": \"2018-05-13\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6jfoaw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128503/meray-mutabiq-with-hassan-nisar-nawaz-sharif-s-statement-13th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3915,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.942Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.941Z\",\n            \"updated\": \"2019-07-07T06:39:56.942Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Current Issues) - 7th May 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-7th-may-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.942Z\",\n            \"target_date\": \"2018-05-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6j1kad\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/128143/meray-mutabiq-with-hassan-nisar-current-issues-7th-may-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3916,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:56.974Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:56.974Z\",\n            \"updated\": \"2019-07-07T06:39:56.974Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 29th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-29th-april-2018\",\n            \"publish_date\": \"2019-07-07T06:39:56.974Z\",\n            \"target_date\": \"2018-04-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6imf7x\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/127670/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-29th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3917,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.017Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.017Z\",\n            \"updated\": \"2019-07-07T06:39:57.017Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 22nd April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-22nd-april-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.017Z\",\n            \"target_date\": \"2018-04-23\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6i84cw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/127244/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-22nd-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3918,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.076Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.076Z\",\n            \"updated\": \"2019-07-07T06:39:57.076Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 15th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-15th-april-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.076Z\",\n            \"target_date\": \"2018-04-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6husot\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126808/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-15th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3919,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.106Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.106Z\",\n            \"updated\": \"2019-07-07T06:39:57.106Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Different Issues) \\u2013 8th April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-8th-april-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.106Z\",\n            \"target_date\": \"2018-04-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6hi1px\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126374/meray-mutabiq-with-hassan-nisar-discussion-on-different-issues-8th-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3920,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.173Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.173Z\",\n            \"updated\": \"2019-07-07T06:39:57.173Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 1st April 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-1st-april-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.173Z\",\n            \"target_date\": \"2018-04-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6h6cwf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/126026/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-1st-april-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3921,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.200Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.200Z\",\n            \"updated\": \"2019-07-07T06:39:57.200Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 11th March 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-march-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.200Z\",\n            \"target_date\": \"2018-03-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6g474n\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/124749/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-march-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3922,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.324Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.284Z\",\n            \"updated\": \"2019-07-07T06:39:57.324Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues)  \\u2013 4th March 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-4th-march-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.324Z\",\n            \"target_date\": \"2018-03-05\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6fmh0t\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/124331/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-4th-march-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3923,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.546Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.478Z\",\n            \"updated\": \"2019-07-07T06:39:57.546Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Different Issues) \\u2013 25th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-different-issues-25th-february-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.546Z\",\n            \"target_date\": \"2018-02-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6f9wb3\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123953/meray-mutabiq-with-hassan-nisar-different-issues-25th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3924,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:57.928Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:57.927Z\",\n            \"updated\": \"2019-07-07T06:39:57.928Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 18th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-18th-february-2018\",\n            \"publish_date\": \"2019-07-07T06:39:57.928Z\",\n            \"target_date\": \"2018-02-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ey6xo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123540/meray-mutabiq-with-hassan-nisar-current-issues-18th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3925,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.019Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:58.018Z\",\n            \"updated\": \"2019-07-07T06:39:58.019Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq With Hassan Nisar (Discussion on Current Issues) \\u2013 11th February 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-february-2018\",\n            \"publish_date\": \"2019-07-07T06:39:58.019Z\",\n            \"target_date\": \"2018-02-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6elfon\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/123170/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-11th-february-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3926,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.115Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:58.115Z\",\n            \"updated\": \"2019-07-07T06:39:58.116Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on current issues) \\u2013 28th January 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-28th-january-2018\",\n            \"publish_date\": \"2019-07-07T06:39:58.116Z\",\n            \"target_date\": \"2018-01-29\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6du35d\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/122327/meray-mutabiq-with-hassan-nisar-28th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3927,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.196Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:58.196Z\",\n            \"updated\": \"2019-07-07T06:39:58.196Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq (Discussion on Current Issues) \\u2013 21st January 2018\",\n            \"slug\": \"meray-mutabiq-discussion-on-current-issues-21st-january-2018\",\n            \"publish_date\": \"2019-07-07T06:39:58.196Z\",\n            \"target_date\": \"2018-01-22\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6dgl9u\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/121893/meray-mutabiq-discussion-on-current-issues-21st-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3928,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.273Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:58.266Z\",\n            \"updated\": \"2019-07-07T06:39:58.273Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Kasur Incident & Other Issues) \\u2013 14th January 2018\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-kasur-incident-other-issues-14th-january-2018\",\n            \"publish_date\": \"2019-07-07T06:39:58.273Z\",\n            \"target_date\": \"2018-01-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6d3u6p\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/121459/meray-mutabiq-with-hassan-nisar-kasur-incident-other-issues-14th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3929,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.335Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:58.334Z\",\n            \"updated\": \"2019-07-07T06:39:58.335Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Mere Mutabiq With Hassan Nisar (Discussion on Current Issues) - 7th January 2018\",\n            \"slug\": \"mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-7th-january-2018\",\n            \"publish_date\": \"2019-07-07T06:39:58.335Z\",\n            \"target_date\": \"2018-01-08\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6creiu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120829/mere-mutabiq-with-hassan-nisar-discussion-on-current-issues-7th-january-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3930,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.478Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:58.423Z\",\n            \"updated\": \"2019-07-07T06:39:58.478Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Discussion on Current Issues) \\u2013 31st December 2017\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-31st-december-2017\",\n            \"publish_date\": \"2019-07-07T06:39:58.478Z\",\n            \"target_date\": \"2017-12-31\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6cgtqb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120471/meray-mutabiq-with-hassan-nisar-discussion-on-current-issues-31st-december-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3931,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.570Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:58.569Z\",\n            \"updated\": \"2019-07-07T06:39:58.570Z\",\n            \"extra_data\": {\n                \"host\": \"Hassan Nisar\",\n                \"job_id\": 133,\n                \"feed_id\": 5,\n                \"feed_name\": \"unewstv - Meray Mutabiq With Hassan Nisar\",\n                \"show_name\": \"Meray Mutabiq With Hassan Nisar\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Meray Mutabiq with Hassan Nisar (Current Issues) \\u2013 24th December 2017\",\n            \"slug\": \"meray-mutabiq-with-hassan-nisar-current-issues-24th-december-2017\",\n            \"publish_date\": \"2019-07-07T06:39:58.570Z\",\n            \"target_date\": \"2017-12-25\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6c69o7\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"source_detail\": \"http://www.unewstv.com/120027/meray-mutabiq-with-hassan-nisar-current-issues-24th-december-2017\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 3,\n            \"tags\": \"[\\\"Hassan Nisar\\\", \\\"Meray Mutabiq With Hassan Nisar\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3932,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.102Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.101Z\",\n            \"updated\": \"2019-07-07T06:39:59.110Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Judge's Leaked Video) - 6th July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-judges-leaked-video-6th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.111Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"https://www.youtube.com/watch/OJ7PM6ULCsQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153645/live-with-dr-shahid-masood-judge-s-leaked-video-6th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3933,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.158Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.158Z\",\n            \"updated\": \"2019-07-07T06:39:59.158Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Kutte Aur Makhi Ki Jang) - 5th July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-kutte-aur-makhi-ki-jang-5th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.158Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"https://www.youtube.com/watch/FSQ_6QmyD8g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153581/live-with-dr-shahid-masood-kutte-aur-makhi-ki-jang-5th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3934,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.199Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.198Z\",\n            \"updated\": \"2019-07-07T06:39:59.199Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Rook Saku Tu Rook Lo) - 4th July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-rook-saku-tu-rook-lo-4th-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.199Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"https://www.youtube.com/watch/5ni2vJwrEdw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153517/live-with-dr-shahid-masood-rook-saku-tu-rook-lo-4th-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3935,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.228Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.228Z\",\n            \"updated\": \"2019-07-07T06:39:59.228Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Benami Aur Badnami) - 3rd July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-benami-aur-badnami-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.228Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/FOaXXdi-8TE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153435/live-with-dr-shahid-masood-benami-aur-badnami-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3936,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.269Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.269Z\",\n            \"updated\": \"2019-07-07T06:39:59.270Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr Shahid Masood (Imran Khan Vs Others) - 2nd July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-vs-others-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.270Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/CMOcCrpLnK0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153369/live-with-dr-shahid-masood-imran-khan-vs-others-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3937,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.298Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.298Z\",\n            \"updated\": \"2019-07-07T06:39:59.298Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan Aur Naya Siasi Manzarnama) - 1st July 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-aur-naya-siasi-manzarnama-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.298Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/JbjG8ceoee8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153297/live-with-dr-shahid-masood-imran-khan-aur-naya-siasi-manzarnama-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3938,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.344Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.343Z\",\n            \"updated\": \"2019-07-07T06:39:59.344Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan Aur Loti Hui Daulat) - 30th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.344Z\",\n            \"target_date\": \"2019-06-30\",\n            \"text\": \"https://www.youtube.com/watch/u8rlFF5rH-E\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153227/live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3939,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.381Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.381Z\",\n            \"updated\": \"2019-07-07T06:39:59.381Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Muashi Dehshatgardi Ka Bharpoor Waar) - 29th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-muashi-dehshatgardi-ka-bharpoor-waar-29th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.381Z\",\n            \"target_date\": \"2019-06-29\",\n            \"text\": \"https://www.youtube.com/watch/plS_RS9Bsg0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153167/live-with-dr-shahid-masood-muashi-dehshatgardi-ka-bharpoor-waar-29th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3940,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.411Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.410Z\",\n            \"updated\": \"2019-07-07T06:39:59.411Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Govt And Army on Same Page) - 28th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-govt-and-army-on-same-page-28th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.411Z\",\n            \"target_date\": \"2019-06-28\",\n            \"text\": \"https://www.youtube.com/watch/wvCNG36Q4FA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153102/live-with-dr-shahid-masood-govt-and-army-on-same-page-28th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3941,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.453Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.453Z\",\n            \"updated\": \"2019-07-07T06:39:59.453Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Imran Khan & Economic Terrorism) - 27th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-economic-terrorism-27th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.453Z\",\n            \"target_date\": \"2019-06-27\",\n            \"text\": \"https://www.youtube.com/watch/ga4jGny3A1A\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/153032/live-with-dr-shahid-masood-imran-khan-economic-terrorism-27th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3942,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.490Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.489Z\",\n            \"updated\": \"2019-07-07T06:39:59.490Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Sahiad Masood (Kia Imran Khan Ke Imtihan Khatam Ho Gaye) - 26th June 2019\",\n            \"slug\": \"live-with-dr-sahiad-masood-kia-imran-khan-ke-imtihan-khatam-ho-gaye-26th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.490Z\",\n            \"target_date\": \"2019-06-26\",\n            \"text\": \"https://www.youtube.com/watch/EhANNbeuU4U\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152960/live-with-dr-sahiad-masood-kia-imran-khan-ke-imtihan-khatam-ho-gaye-26th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3943,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.519Z\",\n            \"updated\": \"2019-07-07T06:39:59.526Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Nahi Maane) - 25th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-nahi-maane-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.526Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/r12YYNoQlns\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152889/live-with-dr-shahid-masood-imran-khan-nahi-maane-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3944,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.584Z\",\n            \"updated\": \"2019-07-07T06:39:59.584Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Misaq e Maeeshat Aur Imran Khan) - 24th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-misaq-e-maeeshat-aur-imran-khan-24th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.584Z\",\n            \"target_date\": \"2019-06-24\",\n            \"text\": \"https://www.youtube.com/watch/7aJQZiWQBOI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152819/live-with-dr-shahid-masood-misaq-e-maeeshat-aur-imran-khan-24th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3945,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.627Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.627Z\",\n            \"updated\": \"2019-07-07T06:39:59.627Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Misaq e Maeeshat Aur Ahtasab) - 23rd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-misaq-e-maeeshat-aur-ahtasab-23rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.627Z\",\n            \"target_date\": \"2019-06-23\",\n            \"text\": \"https://www.youtube.com/watch/1XIYh-Cxxek\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152767/live-with-dr-shahid-masood-misaq-e-maeeshat-aur-ahtasab-23rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3946,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.673Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.673Z\",\n            \"updated\": \"2019-07-07T06:39:59.673Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Maryam Nawaz Vs Shahbaz Sharif) - 22nd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.673Z\",\n            \"target_date\": \"2019-06-22\",\n            \"text\": \"https://www.youtube.com/watch/PtcQngWr8ho\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152706/live-with-dr-shahid-masood-maryam-nawaz-vs-shahbaz-sharif-22nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3947,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.707Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.707Z\",\n            \"updated\": \"2019-07-07T06:39:59.707Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Halaat e Hazira, Bari Tabdeeli) - 21st June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-halaat-e-hazira-bari-tabdeeli-21st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.707Z\",\n            \"target_date\": \"2019-06-21\",\n            \"text\": \"https://www.youtube.com/watch/88bW0825kGA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152629/live-with-dr-shahid-masood-halaat-e-hazira-bari-tabdeeli-21st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3948,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.761Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.761Z\",\n            \"updated\": \"2019-07-07T06:39:59.761Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Kia Huwa Taira Wada) - 20th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-kia-huwa-taira-wada-20th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.761Z\",\n            \"target_date\": \"2019-06-20\",\n            \"text\": \"https://www.youtube.com/watch/4HtyUbVMq8Q\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152573/live-with-dr-shahid-masood-kia-huwa-taira-wada-20th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3949,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.795Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.795Z\",\n            \"updated\": \"2019-07-07T06:39:59.795Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Kasheedagi) - 19th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-kasheedagi-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.795Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/HuJGbcJBgOA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152505/live-with-dr-shahid-masood-kasheedagi-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3950,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.822Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.822Z\",\n            \"updated\": \"2019-07-07T06:39:59.822Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Bohran Ya Tasadam) - 18th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-bohran-ya-tasadam-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.822Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/THbiK48o1Tk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152450/live-with-dr-shahid-masood-bohran-ya-tasadam-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3951,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.870Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.870Z\",\n            \"updated\": \"2019-07-07T06:39:59.870Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Game of Power) - 17th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-game-of-power-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.870Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/bC65EqAc3BQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152378/live-with-dr-shahid-masood-game-of-power-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3952,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.926Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.925Z\",\n            \"updated\": \"2019-07-07T06:39:59.926Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Ahtajaj Aur Ahtasab) - 16th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ahtajaj-aur-ahtasab-16th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.926Z\",\n            \"target_date\": \"2019-06-16\",\n            \"text\": \"https://www.youtube.com/watch/cNWt-TJldaE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152336/live-with-dr-shahid-masood-ahtajaj-aur-ahtasab-16th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3953,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:59.978Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:39:59.978Z\",\n            \"updated\": \"2019-07-07T06:39:59.978Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (More Arrests) - 15th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-more-arrests-15th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:39:59.978Z\",\n            \"target_date\": \"2019-06-15\",\n            \"text\": \"https://www.youtube.com/watch/fZc2uI7erUo\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152285/live-with-dr-shahid-masood-more-arrests-15th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3954,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.025Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.020Z\",\n            \"updated\": \"2019-07-07T06:40:00.025Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Who Will Be Arrested Next) - 14th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-who-will-be-arrested-next-14th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.025Z\",\n            \"target_date\": \"2019-06-14\",\n            \"text\": \"https://www.youtube.com/watch/m8dBai6Tt-I\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152230/live-with-dr-shahid-masood-who-will-be-arrested-next-14th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3955,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.070Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.070Z\",\n            \"updated\": \"2019-07-07T06:40:00.070Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Minus All..???) - 13th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-minus-all-13th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.070Z\",\n            \"target_date\": \"2019-06-13\",\n            \"text\": \"https://www.youtube.com/watch/XsC-VQhOPnc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152175/live-with-dr-shahid-masood-minus-all-13th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3956,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.131Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.130Z\",\n            \"updated\": \"2019-07-07T06:40:00.131Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Vs Others) - 12th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-vs-others-12th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.131Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/wIHMxmdvXAE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152112/live-with-dr-shahid-masood-imran-khan-vs-others-12th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3957,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.230Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.230Z\",\n            \"updated\": \"2019-07-07T06:40:00.230Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Budget, Arrests And Movement) - 11th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-budget-arrests-and-movement-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.230Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/N2Ivnx-7nPk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/152061/live-with-dr-shahid-masood-budget-arrests-and-movement-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3958,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.307Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.307Z\",\n            \"updated\": \"2019-07-07T06:40:00.308Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Asif Zardari Arrested) - 10th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-asif-zardari-arrested-10th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.308Z\",\n            \"target_date\": \"2019-06-10\",\n            \"text\": \"https://www.youtube.com/watch/OOO4EOTi-TE\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151988/live-with-dr-shahid-masood-asif-zardari-arrested-10th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3959,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.377Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.377Z\",\n            \"updated\": \"2019-07-07T06:40:00.377Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Bohran Aur Tasadam) - 9th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-bohran-aur-tasadam-9th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.377Z\",\n            \"target_date\": \"2019-06-09\",\n            \"text\": \"https://www.youtube.com/watch/AkiHALPvqPY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151921/live-with-dr-shahid-masood-bohran-aur-tasadam-9th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3960,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.463Z\",\n            \"updated\": \"2019-07-07T06:40:00.464Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Ajeeb Loog Hain) - 8th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-ajeeb-loog-hain-8th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.464Z\",\n            \"target_date\": \"2019-06-08\",\n            \"text\": \"https://www.youtube.com/watch/UepLG2cqGic\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151878/live-with-dr-shahid-masood-ajeeb-loog-hain-8th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3961,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.591Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.591Z\",\n            \"updated\": \"2019-07-07T06:40:00.591Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Third Day Eid Special) - 7th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-third-day-eid-special-7th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.591Z\",\n            \"target_date\": \"2019-06-07\",\n            \"text\": \"https://www.youtube.com/watch/IW5u_G-hd6g\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151831/live-with-dr-shahid-masood-third-day-eid-special-7th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3962,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.720Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.720Z\",\n            \"updated\": \"2019-07-07T06:40:00.720Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live with Dr. Shahid Masood (Second Day Eid Special) - 6th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-second-day-eid-special-6th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.720Z\",\n            \"target_date\": \"2019-06-06\",\n            \"text\": \"https://www.youtube.com/watch/12C8u9B-sUI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151800/live-with-dr-shahid-masood-second-day-eid-special-6th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3963,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.837Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.837Z\",\n            \"updated\": \"2019-07-07T06:40:00.837Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Eid Special Show With Dr. Shahid Masood (Day-1) - 5th June 2019\",\n            \"slug\": \"eid-special-show-with-dr-shahid-masood-day-1-5th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.837Z\",\n            \"target_date\": \"2019-06-05\",\n            \"text\": \"https://www.youtube.com/watch/ukt_nmw3qd0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151757/eid-special-show-with-dr-shahid-masood-day-1-5th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3964,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:00.948Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:00.948Z\",\n            \"updated\": \"2019-07-07T06:40:00.948Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Eid Ke Baad Halaat) - 4th June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-eid-ke-baad-halaat-4th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:00.948Z\",\n            \"target_date\": \"2019-06-04\",\n            \"text\": \"https://www.youtube.com/watch/7idGHZK4uy4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151718/live-with-dr-shahid-masood-eid-ke-baad-halaat-4th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3965,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.066Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.046Z\",\n            \"updated\": \"2019-07-07T06:40:01.066Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Mega Corruption Cases) - 3rd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-mega-corruption-cases-3rd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.066Z\",\n            \"target_date\": \"2019-06-03\",\n            \"text\": \"https://www.youtube.com/watch/36hFLy1ZVGc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151684/live-with-dr-shahid-masood-mega-corruption-cases-3rd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3966,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.162Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.162Z\",\n            \"updated\": \"2019-07-07T06:40:01.162Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Takht Ya Takhta) - 2nd June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-takht-ya-takhta-2nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.162Z\",\n            \"target_date\": \"2019-06-02\",\n            \"text\": \"https://www.youtube.com/watch/ozO-RtyNXqs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151650/live-with-dr-shahid-masood-takht-ya-takhta-2nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3967,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.217Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.217Z\",\n            \"updated\": \"2019-07-07T06:40:01.217Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Last Balls of Match) - 1st June 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-last-balls-of-match-1st-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.217Z\",\n            \"target_date\": \"2019-06-01\",\n            \"text\": \"https://www.youtube.com/watch/EPW8sbDatfs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151599/live-with-dr-shahid-masood-last-balls-of-match-1st-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3968,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.282Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.282Z\",\n            \"updated\": \"2019-07-07T06:40:01.282Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Trembling, Shaking Democracy) - 31st May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-trembling-shaking-democracy-31st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.282Z\",\n            \"target_date\": \"2019-05-31\",\n            \"text\": \"https://www.youtube.com/watch/cD_MOrHJvK4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151549/live-with-dr-shahid-masood-trembling-shaking-democracy-31st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3969,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.314Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.313Z\",\n            \"updated\": \"2019-07-07T06:40:01.314Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Hukamran Aur Riasat) - 30th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-hukamran-aur-riasat-30th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.314Z\",\n            \"target_date\": \"2019-05-30\",\n            \"text\": \"https://www.youtube.com/watch/nkx_AFo9wkQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151487/live-with-dr-shahid-masood-hukamran-aur-riasat-30th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3970,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.368Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.368Z\",\n            \"updated\": \"2019-07-07T06:40:01.368Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Why Imran Khan Is Silent?) - 29th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-why-imran-khan-is-silent-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.368Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/oFucibuRxvI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151428/live-with-dr-shahid-masood-why-imran-khan-is-silent-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3971,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.404Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.404Z\",\n            \"updated\": \"2019-07-07T06:40:01.404Z\",\n            \"extra_data\": {\n                \"host\": \"Dr. Shahid Masood\",\n                \"job_id\": 134,\n                \"feed_id\": 6,\n                \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n                \"show_name\": \"Live with Dr. Shahid Masood\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Live With Dr. Shahid Masood (Imran Khan Ki Pur Asrar Khamoshi) - 28th May 2019\",\n            \"slug\": \"live-with-dr-shahid-masood-imran-khan-ki-pur-asrar-khamoshi-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.404Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/C6MHdDy7xMg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"source_detail\": \"http://www.unewstv.com/151382/live-with-dr-shahid-masood-imran-khan-ki-pur-asrar-khamoshi-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 4,\n            \"tags\": \"[\\\"Dr. Shahid Masood\\\", \\\"Live with Dr. Shahid Masood\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3972,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.600Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.599Z\",\n            \"updated\": \"2019-07-07T06:40:01.600Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas ki Baat (Imran Khan's Clear Stance About NRO) \\u2013 3rd July 2019\",\n            \"slug\": \"apas-ki-baat-imran-khans-clear-stance-about-nro-3rd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.600Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"https://www.youtube.com/watch/u6UWEz2EoBQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/153472/apas-ki-baat-imran-khan-s-clear-stance-about-nro-3rd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3973,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.635Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.634Z\",\n            \"updated\": \"2019-07-07T06:40:01.635Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Rana Sanaullah Ki Giraftari) - 2nd July 2019\",\n            \"slug\": \"aapas-ki-baat-rana-sanaullah-ki-giraftari-2nd-july-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.635Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"https://www.youtube.com/watch/dn7cH7JMLHQ\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/153399/aapas-ki-baat-rana-sanaullah-ki-giraftari-2nd-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3974,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.677Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.676Z\",\n            \"updated\": \"2019-07-07T06:40:01.677Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (Rana Sanaullah Arrested) \\u2013 1st July 2019\",\n            \"slug\": \"apas-ki-baat-rana-sanaullah-arrested-1st-july-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.677Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"https://www.youtube.com/watch/8AN7n93207Y\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/153333/apas-ki-baat-rana-sanaullah-arrested-1st-july-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3975,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.725Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.725Z\",\n            \"updated\": \"2019-07-07T06:40:01.725Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas ki Baat (Babar Awan Nandipur Scandal Se Bari) \\u2013 25th June 2019\",\n            \"slug\": \"apas-ki-baat-babar-awan-nandipur-scandal-se-bari-25th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.725Z\",\n            \"target_date\": \"2019-06-25\",\n            \"text\": \"https://www.youtube.com/watch/PC5KmUpSWEw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/152915/apas-ki-baat-babar-awan-nandipur-scandal-se-bari-25th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3976,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.838Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.838Z\",\n            \"updated\": \"2019-07-07T06:40:01.838Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (Production Orders Ka Mutalba) \\u2013 19th June 2019\",\n            \"slug\": \"apas-ki-baat-production-orders-ka-mutalba-19th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.838Z\",\n            \"target_date\": \"2019-06-19\",\n            \"text\": \"https://www.youtube.com/watch/nnK0L94foMM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/152534/apas-ki-baat-production-orders-ka-mutalba-19th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3977,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.880Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.879Z\",\n            \"updated\": \"2019-07-07T06:40:01.880Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (Has PM Stopped From Issuing Production Order) \\u2013 18th June 2019\",\n            \"slug\": \"apas-ki-baat-has-pm-stopped-from-issuing-production-order-18th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.880Z\",\n            \"target_date\": \"2019-06-18\",\n            \"text\": \"https://www.youtube.com/watch/s9VADDuKTv4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/152462/apas-ki-baat-has-pm-stopped-from-issuing-production-order-18th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3978,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.949Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:01.948Z\",\n            \"updated\": \"2019-07-07T06:40:01.949Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas ki Baat (Parliament Mein Hungama Arai) \\u2013 17th June 2019\",\n            \"slug\": \"apas-ki-baat-parliament-mein-hungama-arai-17th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:01.949Z\",\n            \"target_date\": \"2019-06-17\",\n            \"text\": \"https://www.youtube.com/watch/k34T-7XiPyk\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/152422/apas-ki-baat-parliament-mein-hungama-arai-17th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3979,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:02.232Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:02.231Z\",\n            \"updated\": \"2019-07-07T06:40:02.232Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Wazir e Azam Ka Qaum Se Khitab) - 12nd June 2019\",\n            \"slug\": \"aapas-ki-baat-wazir-e-azam-ka-qaum-se-khitab-12nd-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:02.232Z\",\n            \"target_date\": \"2019-06-12\",\n            \"text\": \"https://www.youtube.com/watch/Q2TiG3baFfM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/152144/aapas-ki-baat-wazir-e-azam-ka-qaum-se-khitab-12nd-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3980,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:02.912Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:02.846Z\",\n            \"updated\": \"2019-07-07T06:40:02.912Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Corrupt Anasar Salakhon Ke Peeche) - 11th June 2019\",\n            \"slug\": \"aapas-ki-baat-corrupt-anasar-salakhon-ke-peeche-11th-june-2019\",\n            \"publish_date\": \"2019-07-07T06:40:02.912Z\",\n            \"target_date\": \"2019-06-11\",\n            \"text\": \"https://www.youtube.com/watch/QOJIYb9oGfs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/152083/aapas-ki-baat-corrupt-anasar-salakhon-ke-peeche-11th-june-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3981,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:03.351Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:03.350Z\",\n            \"updated\": \"2019-07-07T06:40:03.352Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (Opposition Active Against Govt) \\u2013 29th May 2019\",\n            \"slug\": \"apas-ki-baat-opposition-active-against-govt-29th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:03.352Z\",\n            \"target_date\": \"2019-05-29\",\n            \"text\": \"https://www.youtube.com/watch/UoH-MPfJOhg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/151439/apas-ki-baat-opposition-active-against-govt-29th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3982,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:03.612Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:03.612Z\",\n            \"updated\": \"2019-07-07T06:40:03.612Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Imran Khan's Helicopter Case) - 28th May 2019\",\n            \"slug\": \"aapas-ki-baat-imran-khans-helicopter-case-28th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:03.612Z\",\n            \"target_date\": \"2019-05-28\",\n            \"text\": \"https://www.youtube.com/watch/WTGWhv9SwsI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/151404/aapas-ki-baat-imran-khan-s-helicopter-case-28th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3983,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:03.730Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:03.723Z\",\n            \"updated\": \"2019-07-07T06:40:03.730Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Chairman NAB Interview Controversy) \\u2013 22nd May 2019\",\n            \"slug\": \"aapas-ki-baat-chairman-nab-interview-controversy-22nd-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:03.730Z\",\n            \"target_date\": \"2019-05-22\",\n            \"text\": \"https://www.youtube.com/watch/9xka99sFoRM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/151073/aapas-ki-baat-chairman-nab-interview-controversy-22nd-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3984,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:04.165Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:04.165Z\",\n            \"updated\": \"2019-07-07T06:40:04.165Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (Opposition Getting United Against Govt) \\u2013 21st May 2019\",\n            \"slug\": \"apas-ki-baat-opposition-getting-united-against-govt-21st-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:04.165Z\",\n            \"target_date\": \"2019-05-21\",\n            \"text\": \"https://www.youtube.com/watch/rHlqO8TTEMs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/151010/apas-ki-baat-opposition-getting-united-against-govt-21st-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3985,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:04.293Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:04.293Z\",\n            \"updated\": \"2019-07-07T06:40:04.293Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (Challenges For Govt After Budget) \\u2013 15th May 2019\",\n            \"slug\": \"apas-ki-baat-challenges-for-govt-after-budget-15th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:04.293Z\",\n            \"target_date\": \"2019-05-15\",\n            \"text\": \"https://www.youtube.com/watch/gQzp8gqHylY\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/150693/apas-ki-baat-challenges-for-govt-after-budget-15th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3986,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:04.459Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:04.459Z\",\n            \"updated\": \"2019-07-07T06:40:04.459Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas ki baat with Najam Sethi (Tax Amnesty Scheme) \\u2013 14th May 2019\",\n            \"slug\": \"apas-ki-baat-with-najam-sethi-tax-amnesty-scheme-14th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:04.459Z\",\n            \"target_date\": \"2019-05-14\",\n            \"text\": \"https://www.youtube.com/watch/DxnQDxWePz8\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/150621/apas-ki-baat-with-najam-sethi-tax-amnesty-scheme-14th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3987,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:05.711Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:05.710Z\",\n            \"updated\": \"2019-07-07T06:40:05.711Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (Awam Mehngai Se Pareshan) \\u2013 8th May 2019\",\n            \"slug\": \"apas-ki-baat-awam-mehngai-se-pareshan-8th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:05.711Z\",\n            \"target_date\": \"2019-05-08\",\n            \"text\": \"https://www.youtube.com/watch/YEP04YsQ8rg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/150249/apas-ki-baat-awam-mehngai-se-pareshan-8th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3988,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:05.826Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:05.826Z\",\n            \"updated\": \"2019-07-07T06:40:05.826Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Apas Ki Baat (KIa PTI Hakumat Khatre Mein) \\u2013 6th May 2019\",\n            \"slug\": \"apas-ki-baat-kia-pti-hakumat-khatre-mein-6th-may-2019\",\n            \"publish_date\": \"2019-07-07T06:40:05.826Z\",\n            \"target_date\": \"2019-05-06\",\n            \"text\": \"https://www.youtube.com/watch/kCaDwqjp-pM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/150125/apas-ki-baat-kia-pti-hakumat-khatre-mein-6th-may-2019\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3989,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:05.912Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:05.896Z\",\n            \"updated\": \"2019-07-07T06:40:05.912Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Kia CM Ke Khilaf Karwai Honi Chahiye) - 3rd September 2018\",\n            \"slug\": \"aapas-ki-baat-kia-cm-ke-khilaf-karwai-honi-chahiye-3rd-september-2018\",\n            \"publish_date\": \"2019-07-07T06:40:05.912Z\",\n            \"target_date\": \"2018-09-03\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6t2020\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/135570/aapas-ki-baat-kia-cm-ke-khilaf-karwai-honi-chahiye-3rd-september-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3990,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:05.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:05.980Z\",\n            \"updated\": \"2019-07-07T06:40:05.981Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Sawabdeedi Fund Ki Haqeeqat) - 29th August 2018\",\n            \"slug\": \"aapas-ki-baat-sawabdeedi-fund-ki-haqeeqat-29th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:05.981Z\",\n            \"target_date\": \"2018-08-29\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6stx9x\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/135218/aapas-ki-baat-sawabdeedi-fund-ki-haqeeqat-29th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3991,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.049Z\",\n            \"updated\": \"2019-07-07T06:40:06.050Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Hakumat Ki Helicopter Ki Sawariyan) - 28th August 2018\",\n            \"slug\": \"aapas-ki-baat-hakumat-ki-helicopter-ki-sawariyan-28th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.050Z\",\n            \"target_date\": \"2018-08-28\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6srqvf\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/135147/aapas-ki-baat-hakumat-ki-helicopter-ki-sawariyan-28th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3992,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.188Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.188Z\",\n            \"updated\": \"2019-07-07T06:40:06.188Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Khawar Maneka, DPO Issue) - 27th August 2018\",\n            \"slug\": \"aapas-ki-baat-khawar-maneka-dpo-issue-27th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.188Z\",\n            \"target_date\": \"2018-08-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6spc4l\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/135075/aapas-ki-baat-khawar-maneka-dpo-issue-27th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3993,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.317Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.317Z\",\n            \"updated\": \"2019-07-07T06:40:06.317Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Imran Khan's Promises) - 20th August 2018\",\n            \"slug\": \"aapas-ki-baat-imran-khans-promises-20th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.317Z\",\n            \"target_date\": \"2018-08-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6sblsl\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/134694/aapas-ki-baat-imran-khan-s-promises-20th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3994,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.393Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.393Z\",\n            \"updated\": \"2019-07-07T06:40:06.393Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Differences Between PPP & PMLN) - 15th August 2018\",\n            \"slug\": \"aapas-ki-baat-differences-between-ppp-pmln-15th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.393Z\",\n            \"target_date\": \"2018-08-15\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6s1ucw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/134350/aapas-ki-baat-differences-between-ppp-pmln-15th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3995,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.443Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.426Z\",\n            \"updated\": \"2019-07-07T06:40:06.443Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Nai Qanoon Saz Assembly Ka Qayam) - 13th August 2018\",\n            \"slug\": \"aapas-ki-baat-nai-qanoon-saz-assembly-ka-qayam-13th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.443Z\",\n            \"target_date\": \"2018-08-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ry5qu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/134222/aapas-ki-baat-nai-qanoon-saz-assembly-ka-qayam-13th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3996,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.489Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.488Z\",\n            \"updated\": \"2019-07-07T06:40:06.489Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Mehmood Khan New CM KPK) - 8th August 2018\",\n            \"slug\": \"aapas-ki-baat-mehmood-khan-new-cm-kpk-8th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.489Z\",\n            \"target_date\": \"2018-08-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ro4ve\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/133903/aapas-ki-baat-mehmood-khan-new-cm-kpk-8th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3997,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.564Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.563Z\",\n            \"updated\": \"2019-07-07T06:40:06.564Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Imran Khan Ki NAB Mein Paishi) - 7th August 2018\",\n            \"slug\": \"aapas-ki-baat-imran-khan-ki-nab-mein-paishi-7th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.564Z\",\n            \"target_date\": \"2018-08-07\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6rloxb\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/133836/aapas-ki-baat-imran-khan-ki-nab-mein-paishi-7th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3998,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.599Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.599Z\",\n            \"updated\": \"2019-07-07T06:40:06.599Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Imran Khan Refused Protocol) - 6th August 2018\",\n            \"slug\": \"aapas-ki-baat-imran-khan-refused-protocol-6th-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.599Z\",\n            \"target_date\": \"2018-08-06\",\n            \"text\": \"//www.dailymotion.com/watch/video/x6rjtnm\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/133769/aapas-ki-baat-imran-khan-refused-protocol-6th-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 3999,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.654Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.654Z\",\n            \"updated\": \"2019-07-07T06:40:06.654Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Allegations of Rigging) - 1st August 2018\",\n            \"slug\": \"aapas-ki-baat-allegations-of-rigging-1st-august-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.654Z\",\n            \"target_date\": \"2018-08-01\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6r33my\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/133445/aapas-ki-baat-allegations-of-rigging-1st-august-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4000,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.697Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.697Z\",\n            \"updated\": \"2019-07-07T06:40:06.697Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Nawaz Sharif Ka Adiala Jail Per Asrar Kyun?) - 31st July 2018\",\n            \"slug\": \"aapas-ki-baat-nawaz-sharif-ka-adiala-jail-per-asrar-kyun-31st-july-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.697Z\",\n            \"target_date\": \"2018-07-31\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qyggw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/133379/aapas-ki-baat-nawaz-sharif-ka-adiala-jail-per-asrar-kyun-31st-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4001,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.721Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.721Z\",\n            \"updated\": \"2019-07-07T06:40:06.721Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Election 2018, Rigging Allegations) - 30th July 2018\",\n            \"slug\": \"aapas-ki-baat-election-2018-rigging-allegations-30th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.721Z\",\n            \"target_date\": \"2018-07-30\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6qtby0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/133314/aapas-ki-baat-election-2018-rigging-allegations-30th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4002,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.765Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.764Z\",\n            \"updated\": \"2019-07-07T06:40:06.765Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Reham Khan Special Interview) - 12th July 2018\",\n            \"slug\": \"aapas-ki-baat-reham-khan-special-interview-12th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.765Z\",\n            \"target_date\": \"2018-07-12\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ofroj\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/132179/aapas-ki-baat-reham-khan-special-interview-12th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4003,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.797Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.797Z\",\n            \"updated\": \"2019-07-07T06:40:06.797Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Hamza Shahbaz Exclusive Interview) - 8th July 2018\",\n            \"slug\": \"aapas-ki-baat-hamza-shahbaz-exclusive-interview-8th-july-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.797Z\",\n            \"target_date\": \"2018-07-08\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6nzfrt\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/131938/aapas-ki-baat-hamza-shahbaz-exclusive-interview-8th-july-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4004,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.827Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.826Z\",\n            \"updated\": \"2019-07-07T06:40:06.827Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Shahid Khaqan Abbasi Disqualified) - 27th June 2018\",\n            \"slug\": \"aapas-ki-baat-shahid-khaqan-abbasi-disqualified-27th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.827Z\",\n            \"target_date\": \"2018-06-27\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mxyuv\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/131277/aapas-ki-baat-shahid-khaqan-abbasi-disqualified-27th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4005,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.892Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.892Z\",\n            \"updated\": \"2019-07-07T06:40:06.892Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (NAB Ki Karwayian) - 26th June 2018\",\n            \"slug\": \"aapas-ki-baat-nab-ki-karwayian-26th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.892Z\",\n            \"target_date\": \"2018-06-26\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mum6a\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/131216/aapas-ki-baat-nab-ki-karwayian-26th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4006,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.932Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.931Z\",\n            \"updated\": \"2019-07-07T06:40:06.932Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas KI Baat (Kaun Jeete Ga Election) - 25th June 2018\",\n            \"slug\": \"aapas-ki-baat-kaun-jeete-ga-election-25th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.932Z\",\n            \"target_date\": \"2018-06-25\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mribg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/131156/aapas-ki-baat-kaun-jeete-ga-election-25th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4007,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:06.983Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:06.983Z\",\n            \"updated\": \"2019-07-07T06:40:06.983Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Only Five Weeks Left in Elections) - 20th June 2018\",\n            \"slug\": \"aapas-ki-baat-only-five-weeks-left-in-elections-20th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:40:06.983Z\",\n            \"target_date\": \"2018-06-20\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6mciqu\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/130881/aapas-ki-baat-only-five-weeks-left-in-elections-20th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4008,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:07.042Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:07.042Z\",\n            \"updated\": \"2019-07-07T06:40:07.042Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (PTI Mein Tickets Ki Taqseem Ka Muamla) - 19th June 2018\",\n            \"slug\": \"aapas-ki-baat-pti-mein-tickets-ki-taqseem-ka-muamla-19th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:40:07.042Z\",\n            \"target_date\": \"2018-06-19\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6m9mpz\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/130810/aapas-ki-baat-pti-mein-tickets-ki-taqseem-ka-muamla-19th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4009,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:07.088Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:07.088Z\",\n            \"updated\": \"2019-07-07T06:40:07.088Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Zulfi Bukhari Ka Naam ECL Se Kis Ne Nikala) - 13th June 2018\",\n            \"slug\": \"aapas-ki-baat-zulfi-bukhari-ka-naam-ecl-se-kis-ne-nikala-13th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:40:07.088Z\",\n            \"target_date\": \"2018-06-13\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6ltdr6\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/130556/aapas-ki-baat-zulfi-bukhari-ka-naam-ecl-se-kis-ne-nikala-13th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4010,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:07.122Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:07.122Z\",\n            \"updated\": \"2019-07-07T06:40:07.122Z\",\n            \"extra_data\": {\n                \"host\": \"Muneeb Farooq\",\n                \"job_id\": 135,\n                \"feed_id\": 47,\n                \"feed_name\": \"unewstv - Aapas Ki Baat\",\n                \"show_name\": \"Aapas Ki Baat\",\n                \"feed_quality\": \"480p\"\n            },\n            \"title\": \"Aapas Ki Baat (Imran Khan Sita White Issue) - 11th June 2018\",\n            \"slug\": \"aapas-ki-baat-imran-khan-sita-white-issue-11th-june-2018\",\n            \"publish_date\": \"2019-07-07T06:40:07.122Z\",\n            \"target_date\": \"2018-06-11\",\n            \"text\": \"http://www.dailymotion.com/watch/video/x6lmvuw\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://www.unewstv.com/category/Aapas+Ki+Baat+With+Najam+Sethi\",\n            \"source_detail\": \"http://www.unewstv.com/130428/aapas-ki-baat-imran-khan-sita-white-issue-11th-june-2018\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 44,\n            \"tags\": \"[\\\"Muneeb Farooq\\\", \\\"Aapas Ki Baat\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4011,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.191Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.191Z\",\n            \"updated\": \"2019-07-07T06:40:08.192Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan 8 May 2018\",\n            \"slug\": \"geo-subah-pakistan-8-may-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.192Z\",\n            \"target_date\": \"2018-05-08\",\n            \"text\": \"https://www.youtube.com/watch/yxcN3n5XDeU\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-8-may-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4012,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.261Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.261Z\",\n            \"updated\": \"2019-07-07T06:40:08.261Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subha Pakistan 7 May 2018\",\n            \"slug\": \"geo-subha-pakistan-7-may-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.261Z\",\n            \"target_date\": \"2018-05-07\",\n            \"text\": \"https://www.youtube.com/watch/e--u_2AZbds\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subha-pakistan-7-may-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4013,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.341Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.341Z\",\n            \"updated\": \"2019-07-07T06:40:08.341Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subha Pakistan 4 May 2018\",\n            \"slug\": \"geo-subha-pakistan-4-may-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.341Z\",\n            \"target_date\": \"2018-05-04\",\n            \"text\": \"https://www.youtube.com/watch/hK9J17LzJAg\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subha-pakistan-4-may-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4014,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.388Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.388Z\",\n            \"updated\": \"2019-07-07T06:40:08.388Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subha Pakistan with Shaista Lodhi 13 April 2018\",\n            \"slug\": \"geo-subha-pakistan-with-shaista-lodhi-13-april-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.389Z\",\n            \"target_date\": \"2018-04-13\",\n            \"text\": \"https://www.youtube.com/watch/FjuPwrNeuY4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subha-pakistan-with-shaista-lodhi-13-april-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4015,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.444Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.444Z\",\n            \"updated\": \"2019-07-07T06:40:08.445Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan 9th April 2018\",\n            \"slug\": \"geo-subah-pakistan-9th-april-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.445Z\",\n            \"target_date\": \"2018-04-09\",\n            \"text\": \"https://www.youtube.com/watch/cx-6gQwaZ-w\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-9th-april-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4016,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.529Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.528Z\",\n            \"updated\": \"2019-07-07T06:40:08.529Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan 29th March 2018\",\n            \"slug\": \"geo-subah-pakistan-29th-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.529Z\",\n            \"target_date\": \"2018-03-29\",\n            \"text\": \"https://www.youtube.com/watch/DOZjnepSRO4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-29th-march-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4017,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.653Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.653Z\",\n            \"updated\": \"2019-07-07T06:40:08.653Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan 28th March 2018\",\n            \"slug\": \"geo-subah-pakistan-28th-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.653Z\",\n            \"target_date\": \"2018-03-28\",\n            \"text\": \"https://www.youtube.com/watch/5JZ1Qc02sFc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-28th-march-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4018,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.732Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.732Z\",\n            \"updated\": \"2019-07-07T06:40:08.732Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan with Shaista Lodhi 22nd March 2018\",\n            \"slug\": \"geo-subah-pakistan-with-shaista-lodhi-22nd-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.732Z\",\n            \"target_date\": \"2018-03-22\",\n            \"text\": \"https://www.youtube.com/watch/hpxXrW6-zow\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shaista-lodhi-22nd-march-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4019,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.807Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.806Z\",\n            \"updated\": \"2019-07-07T06:40:08.807Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan 21st March 2018\",\n            \"slug\": \"geo-subah-pakistan-21st-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.807Z\",\n            \"target_date\": \"2018-03-21\",\n            \"text\": \"https://www.youtube.com/watch/xLvr6_2faig\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-21st-march-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4020,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.844Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.843Z\",\n            \"updated\": \"2019-07-07T06:40:08.844Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subha Pakistan 20 March 2018\",\n            \"slug\": \"geo-subha-pakistan-20-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.844Z\",\n            \"target_date\": \"2018-03-20\",\n            \"text\": \"https://www.youtube.com/watch/dZaHL8lL7HA\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subha-pakistan-20-march-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4021,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.883Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.877Z\",\n            \"updated\": \"2019-07-07T06:40:08.883Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan with Shaista Lodhi 19 March 2018\",\n            \"slug\": \"geo-subah-pakistan-with-shaista-lodhi-19-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:08.883Z\",\n            \"target_date\": \"2018-03-19\",\n            \"text\": \"https://www.youtube.com/watch/WBLqE3SOWF4\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shaista-lodhi-19-march-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4022,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:08.934Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:08.933Z\",\n            \"updated\": \"2019-07-07T06:40:08.934Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo subha pakistan 12 March 2018 with shaista lodhi\",\n            \"slug\": \"geo-subha-pakistan-12-march-2018-with-shaista-lodhi\",\n            \"publish_date\": \"2019-07-07T06:40:08.934Z\",\n            \"target_date\": \"2018-03-12\",\n            \"text\": \"https://www.youtube.com/watch/nAJ5prdbdDs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subha-pakistan-12-march-2018-with-shaista-lodhi/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4023,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.009Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.009Z\",\n            \"updated\": \"2019-07-07T06:40:09.009Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan 9th March 2018\",\n            \"slug\": \"geo-subah-pakistan-9th-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:09.009Z\",\n            \"target_date\": \"2018-03-09\",\n            \"text\": \"https://www.youtube.com/watch/YeatsPJ9oUs\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-9th-march-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4024,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.082Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.082Z\",\n            \"updated\": \"2019-07-07T06:40:09.082Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subha Pakistan With Shahista Lodhi 8th March 2018\",\n            \"slug\": \"geo-subha-pakistan-with-shahista-lodhi-8th-march-2018\",\n            \"publish_date\": \"2019-07-07T06:40:09.082Z\",\n            \"target_date\": \"2018-03-08\",\n            \"text\": \"https://www.youtube.com/watch/CrFYsAQ2cPc\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subha-pakistan-with-shahista-lodhi-8th-march-2018-in-hd/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4025,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.148Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.148Z\",\n            \"updated\": \"2019-07-07T06:40:09.148Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 24th January 2018\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-24th-january-2018\",\n            \"publish_date\": \"2019-07-07T06:40:09.148Z\",\n            \"target_date\": \"2018-01-24\",\n            \"text\": \"https://www.youtube.com/watch/Gg1LIAbMvxI?ecver=2\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-24th-january-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4026,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.188Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.188Z\",\n            \"updated\": \"2019-07-07T06:40:09.188Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 5th January 2018\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-5th-january-2018\",\n            \"publish_date\": \"2019-07-07T06:40:09.188Z\",\n            \"target_date\": \"2018-01-05\",\n            \"text\": \"//www.facebook.com/plugins/like.php?href=http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-5th-january-2018/;send=false&layout=button_count&width=80&show_faces=false&font&colorscheme=light&action=like&height=21\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-5th-january-2018/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4027,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.228Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.228Z\",\n            \"updated\": \"2019-07-07T06:40:09.228Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 4th December 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-4th-december-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.228Z\",\n            \"target_date\": \"2017-12-04\",\n            \"text\": \"//www.facebook.com/plugins/like.php?href=http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-4th-december-2017/;send=false&layout=button_count&width=80&show_faces=false&font&colorscheme=light&action=like&height=21\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-4th-december-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4028,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.269Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.269Z\",\n            \"updated\": \"2019-07-07T06:40:09.269Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan with Shahista Lodhi 27th Nov 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-27th-nov-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.269Z\",\n            \"target_date\": \"2017-11-27\",\n            \"text\": \"https://www.youtube.com/watch/-tgMeY_ytZI?ecver=1\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-27th-nov-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4029,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.299Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.299Z\",\n            \"updated\": \"2019-07-07T06:40:09.299Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 23rd November 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-23rd-november-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.299Z\",\n            \"target_date\": \"2017-11-23\",\n            \"text\": \"//www.facebook.com/plugins/like.php?href=http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-23rd-november-2017/;send=false&layout=button_count&width=80&show_faces=false&font&colorscheme=light&action=like&height=21\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-23rd-november-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4030,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.338Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.337Z\",\n            \"updated\": \"2019-07-07T06:40:09.338Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 22nd November 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-22nd-november-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.338Z\",\n            \"target_date\": \"2017-11-22\",\n            \"text\": \"//www.facebook.com/plugins/like.php?href=http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-22nd-november-2017/;send=false&layout=button_count&width=80&show_faces=false&font&colorscheme=light&action=like&height=21\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-22nd-november-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4031,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.388Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.388Z\",\n            \"updated\": \"2019-07-07T06:40:09.388Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 20th November 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-20th-november-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.388Z\",\n            \"target_date\": \"2017-11-20\",\n            \"text\": \"//www.facebook.com/plugins/like.php?href=http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-20th-november-2017/;send=false&layout=button_count&width=80&show_faces=false&font&colorscheme=light&action=like&height=21\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-20th-november-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4032,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.417Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.417Z\",\n            \"updated\": \"2019-07-07T06:40:09.417Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 16th October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-16th-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.417Z\",\n            \"target_date\": \"2017-10-16\",\n            \"text\": \"//www.facebook.com/plugins/like.php?href=http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-16th-october-2017/;send=false&layout=button_count&width=80&show_faces=false&font&colorscheme=light&action=like&height=21\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-16th-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4033,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.463Z\",\n            \"updated\": \"2019-07-07T06:40:09.463Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 10th October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-10th-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.463Z\",\n            \"target_date\": \"2017-10-10\",\n            \"text\": \"//www.facebook.com/plugins/like.php?href=http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-10th-october-2017/;send=false&layout=button_count&width=80&show_faces=false&font&colorscheme=light&action=like&height=21\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-10th-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4034,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.498Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.491Z\",\n            \"updated\": \"2019-07-07T06:40:09.498Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 31st October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-31st-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.498Z\",\n            \"target_date\": \"2017-10-31\",\n            \"text\": \"https://www.youtube.com/watch/KKeoA9U0nwE?feature=owatch\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-31st-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4035,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.537Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.537Z\",\n            \"updated\": \"2019-07-07T06:40:09.537Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 23rd October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-23rd-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.537Z\",\n            \"target_date\": \"2017-10-23\",\n            \"text\": \"https://www.youtube.com/watch/mc5AnloVI_0\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-23rd-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4036,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.579Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.578Z\",\n            \"updated\": \"2019-07-07T06:40:09.579Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 21st October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-21st-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.579Z\",\n            \"target_date\": \"2017-10-21\",\n            \"text\": \"https://www.youtube.com/watch/fIOOvp10yCo?feature=owatch\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-21st-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4037,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.614Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.614Z\",\n            \"updated\": \"2019-07-07T06:40:09.614Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 20th October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-20th-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.614Z\",\n            \"target_date\": \"2017-10-20\",\n            \"text\": \"https://www.youtube.com/watch/Mdl81L9SZIM\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-20th-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4038,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.672Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.672Z\",\n            \"updated\": \"2019-07-07T06:40:09.672Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 19th October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-19th-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.672Z\",\n            \"target_date\": \"2017-10-19\",\n            \"text\": \"https://www.youtube.com/watch/skDvl1w6RMI\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-19th-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4039,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.705Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.705Z\",\n            \"updated\": \"2019-07-07T06:40:09.705Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 18th October 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-18th-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.705Z\",\n            \"target_date\": \"2017-10-18\",\n            \"text\": \"https://www.youtube.com/watch/0_Y1-uID9RM?feature=owatch\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-in-hd-18th-october-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4040,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.787Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.787Z\",\n            \"updated\": \"2019-07-07T06:40:09.787Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 4 September 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-4-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.787Z\",\n            \"target_date\": \"2017-09-04\",\n            \"text\": \"https://tune.pk/player/watch_player.php?vid=7334264&folder=2017/09/04/&width=600&height=375&autoplay=no\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-4-september-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4041,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.845Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.837Z\",\n            \"updated\": \"2019-07-07T06:40:09.845Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 2 September 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-2-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.845Z\",\n            \"target_date\": \"2017-09-02\",\n            \"text\": \"https://tune.pk/player/watch_player.php?vid=7331969&folder=2017/09/02/&width=600&height=375&autoplay=no\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-2-september-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4042,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:09.933Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:09.933Z\",\n            \"updated\": \"2019-07-07T06:40:09.933Z\",\n            \"extra_data\": {\n                \"host\": \"Shahista Lodhi\",\n                \"job_id\": 170,\n                \"feed_id\": 44,\n                \"feed_name\": \"DOL - Subah Pakistan With Shahista Lodhi\",\n                \"show_name\": \"Subah Pakistan With Shahista Lodhi\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Geo Subah Pakistan With Shahista Lodhi 31 August 2017\",\n            \"slug\": \"geo-subah-pakistan-with-shahista-lodhi-31-august-2017\",\n            \"publish_date\": \"2019-07-07T06:40:09.933Z\",\n            \"target_date\": \"2017-08-31\",\n            \"text\": \"https://tune.pk/player/watch_player.php?vid=7328762&folder=2017/08/31/&width=600&height=375&autoplay=no\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://dramaonline.pk/geo-tv-dramas/geo-subah-pakistan-with-shahista-lodhi/\",\n            \"source_detail\": \"http://dramaonline.pk/geo-subah-pakistan-with-shahista-lodhi-31-august-2017/\",\n            \"category\": 1,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 42,\n            \"tags\": \"[\\\"Shahista Lodhi\\\", \\\"Subah Pakistan With Shahista Lodhi\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": false,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4043,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.452Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.452Z\",\n            \"updated\": \"2019-07-07T06:40:10.452Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 75 On Geo TV \\u2013 13 October 2017\",\n            \"slug\": \"watch-sawera-episode-75-on-geo-tv-13-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.452Z\",\n            \"target_date\": \"1975-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/KwjnwESL3Pk', 'original': 'https://www.youtube.com/embed/KwjnwESL3Pk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x64exxc', 'original': '//www.dailymotion.com/embed/video/x64exxc'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-75-geo-tv-13-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4044,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.511Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.511Z\",\n            \"updated\": \"2019-07-07T06:40:10.511Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 74 On Geo TV \\u2013 12 October 2017\",\n            \"slug\": \"watch-sawera-episode-74-on-geo-tv-12-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.511Z\",\n            \"target_date\": \"1974-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/IabrODp4dfA', 'original': 'https://www.youtube.com/embed/IabrODp4dfA'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x649ux9', 'original': '//www.dailymotion.com/embed/video/x649ux9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-74-geo-tv-12-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4045,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.573Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.572Z\",\n            \"updated\": \"2019-07-07T06:40:10.573Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 73 On Geo TV \\u2013 11 October 2017\",\n            \"slug\": \"watch-sawera-episode-73-on-geo-tv-11-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.573Z\",\n            \"target_date\": \"1973-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/_fEV40mch3Y', 'original': 'https://www.youtube.com/embed/_fEV40mch3Y'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x644uss', 'original': '//www.dailymotion.com/embed/video/x644uss'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-73-geo-tv-11-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4046,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.619Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.619Z\",\n            \"updated\": \"2019-07-07T06:40:10.619Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 72 On Geo TV \\u2013 10 October 2017\",\n            \"slug\": \"watch-sawera-episode-72-on-geo-tv-10-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.619Z\",\n            \"target_date\": \"1972-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/vr1t9-nMeUs', 'original': 'https://www.youtube.com/embed/vr1t9-nMeUs'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x640wjy', 'original': '//www.dailymotion.com/embed/video/x640wjy'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-72-geo-tv-10-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4047,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.658Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.658Z\",\n            \"updated\": \"2019-07-07T06:40:10.658Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 71 On Geo TV \\u2013 9 October 2017\",\n            \"slug\": \"watch-sawera-episode-71-on-geo-tv-9-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.658Z\",\n            \"target_date\": \"1971-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Tz2Wpmat2MM', 'original': 'https://www.youtube.com/embed/Tz2Wpmat2MM'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x63vlwo', 'original': '//www.dailymotion.com/embed/video/x63vlwo'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-71-geo-tv-9-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4048,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.680Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.680Z\",\n            \"updated\": \"2019-07-07T06:40:10.680Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 70 On Geo TV \\u2013 6 October 2017\",\n            \"slug\": \"watch-sawera-episode-70-on-geo-tv-6-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.680Z\",\n            \"target_date\": \"1970-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/svH5g22v1Rw', 'original': 'https://www.youtube.com/embed/svH5g22v1Rw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x63hmmh', 'original': '//www.dailymotion.com/embed/video/x63hmmh'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-70-geo-tv-6-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4049,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.700Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.700Z\",\n            \"updated\": \"2019-07-07T06:40:10.700Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 69 On Geo TV \\u2013 5 October 2017\",\n            \"slug\": \"watch-sawera-episode-69-on-geo-tv-5-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.700Z\",\n            \"target_date\": \"1969-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/BCjbawedxd8', 'original': 'https://www.youtube.com/embed/BCjbawedxd8'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-69-geo-tv-5-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4050,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.730Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.729Z\",\n            \"updated\": \"2019-07-07T06:40:10.730Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 68 On Geo TV \\u2013 4 October 2017\",\n            \"slug\": \"watch-sawera-episode-68-on-geo-tv-4-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.730Z\",\n            \"target_date\": \"2068-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Jcu7BTq4hu0', 'original': 'https://www.youtube.com/embed/Jcu7BTq4hu0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x636dxz', 'original': '//www.dailymotion.com/embed/video/x636dxz'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-68-geo-tv-4-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4051,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.755Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.755Z\",\n            \"updated\": \"2019-07-07T06:40:10.755Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 67 On Geo TV \\u2013 3 October 2017\",\n            \"slug\": \"watch-sawera-episode-67-on-geo-tv-3-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.755Z\",\n            \"target_date\": \"2067-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/UYE3z8sp3Q0', 'original': 'https://www.youtube.com/embed/UYE3z8sp3Q0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x631404', 'original': '//www.dailymotion.com/embed/video/x631404'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-67-geo-tv-3-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4052,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.778Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.778Z\",\n            \"updated\": \"2019-07-07T06:40:10.778Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 66 On Geo TV \\u2013 2 October 2017\",\n            \"slug\": \"watch-sawera-episode-66-on-geo-tv-2-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.778Z\",\n            \"target_date\": \"2066-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/gj0DLpy1oMs', 'original': 'https://www.youtube.com/embed/gj0DLpy1oMs'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x62vpg9', 'original': '//www.dailymotion.com/embed/video/x62vpg9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-66-geo-tv-2-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4053,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.800Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.800Z\",\n            \"updated\": \"2019-07-07T06:40:10.800Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 65 On Geo TV \\u2013 29 September 2017\",\n            \"slug\": \"watch-sawera-episode-65-on-geo-tv-29-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.800Z\",\n            \"target_date\": \"2065-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Jr1c4SH4gxk', 'original': 'https://www.youtube.com/embed/Jr1c4SH4gxk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x62j0ye', 'original': '//www.dailymotion.com/embed/video/x62j0ye'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-65-geo-tv-29-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4054,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.819Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.819Z\",\n            \"updated\": \"2019-07-07T06:40:10.820Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 64 On Geo TV \\u2013 28 September 2017\",\n            \"slug\": \"watch-sawera-episode-64-on-geo-tv-28-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.830Z\",\n            \"target_date\": \"2064-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Qo1WIMElNVk', 'original': 'https://www.youtube.com/embed/Qo1WIMElNVk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x62dc81', 'original': '//www.dailymotion.com/embed/video/x62dc81'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-64-geo-tv-28-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4055,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.869Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.868Z\",\n            \"updated\": \"2019-07-07T06:40:10.869Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 63 On Geo TV \\u2013 27 September 2017\",\n            \"slug\": \"watch-sawera-episode-63-on-geo-tv-27-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.869Z\",\n            \"target_date\": \"2063-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/sNnEYFpXFtk', 'original': 'https://www.youtube.com/embed/sNnEYFpXFtk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x627q2c', 'original': '//www.dailymotion.com/embed/video/x627q2c'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-63-geo-tv-27-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4056,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.890Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.890Z\",\n            \"updated\": \"2019-07-07T06:40:10.890Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 62 On Geo TV \\u2013 26 September 2017\",\n            \"slug\": \"watch-sawera-episode-62-on-geo-tv-26-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.891Z\",\n            \"target_date\": \"2062-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/PvNPGnFUzEo', 'original': 'https://www.youtube.com/embed/PvNPGnFUzEo'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x622l46', 'original': '//www.dailymotion.com/embed/video/x622l46'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-62-geo-tv-26-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4057,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.911Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.910Z\",\n            \"updated\": \"2019-07-07T06:40:10.911Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 61 On Geo TV \\u2013 25 September 2017\",\n            \"slug\": \"watch-sawera-episode-61-on-geo-tv-25-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.917Z\",\n            \"target_date\": \"2061-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/pz_7CcnotOw', 'original': 'https://www.youtube.com/embed/pz_7CcnotOw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x61xm2d', 'original': '//www.dailymotion.com/embed/video/x61xm2d'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-61-geo-tv-25-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4058,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.960Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.950Z\",\n            \"updated\": \"2019-07-07T06:40:10.960Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 60 On Geo TV \\u2013 22 September 2017\",\n            \"slug\": \"watch-sawera-episode-60-on-geo-tv-22-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.960Z\",\n            \"target_date\": \"2060-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/AVy2g_BU_VI', 'original': 'https://www.youtube.com/embed/AVy2g_BU_VI'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x61lrwg', 'original': '//www.dailymotion.com/embed/video/x61lrwg'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-60-geo-tv-22-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4059,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.994Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:10.994Z\",\n            \"updated\": \"2019-07-07T06:40:10.994Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 59 On Geo TV \\u2013 21 September 2017\",\n            \"slug\": \"watch-sawera-episode-59-on-geo-tv-21-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:10.994Z\",\n            \"target_date\": \"2059-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/UXKiTFxl0eA', 'original': 'https://www.youtube.com/embed/UXKiTFxl0eA'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x61i0wo', 'original': '//www.dailymotion.com/embed/video/x61i0wo'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-59-geo-tv-21-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4060,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.017Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.017Z\",\n            \"updated\": \"2019-07-07T06:40:11.017Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 58 On Geo TV -20 September 2017\",\n            \"slug\": \"watch-sawera-episode-58-on-geo-tv-20-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.017Z\",\n            \"target_date\": \"2058-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/JEYZ7ZxnKhY', 'original': 'https://www.youtube.com/embed/JEYZ7ZxnKhY'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x61eh1w', 'original': '//www.dailymotion.com/embed/video/x61eh1w'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-58-geo-tv-20-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4061,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.060Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.060Z\",\n            \"updated\": \"2019-07-07T06:40:11.060Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 57 On Geo TV \\u2013 19 September 2017\",\n            \"slug\": \"watch-sawera-episode-57-on-geo-tv-19-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.060Z\",\n            \"target_date\": \"2057-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/V_WachzkhJo', 'original': 'https://www.youtube.com/embed/V_WachzkhJo'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x61a3g6', 'original': '//www.dailymotion.com/embed/video/x61a3g6'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-57-geo-tv-19-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4062,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.099Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.098Z\",\n            \"updated\": \"2019-07-07T06:40:11.099Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 56 On Geo TV \\u2013 18 September 2017\",\n            \"slug\": \"watch-sawera-episode-56-on-geo-tv-18-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.099Z\",\n            \"target_date\": \"2056-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/EPX5ZWIMqBg', 'original': 'https://www.youtube.com/embed/EPX5ZWIMqBg'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x6163a1', 'original': '//www.dailymotion.com/embed/video/x6163a1'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-churian-episode-56-geo-tv-18-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4063,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.118Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.118Z\",\n            \"updated\": \"2019-07-07T06:40:11.118Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 55 On Geo TV \\u2013 15 September 2017\",\n            \"slug\": \"watch-sawera-episode-55-on-geo-tv-15-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.118Z\",\n            \"target_date\": \"2055-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/9NzR24GdDEY', 'original': 'https://www.youtube.com/embed/9NzR24GdDEY'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x60uoxw', 'original': '//www.dailymotion.com/embed/video/x60uoxw'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-55-geo-tv-15-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4064,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.153Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.153Z\",\n            \"updated\": \"2019-07-07T06:40:11.153Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 54 On Geo TV \\u2013 14 September 2017\",\n            \"slug\": \"watch-sawera-episode-54-on-geo-tv-14-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.153Z\",\n            \"target_date\": \"2054-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/lDfyofFagOM', 'original': 'https://www.youtube.com/embed/lDfyofFagOM'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x60qfw2', 'original': '//www.dailymotion.com/embed/video/x60qfw2'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-54-geo-tv-14-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4065,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.183Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.177Z\",\n            \"updated\": \"2019-07-07T06:40:11.183Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 53 On Geo TV \\u2013 13 September 2017\",\n            \"slug\": \"watch-sawera-episode-53-on-geo-tv-13-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.183Z\",\n            \"target_date\": \"2053-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/atgF5s_QM8w', 'original': 'https://www.youtube.com/embed/atgF5s_QM8w'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x60lkt4', 'original': '//www.dailymotion.com/embed/video/x60lkt4'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-53-geo-tv-13-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4066,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.214Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.206Z\",\n            \"updated\": \"2019-07-07T06:40:11.214Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 52 On Geo TV \\u2013 12 September 2017\",\n            \"slug\": \"watch-sawera-episode-52-on-geo-tv-12-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.214Z\",\n            \"target_date\": \"2052-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/PPB9Ju6Qrf8', 'original': 'https://www.youtube.com/embed/PPB9Ju6Qrf8'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x60hgnv', 'original': '//www.dailymotion.com/embed/video/x60hgnv'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-52-geo-tv-12-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4067,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.243Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.242Z\",\n            \"updated\": \"2019-07-07T06:40:11.243Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 51 On Geo TV \\u2013 11 September 2017\",\n            \"slug\": \"watch-sawera-episode-51-on-geo-tv-11-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.243Z\",\n            \"target_date\": \"2051-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/CYE3mHSmAoI', 'original': 'https://www.youtube.com/embed/CYE3mHSmAoI'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x60ces1', 'original': '//www.dailymotion.com/embed/video/x60ces1'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-51-geo-tv-11-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4068,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.272Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.272Z\",\n            \"updated\": \"2019-07-07T06:40:11.272Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 50 On Geo TV \\u2013 8 September 2017\",\n            \"slug\": \"watch-sawera-episode-50-on-geo-tv-8-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.272Z\",\n            \"target_date\": \"2050-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/4IwXUHzIPE4', 'original': 'https://www.youtube.com/embed/4IwXUHzIPE4'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x6000fb', 'original': '//www.dailymotion.com/embed/video/x6000fb'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-50-geo-tv-8-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4069,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.293Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.293Z\",\n            \"updated\": \"2019-07-07T06:40:11.293Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 49 On Geo TV \\u2013 7 September 2017\",\n            \"slug\": \"watch-sawera-episode-49-on-geo-tv-7-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.293Z\",\n            \"target_date\": \"2049-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/t-hliS_7WME', 'original': 'https://www.youtube.com/embed/t-hliS_7WME'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5zurra', 'original': '//www.dailymotion.com/embed/video/x5zurra'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-49-geo-tv-7-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4070,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.313Z\",\n            \"updated\": \"2019-07-07T06:40:11.313Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 48 On Geo TV \\u2013 6 September 2017\",\n            \"slug\": \"watch-sawera-episode-48-on-geo-tv-6-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.313Z\",\n            \"target_date\": \"2048-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/0xCX7TPF13w', 'original': 'https://www.youtube.com/embed/0xCX7TPF13w'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5zpgun', 'original': '//www.dailymotion.com/embed/video/x5zpgun'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-48-geo-tv-6-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4071,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.345Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.344Z\",\n            \"updated\": \"2019-07-07T06:40:11.345Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 47 On Geo TV \\u2013 5 September 2017\",\n            \"slug\": \"watch-sawera-episode-47-on-geo-tv-5-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.345Z\",\n            \"target_date\": \"2047-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/bI4j0Up8gU0', 'original': 'https://www.youtube.com/embed/bI4j0Up8gU0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5zky3r', 'original': '//www.dailymotion.com/embed/video/x5zky3r'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-47-geo-tv-5-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4072,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.375Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.375Z\",\n            \"updated\": \"2019-07-07T06:40:11.375Z\",\n            \"extra_data\": {\n                \"host\": \"unknown\",\n                \"job_id\": 171,\n                \"feed_id\": 51,\n                \"feed_name\": \"VPK - Sawera\",\n                \"show_name\": \"Sawera\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Sawera Episode 46 On Geo TV \\u2013 4 September 2017\",\n            \"slug\": \"watch-sawera-episode-46-on-geo-tv-4-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.375Z\",\n            \"target_date\": \"2046-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/WosrQBPAjkA', 'original': 'https://www.youtube.com/embed/WosrQBPAjkA'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5zg41x', 'original': '//www.dailymotion.com/embed/video/x5zg41x'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/sawera/\",\n            \"source_detail\": \"http://vidpk.com/watch-sawera-episode-46-geo-tv-4-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 45,\n            \"tags\": \"[\\\"unknown\\\", \\\"Sawera\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4073,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.521Z\",\n            \"updated\": \"2019-07-07T06:40:11.526Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 25 On Hum TV \\u2013 10 October 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-25-on-hum-tv-10-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.526Z\",\n            \"target_date\": \"2019-07-25\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/IJ2YBgWpINM', 'original': 'https://www.youtube.com/embed/IJ2YBgWpINM'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x640szv', 'original': '//www.dailymotion.com/embed/video/x640szv'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-25-hum-tv-10-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4074,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.570Z\",\n            \"updated\": \"2019-07-07T06:40:11.571Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 24 On Hum TV \\u2013 3 October 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-24-on-hum-tv-3-october-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.571Z\",\n            \"target_date\": \"2019-07-24\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/r5EmHCAxt8c', 'original': 'https://www.youtube.com/embed/r5EmHCAxt8c'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x6314ua', 'original': '//www.dailymotion.com/embed/video/x6314ua'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-24-hum-tv-3-october-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4075,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.629Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.629Z\",\n            \"updated\": \"2019-07-07T06:40:11.629Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 23 On Hum TV \\u2013 26 September 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-23-on-hum-tv-26-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.629Z\",\n            \"target_date\": \"2019-07-23\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/niEwSaCayzI', 'original': 'https://www.youtube.com/embed/niEwSaCayzI'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x622o5g', 'original': '//www.dailymotion.com/embed/video/x622o5g'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-23-hum-tv-26-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4076,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.758Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.757Z\",\n            \"updated\": \"2019-07-07T06:40:11.758Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 22 On Hum TV \\u2013 19 September 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-22-on-hum-tv-19-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.758Z\",\n            \"target_date\": \"2019-07-22\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/F3PsqENz-6Q', 'original': 'https://www.youtube.com/embed/F3PsqENz-6Q'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x61a0w0', 'original': '//www.dailymotion.com/embed/video/x61a0w0'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-22-hum-tv-19-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4077,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.826Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.826Z\",\n            \"updated\": \"2019-07-07T06:40:11.826Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 21 On Hum TV \\u2013 12 September 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-21-on-hum-tv-12-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.826Z\",\n            \"target_date\": \"2019-07-21\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/5sZOa-3JqLA', 'original': 'https://www.youtube.com/embed/5sZOa-3JqLA'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x60hs4k', 'original': '//www.dailymotion.com/embed/video/x60hs4k'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-21-hum-tv-12-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4078,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:11.906Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:11.905Z\",\n            \"updated\": \"2019-07-07T06:40:11.906Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 20 On Hum TV \\u2013 5 September 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-20-on-hum-tv-5-september-2017\",\n            \"publish_date\": \"2019-07-07T06:40:11.906Z\",\n            \"target_date\": \"2019-07-20\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/odN2uTJC3c0', 'original': 'https://www.youtube.com/embed/odN2uTJC3c0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5zl302', 'original': '//www.dailymotion.com/embed/video/x5zl302'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-20-hum-tv-5-september-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4079,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:12.004Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:12.003Z\",\n            \"updated\": \"2019-07-07T06:40:12.004Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 19 On Hum TV \\u2013 29 Aug 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-19-on-hum-tv-29-aug-2017\",\n            \"publish_date\": \"2019-07-07T06:40:12.004Z\",\n            \"target_date\": \"2019-07-19\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/zIL7MW705vk', 'original': 'https://www.youtube.com/embed/zIL7MW705vk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5yp060', 'original': '//www.dailymotion.com/embed/video/x5yp060'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-19-hum-tv-29-aug-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4080,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:12.112Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:12.112Z\",\n            \"updated\": \"2019-07-07T06:40:12.112Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 18 On Hum TV \\u2013 22 Aug 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-18-on-hum-tv-22-aug-2017\",\n            \"publish_date\": \"2019-07-07T06:40:12.112Z\",\n            \"target_date\": \"2019-07-18\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/HrqdNAUWBD0', 'original': 'https://www.youtube.com/embed/HrqdNAUWBD0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5xr2o9', 'original': '//www.dailymotion.com/embed/video/x5xr2o9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-18-hum-tv-22-aug-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4081,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:12.161Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:12.161Z\",\n            \"updated\": \"2019-07-07T06:40:12.161Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 17 On Hum TV \\u2013 15 Aug 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-17-on-hum-tv-15-aug-2017\",\n            \"publish_date\": \"2019-07-07T06:40:12.162Z\",\n            \"target_date\": \"2019-07-17\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/dhaqggTSjEI', 'original': 'https://www.youtube.com/embed/dhaqggTSjEI'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5x2nsc', 'original': '//www.dailymotion.com/embed/video/x5x2nsc'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-17-hum-tv-15-aug-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4082,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:12.350Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:12.350Z\",\n            \"updated\": \"2019-07-07T06:40:12.350Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 16 On Hum TV \\u2013 8 Aug 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-16-on-hum-tv-8-aug-2017\",\n            \"publish_date\": \"2019-07-07T06:40:12.351Z\",\n            \"target_date\": \"2019-07-16\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/V8FJ0-olkSc', 'original': 'https://www.youtube.com/embed/V8FJ0-olkSc'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5wbigi', 'original': '//www.dailymotion.com/embed/video/x5wbigi'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-16-hum-tv-8-aug-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4083,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:12.546Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:12.545Z\",\n            \"updated\": \"2019-07-07T06:40:12.546Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 15 On Hum TV \\u2013 1 Aug 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-15-on-hum-tv-1-aug-2017\",\n            \"publish_date\": \"2019-07-07T06:40:12.546Z\",\n            \"target_date\": \"2019-07-15\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/H7OsCw0Ejhk', 'original': 'https://www.youtube.com/embed/H7OsCw0Ejhk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5vhup3', 'original': '//www.dailymotion.com/embed/video/x5vhup3'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-15-hum-tv-1-aug-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4084,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:12.876Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:12.876Z\",\n            \"updated\": \"2019-07-07T06:40:12.895Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 14 On Hum TV \\u2013 25 July 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-14-on-hum-tv-25-july-2017\",\n            \"publish_date\": \"2019-07-07T06:40:12.895Z\",\n            \"target_date\": \"2019-07-14\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/mAJntgdhL1w', 'original': 'https://www.youtube.com/embed/mAJntgdhL1w'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5usdcf', 'original': '//www.dailymotion.com/embed/video/x5usdcf'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-14-hum-tv-25-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4085,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:12.973Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:12.972Z\",\n            \"updated\": \"2019-07-07T06:40:12.973Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 13 On Hum TV \\u2013 18 July 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-13-on-hum-tv-18-july-2017\",\n            \"publish_date\": \"2019-07-07T06:40:12.973Z\",\n            \"target_date\": \"2019-07-13\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Ki34Z6Xh0Vs', 'original': 'https://www.youtube.com/embed/Ki34Z6Xh0Vs'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5tz37q', 'original': '//www.dailymotion.com/embed/video/x5tz37q'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-13-hum-tv-18-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4086,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.059Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.059Z\",\n            \"updated\": \"2019-07-07T06:40:13.059Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Alif Allah Aur Insaan Episode 12 On Hum Tv \\u2013 11 July 2017\",\n            \"slug\": \"watch-alif-allah-aur-insaan-episode-12-on-hum-tv-11-july-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.059Z\",\n            \"target_date\": \"2019-07-12\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Ga4QFIzf6kw', 'original': 'https://www.youtube.com/embed/Ga4QFIzf6kw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5t7i4h', 'original': '//www.dailymotion.com/embed/video/x5t7i4h'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/watch-alif-allah-aur-insaan-episode-12-on-hum-tv-11-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4087,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.109Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.109Z\",\n            \"updated\": \"2019-07-07T06:40:13.109Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 11 On Hum Tv \\u2013 4 July 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-11-on-hum-tv-4-july-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.109Z\",\n            \"target_date\": \"2019-07-11\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/VRzr-vjiEYs', 'original': 'https://www.youtube.com/embed/VRzr-vjiEYs'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5si0vu', 'original': '//www.dailymotion.com/embed/video/x5si0vu'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-11-on-hum-tv-4-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4088,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.151Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.150Z\",\n            \"updated\": \"2019-07-07T06:40:13.151Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan  Episode 10 On Hum Tv \\u2013 28 June 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-10-on-hum-tv-28-june-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.151Z\",\n            \"target_date\": \"2019-07-10\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/s4_9YrOSjZ0', 'original': 'https://www.youtube.com/embed/s4_9YrOSjZ0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5rw3u1', 'original': '//www.dailymotion.com/embed/video/x5rw3u1'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-10-on-hum-tv-28-june-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4089,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.182Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.182Z\",\n            \"updated\": \"2019-07-07T06:40:13.182Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 9 On HUM TV \\u2013 20 June 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-9-on-hum-tv-20-june-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.182Z\",\n            \"target_date\": \"2019-07-09\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/coKPVBZd5xg', 'original': 'https://www.youtube.com/embed/coKPVBZd5xg'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5rek9h', 'original': '//www.dailymotion.com/embed/video/x5rek9h'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-9-on-hum-tv-20-june-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4090,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.244Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.244Z\",\n            \"updated\": \"2019-07-07T06:40:13.244Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 8 On Hum Tv \\u2013 13 June 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-8-on-hum-tv-13-june-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.244Z\",\n            \"target_date\": \"2019-07-08\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/_VRBpVMVQu0', 'original': 'https://www.youtube.com/embed/_VRBpVMVQu0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5qbgwi', 'original': '//www.dailymotion.com/embed/video/x5qbgwi'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-8-on-hum-tv-13-june-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4091,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.282Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.282Z\",\n            \"updated\": \"2019-07-07T06:40:13.282Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan  Episode 7 On Hum Tv \\u2013 6 Jun 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-7-on-hum-tv-6-jun-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.282Z\",\n            \"target_date\": \"2019-07-07\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/PGZNCFMPPpY', 'original': 'https://www.youtube.com/embed/PGZNCFMPPpY'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5pcgf4', 'original': '//www.dailymotion.com/embed/video/x5pcgf4'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-7-on-hum-tv-6-jun-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4092,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.310Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.310Z\",\n            \"updated\": \"2019-07-07T06:40:13.310Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 6 on Hum TV \\u2013 30 May 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-6-on-hum-tv-30-may-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.310Z\",\n            \"target_date\": \"2019-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/daUF6a7XQbI?list=PLbVdwtmx18suiUt2xjkFFjlJrSxUR1zsE', 'original': 'https://www.youtube.com/embed/daUF6a7XQbI?list=PLbVdwtmx18suiUt2xjkFFjlJrSxUR1zsE'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5ogoii', 'original': '//www.dailymotion.com/embed/video/x5ogoii'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-6-on-hum-tv-30-may-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4093,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.354Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.354Z\",\n            \"updated\": \"2019-07-07T06:40:13.354Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 5 on Hum TV \\u2013 23 May 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-5-on-hum-tv-23-may-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.354Z\",\n            \"target_date\": \"2019-07-05\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/jLgP1dvXpC8', 'original': 'https://www.youtube.com/embed/jLgP1dvXpC8'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5nkt43', 'original': '//www.dailymotion.com/embed/video/x5nkt43'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-5-on-hum-tv-23-may-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4094,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.415Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.415Z\",\n            \"updated\": \"2019-07-07T06:40:13.415Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 4 on Hum TV \\u2013 16 May 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-4-on-hum-tv-16-may-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.415Z\",\n            \"target_date\": \"2019-07-04\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/J7cuHNlw6Xk', 'original': 'https://www.youtube.com/embed/J7cuHNlw6Xk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5mj0os', 'original': '//www.dailymotion.com/embed/video/x5mj0os'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-4-on-hum-tv-16-may-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4095,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.464Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.464Z\",\n            \"updated\": \"2019-07-07T06:40:13.464Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 3 on Hum TV \\u2013 9 May 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-3-on-hum-tv-9-may-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.464Z\",\n            \"target_date\": \"2019-07-03\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/rCGRMfH23fA', 'original': 'https://www.youtube.com/embed/rCGRMfH23fA'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5lmdiu', 'original': '//www.dailymotion.com/embed/video/x5lmdiu'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-3-on-hum-tv-9-may-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4096,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.497Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.497Z\",\n            \"updated\": \"2019-07-07T06:40:13.497Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 2 on Hum TV \\u2013 2 May 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-2-on-hum-tv-2-may-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.497Z\",\n            \"target_date\": \"2019-07-02\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/GoK3snEdh_M', 'original': 'https://www.youtube.com/embed/GoK3snEdh_M'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5kjca3', 'original': '//www.dailymotion.com/embed/video/x5kjca3'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-2-on-ary-digital-2-may-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4097,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:13.526Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:40:13.526Z\",\n            \"updated\": \"2019-07-07T06:40:13.526Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 172,\n                \"feed_id\": 52,\n                \"feed_name\": \"VPK - Alif Allah Aur Insaan\",\n                \"show_name\": \"Alif Allah Aur Insaan\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Alif Allah Aur Insaan Episode 1 on Hum TV \\u2013 25 April 2017\",\n            \"slug\": \"alif-allah-aur-insaan-episode-1-on-hum-tv-25-april-2017\",\n            \"publish_date\": \"2019-07-07T06:40:13.526Z\",\n            \"target_date\": \"2019-07-01\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/c2IDBUXFhpM', 'original': 'https://www.youtube.com/embed/c2IDBUXFhpM'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5jnfz9', 'original': '//www.dailymotion.com/embed/video/x5jnfz9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/alif-allah-aur-insaan/\",\n            \"source_detail\": \"http://vidpk.com/alif-allah-aur-insaan-episode-1-on-ary-digital-25-april-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 46,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Alif Allah Aur Insaan\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4098,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:54.335Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:54.335Z\",\n            \"updated\": \"2019-07-07T06:47:54.335Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Dil e Majboor Episode 31 On TV One \\u2013 7 Aug 2017\",\n            \"slug\": \"watch-dil-e-majboor-episode-31-on-tv-one-7-aug-2017\",\n            \"publish_date\": \"2019-07-07T06:47:54.335Z\",\n            \"target_date\": \"2019-07-31\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/7eZ-vmH-36c', 'original': 'https://www.youtube.com/embed/7eZ-vmH-36c'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5w7s89', 'original': '//www.dailymotion.com/embed/video/x5w7s89'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/watch-dil-e-majboor-episode-31-tv-one-7-aug-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4099,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.051Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.051Z\",\n            \"updated\": \"2019-07-07T06:47:55.051Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Dil e Majboor Episode 30 On TV One \\u2013 31 July 2017\",\n            \"slug\": \"watch-dil-e-majboor-episode-30-on-tv-one-31-july-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.051Z\",\n            \"target_date\": \"2019-07-30\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/oA5Ak3JJrAo', 'original': 'https://www.youtube.com/embed/oA5Ak3JJrAo'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5vf81m', 'original': '//www.dailymotion.com/embed/video/x5vf81m'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/watch-dil-e-majboor-episode-30-tv-one-31-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4100,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.100Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.100Z\",\n            \"updated\": \"2019-07-07T06:47:55.100Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Dil e Majboor Episode 29 On TV One \\u2013 24 July 2017\",\n            \"slug\": \"watch-dil-e-majboor-episode-29-on-tv-one-24-july-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.100Z\",\n            \"target_date\": \"2019-07-29\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/X6ZbrIhqTyw', 'original': 'https://www.youtube.com/embed/X6ZbrIhqTyw'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/watch-dil-e-majboor-episode-29-tv-one-24-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4101,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.147Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.146Z\",\n            \"updated\": \"2019-07-07T06:47:55.147Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Dil e Majboor Episode 28 On TV One \\u2013 17 July 2017\",\n            \"slug\": \"watch-dil-e-majboor-episode-28-on-tv-one-17-july-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.147Z\",\n            \"target_date\": \"2019-07-28\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/u2YKZFOnogw', 'original': 'https://www.youtube.com/embed/u2YKZFOnogw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5turys', 'original': '//www.dailymotion.com/embed/video/x5turys'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/watch-dil-e-majboor-episode-28-tv-one-17-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4102,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.186Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.186Z\",\n            \"updated\": \"2019-07-07T06:47:55.186Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Dil e Majboor Episode 27 On TV One \\u2013 10 July 2017\",\n            \"slug\": \"watch-dil-e-majboor-episode-27-on-tv-one-10-july-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.186Z\",\n            \"target_date\": \"2019-07-27\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/OHP2t9RGPCo', 'original': 'https://www.youtube.com/embed/OHP2t9RGPCo'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5t6ip0', 'original': '//www.dailymotion.com/embed/video/x5t6ip0'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/watch-dil-e-majboor-episode-26-on-tv-one-10-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4103,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.219Z\",\n            \"updated\": \"2019-07-07T06:47:55.219Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Dil e Majboor Episode 26 On TV One \\u2013 3 July 2017\",\n            \"slug\": \"dil-e-majboor-episode-26-on-tv-one-3-july-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.219Z\",\n            \"target_date\": \"2019-07-26\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/8F6--w-8ZqM', 'original': 'https://www.youtube.com/embed/8F6--w-8ZqM'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/dil-e-majboor-episode-26-on-tv-one-3-july-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4104,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.269Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.269Z\",\n            \"updated\": \"2019-07-07T06:47:55.269Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Dil e Majboor Episode 25 On TV One \\u2013 19 June 2017\",\n            \"slug\": \"dil-e-majboor-episode-25-on-tv-one-19-june-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.269Z\",\n            \"target_date\": \"2019-07-25\",\n            \"text\": \"{'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5r9540', 'original': '//www.dailymotion.com/embed/video/x5r9540'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/dil-e-majboor-episode-25-on-tv-one-19-june-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4105,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.317Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.316Z\",\n            \"updated\": \"2019-07-07T06:47:55.317Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Dil e Majboor Episode 24 On TV One \\u2013 19 June 2017\",\n            \"slug\": \"dil-e-majboor-episode-24-on-tv-one-19-june-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.317Z\",\n            \"target_date\": \"2019-07-24\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/clk-TBbFagE?list=PLOCPbC19Msee58gAkOnwvQ-1XIoM1lsDt', 'original': 'https://www.youtube.com/embed/clk-TBbFagE?list=PLOCPbC19Msee58gAkOnwvQ-1XIoM1lsDt'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5q611i', 'original': '//www.dailymotion.com/embed/video/x5q611i'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/dil-e-majboor-episode-24-on-tv-one-19-june-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4106,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.359Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.359Z\",\n            \"updated\": \"2019-07-07T06:47:55.360Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Dil e Majboor Episode 23 On TV One \\u2013 5 Jun 2017\",\n            \"slug\": \"dil-e-majboor-episode-23-on-tv-one-5-jun-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.360Z\",\n            \"target_date\": \"2019-07-23\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/SNcKYv81FBw', 'original': 'https://www.youtube.com/embed/SNcKYv81FBw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5fds1p', 'original': '//www.dailymotion.com/embed/video/x5fds1p'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/dil-e-majboor-episode-23-on-ary-tv-one-5-jun-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4107,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.397Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:55.396Z\",\n            \"updated\": \"2019-07-07T06:47:55.397Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 173,\n                \"feed_id\": 54,\n                \"feed_name\": \"VPK - Dil e Majboor\",\n                \"show_name\": \"Dil e Majboor\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Dil e Majboor Episode 22 On TV One \\u2013 29 May 2017\",\n            \"slug\": \"dil-e-majboor-episode-22-on-tv-one-29-may-2017\",\n            \"publish_date\": \"2019-07-07T06:47:55.397Z\",\n            \"target_date\": \"2019-07-22\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/qigTc-P0P4o', 'original': 'https://www.youtube.com/embed/qigTc-P0P4o'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5ob5r5', 'original': '//www.dailymotion.com/embed/video/x5ob5r5'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/dil-e-majboor/\",\n            \"source_detail\": \"http://vidpk.com/dil-e-majboor-episode-22-on-tv-one-29-may-2017/\",\n            \"category\": 5,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 48,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Dil e Majboor\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:56.542Z\",\n            \"updated\": \"2019-07-07T06:47:56.542Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 139 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-139-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:56.542Z\",\n            \"target_date\": \"0139-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/MoYOdnsdg1c', 'original': 'https://www.youtube.com/embed/MoYOdnsdg1c'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5ce8j5', 'original': '//www.dailymotion.com/embed/video/x5ce8j5'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-139-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:56.620Z\",\n            \"updated\": \"2019-07-07T06:47:56.620Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 138 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-138-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:56.620Z\",\n            \"target_date\": \"0138-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/mEahCBHg99o', 'original': 'https://www.youtube.com/embed/mEahCBHg99o'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x273exj', 'original': '//www.dailymotion.com/embed/video/x273exj'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-138-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.687Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:56.686Z\",\n            \"updated\": \"2019-07-07T06:47:56.687Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 137 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-137-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:56.687Z\",\n            \"target_date\": \"0137-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/FoFEJrgxt1U', 'original': 'https://www.youtube.com/embed/FoFEJrgxt1U'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3g8p1j', 'original': '//www.dailymotion.com/embed/video/x3g8p1j'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-137-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.746Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:56.746Z\",\n            \"updated\": \"2019-07-07T06:47:56.746Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 136 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-136-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:56.746Z\",\n            \"target_date\": \"0136-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/_j2fvgl_uCo', 'original': 'https://www.youtube.com/embed/_j2fvgl_uCo'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x4lwd47', 'original': '//www.dailymotion.com/embed/video/x4lwd47'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-136-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.816Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:56.816Z\",\n            \"updated\": \"2019-07-07T06:47:56.816Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 135 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-135-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:56.816Z\",\n            \"target_date\": \"0135-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/ACqAukOFc6o', 'original': 'https://www.youtube.com/embed/ACqAukOFc6o'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3fz9ni', 'original': '//www.dailymotion.com/embed/video/x3fz9ni'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-135-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.921Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:56.896Z\",\n            \"updated\": \"2019-07-07T06:47:56.921Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 134 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-134-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:56.921Z\",\n            \"target_date\": \"0134-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/t_ZVTbi07D8', 'original': 'https://www.youtube.com/embed/t_ZVTbi07D8'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x4lq9y9', 'original': '//www.dailymotion.com/embed/video/x4lq9y9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-134-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.969Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:56.969Z\",\n            \"updated\": \"2019-07-07T06:47:56.969Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 133 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-133-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:56.969Z\",\n            \"target_date\": \"0133-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/TwYw3j_bGUw', 'original': 'https://www.youtube.com/embed/TwYw3j_bGUw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3fthyc', 'original': '//www.dailymotion.com/embed/video/x3fthyc'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-133-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.029Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.029Z\",\n            \"updated\": \"2019-07-07T06:47:57.029Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 132 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-132-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.029Z\",\n            \"target_date\": \"0132-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Ba8MjO6pJFc', 'original': 'https://www.youtube.com/embed/Ba8MjO6pJFc'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5bu676', 'original': '//www.dailymotion.com/embed/video/x5bu676'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-132-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.079Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.079Z\",\n            \"updated\": \"2019-07-07T06:47:57.079Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 131 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-131-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.079Z\",\n            \"target_date\": \"0131-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/q9VykaFh9mM', 'original': 'https://www.youtube.com/embed/q9VykaFh9mM'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3fn3ow', 'original': '//www.dailymotion.com/embed/video/x3fn3ow'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-131-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.100Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.100Z\",\n            \"updated\": \"2019-07-07T06:47:57.100Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 130 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-130-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.100Z\",\n            \"target_date\": \"0130-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/-Cv0zdwdDdU', 'original': 'https://www.youtube.com/embed/-Cv0zdwdDdU'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3fhm3v', 'original': '//www.dailymotion.com/embed/video/x3fhm3v'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-130-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.118Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.118Z\",\n            \"updated\": \"2019-07-07T06:47:57.119Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 129 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-129-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.119Z\",\n            \"target_date\": \"0129-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/3jr5-WT2kXs', 'original': 'https://www.youtube.com/embed/3jr5-WT2kXs'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x2gv42q', 'original': '//www.dailymotion.com/embed/video/x2gv42q'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-129-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.159Z\",\n            \"updated\": \"2019-07-07T06:47:57.159Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 128 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-128-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.159Z\",\n            \"target_date\": \"0128-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/R1mBss6SfS4', 'original': 'https://www.youtube.com/embed/R1mBss6SfS4'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x48g2r0', 'original': '//www.dailymotion.com/embed/video/x48g2r0'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-128-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.181Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.180Z\",\n            \"updated\": \"2019-07-07T06:47:57.181Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 127 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-127-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.181Z\",\n            \"target_date\": \"0127-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/JysoDYLnROU', 'original': 'https://www.youtube.com/embed/JysoDYLnROU'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x26oge9', 'original': '//www.dailymotion.com/embed/video/x26oge9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-127-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.199Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.199Z\",\n            \"updated\": \"2019-07-07T06:47:57.199Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 126 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-126-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.199Z\",\n            \"target_date\": \"0126-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/VZTMf9ecPOc', 'original': 'https://www.youtube.com/embed/VZTMf9ecPOc'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x4l0rw4', 'original': '//www.dailymotion.com/embed/video/x4l0rw4'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-126-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4177,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.219Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.219Z\",\n            \"updated\": \"2019-07-07T06:47:57.219Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 125 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-125-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.219Z\",\n            \"target_date\": \"0125-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/zSVVrPYx2wk', 'original': 'https://www.youtube.com/embed/zSVVrPYx2wk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3fbkol', 'original': '//www.dailymotion.com/embed/video/x3fbkol'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-125-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4178,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.281Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.281Z\",\n            \"updated\": \"2019-07-07T06:47:57.281Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 124 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-124-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.281Z\",\n            \"target_date\": \"0124-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/zSVVrPYx2wk', 'original': 'https://www.youtube.com/embed/zSVVrPYx2wk'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x47yf13', 'original': '//www.dailymotion.com/embed/video/x47yf13'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-124-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4179,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.300Z\",\n            \"updated\": \"2019-07-07T06:47:57.300Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 123 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-123-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.300Z\",\n            \"target_date\": \"0123-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/GtrUJ2JcsKw', 'original': 'https://www.youtube.com/embed/GtrUJ2JcsKw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3f587d', 'original': '//www.dailymotion.com/embed/video/x3f587d'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-123-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4180,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.331Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.330Z\",\n            \"updated\": \"2019-07-07T06:47:57.331Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 122 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-122-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.331Z\",\n            \"target_date\": \"0122-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/rmTXwMxt4Cw', 'original': 'https://www.youtube.com/embed/rmTXwMxt4Cw'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x26hns7', 'original': '//www.dailymotion.com/embed/video/x26hns7'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-122-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4181,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.369Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.369Z\",\n            \"updated\": \"2019-07-07T06:47:57.369Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 121 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-121-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.369Z\",\n            \"target_date\": \"0121-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/8xUYjnCCQZU', 'original': 'https://www.youtube.com/embed/8xUYjnCCQZU'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3ewkp9', 'original': '//www.dailymotion.com/embed/video/x3ewkp9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-121-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4182,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.391Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.391Z\",\n            \"updated\": \"2019-07-07T06:47:57.391Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 120 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-120-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.391Z\",\n            \"target_date\": \"0120-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/biRYJ-3oaH4', 'original': 'https://www.youtube.com/embed/biRYJ-3oaH4'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x47jgnz', 'original': '//www.dailymotion.com/embed/video/x47jgnz'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-120-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4183,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.410Z\",\n            \"updated\": \"2019-07-07T06:47:57.410Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 119 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-119-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.410Z\",\n            \"target_date\": \"0119-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/hmoZ_GWoO8c', 'original': 'https://www.youtube.com/embed/hmoZ_GWoO8c'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x4khmc2', 'original': '//www.dailymotion.com/embed/video/x4khmc2'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-119-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4184,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.439Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.438Z\",\n            \"updated\": \"2019-07-07T06:47:57.439Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 118 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-118-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.439Z\",\n            \"target_date\": \"0118-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/oHy9BP9OUN4', 'original': 'https://www.youtube.com/embed/oHy9BP9OUN4'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x47ap7v', 'original': '//www.dailymotion.com/embed/video/x47ap7v'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-118-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4185,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.487Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.487Z\",\n            \"updated\": \"2019-07-07T06:47:57.487Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 117 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-117-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.488Z\",\n            \"target_date\": \"0117-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/o_lT6kLmKsg', 'original': 'https://www.youtube.com/embed/o_lT6kLmKsg'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x3ek733', 'original': '//www.dailymotion.com/embed/video/x3ek733'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-117-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"TUE\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4186,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.548Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.548Z\",\n            \"updated\": \"2019-07-07T06:47:57.548Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 116 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-116-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.548Z\",\n            \"target_date\": \"0116-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/Oql4rQiQ2yo', 'original': 'https://www.youtube.com/embed/Oql4rQiQ2yo'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5b9ino', 'original': '//www.dailymotion.com/embed/video/x5b9ino'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-116-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4187,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.656Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.656Z\",\n            \"updated\": \"2019-07-07T06:47:57.656Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 115 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-115-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.656Z\",\n            \"target_date\": \"0115-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/0hQ8Fmnbn-U', 'original': 'https://www.youtube.com/embed/0hQ8Fmnbn-U'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5b9ho8', 'original': '//www.dailymotion.com/embed/video/x5b9ho8'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-115-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SAT\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4188,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.773Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.772Z\",\n            \"updated\": \"2019-07-07T06:47:57.773Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 114 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-114-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.773Z\",\n            \"target_date\": \"0114-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/ybEzoH_otBs', 'original': 'https://www.youtube.com/embed/ybEzoH_otBs'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5b9grz', 'original': '//www.dailymotion.com/embed/video/x5b9grz'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-114-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"FRI\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4189,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.847Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.847Z\",\n            \"updated\": \"2019-07-07T06:47:57.848Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 113 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-113-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.848Z\",\n            \"target_date\": \"0113-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/1Zc24QgdJ1I', 'original': 'https://www.youtube.com/embed/1Zc24QgdJ1I'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5b9g3r', 'original': '//www.dailymotion.com/embed/video/x5b9g3r'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-113-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"THU\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4190,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:57.922Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:57.922Z\",\n            \"updated\": \"2019-07-07T06:47:57.923Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 112 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-112-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:57.923Z\",\n            \"target_date\": \"0112-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/KrQN8ESYSn0', 'original': 'https://www.youtube.com/embed/KrQN8ESYSn0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5b9fi9', 'original': '//www.dailymotion.com/embed/video/x5b9fi9'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-112-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"WED\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4191,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:58.069Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:58.062Z\",\n            \"updated\": \"2019-07-07T06:47:58.069Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 111 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-111-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:58.069Z\",\n            \"target_date\": \"0111-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/cIGKXZ_a2V0', 'original': 'https://www.youtube.com/embed/cIGKXZ_a2V0'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x5b9eu3', 'original': '//www.dailymotion.com/embed/video/x5b9eu3'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-111-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"MON\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    },\n    {\n        \"model\": \"pakguru_app.post\",\n        \"pk\": 4192,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:58.131Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:58.130Z\",\n            \"updated\": \"2019-07-07T06:47:58.131Z\",\n            \"extra_data\": {\n                \"host\": \"Unknown\",\n                \"job_id\": 176,\n                \"feed_id\": 53,\n                \"feed_name\": \"VPK - Bulbulay\",\n                \"show_name\": \"Bulbulay\",\n                \"feed_quality\": \"720p\"\n            },\n            \"title\": \"Watch Bulbulay Episode 110 On ARY Digital \\u2013 10 Dec 2016\",\n            \"slug\": \"watch-bulbulay-episode-110-on-ary-digital-10-dec-2016\",\n            \"publish_date\": \"2019-07-07T06:47:58.131Z\",\n            \"target_date\": \"0110-07-06\",\n            \"text\": \"{'www.youtube.com': {'link': 'https://www.youtube.com/watch/_qrdVLcYm2I', 'original': 'https://www.youtube.com/embed/_qrdVLcYm2I'}, 'www.dailymotion.com': {'link': 'http://www.dailymotion.com/watch/video/x15of6c', 'original': '//www.dailymotion.com/embed/video/x15of6c'}}\",\n            \"post_author\": \"Talk Shows Guru\",\n            \"source\": \"http://vidpk.com/tag/bulbulay/\",\n            \"source_detail\": \"http://vidpk.com/watch-bulbulay-episode-110-ary-digital-10-dec-2016/\",\n            \"category\": 7,\n            \"media_type\": \"EMBEDDED_VIDEO\",\n            \"weekday_name\": \"SUN\",\n            \"locale\": 2,\n            \"show\": 47,\n            \"tags\": \"[\\\"Unknown\\\", \\\"Bulbulay\\\"]\",\n            \"flagged\": false,\n            \"flagged_data\": null,\n            \"is_Show\": true,\n            \"is_Joke\": false,\n            \"is_Quote\": false,\n            \"is_Politics\": true,\n            \"country\": []\n        }\n    }\n]\n":1hkIz3:7ddHHqsTEGo-BzwUdEB0Wb31618