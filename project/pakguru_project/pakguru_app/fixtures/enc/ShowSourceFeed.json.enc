"[\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 1,\n        \"fields\": {\n            \"feed_name\": \"YouTube - 60 Minutes\",\n            \"show_name\": \"60 Minutes\",\n            \"channel\": 1,\n            \"playlist_link\": \"https://www.youtube.com/user/60minutes/playlists?view=1&sort=dd&flow=grid\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?v=UNvdyKiNP_A\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"Youtube\",\n            \"feed_quality\": \"1080p\",\n            \"priority\": 1,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:15:13.753Z\",\n            \"updated\": \"2019-07-01T01:43:06.946Z\",\n            \"country\": [\n                2\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 2,\n        \"fields\": {\n            \"feed_name\": \"YouTube - Zara Hat Kay\",\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/watch?v=odMfq4uvawg&list=PLqvJuaAfjXbQZEZrIYkNHyd5JYW4peIwE\",\n            \"latest_show_link\": \"https://www.youtube.com/watch?time_continue=2&v=bsc23Rabj0w\",\n            \"title_example\": null,\n            \"title_search_pattern\": null,\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T03:13:12.619Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"Youtube\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 3,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:36:31.821Z\",\n            \"updated\": \"2019-07-01T03:13:12.619Z\",\n            \"country\": [\n                2\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 3,\n        \"fields\": {\n            \"feed_name\": \"unewstv - Zara Hat Kay\",\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153186/zara-hut-kay-andhere-main-ujala-29th-june-2019\",\n            \"title_example\": \"Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019 Zara Hut Kay (Andhere Main Ujala) \\u2013 29th June 2019\",\n            \"title_search_pattern\": \"{show name} ({episode title}) \\u2013 {date: DDth MMM YYYY}\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Zara+Hut+Kay+on+Dawn+News\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-03T02:09:02.888Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"UNEWSTV\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T01:42:27.916Z\",\n            \"updated\": \"2019-07-03T02:09:02.889Z\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 4,\n        \"fields\": {\n            \"feed_name\": \"Talk Shows Central - Zara Hat Kay\",\n            \"show_name\": \"Zara Hat Kay\",\n            \"channel\": 2,\n            \"playlist_link\": \"https://www.youtube.com/playlist?list=PL3kMf0Q991MNBSj9EmVLH-lkOIQ07e3xu\",\n            \"latest_show_link\": \"https://youtu.be/5Hs3PpRgw1U?list=PL3kMf0Q991MNBSj9EmVLH-lkOIQ07e3xu\",\n            \"title_example\": \"Another Huge Success of PM Imran Khan | Zara Hat Kay | 28 June 2019 | Dawn News\",\n            \"title_search_pattern\": \"{Episode Name} | {Show name} | {date:DD MMM YYYY} | {Channel Name}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T03:12:33.822Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"Talk Shows Central\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T02:48:30.906Z\",\n            \"updated\": \"2019-07-01T03:12:33.822Z\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 5,\n        \"fields\": {\n            \"feed_name\": \"unewstv - Merey Mutabiq with Hassan Nisar\",\n            \"show_name\": \"Merey Mutabiq with Hassan Nisar\",\n            \"channel\": 4,\n            \"playlist_link\": \"http://www.unewstv.com/category/Merey+Mutabiq+with+Hassan+Nisar\",\n            \"latest_show_link\": \"http://www.unewstv.com/153242/meray-mutabiq-with-hassan-nisar-amnesty-scheme-other-issues-30th-june-2019\",\n            \"title_example\": \"Meray Mutabiq With Hassan Nisar (Amnesty Scheme, Other Issues) - 30th June 2019\",\n            \"title_search_pattern\": \"{show name} ({episode title}) \\u2013 {date: DDth MMM YYYY}\",\n            \"search_api_url\": null,\n            \"search_api_pattern\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T05:56:46.741Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"unewstv\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 1,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:55:27.463Z\",\n            \"updated\": \"2019-07-01T05:56:46.741Z\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 6,\n        \"fields\": {\n            \"feed_name\": \"unewstv - Live with Dr. Shahid Masood\",\n            \"show_name\": \"Live with Dr. Shahid Masood\",\n            \"channel\": 5,\n            \"playlist_link\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"latest_show_link\": \"http://www.unewstv.com/153227/live-with-dr-shahid-masood-imran-khan-aur-loti-hui-daulat-30th-june-2019\",\n            \"title_example\": \"Live with Dr. Shahid Masood (Imran Khan Aur Loti Hui Daulat) - 30th June 2019\",\n            \"title_search_pattern\": \"Live with Dr. Shahid Masood (Muashi Dehshatgardi Ka Bharpoor Waar) - 29th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Live+with+Dr.+Shahid+Masood\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T08:55:53.055Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"unewstv\",\n            \"feed_quality\": \"720p\",\n            \"priority\": 2,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T08:55:53.055Z\",\n            \"updated\": \"2019-07-01T08:55:53.055Z\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 7,\n        \"fields\": {\n            \"feed_name\": \"Geo News - Score with Yahya Hussaini\",\n            \"show_name\": \"Score with Yahya Hussaini\",\n            \"channel\": 4,\n            \"playlist_link\": \"https://www.geo.tv/shows/score\",\n            \"latest_show_link\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"title_example\": \"Score - 28-June-2019\",\n            \"title_search_pattern\": \"Score - 27-June-2019\",\n            \"search_api_url\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"search_api_pattern\": \"https://www.geo.tv/shows/score/241687-score-28-june-2019\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:07:08.136Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"Other\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:07:08.136Z\",\n            \"updated\": \"2019-07-01T19:07:08.136Z\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 8,\n        \"fields\": {\n            \"feed_name\": \"HUM TV - Deewar e Shab\",\n            \"show_name\": \"Deewar e Shab\",\n            \"channel\": 6,\n            \"playlist_link\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"latest_show_link\": \"https://www.hum.tv/deewar-e-shab-episode-04/\",\n            \"title_example\": \"Deewar e Shab Episode #04 HUM TV Drama 29 June 2019\",\n            \"title_search_pattern\": \"Deewar e Shab Episode #03 HUM TV Drama 22 June 2019\",\n            \"search_api_url\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"search_api_pattern\": \"https://www.hum.tv/dramas/deewar-e-shab/\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T19:52:37.901Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"Other\",\n            \"feed_quality\": \"1080p\",\n            \"priority\": 2,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:52:37.901Z\",\n            \"updated\": \"2019-07-01T19:52:37.901Z\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 9,\n        \"fields\": {\n            \"feed_name\": \"unewstv - Muqabil\",\n            \"show_name\": \"Muqabil\",\n            \"channel\": 7,\n            \"playlist_link\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"latest_show_link\": \"http://www.unewstv.com/153314/muqabil-is-pm-helpless-in-front-of-corruption-mafia-1st-july-2019\",\n            \"title_example\": \"Muqabil (Is PM Helpless In Front of Corruption Mafia) \\u2013 1st July 2019\",\n            \"title_search_pattern\": \"Muqabil (Kia Opposition Tehreek Chalaye Gi) \\u2013 27th June 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Muqabil+on+92+News\",\n            \"search_api_pattern\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-02T17:01:55.446Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"unewstv\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:01:55.446Z\",\n            \"updated\": \"2019-07-02T17:01:55.446Z\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showsourcefeed\",\n        \"pk\": 10,\n        \"fields\": {\n            \"feed_name\": \"unewstv - Off The Record\",\n            \"show_name\": \"Off The Record\",\n            \"channel\": 8,\n            \"playlist_link\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"latest_show_link\": \"http://www.unewstv.com/153037/off-the-record-all-parties-conference-inflation-27th-june-2019\",\n            \"title_example\": \"Off The Record (All Parties Conference, Inflation) - 27th June 2019\",\n            \"title_search_pattern\": \"Off The Record (APC Ne Kia Hasil Kia?) \\u2013 26th June 2019 June 26, 2019\",\n            \"search_api_url\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"search_api_pattern\": \"http://www.unewstv.com/category/Off+The+Record+with+Kashif+Abbasi\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-02T17:28:47.497Z\",\n            \"expiration_date\": null,\n            \"feed_source\": \"unewstv\",\n            \"feed_quality\": \"480p\",\n            \"priority\": 2,\n            \"extra_data\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:28:47.497Z\",\n            \"updated\": \"2019-07-02T17:28:47.497Z\",\n            \"country\": [\n                4\n            ]\n        }\n    }\n]\n":1hiUuZ:Hh9w4K5V4ZPJot19mpdyW_dzWD4