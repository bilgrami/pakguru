"[\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 1,\n        \"fields\": {\n            \"name\": \"CBS\",\n            \"description\": \"CBS is an American English language commercial broadcast television and radio network that is a flagship property of CBS Corporation. The company is headquartered at the CBS Building in New York City with major production facilities and operations in New York City and Los Angeles\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:44:09.335Z\",\n            \"updated\": \"2019-07-01T00:44:09.335Z\",\n            \"extra_data\": null,\n            \"website_link\": \"http://cbs.com\",\n            \"youtube_link\": null,\n            \"facebook_link\": \"https://www.facebook.com/CBS/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"CBS\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 2,\n        \"fields\": {\n            \"name\": \"Dawn News\",\n            \"description\": \"Dawn is Pakistan's oldest, leading and most widely read English-language newspaper and is the country's newspaper of record. It is one of the country's three largest English-language dailies and the flagship of the Dawn Group of Newspapers.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:46:09.650Z\",\n            \"updated\": \"2019-07-01T02:51:51.851Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://en.wikipedia.org/wiki/Dawn_(newspaper)\",\n            \"youtube_link\": \"https://www.youtube.com/user/dawnnewspakistan\",\n            \"facebook_link\": \"https://www.facebook.com/DawnNews/\",\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"Dawn News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 3,\n        \"fields\": {\n            \"name\": \"Dunya News\",\n            \"description\": \"Dunya News is a 24 hours Urdu language news and current affairs television channel from Pakistan. It is governed and operated by the National Communication Services Pvt. Ltd. Its head office is situated at Lahore, Pakistan. \\r\\n\\r\\nhttps://en.wikipedia.org/wiki/Dunya_News\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T00:47:44.156Z\",\n            \"updated\": \"2019-07-01T02:53:25.223Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://dunyanews.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCnMBV5Iw4WqKILKue1nP6Hg\",\n            \"facebook_link\": \"https://www.facebook.com/dunyanews/\",\n            \"twitter_link\": \"https://twitter.com/DunyaNews\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"Dunya News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 4,\n        \"fields\": {\n            \"name\": \"Geo News\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-01T05:54:22.633Z\",\n            \"updated\": \"2019-07-01T05:54:22.633Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"Geo News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 5,\n        \"fields\": {\n            \"name\": \"GNN\",\n            \"description\": \"G News Network, commonly known as GNN, is a Pakistani 24-hour news and current affairs channel based in Lahore, Pakistan. It is owned and operated by Gourmet Foods.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T08:42:51.088Z\",\n            \"updated\": \"2019-07-01T08:42:51.088Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://gnnhd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC35KuZBNIj4S5Ls0yjY-UHQ\",\n            \"facebook_link\": \"https://www.facebook.com/gnnhd.tv/\",\n            \"twitter_link\": \"https://twitter.com/gnnhdofficial\",\n            \"instagram_link\": \"https://www.instagram.com/gnnhd.official/\",\n            \"channel_short_code\": \"GNN\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 6,\n        \"fields\": {\n            \"name\": \"HUM TV\",\n            \"description\": \"Hum TV is a 24-hour Urdu General Entertainment TV channel based in Karachi, Pakistan. It was founded by Sultana Siddiqui and Duraid Qureshi. It is owned by Hum Network Limited. Hum Network Limited was known as Eye Television Network Limited prior to 21 January 2011. Hum TV began its transmission on 17 January 2005.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-01T19:46:01.465Z\",\n            \"updated\": \"2019-07-01T19:46:01.465Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.hum.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCEeEQxm6qc_qaTE7qTV5aLQ\",\n            \"facebook_link\": \"https://www.facebook.com/humtvpakistan\",\n            \"twitter_link\": null,\n            \"instagram_link\": \"https://www.instagram.com/humtvpakistanofficial/\",\n            \"channel_short_code\": \"HUM TV\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 7,\n        \"fields\": {\n            \"name\": \"92 News\",\n            \"description\": \"92 News is an Urdu language channel. It is Pakistan's first HD television news channel based in Lahore, launched in year 2015. On 1992 Pakistan won the Cricket World Cup so channel name based on this event. 92 is the country code of Pakistan and it counts as another major reason in this subject.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T16:50:37.123Z\",\n            \"updated\": \"2019-07-02T16:50:37.123Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://92newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCsgC5cbz3DE2Shh34gNKiog\",\n            \"facebook_link\": \"https://web.facebook.com/92NewsHD?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/92newschannel\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"92 News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 8,\n        \"fields\": {\n            \"name\": \"ARY News\",\n            \"description\": \"ARY News is a Pakistani news channel launched on 26 September 2004. A bilingual news channel in English and Urdu, it is a part of the ARY Digital Network, which is a subsidiary of ARY Group. ARY is an acronym of Abdul Razzak Yaqoob, who was the owner of ARY Group.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-02T17:22:21.278Z\",\n            \"updated\": \"2019-07-02T17:22:21.278Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://arynews.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCMmpLL2ucRHAXbNHiCPyIyg\",\n            \"facebook_link\": \"https://web.facebook.com/arynewsasia?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/arynewsofficial\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"ARY News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 9,\n        \"fields\": {\n            \"name\": \"Aap News\",\n            \"description\": \"AAP Media Network bringing two News Channel in Pakistan. AAP NEWS is a urdu based news channel and INDUS NEWS an English Language news channel for local and international audience.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T07:51:33.036Z\",\n            \"updated\": \"2019-07-03T07:51:33.036Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://aapnews.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCPTF7suymU_TvRvRPYuHdvA\",\n            \"facebook_link\": \"https://web.facebook.com/aapnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aapnewspk\",\n            \"instagram_link\": \"https://www.instagram.com/aapnewspk/\",\n            \"channel_short_code\": \"Aap News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 10,\n        \"fields\": {\n            \"name\": \"24 News\",\n            \"description\": \"24 News HD is an Urdu language current affairs television channel in Pakistan based in Lahore, launched in 2015.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T09:43:35.063Z\",\n            \"updated\": \"2019-07-03T09:43:35.063Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.24newshd.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCcmpeVbSSQlZRvHfdC-CRwg\",\n            \"facebook_link\": \"https://web.facebook.com/24NewsHD.tv?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/24NewsHDtv\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"24 News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 11,\n        \"fields\": {\n            \"name\": \"Neo News\",\n            \"description\": \"Neo News HD is an Urdu language Pakistani news channel based in Lahore, launched on 15 May 2015.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:18:33.164Z\",\n            \"updated\": \"2019-07-03T18:18:33.164Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.neonetwork.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCAsvFcpUQegneSh0QAUd64A\",\n            \"facebook_link\": \"https://web.facebook.com/neotvnetwork/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/NeoNewsUR\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"Neo News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 12,\n        \"fields\": {\n            \"name\": \"Express News\",\n            \"description\": \"Express News is an Urdu language Pakistani television news channel Based in karachi, launched on January 1, 2008. It is owned and run by the country's third largest Urdu daily, Daily Express.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T18:42:42.361Z\",\n            \"updated\": \"2019-07-03T18:42:42.361Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.express.pk/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCTur7oM6mLL0rM2k0znuZpQ\",\n            \"facebook_link\": \"https://web.facebook.com/expressnewspk?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/ExpressNewsPK\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"Express News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 13,\n        \"fields\": {\n            \"name\": \"Aaj News\",\n            \"description\": \"Aaj News is a 24-hour Pakistani news television channel. The word Aaj in English means \\\"Today\\\". It is a privately owned Urdu language TV station which covers national and international news.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-01T01:43:06.946Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-03T19:04:12.604Z\",\n            \"updated\": \"2019-07-03T19:15:04.745Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.aaj.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCgBAPAcLsh_MAPvJprIz89w\",\n            \"facebook_link\": \"https://web.facebook.com/aajtv0/?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/aaj_urdu\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"Aaj News\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 14,\n        \"fields\": {\n            \"name\": \"BOL News\",\n            \"description\": \"BOL Network (Urdu: \\u0628\\u0648\\u0644 \\u0646\\u06cc\\u0679 \\u0648\\u0631\\u06a9\\u200e) is a media conglomerate based in Karachi owned by Shoaib Ahmed Shaikh, who also served as the CEO and chairman of the media network.\\r\\nBol has launched its live regular transmission on 25 December 2016.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T20:15:57.240Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T19:27:03Z\",\n            \"updated\": \"2019-07-04T20:15:57.240Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.bolnetwork.com/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UCz2yxQJZgiB_5elTzqV7FiQ\",\n            \"facebook_link\": \"https://web.facebook.com/BOLNETWORK/\",\n            \"twitter_link\": \"https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fwww.bolnetwork.com%2F&ref_src=twsrc%5Etfw&screen_name=BOLNetwork&tw_p=followbutton\",\n            \"instagram_link\": null,\n            \"channel_short_code\": \"BOL News\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 15,\n        \"fields\": {\n            \"name\": \"SAMAA TV\",\n            \"description\": \"SAMAA TV is Pakistan\\u2019s first private satellite news channel that provides live transmission simultaneously from five cities of Pakistan: Karachi, Lahore, Islamabad, Quetta and Peshawar.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-04T19:59:58.292Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-04T19:55:20Z\",\n            \"updated\": \"2019-07-04T19:59:58.292Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://www.samaa.tv/\",\n            \"youtube_link\": \"https://www.youtube.com/user/samaatvnews\",\n            \"facebook_link\": \"https://web.facebook.com/samaatvnews?_rdc=1&_rdr\",\n            \"twitter_link\": \"https://twitter.com/samaatv\",\n            \"instagram_link\": \"https://www.instagram.com/samaatv/\",\n            \"channel_short_code\": \"SAMAA TV\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 16,\n        \"fields\": {\n            \"name\": \"Geo TV\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-06T10:17:38.856Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T10:17:18Z\",\n            \"updated\": \"2019-07-06T10:17:38.856Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"GEO\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 17,\n        \"fields\": {\n            \"name\": \"Ary Digital\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:34:56.028Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:34:35Z\",\n            \"updated\": \"2019-07-07T06:34:56.028Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"ARYD\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 18,\n        \"fields\": {\n            \"name\": \"TV One\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:41:31.281Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:41:02Z\",\n            \"updated\": \"2019-07-07T06:41:31.281Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"TVONE\",\n            \"country\": [\n                4\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 19,\n        \"fields\": {\n            \"name\": \"Abb Takk\",\n            \"description\": \"Abbtakk delivers the latest headlines news and information on the latest top stories from Pakistan and around the world on weather, business, entertainment, politics, sports and more.\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-10T14:49:59.978Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2019-07-10T14:48:31Z\",\n            \"updated\": \"2019-07-10T14:49:59.979Z\",\n            \"extra_data\": null,\n            \"website_link\": \"https://abbtakk.tv/en/\",\n            \"youtube_link\": \"https://www.youtube.com/channel/UC5mwDEzm4FzXKoHPBDnuUQQ\",\n            \"facebook_link\": \"https://www.facebook.com/AbbTakk/?ref=bookmarks\",\n            \"twitter_link\": null,\n            \"instagram_link\": \"https://www.instagram.com/abbtakknewsofficial/\",\n            \"channel_short_code\": \"Abb Takk\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 20,\n        \"fields\": {\n            \"name\": \"APlus\",\n            \"description\": \"\",\n            \"is_active\": true,\n            \"effective_date\": \"2019-08-05T06:15:07.432Z\",\n            \"expiration_date\": null,\n            \"added_by\": null,\n            \"created\": \"2019-08-05T06:14:26Z\",\n            \"updated\": \"2019-08-05T06:15:07.432Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"APlus\",\n            \"country\": [\n                1\n            ]\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showchannel\",\n        \"pk\": 21,\n        \"fields\": {\n            \"name\": \"PTV\",\n            \"description\": \"\",\n            \"is_active\": false,\n            \"effective_date\": \"2020-02-06T18:44:59.075Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"shahneela\"\n            ],\n            \"created\": \"2020-02-05T11:55:02Z\",\n            \"updated\": \"2020-02-06T18:44:59.075Z\",\n            \"extra_data\": null,\n            \"website_link\": null,\n            \"youtube_link\": null,\n            \"facebook_link\": null,\n            \"twitter_link\": null,\n            \"instagram_link\": null,\n            \"channel_short_code\": \"PTV\",\n            \"country\": [\n                4\n            ]\n        }\n    }\n]\n":1j3BTd:rlfVH5L7eMIqCmDDZWW3sBbjkoE