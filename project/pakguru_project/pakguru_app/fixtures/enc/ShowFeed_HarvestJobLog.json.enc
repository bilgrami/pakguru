"[\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 94,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:11.831Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:11.451Z\",\n            \"updated\": \"2019-07-06T12:34:11.831Z\",\n            \"extra_data\": null,\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_3-unewstv-zara-hat-kay.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 95,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:34.129Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:33.880Z\",\n            \"updated\": \"2019-07-06T12:34:34.129Z\",\n            \"extra_data\": null,\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_uGSehYL.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 96,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:34:56.237Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:34:55.997Z\",\n            \"updated\": \"2019-07-06T12:34:56.237Z\",\n            \"extra_data\": null,\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_euQl3LR.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 97,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:35:19.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:35:18.808Z\",\n            \"updated\": \"2019-07-06T12:35:19.410Z\",\n            \"extra_data\": null,\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 98,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:35:39.907Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:35:39.668Z\",\n            \"updated\": \"2019-07-06T12:35:39.907Z\",\n            \"extra_data\": null,\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_9-unewstv-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 99,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:01.487Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:01.328Z\",\n            \"updated\": \"2019-07-06T12:36:01.487Z\",\n            \"extra_data\": null,\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_10-unewstv-off-the-record.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 100,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:23.644Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:23.448Z\",\n            \"updated\": \"2019-07-06T12:36:23.644Z\",\n            \"extra_data\": null,\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 101,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:33.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:33.206Z\",\n            \"updated\": \"2019-07-06T12:36:33.410Z\",\n            \"extra_data\": null,\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 102,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:36:55.159Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:36:54.778Z\",\n            \"updated\": \"2019-07-06T12:36:55.159Z\",\n            \"extra_data\": null,\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_13-unewstv-the-reporters.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 103,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:37:17.465Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:37:17.283Z\",\n            \"updated\": \"2019-07-06T12:37:17.465Z\",\n            \"extra_data\": null,\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_8ZyT7rC.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 104,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:37:39.467Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:37:39.332Z\",\n            \"updated\": \"2019-07-06T12:37:39.467Z\",\n            \"extra_data\": null,\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_15-unewstv-night-edition.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 105,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:01.617Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:01.329Z\",\n            \"updated\": \"2019-07-06T12:38:01.617Z\",\n            \"extra_data\": null,\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_16-unewstv-jirga.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 106,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:24.124Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:23.820Z\",\n            \"updated\": \"2019-07-06T12:38:24.124Z\",\n            \"extra_data\": null,\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_17-unewstv-bebaak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 107,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:38:45.509Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:38:45.284Z\",\n            \"updated\": \"2019-07-06T12:38:45.509Z\",\n            \"extra_data\": null,\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_18-unewstv-capital-talk.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 108,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:02.639Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:02.469Z\",\n            \"updated\": \"2019-07-06T12:39:02.639Z\",\n            \"extra_data\": null,\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 109,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:23.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:23.685Z\",\n            \"updated\": \"2019-07-06T12:39:23.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_20-unewstv-power-play.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 110,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:39:46.342Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:39:46.123Z\",\n            \"updated\": \"2019-07-06T12:39:46.342Z\",\n            \"extra_data\": null,\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_21-unewstv-najam-sethi-show.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 111,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:08.540Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:08.406Z\",\n            \"updated\": \"2019-07-06T12:40:08.540Z\",\n            \"extra_data\": null,\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_22-unewstv-think-tank.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 112,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:30.581Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:30.339Z\",\n            \"updated\": \"2019-07-06T12:40:30.581Z\",\n            \"extra_data\": null,\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_23-unewstv-harf-e-raaz.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 113,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:40:52.418Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:40:52.203Z\",\n            \"updated\": \"2019-07-06T12:40:52.418Z\",\n            \"extra_data\": null,\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_24-unewstv-khara-sach.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 114,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:14.664Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:14.436Z\",\n            \"updated\": \"2019-07-06T12:41:14.664Z\",\n            \"extra_data\": null,\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_25-unewstv-kal-tak.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 115,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:37.620Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:37.215Z\",\n            \"updated\": \"2019-07-06T12:41:37.620Z\",\n            \"extra_data\": null,\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_27-unewstv-to-the-point.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 116,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:41:59.436Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:41:59.298Z\",\n            \"updated\": \"2019-07-06T12:41:59.436Z\",\n            \"extra_data\": null,\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_28-unewstv-news-eye.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 117,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:42:21.431Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:42:21.311Z\",\n            \"updated\": \"2019-07-06T12:42:21.431Z\",\n            \"extra_data\": null,\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_29-unewstv-g-for-gharida.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 118,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:42:43.357Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:42:43.248Z\",\n            \"updated\": \"2019-07-06T12:42:43.357Z\",\n            \"extra_data\": null,\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 119,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:05.913Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:05.648Z\",\n            \"updated\": \"2019-07-06T12:43:05.913Z\",\n            \"extra_data\": null,\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_31-unewstv-breaking-point-with-malick.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 120,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:28.007Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:27.856Z\",\n            \"updated\": \"2019-07-06T12:43:28.007Z\",\n            \"extra_data\": null,\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_Kqawosa.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 121,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:43:50.760Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:43:50.339Z\",\n            \"updated\": \"2019-07-06T12:43:50.760Z\",\n            \"extra_data\": null,\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-kay-sath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 122,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:12.114Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:11.889Z\",\n            \"updated\": \"2019-07-06T12:44:12.114Z\",\n            \"extra_data\": null,\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_34-unewstv-news-beat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 123,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:34.164Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:33.724Z\",\n            \"updated\": \"2019-07-06T12:44:34.164Z\",\n            \"extra_data\": null,\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 124,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:44:56.463Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:44:56.209Z\",\n            \"updated\": \"2019-07-06T12:44:56.463Z\",\n            \"extra_data\": null,\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-kay-saath.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 125,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:45:19.560Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:45:19.453Z\",\n            \"updated\": \"2019-07-06T12:45:19.560Z\",\n            \"extra_data\": null,\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 126,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:45:40.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:45:40.817Z\",\n            \"updated\": \"2019-07-06T12:45:40.944Z\",\n            \"extra_data\": null,\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 127,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:02.571Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:02.320Z\",\n            \"updated\": \"2019-07-06T12:46:02.571Z\",\n            \"extra_data\": null,\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_39-unewstv-on-the-front.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 128,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:24.981Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:24.720Z\",\n            \"updated\": \"2019-07-06T12:46:24.981Z\",\n            \"extra_data\": null,\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 129,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-06T12:46:47.584Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:46:47.354Z\",\n            \"updated\": \"2019-07-06T12:46:47.584Z\",\n            \"extra_data\": null,\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_41-unewstv-seedhi-baat.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 130,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:18:05.691Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:47:09.285Z\",\n            \"updated\": \"2019-07-07T06:18:05.691Z\",\n            \"extra_data\": null,\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-test-upload-unewstv-sawal-yeh-hai.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 131,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T05:36:38.300Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-06T12:47:21.773Z\",\n            \"updated\": \"2019-07-07T05:36:38.300Z\",\n            \"extra_data\": {\n                \"D\": 0,\n                \"F\": 0,\n                \"S\": 32,\n                \"td\": \"4068.48\",\n                \"te\": \"2019-07-06T05:47:32.781174\",\n                \"ts\": \"2019-07-06T05:47:28.712694\"\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-2019-07-06-1-admin-feed_id_44-dol-subah_l0OcfcZ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": \"\"\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 132,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:55.287Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:00.381Z\",\n            \"updated\": \"2019-07-07T06:39:55.287Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2435.302\",\n                \"time_end\": \"2019-07-06T23:39:55.287530\",\n                \"time_start\": \"2019-07-06T23:39:52.852228\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 3,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_3-unewstv-zara-hat-kay_M3l7t89.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 133,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:58.698Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:23.099Z\",\n            \"updated\": \"2019-07-07T06:39:58.698Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3388.574\",\n                \"time_end\": \"2019-07-06T23:39:58.698288\",\n                \"time_start\": \"2019-07-06T23:39:55.309714\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 5,\n            \"latest_feed_date\": \"2019-06-30\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_5-unewstv-meray-mutabiq-with-ha_of678YI.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 134,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:01.493Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:21:45.829Z\",\n            \"updated\": \"2019-07-07T06:40:01.493Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2691.391\",\n                \"time_end\": \"2019-07-06T23:40:01.493197\",\n                \"time_start\": \"2019-07-06T23:39:58.801806\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 6,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_6-unewstv-live-with-dr-shahid-m_yMnioON.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 135,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:07.171Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:07.953Z\",\n            \"updated\": \"2019-07-07T06:40:07.171Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"5659.352\",\n                \"time_end\": \"2019-07-06T23:40:07.170980\",\n                \"time_start\": \"2019-07-06T23:40:01.511628\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 47,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_47-unewstv-aapas-ki-baat.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 136,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:25.454Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:31.066Z\",\n            \"updated\": \"2019-07-07T06:38:25.454Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3271.884\",\n                \"time_end\": \"2019-07-06T23:38:25.454162\",\n                \"time_start\": \"2019-07-06T23:38:22.182278\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 26,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_26-unewstv-faisla-aap-ka_nw78EXa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 137,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:35.884Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:22:51.740Z\",\n            \"updated\": \"2019-07-07T06:38:35.884Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 36,\n                \"duration\": \"2258.127\",\n                \"time_end\": \"2019-07-06T23:38:35.884738\",\n                \"time_start\": \"2019-07-06T23:38:33.626611\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 9,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_9-unewstv-muqabil_geOGBKn.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 138,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:47.944Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:15.306Z\",\n            \"updated\": \"2019-07-07T06:38:47.944Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3394.361\",\n                \"time_end\": \"2019-07-06T23:38:47.943813\",\n                \"time_start\": \"2019-07-06T23:38:44.549452\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 10,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_10-unewstv-off-the-record_qDNjkCa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 139,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:57.937Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:37.648Z\",\n            \"updated\": \"2019-07-07T06:38:57.937Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4184.174\",\n                \"time_end\": \"2019-07-06T23:38:57.937239\",\n                \"time_start\": \"2019-07-06T23:38:53.753065\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 11,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_11-unewstv-dunya-kamran-khan-ka_tpnA6Ue.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 140,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:05.542Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:23:46.671Z\",\n            \"updated\": \"2019-07-07T06:39:05.542Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 16,\n                \"duration\": \"1387.1\",\n                \"time_end\": \"2019-07-06T23:39:05.542333\",\n                \"time_start\": \"2019-07-06T23:39:04.155233\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 12,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_12-unewstv-aap-kay-muqabil_pLeTRse.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 141,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:10.425Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:09.427Z\",\n            \"updated\": \"2019-07-07T06:39:10.426Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2241.201\",\n                \"time_end\": \"2019-07-06T23:39:10.425809\",\n                \"time_start\": \"2019-07-06T23:39:08.184608\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 13,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_13-unewstv-the-reporters_O3ZoDvy.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 142,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:12.901Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:31.955Z\",\n            \"updated\": \"2019-07-07T06:39:12.901Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2444.441\",\n                \"time_end\": \"2019-07-06T23:39:12.901199\",\n                \"time_start\": \"2019-07-06T23:39:10.456758\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 14,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_14-unewstv-aaj-shahzaib-khanzad_WOiAuU5.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 143,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:24.865Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:24:54.203Z\",\n            \"updated\": \"2019-07-07T06:39:24.865Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3457.403\",\n                \"time_end\": \"2019-07-06T23:39:24.865071\",\n                \"time_start\": \"2019-07-06T23:39:21.407668\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 15,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_15-unewstv-night-edition_dGcf9mH.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 144,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:33.841Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:25:19.834Z\",\n            \"updated\": \"2019-07-07T06:39:33.841Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3415.365\",\n                \"time_end\": \"2019-07-06T23:39:33.840950\",\n                \"time_start\": \"2019-07-06T23:39:30.425585\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 16,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_16-unewstv-jirga_bUHa5Ig.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 145,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:41.629Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:25:45.891Z\",\n            \"updated\": \"2019-07-07T06:39:41.629Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2345.836\",\n                \"time_end\": \"2019-07-06T23:39:41.629734\",\n                \"time_start\": \"2019-07-06T23:39:39.283898\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 17,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_17-unewstv-bebaak_OLJUoWq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 146,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:47.986Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:11.461Z\",\n            \"updated\": \"2019-07-07T06:39:47.986Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2964.283\",\n                \"time_end\": \"2019-07-06T23:39:47.986491\",\n                \"time_start\": \"2019-07-06T23:39:45.022208\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 18,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_18-unewstv-capital-talk_YzRFWuQ.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 147,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:49.987Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:32.738Z\",\n            \"updated\": \"2019-07-07T06:39:49.987Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"1964.7259999999999\",\n                \"time_end\": \"2019-07-06T23:39:49.986797\",\n                \"time_start\": \"2019-07-06T23:39:48.022071\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 19,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_19-unewstv-hard-talk-pakistan_yf4YYqx.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 148,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:52.830Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:26:56.483Z\",\n            \"updated\": \"2019-07-07T06:39:52.830Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2758.5510000000004\",\n                \"time_end\": \"2019-07-06T23:39:52.830106\",\n                \"time_start\": \"2019-07-06T23:39:50.071555\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 20,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_20-unewstv-power-play_2P0l69M.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 149,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:22.058Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:27:25.822Z\",\n            \"updated\": \"2019-07-07T06:38:22.058Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2554.115\",\n                \"time_end\": \"2019-07-06T23:38:22.056485\",\n                \"time_start\": \"2019-07-06T23:38:19.502370\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 21,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_21-unewstv-najam-sethi-show_conpb7n.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 150,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:30.076Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:27:59.214Z\",\n            \"updated\": \"2019-07-07T06:38:30.076Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"4535.584\",\n                \"time_end\": \"2019-07-06T23:38:30.076427\",\n                \"time_start\": \"2019-07-06T23:38:25.540843\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 22,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_22-unewstv-think-tank_JgKYIVq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 151,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:33.557Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:28:25.697Z\",\n            \"updated\": \"2019-07-07T06:38:33.557Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3450.127\",\n                \"time_end\": \"2019-07-06T23:38:33.557529\",\n                \"time_start\": \"2019-07-06T23:38:30.107402\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 23,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_23-unewstv-harf-e-raaz_afJoHm0.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 152,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:41.378Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:28:53.298Z\",\n            \"updated\": \"2019-07-07T06:38:41.378Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2341.404\",\n                \"time_end\": \"2019-07-06T23:38:41.378177\",\n                \"time_start\": \"2019-07-06T23:38:39.036773\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 24,\n            \"latest_feed_date\": \"2019-07-03\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_24-unewstv-khara-sach_Z0heWRE.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 153,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:50.608Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:29:15.939Z\",\n            \"updated\": \"2019-07-07T06:38:50.608Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2632.447\",\n                \"time_end\": \"2019-07-06T23:38:50.608138\",\n                \"time_start\": \"2019-07-06T23:38:47.975691\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 25,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_25-unewstv-kal-tak_21Tx3En.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 154,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:53.667Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:29:40.159Z\",\n            \"updated\": \"2019-07-07T06:38:53.667Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3011.897\",\n                \"time_end\": \"2019-07-06T23:38:53.667483\",\n                \"time_start\": \"2019-07-06T23:38:50.655586\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 27,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_27-unewstv-to-the-point_vrVcv20.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 155,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:04.111Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:03.600Z\",\n            \"updated\": \"2019-07-07T06:39:04.111Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3032.241\",\n                \"time_end\": \"2019-07-06T23:39:04.111742\",\n                \"time_start\": \"2019-07-06T23:39:01.079501\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 28,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_28-unewstv-news-eye_d2BOKfa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 156,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:52.410Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:27.835Z\",\n            \"updated\": \"2019-07-07T06:47:52.410Z\",\n            \"extra_data\": {\n                \"error\": \"Warning: Unknown show: G for Gharida, job:156\",\n                \"job_id\": 156,\n                \"feed_id\": 29,\n                \"previous_extra_data\": {\n                    \"error\": \"Warning: Unknown show: G for Gharida, job:156\",\n                    \"job_id\": 156,\n                    \"feed_id\": 29,\n                    \"previous_extra_data\": null\n                }\n            },\n            \"show_feed\": 29,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_29-unewstv-g-for-gharida_Eq0lnqK.json\",\n            \"job_status\": \"NOT STARTED\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 157,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:19.473Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:30:51.559Z\",\n            \"updated\": \"2019-07-07T06:38:19.473Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 39,\n                \"duration\": \"4214.553000000001\",\n                \"time_end\": \"2019-07-06T23:38:19.473417\",\n                \"time_start\": \"2019-07-06T23:38:15.258864\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 30,\n            \"latest_feed_date\": \"2019-07-05\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_30-unewstv-nasim-zehra-800_J3Pgz42.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 158,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:44.479Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:31:15.684Z\",\n            \"updated\": \"2019-07-07T06:38:44.479Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3077.57\",\n                \"time_end\": \"2019-07-06T23:38:44.479389\",\n                \"time_start\": \"2019-07-06T23:38:41.401819\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 31,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_31-unewstv-breaking-point-with-_AZslh43.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 159,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:08.130Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:31:39.542Z\",\n            \"updated\": \"2019-07-07T06:39:08.130Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2528.4680000000003\",\n                \"time_end\": \"2019-07-06T23:39:08.130081\",\n                \"time_start\": \"2019-07-06T23:39:05.601613\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 32,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_32-unewstv-face-to-face-with-ay_rIakHcd.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 160,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:16.056Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:02.185Z\",\n            \"updated\": \"2019-07-07T06:39:16.056Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3068.722\",\n                \"time_end\": \"2019-07-06T23:39:16.056694\",\n                \"time_start\": \"2019-07-06T23:39:12.987972\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 33,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_33-unewstv-tajzia-sami-ibrahim-_YHVO4LP.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 161,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:21.376Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:25.655Z\",\n            \"updated\": \"2019-07-07T06:39:21.376Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2345.785\",\n                \"time_end\": \"2019-07-06T23:39:21.376665\",\n                \"time_start\": \"2019-07-06T23:39:19.030880\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 34,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_34-unewstv-news-beat_G2igquq.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 162,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:01.049Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:32:47.854Z\",\n            \"updated\": \"2019-07-07T06:39:01.049Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3042.503\",\n                \"time_end\": \"2019-07-06T23:39:01.048969\",\n                \"time_start\": \"2019-07-06T23:38:58.006466\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 35,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_35-unewstv-nadeem-malik-live_gqWsvTY.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 163,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:18.921Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:10.517Z\",\n            \"updated\": \"2019-07-07T06:39:18.921Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2836.388\",\n                \"time_end\": \"2019-07-06T23:39:18.921702\",\n                \"time_start\": \"2019-07-06T23:39:16.085314\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 36,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_36-unewstv-aaj-rana-mubashir-ka_tMM3IXM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 164,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:38:39.004Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:33.536Z\",\n            \"updated\": \"2019-07-07T06:38:39.004Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3043.466\",\n                \"time_end\": \"2019-07-06T23:38:39.004668\",\n                \"time_start\": \"2019-07-06T23:38:35.961202\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 37,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_37-unewstv-ho-kya-raha-hai_h6aqg4L.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 165,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:30.399Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:33:55.789Z\",\n            \"updated\": \"2019-07-07T06:39:30.399Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2487.2980000000002\",\n                \"time_end\": \"2019-07-06T23:39:30.399183\",\n                \"time_start\": \"2019-07-06T23:39:27.911885\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 38,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_38-unewstv-nuqta-e-nazar_PfJdSSz.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 166,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:27.882Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:34:17.927Z\",\n            \"updated\": \"2019-07-07T06:39:27.882Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2957.381\",\n                \"time_end\": \"2019-07-06T23:39:27.882396\",\n                \"time_start\": \"2019-07-06T23:39:24.925015\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 39,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_39-unewstv-on-the-front_pP6CeQA.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 167,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:36.420Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:34:40.180Z\",\n            \"updated\": \"2019-07-07T06:39:36.420Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2460.726\",\n                \"time_end\": \"2019-07-06T23:39:36.420289\",\n                \"time_start\": \"2019-07-06T23:39:33.959563\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 40,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_40-unewstv-ikhtilafi-note_xHWFSPC.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 168,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:39.227Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:35:03.563Z\",\n            \"updated\": \"2019-07-07T06:39:39.227Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"2767.868\",\n                \"time_end\": \"2019-07-06T23:39:39.227676\",\n                \"time_start\": \"2019-07-06T23:39:36.459808\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 41,\n            \"latest_feed_date\": \"2019-07-04\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_41-unewstv-seedhi-baat_J0uvlWa.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 169,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:39:44.942Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:35:25.890Z\",\n            \"updated\": \"2019-07-07T06:39:44.942Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 40,\n                \"duration\": \"3263.103\",\n                \"time_end\": \"2019-07-06T23:39:44.941964\",\n                \"time_start\": \"2019-07-06T23:39:41.678861\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 42,\n            \"latest_feed_date\": \"2019-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_42-unewstv-sawal-yeh-hai_tc2rDod.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 170,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:40:10.050Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:36:20.062Z\",\n            \"updated\": \"2019-07-07T06:40:10.050Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 32,\n                \"duration\": \"2100.797\",\n                \"time_end\": \"2019-07-06T23:40:10.032733\",\n                \"time_start\": \"2019-07-06T23:40:07.931936\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 44,\n            \"latest_feed_date\": \"2018-05-08\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_44-dol-subah-pakistan-with-shah_geQqRzM.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 171,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:11.392Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:37:23.206Z\",\n            \"updated\": \"2019-07-07T06:40:11.392Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1167.9679999999998\",\n                \"time_end\": \"2019-07-06T23:40:11.392741\",\n                \"time_start\": \"2019-07-06T23:40:10.224773\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-06\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_51-vpk-sawera.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 172,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": false,\n            \"effective_date\": \"2019-07-07T06:40:13.575Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:38:07.786Z\",\n            \"updated\": \"2019-07-07T06:40:13.575Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 25,\n                \"duration\": \"2161.508\",\n                \"time_end\": \"2019-07-06T23:40:13.575786\",\n                \"time_start\": \"2019-07-06T23:40:11.414278\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": false,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 173,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.439Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:44:58.557Z\",\n            \"updated\": \"2019-07-07T06:47:55.439Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 10,\n                \"duration\": \"1434.745\",\n                \"time_end\": \"2019-07-06T23:47:55.439763\",\n                \"time_start\": \"2019-07-06T23:47:54.005018\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 54,\n            \"latest_feed_date\": \"2019-07-31\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_54-vpk-dil-e-majboor.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 174,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:55.850Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:45:53.849Z\",\n            \"updated\": \"2019-07-07T06:47:55.850Z\",\n            \"extra_data\": {\n                \"dupes\": 30,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"383.111\",\n                \"time_end\": \"2019-07-06T23:47:55.850836\",\n                \"time_start\": \"2019-07-06T23:47:55.467725\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 51,\n            \"latest_feed_date\": \"1975-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_51-vpk-sawera_zxcbRMc.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 175,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:56.313Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:46:37.199Z\",\n            \"updated\": \"2019-07-07T06:47:56.313Z\",\n            \"extra_data\": {\n                \"dupes\": 25,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 0,\n                \"duration\": \"426.693\",\n                \"time_end\": \"2019-07-06T23:47:56.313038\",\n                \"time_start\": \"2019-07-06T23:47:55.886345\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 52,\n            \"latest_feed_date\": \"2019-07-25\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_52-vpk-alif-allah-aur-insaan_ZeYpvZR.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    },\n    {\n        \"model\": \"pakguru_app.showfeed_harvestjoblog\",\n        \"pk\": 176,\n        \"fields\": {\n            \"name\": null,\n            \"description\": null,\n            \"is_active\": true,\n            \"effective_date\": \"2019-07-07T06:47:58.178Z\",\n            \"expiration_date\": null,\n            \"added_by\": [\n                \"bilgrami\"\n            ],\n            \"created\": \"2019-07-07T06:47:28.411Z\",\n            \"updated\": \"2019-07-07T06:47:58.178Z\",\n            \"extra_data\": {\n                \"dupes\": 0,\n                \"error\": \"\",\n                \"failed\": 0,\n                \"success\": 30,\n                \"duration\": \"1792.59\",\n                \"time_end\": \"2019-07-06T23:47:58.178455\",\n                \"time_start\": \"2019-07-06T23:47:56.385865\",\n                \"previous_extra_data\": null\n            },\n            \"show_feed\": 53,\n            \"latest_feed_date\": \"0139-07-06\",\n            \"is_latest\": true,\n            \"feed_data\": \"datafiles/2019/2019-07-06/2019-07-06-1-bilgrami-feed_id_53-vpk-bulbulay.json\",\n            \"job_status\": \"SUCCESS\",\n            \"notes\": null\n        }\n    }\n]\n":1hkIZi:FSeYet8fVsFgV9YYfh0UFLdnHDY